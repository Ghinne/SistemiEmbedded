
TESTANALOGICO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007edc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800806c  0800806c  0001806c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008134  08008134  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008134  08008134  00018134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800813c  0800813c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000168c  20000074  080081b8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001700  080081b8  00021700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026207  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004442  00000000  00000000  000462ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022e8  00000000  00000000  0004a6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020e0  00000000  00000000  0004c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cf93  00000000  00000000  0004eab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a32d  00000000  00000000  0007ba4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001176e0  00000000  00000000  00095d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ad458  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a08  00000000  00000000  001ad4d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008054 	.word	0x08008054

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008054 	.word	0x08008054

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 f84a 	bl	8001652 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f82b 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 faaf 	bl	8000b24 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005c6:	f000 f943 	bl	8000850 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005ca:	f000 f979 	bl	80008c0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005ce:	f000 f9b7 	bl	8000940 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005d2:	f000 f9db 	bl	800098c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 fa17 	bl	8000a08 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005da:	f000 fa45 	bl	8000a68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005de:	f000 fa73 	bl	8000ac8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005e2:	f000 f8bf 	bl	8000764 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SerialAnalog */
  osThreadDef(SerialAnalog, StartSerialAnalog, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <main+0x5c>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialAnalogHandle = osThreadCreate(osThread(SerialAnalog), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f005 feee 	bl	80063de <osThreadCreate>
 8000602:	4602      	mov	r2, r0
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <main+0x60>)
 8000606:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000608:	f005 fee2 	bl	80063d0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060c:	e7fe      	b.n	800060c <main+0x58>
 800060e:	bf00      	nop
 8000610:	0800807c 	.word	0x0800807c
 8000614:	20001670 	.word	0x20001670

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b8      	sub	sp, #224	; 0xe0
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 f90f 	bl	800784a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063c:	463b      	mov	r3, r7
 800063e:	2288      	movs	r2, #136	; 0x88
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f007 f901 	bl	800784a <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f002 fff8 	bl	800363c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800064c:	4b43      	ldr	r3, [pc, #268]	; (800075c <SystemClock_Config+0x144>)
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	4a42      	ldr	r2, [pc, #264]	; (800075c <SystemClock_Config+0x144>)
 8000654:	f023 0318 	bic.w	r3, r3, #24
 8000658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800065c:	2314      	movs	r3, #20
 800065e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000680:	2301      	movs	r3, #1
 8000682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800068c:	2328      	movs	r3, #40	; 0x28
 800068e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 f913 	bl	80038d4 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006b4:	f000 fc0a 	bl	8000ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006da:	2104      	movs	r1, #4
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 fca9 	bl	8004034 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006e8:	f000 fbf0 	bl	8000ecc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <SystemClock_Config+0x148>)
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000708:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800070c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000716:	2318      	movs	r3, #24
 8000718:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800071a:	2307      	movs	r3, #7
 800071c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000726:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800072a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4618      	mov	r0, r3
 8000730:	f003 feb6 	bl	80044a0 <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x126>
  {
    Error_Handler();
 800073a:	f000 fbc7 	bl	8000ecc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000742:	f002 ff99 	bl	8003678 <HAL_PWREx_ControlVoltageScaling>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800074c:	f000 fbbe 	bl	8000ecc <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000750:	f004 f98c 	bl	8004a6c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000754:	bf00      	nop
 8000756:	37e0      	adds	r7, #224	; 0xe0
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000
 8000760:	00016085 	.word	0x00016085

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000786:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <MX_ADC1_Init+0xe0>)
 8000788:	4a2f      	ldr	r2, [pc, #188]	; (8000848 <MX_ADC1_Init+0xe4>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800078c:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_ADC1_Init+0xe0>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_ADC1_Init+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000798:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_ADC1_Init+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e6:	4817      	ldr	r0, [pc, #92]	; (8000844 <MX_ADC1_Init+0xe0>)
 80007e8:	f001 f962 	bl	8001ab0 <HAL_ADC_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007f2:	f000 fb6b 	bl	8000ecc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <MX_ADC1_Init+0xe0>)
 8000802:	f002 f825 	bl	8002850 <HAL_ADCEx_MultiModeConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800080c:	f000 fb5e 	bl	8000ecc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_ADC1_Init+0xe8>)
 8000812:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000814:	2306      	movs	r3, #6
 8000816:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800081c:	237f      	movs	r3, #127	; 0x7f
 800081e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000820:	2304      	movs	r3, #4
 8000822:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_ADC1_Init+0xe0>)
 800082e:	f001 fc2b 	bl	8002088 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000838:	f000 fb48 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000158c 	.word	0x2000158c
 8000848:	50040000 	.word	0x50040000
 800084c:	04300002 	.word	0x04300002

08000850 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 8000856:	4a19      	ldr	r2, [pc, #100]	; (80008bc <MX_DFSDM1_Init+0x6c>)
 8000858:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 800085c:	2201      	movs	r2, #1
 800085e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 8000868:	2202      	movs	r2, #2
 800086a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 800087a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 8000888:	2204      	movs	r2, #4
 800088a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 8000894:	2201      	movs	r2, #1
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_DFSDM1_Init+0x68>)
 80008a6:	f002 f961 	bl	8002b6c <HAL_DFSDM_ChannelInit>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80008b0:	f000 fb0c 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000101c 	.word	0x2000101c
 80008bc:	40016020 	.word	0x40016020

080008c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_I2C2_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_I2C2_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_I2C2_Init+0x74>)
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <MX_I2C2_Init+0x7c>)
 80008ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_I2C2_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_I2C2_Init+0x74>)
 80008d8:	2201      	movs	r2, #1
 80008da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_I2C2_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_I2C2_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_I2C2_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_I2C2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_I2C2_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <MX_I2C2_Init+0x74>)
 80008fc:	f002 fc2f 	bl	800315e <HAL_I2C_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000906:	f000 fae1 	bl	8000ecc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <MX_I2C2_Init+0x74>)
 800090e:	f002 fcb5 	bl	800327c <HAL_I2CEx_ConfigAnalogFilter>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000918:	f000 fad8 	bl	8000ecc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_I2C2_Init+0x74>)
 8000920:	f002 fcf7 	bl	8003312 <HAL_I2CEx_ConfigDigitalFilter>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 facf 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200014dc 	.word	0x200014dc
 8000938:	40005800 	.word	0x40005800
 800093c:	10909cec 	.word	0x10909cec

08000940 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <MX_QUADSPI_Init+0x48>)
 8000948:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_QUADSPI_Init+0x44>)
 800094c:	22ff      	movs	r2, #255	; 0xff
 800094e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000952:	2201      	movs	r2, #1
 8000954:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_QUADSPI_Init+0x44>)
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_QUADSPI_Init+0x44>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_QUADSPI_Init+0x44>)
 8000970:	f002 fee8 	bl	8003744 <HAL_QSPI_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800097a:	f000 faa7 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20001674 	.word	0x20001674
 8000988:	a0001000 	.word	0xa0001000

0800098c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_SPI3_Init+0x74>)
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <MX_SPI3_Init+0x78>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_SPI3_Init+0x74>)
 8000998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800099c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009aa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009be:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009da:	2207      	movs	r2, #7
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009e6:	2208      	movs	r2, #8
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_SPI3_Init+0x74>)
 80009ec:	f004 fa18 	bl	8004e20 <HAL_SPI_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 fa69 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20001528 	.word	0x20001528
 8000a04:	40003c00 	.word	0x40003c00

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <MX_USART1_UART_Init+0x5c>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART1_UART_Init+0x58>)
 8000a4c:	f004 fcd2 	bl	80053f4 <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a56:	f000 fa39 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200015f0 	.word	0x200015f0
 8000a64:	40013800 	.word	0x40013800

08000a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a6e:	4a15      	ldr	r2, [pc, #84]	; (8000ac4 <MX_USART3_UART_Init+0x5c>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_USART3_UART_Init+0x58>)
 8000aac:	f004 fca2 	bl	80053f4 <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ab6:	f000 fa09 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20001054 	.word	0x20001054
 8000ac4:	40004800 	.word	0x40004800

08000ac8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2206      	movs	r2, #6
 8000ad8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0c:	f002 fc4d 	bl	80033aa <HAL_PCD_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b16:	f000 f9d9 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200010d4 	.word	0x200010d4

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	4bb7      	ldr	r3, [pc, #732]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	4ab6      	ldr	r2, [pc, #728]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b40:	f043 0310 	orr.w	r3, r3, #16
 8000b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b46:	4bb4      	ldr	r3, [pc, #720]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	f003 0310 	and.w	r3, r3, #16
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4bb1      	ldr	r3, [pc, #708]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	4ab0      	ldr	r2, [pc, #704]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5e:	4bae      	ldr	r3, [pc, #696]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4bab      	ldr	r3, [pc, #684]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4aaa      	ldr	r2, [pc, #680]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4ba8      	ldr	r3, [pc, #672]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4ba5      	ldr	r3, [pc, #660]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4aa4      	ldr	r2, [pc, #656]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4ba2      	ldr	r3, [pc, #648]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	4b9f      	ldr	r3, [pc, #636]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	4a9e      	ldr	r2, [pc, #632]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba6:	4b9c      	ldr	r3, [pc, #624]	; (8000e18 <MX_GPIO_Init+0x2f4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000bb8:	4898      	ldr	r0, [pc, #608]	; (8000e1c <MX_GPIO_Init+0x2f8>)
 8000bba:	f002 fa95 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f248 1104 	movw	r1, #33028	; 0x8104
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f002 fa8e 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000bd2:	4893      	ldr	r0, [pc, #588]	; (8000e20 <MX_GPIO_Init+0x2fc>)
 8000bd4:	f002 fa88 	bl	80030e8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f241 0181 	movw	r1, #4225	; 0x1081
 8000bde:	4891      	ldr	r0, [pc, #580]	; (8000e24 <MX_GPIO_Init+0x300>)
 8000be0:	f002 fa82 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	488e      	ldr	r0, [pc, #568]	; (8000e24 <MX_GPIO_Init+0x300>)
 8000bec:	f002 fa7c 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000bf6:	488c      	ldr	r0, [pc, #560]	; (8000e28 <MX_GPIO_Init+0x304>)
 8000bf8:	f002 fa76 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2120      	movs	r1, #32
 8000c00:	4887      	ldr	r0, [pc, #540]	; (8000e20 <MX_GPIO_Init+0x2fc>)
 8000c02:	f002 fa71 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4884      	ldr	r0, [pc, #528]	; (8000e1c <MX_GPIO_Init+0x2f8>)
 8000c0c:	f002 fa6c 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000c10:	f240 1315 	movw	r3, #277	; 0x115
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	487c      	ldr	r0, [pc, #496]	; (8000e1c <MX_GPIO_Init+0x2f8>)
 8000c2a:	f002 f8b5 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c2e:	236a      	movs	r3, #106	; 0x6a
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	4b7e      	ldr	r3, [pc, #504]	; (8000e2c <MX_GPIO_Init+0x308>)
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4876      	ldr	r0, [pc, #472]	; (8000e1c <MX_GPIO_Init+0x2f8>)
 8000c42:	f002 f8a9 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4c:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <MX_GPIO_Init+0x30c>)
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4873      	ldr	r0, [pc, #460]	; (8000e28 <MX_GPIO_Init+0x304>)
 8000c5c:	f002 f89c 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c60:	2303      	movs	r3, #3
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c70:	2308      	movs	r3, #8
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7e:	f002 f88b 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000c82:	f248 1304 	movw	r3, #33028	; 0x8104
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f002 f87b 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f002 f86a 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000cc4:	23e0      	movs	r3, #224	; 0xe0
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f002 f859 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	4b50      	ldr	r3, [pc, #320]	; (8000e2c <MX_GPIO_Init+0x308>)
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4849      	ldr	r0, [pc, #292]	; (8000e20 <MX_GPIO_Init+0x2fc>)
 8000cfa:	f002 f84d 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000cfe:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d02:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4842      	ldr	r0, [pc, #264]	; (8000e20 <MX_GPIO_Init+0x2fc>)
 8000d18:	f002 f83e 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8000d1c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000d20:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <MX_GPIO_Init+0x308>)
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	483c      	ldr	r0, [pc, #240]	; (8000e24 <MX_GPIO_Init+0x300>)
 8000d32:	f002 f831 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d36:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4835      	ldr	r0, [pc, #212]	; (8000e24 <MX_GPIO_Init+0x300>)
 8000d50:	f002 f822 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d54:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	482e      	ldr	r0, [pc, #184]	; (8000e28 <MX_GPIO_Init+0x304>)
 8000d6e:	f002 f813 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d78:	4b2c      	ldr	r3, [pc, #176]	; (8000e2c <MX_GPIO_Init+0x308>)
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4828      	ldr	r0, [pc, #160]	; (8000e28 <MX_GPIO_Init+0x304>)
 8000d88:	f002 f806 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	481f      	ldr	r0, [pc, #124]	; (8000e24 <MX_GPIO_Init+0x300>)
 8000da8:	f001 fff6 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dac:	2378      	movs	r3, #120	; 0x78
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4817      	ldr	r0, [pc, #92]	; (8000e24 <MX_GPIO_Init+0x300>)
 8000dc8:	f001 ffe6 	bl	8002d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000dcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd2:	2312      	movs	r3, #18
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dde:	2304      	movs	r3, #4
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_GPIO_Init+0x2fc>)
 8000dea:	f001 ffd5 	bl	8002d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2105      	movs	r1, #5
 8000df2:	2017      	movs	r0, #23
 8000df4:	f001 fe90 	bl	8002b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000df8:	2017      	movs	r0, #23
 8000dfa:	f001 fea9 	bl	8002b50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2105      	movs	r1, #5
 8000e02:	2028      	movs	r0, #40	; 0x28
 8000e04:	f001 fe88 	bl	8002b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e08:	2028      	movs	r0, #40	; 0x28
 8000e0a:	f001 fea1 	bl	8002b50 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48001000 	.word	0x48001000
 8000e20:	48000400 	.word	0x48000400
 8000e24:	48000c00 	.word	0x48000c00
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	10110000 	.word	0x10110000
 8000e30:	10210000 	.word	0x10210000

08000e34 <StartSerialAnalog>:
#define DEC_COUNT 2
#define INT_COUNT 1

/* USER CODE END Header_StartSerialAnalog */
void StartSerialAnalog(void const * argument)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialAnalog */
  /* Infinite loop */
	for(;;)
	{
		HAL_ADC_Start(&hadc1);
 8000e3c:	4816      	ldr	r0, [pc, #88]	; (8000e98 <StartSerialAnalog+0x64>)
 8000e3e:	f000 ff8b 	bl	8001d58 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e42:	f04f 31ff 	mov.w	r1, #4294967295
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <StartSerialAnalog+0x64>)
 8000e48:	f001 f840 	bl	8001ecc <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&hadc1)*100/2400;
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <StartSerialAnalog+0x64>)
 8000e4e:	f001 f90d 	bl	800206c <HAL_ADC_GetValue>
 8000e52:	4602      	mov	r2, r0
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	fb03 f302 	mul.w	r3, r3, r2
 8000e5a:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <StartSerialAnalog+0x68>)
 8000e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	82fb      	strh	r3, [r7, #22]
		char msg[10];
		sprintf(msg, "Light Panel 1 = %hu\r\n", raw);
 8000e64:	8afa      	ldrh	r2, [r7, #22]
 8000e66:	f107 030c 	add.w	r3, r7, #12
 8000e6a:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <StartSerialAnalog+0x6c>)
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f006 fcf5 	bl	800785c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff f9aa 	bl	80001d0 <strlen>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f107 010c 	add.w	r1, r7, #12
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <StartSerialAnalog+0x70>)
 8000e8a:	f004 fb01 	bl	8005490 <HAL_UART_Transmit>
		osDelay(2000);
 8000e8e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e92:	f005 faf0 	bl	8006476 <osDelay>
	{
 8000e96:	e7d1      	b.n	8000e3c <StartSerialAnalog+0x8>
 8000e98:	2000158c 	.word	0x2000158c
 8000e9c:	1b4e81b5 	.word	0x1b4e81b5
 8000ea0:	08008098 	.word	0x08008098
 8000ea4:	200015f0 	.word	0x200015f0

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eba:	f000 fbe3 	bl	8001684 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012c00 	.word	0x40012c00

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6613      	str	r3, [r2, #96]	; 0x60
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_MspInit+0x4c>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6593      	str	r3, [r2, #88]	; 0x58
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	210f      	movs	r1, #15
 8000f16:	f06f 0001 	mvn.w	r0, #1
 8000f1a:	f001 fdfd 	bl	8002b18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a2d      	ldr	r2, [pc, #180]	; (8001000 <HAL_ADC_MspInit+0xd4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d154      	bne.n	8000ff8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a2c      	ldr	r2, [pc, #176]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a20      	ldr	r2, [pc, #128]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_ADC_MspInit+0xd8>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000fae:	233f      	movs	r3, #63	; 0x3f
 8000fb0:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <HAL_ADC_MspInit+0xdc>)
 8000fc2:	f001 fee9 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fca:	230b      	movs	r3, #11
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f001 fedc 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <HAL_ADC_MspInit+0xe0>)
 8000ff4:	f001 fed0 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ff8:	bf00      	nop
 8000ffa:	3730      	adds	r7, #48	; 0x30
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	50040000 	.word	0x50040000
 8001004:	40021000 	.word	0x40021000
 8001008:	48000800 	.word	0x48000800
 800100c:	48000400 	.word	0x48000400

08001010 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_DFSDM_ChannelMspInit+0x7c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d128      	bne.n	8001082 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001034:	4a16      	ldr	r2, [pc, #88]	; (8001090 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800103a:	6613      	str	r3, [r2, #96]	; 0x60
 800103c:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_DFSDM_ChannelMspInit+0x80>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_DFSDM_ChannelMspInit+0x80>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_DFSDM_ChannelMspInit+0x80>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001060:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001072:	2306      	movs	r3, #6
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_DFSDM_ChannelMspInit+0x84>)
 800107e:	f001 fe8b 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002e4 	.word	0x200002e4
 8001090:	40021000 	.word	0x40021000
 8001094:	48001000 	.word	0x48001000

08001098 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_I2C_MspInit+0x7c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d128      	bne.n	800110c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_I2C_MspInit+0x80>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <HAL_I2C_MspInit+0x80>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_I2C_MspInit+0x80>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010e4:	2304      	movs	r3, #4
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <HAL_I2C_MspInit+0x84>)
 80010f0:	f001 fe52 	bl	8002d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_I2C_MspInit+0x80>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_I2C_MspInit+0x80>)
 80010fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_I2C_MspInit+0x80>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40005800 	.word	0x40005800
 8001118:	40021000 	.word	0x40021000
 800111c:	48000400 	.word	0x48000400

08001120 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_QSPI_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d128      	bne.n	8001194 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6513      	str	r3, [r2, #80]	; 0x50
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001172:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001176:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001184:	230a      	movs	r3, #10
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_QSPI_MspInit+0x84>)
 8001190:	f001 fe02 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	a0001000 	.word	0xa0001000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48001000 	.word	0x48001000

080011a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_SPI_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d128      	bne.n	800121c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800120c:	2306      	movs	r3, #6
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_SPI_MspInit+0x84>)
 8001218:	f001 fdbe 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40003c00 	.word	0x40003c00
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a2e      	ldr	r2, [pc, #184]	; (8001308 <HAL_UART_MspInit+0xd8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d128      	bne.n	80012a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6613      	str	r3, [r2, #96]	; 0x60
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_UART_MspInit+0xdc>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a27      	ldr	r2, [pc, #156]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_UART_MspInit+0xdc>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001282:	23c0      	movs	r3, #192	; 0xc0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001292:	2307      	movs	r3, #7
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	481c      	ldr	r0, [pc, #112]	; (8001310 <HAL_UART_MspInit+0xe0>)
 800129e:	f001 fd7b 	bl	8002d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a2:	e02d      	b.n	8001300 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <HAL_UART_MspInit+0xe4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d128      	bne.n	8001300 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_UART_MspInit+0xdc>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f0:	2307      	movs	r3, #7
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <HAL_UART_MspInit+0xe8>)
 80012fc:	f001 fd4c 	bl	8002d98 <HAL_GPIO_Init>
}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40013800 	.word	0x40013800
 800130c:	40021000 	.word	0x40021000
 8001310:	48000400 	.word	0x48000400
 8001314:	40004800 	.word	0x40004800
 8001318:	48000c00 	.word	0x48000c00

0800131c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133c:	d154      	bne.n	80013e8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f001 fd13 	bl	8002d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001372:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001384:	230a      	movs	r3, #10
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f001 fd01 	bl	8002d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 800139c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d114      	bne.n	80013e4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6593      	str	r3, [r2, #88]	; 0x58
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80013d2:	f002 f9a7 	bl	8003724 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_PCD_MspInit+0xd4>)
 80013dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013e2:	e001      	b.n	80013e8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80013e4:	f002 f99e 	bl	8003724 <HAL_PWREx_EnableVddUSB>
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021000 	.word	0x40021000

080013f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	2019      	movs	r0, #25
 800140a:	f001 fb85 	bl	8002b18 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800140e:	2019      	movs	r0, #25
 8001410:	f001 fb9e 	bl	8002b50 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_InitTick+0x9c>)
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_InitTick+0x9c>)
 800141a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141e:	6613      	str	r3, [r2, #96]	; 0x60
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_InitTick+0x9c>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800142c:	f107 0210 	add.w	r2, r7, #16
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f002 ffa0 	bl	800437c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800143c:	f002 ff88 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8001440:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <HAL_InitTick+0xa0>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	3b01      	subs	r3, #1
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_InitTick+0xa4>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <HAL_InitTick+0xa8>)
 8001454:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_InitTick+0xa4>)
 8001458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800145c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_InitTick+0xa4>)
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001462:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_InitTick+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_InitTick+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001470:	4809      	ldr	r0, [pc, #36]	; (8001498 <HAL_InitTick+0xa4>)
 8001472:	f003 fd5f 	bl	8004f34 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d104      	bne.n	8001486 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <HAL_InitTick+0xa4>)
 800147e:	f003 fd8f 	bl	8004fa0 <HAL_TIM_Base_Start_IT>
 8001482:	4603      	mov	r3, r0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	431bde83 	.word	0x431bde83
 8001498:	200016b8 	.word	0x200016b8
 800149c:	40012c00 	.word	0x40012c00

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80014d8:	2020      	movs	r0, #32
 80014da:	f001 fe1d 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80014de:	2040      	movs	r0, #64	; 0x40
 80014e0:	f001 fe1a 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	f001 fe17 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014ee:	f001 fe13 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014fe:	f003 fd79 	bl	8004ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200016b8 	.word	0x200016b8

0800150c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001510:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001514:	f001 fe00 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001518:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800151c:	f001 fdfc 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001520:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001524:	f001 fdf8 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001528:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800152c:	f001 fdf4 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001534:	f001 fdf0 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <_sbrk+0x50>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x16>
		heap_end = &end;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <_sbrk+0x50>)
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <_sbrk+0x54>)
 8001550:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <_sbrk+0x50>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <_sbrk+0x50>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4413      	add	r3, r2
 8001560:	466a      	mov	r2, sp
 8001562:	4293      	cmp	r3, r2
 8001564:	d907      	bls.n	8001576 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001566:	f006 f93b 	bl	80077e0 <__errno>
 800156a:	4602      	mov	r2, r0
 800156c:	230c      	movs	r3, #12
 800156e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	e006      	b.n	8001584 <_sbrk+0x48>
	}

	heap_end += incr;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <_sbrk+0x50>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a03      	ldr	r2, [pc, #12]	; (800158c <_sbrk+0x50>)
 8001580:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002e8 	.word	0x200002e8
 8001590:	20001700 	.word	0x20001700

08001594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <SystemInit+0x64>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <SystemInit+0x64>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <SystemInit+0x68>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <SystemInit+0x68>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <SystemInit+0x68>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <SystemInit+0x68>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <SystemInit+0x68>)
 80015c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <SystemInit+0x68>)
 80015cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <SystemInit+0x68>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <SystemInit+0x68>)
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <SystemInit+0x68>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <SystemInit+0x64>)
 80015e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ea:	609a      	str	r2, [r3, #8]
#endif
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	40021000 	.word	0x40021000

08001600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001604:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001606:	e003      	b.n	8001610 <LoopCopyDataInit>

08001608 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800160a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800160c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800160e:	3104      	adds	r1, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001610:	480b      	ldr	r0, [pc, #44]	; (8001640 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001614:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001616:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001618:	d3f6      	bcc.n	8001608 <CopyDataInit>
	ldr	r2, =_sbss
 800161a:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <LoopForever+0x12>)
	b	LoopFillZerobss
 800161c:	e002      	b.n	8001624 <LoopFillZerobss>

0800161e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800161e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001620:	f842 3b04 	str.w	r3, [r2], #4

08001624 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <LoopForever+0x16>)
	cmp	r2, r3
 8001626:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001628:	d3f9      	bcc.n	800161e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800162a:	f7ff ffb3 	bl	8001594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f006 f8dd 	bl	80077ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001632:	f7fe ffbf 	bl	80005b4 <main>

08001636 <LoopForever>:

LoopForever:
    b LoopForever
 8001636:	e7fe      	b.n	8001636 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001638:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800163c:	08008144 	.word	0x08008144
	ldr	r0, =_sdata
 8001640:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001644:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001648:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800164c:	20001700 	.word	0x20001700

08001650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_2_IRQHandler>

08001652 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f001 fa50 	bl	8002b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff fec6 	bl	80013f4 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	e001      	b.n	8001678 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001674:	f7ff fc32 	bl	8000edc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001678:	79fb      	ldrb	r3, [r7, #7]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4413      	add	r3, r2
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_IncTick+0x1c>)
 8001694:	6013      	str	r3, [r2, #0]
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	200016f8 	.word	0x200016f8
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_GetTick+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	200016f8 	.word	0x200016f8

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff ffee 	bl	80016a8 <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d004      	beq.n	80016e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_Delay+0x40>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e4:	bf00      	nop
 80016e6:	f7ff ffdf 	bl	80016a8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8f7      	bhi.n	80016e6 <HAL_Delay+0x26>
  {
  }
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008

08001704 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	609a      	str	r2, [r3, #8]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800176c:	b490      	push	{r4, r7}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3360      	adds	r3, #96	; 0x60
 800177e:	461a      	mov	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001788:	6822      	ldr	r2, [r4, #0]
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <LL_ADC_SetOffset+0x40>)
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	4313      	orrs	r3, r2
 800179a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800179e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc90      	pop	{r4, r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	03fff000 	.word	0x03fff000

080017b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017b0:	b490      	push	{r4, r7}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3360      	adds	r3, #96	; 0x60
 80017be:	461a      	mov	r2, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc90      	pop	{r4, r7}
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017d8:	b490      	push	{r4, r7}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3360      	adds	r3, #96	; 0x60
 80017e8:	461a      	mov	r2, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bc90      	pop	{r4, r7}
 8001806:	4770      	bx	lr

08001808 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800182e:	b490      	push	{r4, r7}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3330      	adds	r3, #48	; 0x30
 800183e:	461a      	mov	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	4413      	add	r3, r2
 800184c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	211f      	movs	r1, #31
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	0e9b      	lsrs	r3, r3, #26
 8001864:	f003 011f 	and.w	r1, r3, #31
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bc90      	pop	{r4, r7}
 800187e:	4770      	bx	lr

08001880 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001880:	b490      	push	{r4, r7}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3314      	adds	r3, #20
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	0e5b      	lsrs	r3, r3, #25
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80018a0:	6822      	ldr	r2, [r4, #0]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	0d1b      	lsrs	r3, r3, #20
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2107      	movs	r1, #7
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	0d1b      	lsrs	r3, r3, #20
 80018b8:	f003 031f 	and.w	r3, r3, #31
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc90      	pop	{r4, r7}
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0318 	and.w	r3, r3, #24
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018f4:	40d9      	lsrs	r1, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	400b      	ands	r3, r1
 80018fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	0007ffff 	.word	0x0007ffff

08001918 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 031f 	and.w	r3, r3, #31
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6093      	str	r3, [r2, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001988:	d101      	bne.n	800198e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019d8:	d101      	bne.n	80019de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <LL_ADC_IsEnabled+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_ADC_IsEnabled+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4e:	f043 0204 	orr.w	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d101      	bne.n	8001aa0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e134      	b.n	8001d34 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fa27 	bl	8000f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff3f 	bl	8001974 <LL_ADC_IsDeepPowerDownEnabled>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff25 	bl	8001950 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff5a 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d113      	bne.n	8001b3e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ff3e 	bl	800199c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b20:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_ADC_Init+0x28c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	4a86      	ldr	r2, [pc, #536]	; (8001d40 <HAL_ADC_Init+0x290>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	099b      	lsrs	r3, r3, #6
 8001b2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff3e 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10d      	bne.n	8001b6a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f043 0210 	orr.w	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff77 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001b74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f040 80cf 	bne.w	8001d22 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80cb 	bne.w	8001d22 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b90:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b94:	f043 0202 	orr.w	r2, r3, #2
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff37 	bl	8001a14 <LL_ADC_IsEnabled>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d115      	bne.n	8001bd8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bac:	4865      	ldr	r0, [pc, #404]	; (8001d44 <HAL_ADC_Init+0x294>)
 8001bae:	f7ff ff31 	bl	8001a14 <LL_ADC_IsEnabled>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4864      	ldr	r0, [pc, #400]	; (8001d48 <HAL_ADC_Init+0x298>)
 8001bb6:	f7ff ff2d 	bl	8001a14 <LL_ADC_IsEnabled>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	431c      	orrs	r4, r3
 8001bbe:	4863      	ldr	r0, [pc, #396]	; (8001d4c <HAL_ADC_Init+0x29c>)
 8001bc0:	f7ff ff28 	bl	8001a14 <LL_ADC_IsEnabled>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	485f      	ldr	r0, [pc, #380]	; (8001d50 <HAL_ADC_Init+0x2a0>)
 8001bd4:	f7ff fd96 	bl	8001704 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e5b      	ldrb	r3, [r3, #25]
 8001bdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001be8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d106      	bne.n	8001c14 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	045b      	lsls	r3, r3, #17
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_ADC_Init+0x2a4>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff0a 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001c4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff17 	bl	8001a88 <LL_ADC_INJ_IsConversionOngoing>
 8001c5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d13d      	bne.n	8001cde <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d13a      	bne.n	8001cde <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c6c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c84:	f023 0302 	bic.w	r3, r3, #2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d118      	bne.n	8001cce <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ca6:	f023 0304 	bic.w	r3, r3, #4
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cb2:	4311      	orrs	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	e007      	b.n	8001cde <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d10c      	bne.n	8001d00 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f023 010f 	bic.w	r1, r3, #15
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfe:	e007      	b.n	8001d10 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 020f 	bic.w	r2, r2, #15
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d14:	f023 0303 	bic.w	r3, r3, #3
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001d20:	e007      	b.n	8001d32 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	053e2d63 	.word	0x053e2d63
 8001d44:	50040000 	.word	0x50040000
 8001d48:	50040100 	.word	0x50040100
 8001d4c:	50040200 	.word	0x50040200
 8001d50:	50040300 	.word	0x50040300
 8001d54:	fff0c007 	.word	0xfff0c007

08001d58 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d60:	4857      	ldr	r0, [pc, #348]	; (8001ec0 <HAL_ADC_Start+0x168>)
 8001d62:	f7ff fdd9 	bl	8001918 <LL_ADC_GetMultimode>
 8001d66:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe78 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 809c 	bne.w	8001eb2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_Start+0x30>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e097      	b.n	8001eb8 <HAL_ADC_Start+0x160>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fcdd 	bl	8002750 <ADC_Enable>
 8001d96:	4603      	mov	r3, r0
 8001d98:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f040 8083 	bne.w	8001ea8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <HAL_ADC_Start+0x16c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d002      	beq.n	8001dc6 <HAL_ADC_Start+0x6e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_Start+0x70>
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_ADC_Start+0x170>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d002      	beq.n	8001dd6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	f023 0206 	bic.w	r2, r3, #6
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	221c      	movs	r2, #28
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_ADC_Start+0x16c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d002      	beq.n	8001e24 <HAL_ADC_Start+0xcc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e000      	b.n	8001e26 <HAL_ADC_Start+0xce>
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_ADC_Start+0x170>)
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d008      	beq.n	8001e40 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d114      	bne.n	8001e6a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fde9 	bl	8001a3a <LL_ADC_REG_StartConversion>
 8001e68:	e025      	b.n	8001eb6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_ADC_Start+0x16c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d002      	beq.n	8001e86 <HAL_ADC_Start+0x12e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_Start+0x130>
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_ADC_Start+0x170>)
 8001e88:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00f      	beq.n	8001eb6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ea6:	e006      	b.n	8001eb6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001eb0:	e001      	b.n	8001eb6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	50040300 	.word	0x50040300
 8001ec4:	50040100 	.word	0x50040100
 8001ec8:	50040000 	.word	0x50040000

08001ecc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed6:	4862      	ldr	r0, [pc, #392]	; (8002060 <HAL_ADC_PollForConversion+0x194>)
 8001ed8:	f7ff fd1e 	bl	8001918 <LL_ADC_GetMultimode>
 8001edc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d102      	bne.n	8001eec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ee6:	2308      	movs	r3, #8
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e02a      	b.n	8001f42 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d002      	beq.n	8001efe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b09      	cmp	r3, #9
 8001efc:	d111      	bne.n	8001f22 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e09d      	b.n	8002058 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f20:	e00f      	b.n	8001f42 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f22:	484f      	ldr	r0, [pc, #316]	; (8002060 <HAL_ADC_PollForConversion+0x194>)
 8001f24:	f7ff fd06 	bl	8001934 <LL_ADC_GetMultiDMATransfer>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f043 0220 	orr.w	r2, r3, #32
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e08c      	b.n	8002058 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f3e:	2304      	movs	r3, #4
 8001f40:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f42:	f7ff fbb1 	bl	80016a8 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f48:	e01a      	b.n	8001f80 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d016      	beq.n	8001f80 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f52:	f7ff fba9 	bl	80016a8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <HAL_ADC_PollForConversion+0x9c>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d10b      	bne.n	8001f80 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f043 0204 	orr.w	r2, r3, #4
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e06b      	b.n	8002058 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0dd      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fc32 	bl	8001808 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01c      	beq.n	8001fe4 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7e5b      	ldrb	r3, [r3, #25]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d111      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_ADC_PollForConversion+0x198>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d002      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x128>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e000      	b.n	8001ff6 <HAL_ADC_PollForConversion+0x12a>
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_ADC_PollForConversion+0x19c>)
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d008      	beq.n	8002010 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b05      	cmp	r3, #5
 8002008:	d002      	beq.n	8002010 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b09      	cmp	r3, #9
 800200e:	d104      	bne.n	800201a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	e00c      	b.n	8002034 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a11      	ldr	r2, [pc, #68]	; (8002064 <HAL_ADC_PollForConversion+0x198>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d002      	beq.n	800202a <HAL_ADC_PollForConversion+0x15e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	e000      	b.n	800202c <HAL_ADC_PollForConversion+0x160>
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_ADC_PollForConversion+0x19c>)
 800202c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b08      	cmp	r3, #8
 8002038:	d104      	bne.n	8002044 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2208      	movs	r2, #8
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e008      	b.n	8002056 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	50040300 	.word	0x50040300
 8002064:	50040100 	.word	0x50040100
 8002068:	50040000 	.word	0x50040000

0800206c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b0a6      	sub	sp, #152	; 0x98
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x22>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e348      	b.n	800273c <HAL_ADC_ConfigChannel+0x6b4>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fcd3 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 8329 	bne.w	8002716 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d824      	bhi.n	8002116 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	3b02      	subs	r3, #2
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d81b      	bhi.n	800210e <HAL_ADC_ConfigChannel+0x86>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_ADC_ConfigChannel+0x54>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f5 	.word	0x080020f5
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002105 	.word	0x08002105
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	220c      	movs	r2, #12
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	e011      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2212      	movs	r2, #18
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	e00d      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2218      	movs	r2, #24
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	e009      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	e004      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2206      	movs	r2, #6
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	e000      	b.n	8002118 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002116:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	f7ff fb82 	bl	800182e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fc97 	bl	8001a62 <LL_ADC_REG_IsConversionOngoing>
 8002134:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fca3 	bl	8001a88 <LL_ADC_INJ_IsConversionOngoing>
 8002142:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002146:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 8148 	bne.w	80023e0 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002154:	2b00      	cmp	r3, #0
 8002156:	f040 8143 	bne.w	80023e0 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6819      	ldr	r1, [r3, #0]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	461a      	mov	r2, r3
 8002168:	f7ff fb8a 	bl	8001880 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	08db      	lsrs	r3, r3, #3
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d00a      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800219e:	f7ff fae5 	bl	800176c <LL_ADC_SetOffset>
 80021a2:	e11d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fb00 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x148>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff faf5 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80021c6:	4603      	mov	r3, r0
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	f003 021f 	and.w	r2, r3, #31
 80021ce:	e012      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x16e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff faea 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_ConfigChannel+0x186>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	e00a      	b.n	8002224 <HAL_ADC_ConfigChannel+0x19c>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800221c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fad1 	bl	80017d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fab7 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x1da>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff faac 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	0e9b      	lsrs	r3, r3, #26
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	e010      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1fc>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff faa1 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 800226e:	4603      	mov	r3, r0
 8002270:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_ConfigChannel+0x214>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	e00a      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x22a>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d106      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2101      	movs	r1, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fa8a 	bl	80017d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2102      	movs	r1, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fa70 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80022d0:	4603      	mov	r3, r0
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x268>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fa65 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 021f 	and.w	r2, r3, #31
 80022ee:	e010      	b.n	8002312 <HAL_ADC_ConfigChannel+0x28a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2102      	movs	r1, #2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa5a 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_ADC_ConfigChannel+0x2a2>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	e00a      	b.n	8002340 <HAL_ADC_ConfigChannel+0x2b8>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	429a      	cmp	r2, r3
 8002342:	d106      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fa43 	bl	80017d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2103      	movs	r1, #3
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fa29 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10a      	bne.n	800237e <HAL_ADC_ConfigChannel+0x2f6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2103      	movs	r1, #3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fa1e 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	e010      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x318>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2103      	movs	r1, #3
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fa13 	bl	80017b0 <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x330>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	e00a      	b.n	80023ce <HAL_ADC_ConfigChannel+0x346>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80023c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	2103      	movs	r1, #3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f9fc 	bl	80017d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fb15 	bl	8001a14 <LL_ADC_IsEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 810c 	bne.w	800260a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6819      	ldr	r1, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	461a      	mov	r2, r3
 8002400:	f7ff fa66 	bl	80018d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4aad      	ldr	r2, [pc, #692]	; (80026c0 <HAL_ADC_ConfigChannel+0x638>)
 800240a:	4293      	cmp	r3, r2
 800240c:	f040 80fd 	bne.w	800260a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x3b0>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0e9b      	lsrs	r3, r3, #26
 8002426:	3301      	adds	r3, #1
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2b09      	cmp	r3, #9
 800242e:	bf94      	ite	ls
 8002430:	2301      	movls	r3, #1
 8002432:	2300      	movhi	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e012      	b.n	800245e <HAL_ADC_ConfigChannel+0x3d6>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	fab3 f383 	clz	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	2b09      	cmp	r3, #9
 8002456:	bf94      	ite	ls
 8002458:	2301      	movls	r3, #1
 800245a:	2300      	movhi	r3, #0
 800245c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245e:	2b00      	cmp	r3, #0
 8002460:	d064      	beq.n	800252c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3f6>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	3301      	adds	r3, #1
 8002476:	069b      	lsls	r3, r3, #26
 8002478:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800247c:	e00e      	b.n	800249c <HAL_ADC_ConfigChannel+0x414>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	069b      	lsls	r3, r3, #26
 8002498:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x434>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0e9b      	lsrs	r3, r3, #26
 80024ae:	3301      	adds	r3, #1
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	e010      	b.n	80024de <HAL_ADC_ConfigChannel+0x456>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	ea42 0103 	orr.w	r1, r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x47c>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 021f 	and.w	r2, r3, #31
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	051b      	lsls	r3, r3, #20
 8002502:	e011      	b.n	8002528 <HAL_ADC_ConfigChannel+0x4a0>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f003 021f 	and.w	r2, r3, #31
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002528:	430b      	orrs	r3, r1
 800252a:	e069      	b.n	8002600 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x4c0>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	0e9b      	lsrs	r3, r3, #26
 800253e:	3301      	adds	r3, #1
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002546:	e00e      	b.n	8002566 <HAL_ADC_ConfigChannel+0x4de>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	61fb      	str	r3, [r7, #28]
  return result;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	069b      	lsls	r3, r3, #26
 8002562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x4fe>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0e9b      	lsrs	r3, r3, #26
 8002578:	3301      	adds	r3, #1
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	2101      	movs	r1, #1
 8002580:	fa01 f303 	lsl.w	r3, r1, r3
 8002584:	e010      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x520>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	617b      	str	r3, [r7, #20]
  return result;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	ea42 0103 	orr.w	r1, r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x54c>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0e9b      	lsrs	r3, r3, #26
 80025be:	3301      	adds	r3, #1
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	3b1e      	subs	r3, #30
 80025cc:	051b      	lsls	r3, r3, #20
 80025ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d2:	e014      	b.n	80025fe <HAL_ADC_ConfigChannel+0x576>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	60fb      	str	r3, [r7, #12]
  return result;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	f003 021f 	and.w	r2, r3, #31
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	3b1e      	subs	r3, #30
 80025f8:	051b      	lsls	r3, r3, #20
 80025fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fe:	430b      	orrs	r3, r1
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	6892      	ldr	r2, [r2, #8]
 8002604:	4619      	mov	r1, r3
 8002606:	f7ff f93b 	bl	8001880 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_ADC_ConfigChannel+0x63c>)
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808c 	beq.w	8002730 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002618:	482b      	ldr	r0, [pc, #172]	; (80026c8 <HAL_ADC_ConfigChannel+0x640>)
 800261a:	f7ff f899 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 800261e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a29      	ldr	r2, [pc, #164]	; (80026cc <HAL_ADC_ConfigChannel+0x644>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d12b      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x5fc>
 800262c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d125      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <HAL_ADC_ConfigChannel+0x648>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_ADC_ConfigChannel+0x5c4>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a23      	ldr	r2, [pc, #140]	; (80026d4 <HAL_ADC_ConfigChannel+0x64c>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d16e      	bne.n	800272a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800264c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002650:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002654:	4619      	mov	r1, r3
 8002656:	481c      	ldr	r0, [pc, #112]	; (80026c8 <HAL_ADC_ConfigChannel+0x640>)
 8002658:	f7ff f867 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <HAL_ADC_ConfigChannel+0x650>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <HAL_ADC_ConfigChannel+0x654>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099a      	lsrs	r2, r3, #6
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002674:	e002      	b.n	800267c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f9      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002682:	e052      	b.n	800272a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <HAL_ADC_ConfigChannel+0x658>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12a      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x65c>
 800268e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d124      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <HAL_ADC_ConfigChannel+0x648>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x626>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_ADC_ConfigChannel+0x64c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d13f      	bne.n	800272e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	4619      	mov	r1, r3
 80026b8:	4803      	ldr	r0, [pc, #12]	; (80026c8 <HAL_ADC_ConfigChannel+0x640>)
 80026ba:	f7ff f836 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026be:	e036      	b.n	800272e <HAL_ADC_ConfigChannel+0x6a6>
 80026c0:	407f0000 	.word	0x407f0000
 80026c4:	80080000 	.word	0x80080000
 80026c8:	50040300 	.word	0x50040300
 80026cc:	c7520000 	.word	0xc7520000
 80026d0:	50040000 	.word	0x50040000
 80026d4:	50040200 	.word	0x50040200
 80026d8:	20000000 	.word	0x20000000
 80026dc:	053e2d63 	.word	0x053e2d63
 80026e0:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <HAL_ADC_ConfigChannel+0x6bc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d120      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d11a      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_ADC_ConfigChannel+0x6c0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d115      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800270c:	4619      	mov	r1, r3
 800270e:	480f      	ldr	r0, [pc, #60]	; (800274c <HAL_ADC_ConfigChannel+0x6c4>)
 8002710:	f7ff f80b 	bl	800172a <LL_ADC_SetCommonPathInternalCh>
 8002714:	e00c      	b.n	8002730 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002728:	e002      	b.n	8002730 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800272e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002738:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800273c:	4618      	mov	r0, r3
 800273e:	3798      	adds	r7, #152	; 0x98
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	80000001 	.word	0x80000001
 8002748:	50040000 	.word	0x50040000
 800274c:	50040300 	.word	0x50040300

08002750 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff f959 	bl	8001a14 <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d146      	bne.n	80027f6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <ADC_Enable+0xb0>)
 8002770:	4013      	ands	r3, r2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277a:	f043 0210 	orr.w	r2, r3, #16
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e032      	b.n	80027f8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f928 	bl	80019ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800279c:	f7fe ff84 	bl	80016a8 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a2:	e021      	b.n	80027e8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f933 	bl	8001a14 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d104      	bne.n	80027be <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f917 	bl	80019ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027be:	f7fe ff73 	bl	80016a8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d90d      	bls.n	80027e8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	f043 0210 	orr.w	r2, r3, #16
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d1d6      	bne.n	80027a4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	8000003f 	.word	0x8000003f

08002804 <LL_ADC_IsEnabled>:
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <LL_ADC_IsEnabled+0x18>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_ADC_IsEnabled+0x1a>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <LL_ADC_REG_IsConversionOngoing>:
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d101      	bne.n	8002842 <LL_ADC_REG_IsConversionOngoing+0x18>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b09f      	sub	sp, #124	; 0x7c
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800286a:	2302      	movs	r3, #2
 800286c:	e08f      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a47      	ldr	r2, [pc, #284]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d102      	bne.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002880:	4b46      	ldr	r3, [pc, #280]	; (800299c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	e001      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e072      	b.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ffbd 	bl	800282a <LL_ADC_REG_IsConversionOngoing>
 80028b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ffb7 	bl	800282a <LL_ADC_REG_IsConversionOngoing>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d154      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80028c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d151      	bne.n	800296c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02c      	beq.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e6:	035b      	lsls	r3, r3, #13
 80028e8:	430b      	orrs	r3, r1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f0:	4829      	ldr	r0, [pc, #164]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80028f2:	f7ff ff87 	bl	8002804 <LL_ADC_IsEnabled>
 80028f6:	4604      	mov	r4, r0
 80028f8:	4828      	ldr	r0, [pc, #160]	; (800299c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80028fa:	f7ff ff83 	bl	8002804 <LL_ADC_IsEnabled>
 80028fe:	4603      	mov	r3, r0
 8002900:	431c      	orrs	r4, r3
 8002902:	4828      	ldr	r0, [pc, #160]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002904:	f7ff ff7e 	bl	8002804 <LL_ADC_IsEnabled>
 8002908:	4603      	mov	r3, r0
 800290a:	4323      	orrs	r3, r4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d137      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002918:	f023 030f 	bic.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	6811      	ldr	r1, [r2, #0]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6892      	ldr	r2, [r2, #8]
 8002924:	430a      	orrs	r2, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800292c:	e028      	b.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800292e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002938:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800293a:	4817      	ldr	r0, [pc, #92]	; (8002998 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800293c:	f7ff ff62 	bl	8002804 <LL_ADC_IsEnabled>
 8002940:	4604      	mov	r4, r0
 8002942:	4816      	ldr	r0, [pc, #88]	; (800299c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002944:	f7ff ff5e 	bl	8002804 <LL_ADC_IsEnabled>
 8002948:	4603      	mov	r3, r0
 800294a:	431c      	orrs	r4, r3
 800294c:	4815      	ldr	r0, [pc, #84]	; (80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800294e:	f7ff ff59 	bl	8002804 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	4323      	orrs	r3, r4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d112      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800295a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002962:	f023 030f 	bic.w	r3, r3, #15
 8002966:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002968:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800296a:	e009      	b.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800297e:	e000      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002980:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800298a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800298e:	4618      	mov	r0, r3
 8002990:	377c      	adds	r7, #124	; 0x7c
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop
 8002998:	50040000 	.word	0x50040000
 800299c:	50040100 	.word	0x50040100
 80029a0:	50040300 	.word	0x50040300
 80029a4:	50040200 	.word	0x50040200

080029a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <__NVIC_SetPriorityGrouping+0x44>)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	60d3      	str	r3, [r2, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <__NVIC_GetPriorityGrouping+0x18>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	f003 0307 	and.w	r3, r3, #7
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	db0b      	blt.n	8002a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4907      	ldr	r1, [pc, #28]	; (8002a44 <__NVIC_EnableIRQ+0x38>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000e100 	.word	0xe000e100

08002a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6039      	str	r1, [r7, #0]
 8002a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	db0a      	blt.n	8002a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	490c      	ldr	r1, [pc, #48]	; (8002a94 <__NVIC_SetPriority+0x4c>)
 8002a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a70:	e00a      	b.n	8002a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4908      	ldr	r1, [pc, #32]	; (8002a98 <__NVIC_SetPriority+0x50>)
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	3b04      	subs	r3, #4
 8002a80:	0112      	lsls	r2, r2, #4
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	440b      	add	r3, r1
 8002a86:	761a      	strb	r2, [r3, #24]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000e100 	.word	0xe000e100
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f1c3 0307 	rsb	r3, r3, #7
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	bf28      	it	cs
 8002aba:	2304      	movcs	r3, #4
 8002abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d902      	bls.n	8002acc <NVIC_EncodePriority+0x30>
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3b03      	subs	r3, #3
 8002aca:	e000      	b.n	8002ace <NVIC_EncodePriority+0x32>
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	401a      	ands	r2, r3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	43d9      	mvns	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	4313      	orrs	r3, r2
         );
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff4c 	bl	80029a8 <__NVIC_SetPriorityGrouping>
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b2a:	f7ff ff61 	bl	80029f0 <__NVIC_GetPriorityGrouping>
 8002b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	6978      	ldr	r0, [r7, #20]
 8002b36:	f7ff ffb1 	bl	8002a9c <NVIC_EncodePriority>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff80 	bl	8002a48 <__NVIC_SetPriority>
}
 8002b48:	bf00      	nop
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff54 	bl	8002a0c <__NVIC_EnableIRQ>
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0ac      	b.n	8002cd8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f8b2 	bl	8002cec <DFSDM_GetChannelFromInstance>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <HAL_DFSDM_ChannelInit+0x174>)
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e09f      	b.n	8002cd8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7fe fa39 	bl	8001010 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002b9e:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <HAL_DFSDM_ChannelInit+0x178>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4a4f      	ldr	r2, [pc, #316]	; (8002ce4 <HAL_DFSDM_ChannelInit+0x178>)
 8002ba6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002ba8:	4b4e      	ldr	r3, [pc, #312]	; (8002ce4 <HAL_DFSDM_ChannelInit+0x178>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d125      	bne.n	8002bfc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4948      	ldr	r1, [pc, #288]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a46      	ldr	r2, [pc, #280]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bd0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002bd4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	791b      	ldrb	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d108      	bne.n	8002bf0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002bde:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	493f      	ldr	r1, [pc, #252]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bfa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002c0a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c1a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c20:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 020f 	bic.w	r2, r2, #15
 8002c38:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6819      	ldr	r1, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002c60:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f002 0207 	and.w	r2, r2, #7
 8002c8c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 f810 	bl	8002cec <DFSDM_GetChannelFromInstance>
 8002ccc:	4601      	mov	r1, r0
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_DFSDM_ChannelInit+0x174>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200002f0 	.word	0x200002f0
 8002ce4:	200002ec 	.word	0x200002ec
 8002ce8:	40016000 	.word	0x40016000

08002cec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <DFSDM_GetChannelFromInstance+0x8c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d102      	bne.n	8002d02 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e032      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <DFSDM_GetChannelFromInstance+0x90>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d102      	bne.n	8002d10 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e02b      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <DFSDM_GetChannelFromInstance+0x94>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d102      	bne.n	8002d1e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e024      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <DFSDM_GetChannelFromInstance+0x98>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d102      	bne.n	8002d2c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002d26:	2303      	movs	r3, #3
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e01d      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <DFSDM_GetChannelFromInstance+0x9c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d102      	bne.n	8002d3a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002d34:	2304      	movs	r3, #4
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e016      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <DFSDM_GetChannelFromInstance+0xa0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d102      	bne.n	8002d48 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002d42:	2305      	movs	r3, #5
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e00f      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <DFSDM_GetChannelFromInstance+0xa4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d102      	bne.n	8002d56 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002d50:	2306      	movs	r3, #6
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	e008      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <DFSDM_GetChannelFromInstance+0xa8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d102      	bne.n	8002d64 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8002d5e:	2307      	movs	r3, #7
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e001      	b.n	8002d68 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40016000 	.word	0x40016000
 8002d7c:	40016020 	.word	0x40016020
 8002d80:	40016040 	.word	0x40016040
 8002d84:	40016060 	.word	0x40016060
 8002d88:	40016080 	.word	0x40016080
 8002d8c:	400160a0 	.word	0x400160a0
 8002d90:	400160c0 	.word	0x400160c0
 8002d94:	400160e0 	.word	0x400160e0

08002d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002da6:	e17f      	b.n	80030a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	2101      	movs	r1, #1
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	4013      	ands	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8171 	beq.w	80030a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x38>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b12      	cmp	r3, #18
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	6939      	ldr	r1, [r7, #16]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d00b      	beq.n	8002e6c <HAL_GPIO_Init+0xd4>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d007      	beq.n	8002e6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e60:	2b11      	cmp	r3, #17
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b12      	cmp	r3, #18
 8002e6a:	d130      	bne.n	8002ece <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	f003 0201 	and.w	r2, r3, #1
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d118      	bne.n	8002f0c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	08db      	lsrs	r3, r3, #3
 8002ef6:	f003 0201 	and.w	r2, r3, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80ac 	beq.w	80030a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4a:	4b5e      	ldr	r3, [pc, #376]	; (80030c4 <HAL_GPIO_Init+0x32c>)
 8002f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4e:	4a5d      	ldr	r2, [pc, #372]	; (80030c4 <HAL_GPIO_Init+0x32c>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6613      	str	r3, [r2, #96]	; 0x60
 8002f56:	4b5b      	ldr	r3, [pc, #364]	; (80030c4 <HAL_GPIO_Init+0x32c>)
 8002f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f62:	4a59      	ldr	r2, [pc, #356]	; (80030c8 <HAL_GPIO_Init+0x330>)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f8c:	d025      	beq.n	8002fda <HAL_GPIO_Init+0x242>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4e      	ldr	r2, [pc, #312]	; (80030cc <HAL_GPIO_Init+0x334>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <HAL_GPIO_Init+0x23e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <HAL_GPIO_Init+0x338>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x23a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4c      	ldr	r2, [pc, #304]	; (80030d4 <HAL_GPIO_Init+0x33c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x236>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	; (80030d8 <HAL_GPIO_Init+0x340>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x232>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4a      	ldr	r2, [pc, #296]	; (80030dc <HAL_GPIO_Init+0x344>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x22e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a49      	ldr	r2, [pc, #292]	; (80030e0 <HAL_GPIO_Init+0x348>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x22a>
 8002fbe:	2306      	movs	r3, #6
 8002fc0:	e00c      	b.n	8002fdc <HAL_GPIO_Init+0x244>
 8002fc2:	2307      	movs	r3, #7
 8002fc4:	e00a      	b.n	8002fdc <HAL_GPIO_Init+0x244>
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	e008      	b.n	8002fdc <HAL_GPIO_Init+0x244>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x244>
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e004      	b.n	8002fdc <HAL_GPIO_Init+0x244>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x244>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x244>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	f002 0203 	and.w	r2, r2, #3
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	4093      	lsls	r3, r2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fec:	4936      	ldr	r1, [pc, #216]	; (80030c8 <HAL_GPIO_Init+0x330>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800301e:	4a31      	ldr	r2, [pc, #196]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003024:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	43db      	mvns	r3, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800304e:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	43db      	mvns	r3, r3
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4013      	ands	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800309c:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <HAL_GPIO_Init+0x34c>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f47f ae78 	bne.w	8002da8 <HAL_GPIO_Init+0x10>
  }
}
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40010000 	.word	0x40010000
 80030cc:	48000400 	.word	0x48000400
 80030d0:	48000800 	.word	0x48000800
 80030d4:	48000c00 	.word	0x48000c00
 80030d8:	48001000 	.word	0x48001000
 80030dc:	48001400 	.word	0x48001400
 80030e0:	48001800 	.word	0x48001800
 80030e4:	40010400 	.word	0x40010400

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003104:	e002      	b.n	800310c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f806 	bl	8003148 <HAL_GPIO_EXTI_Callback>
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40010400 	.word	0x40010400

08003148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e081      	b.n	8003274 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd ff87 	bl	8001098 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2224      	movs	r2, #36	; 0x24
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	e006      	b.n	80031e6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d104      	bne.n	80031f8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800321a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	ea42 0103 	orr.w	r1, r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	021a      	lsls	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69d9      	ldr	r1, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1a      	ldr	r2, [r3, #32]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d138      	bne.n	8003304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800329c:	2302      	movs	r3, #2
 800329e:	e032      	b.n	8003306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	; 0x24
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	d139      	bne.n	800339c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003332:	2302      	movs	r3, #2
 8003334:	e033      	b.n	800339e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2224      	movs	r2, #36	; 0x24
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ac:	b08f      	sub	sp, #60	; 0x3c
 80033ae:	af0a      	add	r7, sp, #40	; 0x28
 80033b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e116      	b.n	80035ea <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd ffa0 	bl	800131c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2203      	movs	r2, #3
 80033e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 fda5 	bl	8005f4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	687e      	ldr	r6, [r7, #4]
 8003408:	466d      	mov	r5, sp
 800340a:	f106 0410 	add.w	r4, r6, #16
 800340e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800341a:	e885 0003 	stmia.w	r5, {r0, r1}
 800341e:	1d33      	adds	r3, r6, #4
 8003420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003422:	6838      	ldr	r0, [r7, #0]
 8003424:	f002 fd3f 	bl	8005ea6 <USB_CoreInit>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0d7      	b.n	80035ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f002 fd93 	bl	8005f6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	e04a      	b.n	80034e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	333d      	adds	r3, #61	; 0x3d
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003460:	7bfa      	ldrb	r2, [r7, #15]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	333c      	adds	r3, #60	; 0x3c
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	b298      	uxth	r0, r3
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3342      	adds	r3, #66	; 0x42
 8003488:	4602      	mov	r2, r0
 800348a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	333f      	adds	r3, #63	; 0x3f
 800349c:	2200      	movs	r2, #0
 800349e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	3344      	adds	r3, #68	; 0x44
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	3348      	adds	r3, #72	; 0x48
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3350      	adds	r3, #80	; 0x50
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	3301      	adds	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d3af      	bcc.n	800344c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e044      	b.n	800357c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003560:	7bfa      	ldrb	r2, [r7, #15]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	3301      	adds	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	429a      	cmp	r2, r3
 8003584:	d3b5      	bcc.n	80034f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	687e      	ldr	r6, [r7, #4]
 800358e:	466d      	mov	r5, sp
 8003590:	f106 0410 	add.w	r4, r6, #16
 8003594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800359a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800359c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a4:	1d33      	adds	r3, r6, #4
 80035a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f002 fd09 	bl	8005fc0 <USB_DevInit>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e014      	b.n	80035ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d102      	bne.n	80035de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f80a 	bl	80035f2 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f002 fe8f 	bl	8006306 <USB_DevDisconnect>

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	f043 0303 	orr.w	r3, r3, #3
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40007000 	.word	0x40007000

0800365c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <HAL_PWREx_GetVoltageRange+0x18>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40007000 	.word	0x40007000

08003678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003686:	d130      	bne.n	80036ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003688:	4b23      	ldr	r3, [pc, #140]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003694:	d038      	beq.n	8003708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800369e:	4a1e      	ldr	r2, [pc, #120]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036a6:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2232      	movs	r2, #50	; 0x32
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0c9b      	lsrs	r3, r3, #18
 80036b8:	3301      	adds	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036bc:	e002      	b.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036c4:	4b14      	ldr	r3, [pc, #80]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d0:	d102      	bne.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f2      	bne.n	80036be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e4:	d110      	bne.n	8003708 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e00f      	b.n	800370a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	d007      	beq.n	8003708 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003700:	4a05      	ldr	r2, [pc, #20]	; (8003718 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003702:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003706:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40007000 	.word	0x40007000
 800371c:	20000000 	.word	0x20000000
 8003720:	431bde83 	.word	0x431bde83

08003724 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_PWREx_EnableVddUSB+0x1c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <HAL_PWREx_EnableVddUSB+0x1c>)
 800372e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003732:	6053      	str	r3, [r2, #4]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40007000 	.word	0x40007000

08003744 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af02      	add	r7, sp, #8
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800374c:	f7fd ffac 	bl	80016a8 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e06f      	b.n	800383c <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_QSPI_Init+0x28>
 8003768:	2302      	movs	r3, #2
 800376a:	e067      	b.n	800383c <HAL_QSPI_Init+0xf8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fd fcc9 	bl	8001120 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800378e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f858 	bl	8003848 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	021a      	lsls	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	2120      	movs	r1, #32
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f850 	bl	8003864 <QSPI_WaitFlagStateUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80037c8:	7afb      	ldrb	r3, [r7, #11]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d131      	bne.n	8003832 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80037d8:	f023 0310 	bic.w	r3, r3, #16
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6852      	ldr	r2, [r2, #4]
 80037e0:	0611      	lsls	r1, r2, #24
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	4311      	orrs	r1, r2
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <HAL_QSPI_Init+0x100>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6912      	ldr	r2, [r2, #16]
 80037fe:	0411      	lsls	r1, r2, #16
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6952      	ldr	r2, [r2, #20]
 8003804:	4311      	orrs	r1, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6992      	ldr	r2, [r2, #24]
 800380a:	4311      	orrs	r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	430b      	orrs	r3, r1
 8003812:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800383a:	7afb      	ldrb	r3, [r7, #11]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	ffe0f8fe 	.word	0xffe0f8fe

08003848 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003874:	e01a      	b.n	80038ac <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d016      	beq.n	80038ac <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fd ff13 	bl	80016a8 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2204      	movs	r2, #4
 8003898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e00e      	b.n	80038ca <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bf14      	ite	ne
 80038ba:	2301      	movne	r3, #1
 80038bc:	2300      	moveq	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1d6      	bne.n	8003876 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e39d      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e6:	4ba4      	ldr	r3, [pc, #656]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f0:	4ba1      	ldr	r3, [pc, #644]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80e1 	beq.w	8003aca <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <HAL_RCC_OscConfig+0x4a>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b0c      	cmp	r3, #12
 8003912:	f040 8088 	bne.w	8003a26 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b01      	cmp	r3, #1
 800391a:	f040 8084 	bne.w	8003a26 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800391e:	4b96      	ldr	r3, [pc, #600]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_RCC_OscConfig+0x62>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e375      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1a      	ldr	r2, [r3, #32]
 800393a:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <HAL_RCC_OscConfig+0x7c>
 8003946:	4b8c      	ldr	r3, [pc, #560]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394e:	e005      	b.n	800395c <HAL_RCC_OscConfig+0x88>
 8003950:	4b89      	ldr	r3, [pc, #548]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800395c:	4293      	cmp	r3, r2
 800395e:	d223      	bcs.n	80039a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fd3b 	bl	80043e0 <RCC_SetFlashLatencyFromMSIRange>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e356      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003974:	4b80      	ldr	r3, [pc, #512]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7f      	ldr	r2, [pc, #508]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 800397a:	f043 0308 	orr.w	r3, r3, #8
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b7d      	ldr	r3, [pc, #500]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	497a      	ldr	r1, [pc, #488]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003992:	4b79      	ldr	r3, [pc, #484]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	4975      	ldr	r1, [pc, #468]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
 80039a6:	e022      	b.n	80039ee <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039a8:	4b73      	ldr	r3, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a72      	ldr	r2, [pc, #456]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039ae:	f043 0308 	orr.w	r3, r3, #8
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	496d      	ldr	r1, [pc, #436]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039c6:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	4968      	ldr	r1, [pc, #416]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fcfe 	bl	80043e0 <RCC_SetFlashLatencyFromMSIRange>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e319      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ee:	f000 fc03 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b60      	ldr	r3, [pc, #384]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a5f      	ldr	r2, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x2a8>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	fa21 f303 	lsr.w	r3, r1, r3
 8003a0a:	4a5d      	ldr	r2, [pc, #372]	; (8003b80 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	; (8003b84 <HAL_RCC_OscConfig+0x2b0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fcee 	bl	80013f4 <HAL_InitTick>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d052      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	e2fd      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d032      	beq.n	8003a94 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a2e:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a51      	ldr	r2, [pc, #324]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a3a:	f7fd fe35 	bl	80016a8 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a42:	f7fd fe31 	bl	80016a8 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e2e6      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a54:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	493f      	ldr	r1, [pc, #252]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a7e:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	493a      	ldr	r1, [pc, #232]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
 8003a92:	e01a      	b.n	8003aca <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a94:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a37      	ldr	r2, [pc, #220]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fe02 	bl	80016a8 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aa8:	f7fd fdfe 	bl	80016a8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e2b3      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aba:	4b2f      	ldr	r3, [pc, #188]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x1d4>
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ac8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d074      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x214>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d10e      	bne.n	8003b00 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d064      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2ea>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d160      	bne.n	8003bbe <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e290      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x244>
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0x280>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x268>
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0x280>
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_RCC_OscConfig+0x2a4>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fda4 	bl	80016a8 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b62:	e011      	b.n	8003b88 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fda0 	bl	80016a8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d90a      	bls.n	8003b88 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e255      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	080080b8 	.word	0x080080b8
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b88:	4bae      	ldr	r3, [pc, #696]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0e7      	beq.n	8003b64 <HAL_RCC_OscConfig+0x290>
 8003b94:	e014      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fd fd87 	bl	80016a8 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9e:	f7fd fd83 	bl	80016a8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b64      	cmp	r3, #100	; 0x64
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e238      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bb0:	4ba4      	ldr	r3, [pc, #656]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f0      	bne.n	8003b9e <HAL_RCC_OscConfig+0x2ca>
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d060      	beq.n	8003c8e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d005      	beq.n	8003bde <HAL_RCC_OscConfig+0x30a>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	d119      	bne.n	8003c0c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bde:	4b99      	ldr	r3, [pc, #612]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x322>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e215      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b93      	ldr	r3, [pc, #588]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	498f      	ldr	r1, [pc, #572]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c0a:	e040      	b.n	8003c8e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d023      	beq.n	8003c5c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b8b      	ldr	r3, [pc, #556]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a8a      	ldr	r2, [pc, #552]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fd42 	bl	80016a8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fd fd3e 	bl	80016a8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e1f3      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c3a:	4b82      	ldr	r3, [pc, #520]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c46:	4b7f      	ldr	r3, [pc, #508]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	061b      	lsls	r3, r3, #24
 8003c54:	497b      	ldr	r1, [pc, #492]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
 8003c5a:	e018      	b.n	8003c8e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c5c:	4b79      	ldr	r3, [pc, #484]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a78      	ldr	r2, [pc, #480]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fd fd1e 	bl	80016a8 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fd fd1a 	bl	80016a8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1cf      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c82:	4b70      	ldr	r3, [pc, #448]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03c      	beq.n	8003d14 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca8:	4a66      	ldr	r2, [pc, #408]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fd fcf9 	bl	80016a8 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd fcf5 	bl	80016a8 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1aa      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ccc:	4b5d      	ldr	r3, [pc, #372]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ef      	beq.n	8003cba <HAL_RCC_OscConfig+0x3e6>
 8003cda:	e01b      	b.n	8003d14 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b59      	ldr	r3, [pc, #356]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce2:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fd fcdc 	bl	80016a8 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fd fcd8 	bl	80016a8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e18d      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d06:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ef      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80a5 	beq.w	8003e6c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d26:	4b47      	ldr	r3, [pc, #284]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b44      	ldr	r3, [pc, #272]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	4a43      	ldr	r2, [pc, #268]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <HAL_RCC_OscConfig+0x574>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	; (8003e48 <HAL_RCC_OscConfig+0x574>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	; (8003e48 <HAL_RCC_OscConfig+0x574>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fd fc9f 	bl	80016a8 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fd fc9b 	bl	80016a8 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e150      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <HAL_RCC_OscConfig+0x574>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d108      	bne.n	8003da6 <HAL_RCC_OscConfig+0x4d2>
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	4a2a      	ldr	r2, [pc, #168]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da4:	e024      	b.n	8003df0 <HAL_RCC_OscConfig+0x51c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d110      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4fc>
 8003dae:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003db6:	f043 0304 	orr.w	r3, r3, #4
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dce:	e00f      	b.n	8003df0 <HAL_RCC_OscConfig+0x51c>
 8003dd0:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de0:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003de8:	f023 0304 	bic.w	r3, r3, #4
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d016      	beq.n	8003e26 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fd fc56 	bl	80016a8 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fd fc52 	bl	80016a8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e105      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_OscConfig+0x570>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ed      	beq.n	8003e00 <HAL_RCC_OscConfig+0x52c>
 8003e24:	e019      	b.n	8003e5a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fd fc3f 	bl	80016a8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e2c:	e00e      	b.n	8003e4c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fd fc3b 	bl	80016a8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d905      	bls.n	8003e4c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e0ee      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e4c:	4b77      	ldr	r3, [pc, #476]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e9      	bne.n	8003e2e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e60:	4b72      	ldr	r3, [pc, #456]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	4a71      	ldr	r2, [pc, #452]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 80d5 	beq.w	8004020 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b0c      	cmp	r3, #12
 8003e7a:	f000 808e 	beq.w	8003f9a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d15b      	bne.n	8003f3e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e86:	4b69      	ldr	r3, [pc, #420]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a68      	ldr	r2, [pc, #416]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fc09 	bl	80016a8 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9a:	f7fd fc05 	bl	80016a8 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0ba      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eac:	4b5f      	ldr	r3, [pc, #380]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f0      	bne.n	8003e9a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb8:	4b5c      	ldr	r3, [pc, #368]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <HAL_RCC_OscConfig+0x75c>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ec8:	3a01      	subs	r2, #1
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	4311      	orrs	r1, r2
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ed2:	0212      	lsls	r2, r2, #8
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003eda:	0852      	lsrs	r2, r2, #1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0552      	lsls	r2, r2, #21
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ee6:	0852      	lsrs	r2, r2, #1
 8003ee8:	3a01      	subs	r2, #1
 8003eea:	0652      	lsls	r2, r2, #25
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef2:	0912      	lsrs	r2, r2, #4
 8003ef4:	0452      	lsls	r2, r2, #17
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	494c      	ldr	r1, [pc, #304]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003efe:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4a      	ldr	r2, [pc, #296]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f08:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a47      	ldr	r2, [pc, #284]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f14:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fd fbc7 	bl	80016a8 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd fbc3 	bl	80016a8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e078      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f30:	4b3e      	ldr	r3, [pc, #248]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x64a>
 8003f3c:	e070      	b.n	8004020 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3a      	ldr	r2, [pc, #232]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f4a:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f56:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a34      	ldr	r2, [pc, #208]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f5c:	f023 0303 	bic.w	r3, r3, #3
 8003f60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f62:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4a31      	ldr	r2, [pc, #196]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f72:	f7fd fb99 	bl	80016a8 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fd fb95 	bl	80016a8 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e04a      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x6a6>
 8003f98:	e042      	b.n	8004020 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e03d      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_RCC_OscConfig+0x758>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d130      	bne.n	800401c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d127      	bne.n	800401c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d11f      	bne.n	800401c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe6:	2a07      	cmp	r2, #7
 8003fe8:	bf14      	ite	ne
 8003fea:	2201      	movne	r2, #1
 8003fec:	2200      	moveq	r2, #0
 8003fee:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d113      	bne.n	800401c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	3b01      	subs	r3, #1
 8004002:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d109      	bne.n	800401c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	085b      	lsrs	r3, r3, #1
 8004014:	3b01      	subs	r3, #1
 8004016:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000
 8004030:	f99d808c 	.word	0xf99d808c

08004034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0c8      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004048:	4b66      	ldr	r3, [pc, #408]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d910      	bls.n	8004078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 0207 	bic.w	r2, r3, #7
 800405e:	4961      	ldr	r1, [pc, #388]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0b0      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d04c      	beq.n	800411e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d107      	bne.n	800409c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408c:	4b56      	ldr	r3, [pc, #344]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d121      	bne.n	80040dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e09e      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d107      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d115      	bne.n	80040dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e092      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e086      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040cc:	4b46      	ldr	r3, [pc, #280]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e07e      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040dc:	4b42      	ldr	r3, [pc, #264]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 0203 	bic.w	r2, r3, #3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	493f      	ldr	r1, [pc, #252]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ee:	f7fd fadb 	bl	80016a8 <HAL_GetTick>
 80040f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f4:	e00a      	b.n	800410c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f6:	f7fd fad7 	bl	80016a8 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e066      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410c:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 020c 	and.w	r2, r3, #12
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	429a      	cmp	r2, r3
 800411c:	d1eb      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800412a:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	492c      	ldr	r1, [pc, #176]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800413c:	4b29      	ldr	r3, [pc, #164]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d210      	bcs.n	800416c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 0207 	bic.w	r2, r3, #7
 8004152:	4924      	ldr	r1, [pc, #144]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_RCC_ClockConfig+0x1b0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d001      	beq.n	800416c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e036      	b.n	80041da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4918      	ldr	r1, [pc, #96]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4910      	ldr	r1, [pc, #64]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041aa:	f000 f825 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80041ae:	4601      	mov	r1, r0
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <HAL_RCC_ClockConfig+0x1b4>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	5cd3      	ldrb	r3, [r2, r3]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	fa21 f303 	lsr.w	r3, r1, r3
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd f910 	bl	80013f4 <HAL_InitTick>
 80041d4:	4603      	mov	r3, r0
 80041d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80041d8:	7afb      	ldrb	r3, [r7, #11]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40022000 	.word	0x40022000
 80041e8:	40021000 	.word	0x40021000
 80041ec:	080080b8 	.word	0x080080b8
 80041f0:	20000000 	.word	0x20000000
 80041f4:	20000004 	.word	0x20000004

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	; 0x24
 80041fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	2300      	movs	r3, #0
 8004204:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004206:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004210:	4b3a      	ldr	r3, [pc, #232]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x34>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2b0c      	cmp	r3, #12
 8004224:	d121      	bne.n	800426a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d11e      	bne.n	800426a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800422c:	4b33      	ldr	r3, [pc, #204]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004238:	4b30      	ldr	r3, [pc, #192]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	0a1b      	lsrs	r3, r3, #8
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e005      	b.n	8004254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004248:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004254:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <HAL_RCC_GetSysClockFreq+0x108>)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004268:	e00a      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d102      	bne.n	8004276 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	e004      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d101      	bne.n	8004280 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800427c:	4b22      	ldr	r3, [pc, #136]	; (8004308 <HAL_RCC_GetSysClockFreq+0x110>)
 800427e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b0c      	cmp	r3, #12
 8004284:	d133      	bne.n	80042ee <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d002      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0xa4>
 8004296:	2b03      	cmp	r3, #3
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0xaa>
 800429a:	e005      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800429c:	4b19      	ldr	r3, [pc, #100]	; (8004304 <HAL_RCC_GetSysClockFreq+0x10c>)
 800429e:	617b      	str	r3, [r7, #20]
      break;
 80042a0:	e005      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042a2:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_GetSysClockFreq+0x110>)
 80042a4:	617b      	str	r3, [r7, #20]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	617b      	str	r3, [r7, #20]
      break;
 80042ac:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042ae:	4b13      	ldr	r3, [pc, #76]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	3301      	adds	r3, #1
 80042ba:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	fb02 f203 	mul.w	r2, r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_GetSysClockFreq+0x104>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0e5b      	lsrs	r3, r3, #25
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	3301      	adds	r3, #1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042ee:	69bb      	ldr	r3, [r7, #24]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3724      	adds	r7, #36	; 0x24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40021000 	.word	0x40021000
 8004300:	080080d0 	.word	0x080080d0
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000000 	.word	0x20000000

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4601      	mov	r1, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	; (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4a04      	ldr	r2, [pc, #16]	; (800434c <HAL_RCC_GetPCLK1Freq+0x28>)
 800433a:	5cd3      	ldrb	r3, [r2, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	080080c8 	.word	0x080080c8

08004350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004354:	f7ff ffda 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004358:	4601      	mov	r1, r0
 800435a:	4b06      	ldr	r3, [pc, #24]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0adb      	lsrs	r3, r3, #11
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4a04      	ldr	r2, [pc, #16]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004366:	5cd3      	ldrb	r3, [r2, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	080080c8 	.word	0x080080c8

0800437c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	220f      	movs	r2, #15
 800438a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 0203 	and.w	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_GetClockConfig+0x5c>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80043be:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_RCC_GetClockConfig+0x60>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0207 	and.w	r2, r3, #7
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40022000 	.word	0x40022000

080043e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043ec:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043f8:	f7ff f930 	bl	800365c <HAL_PWREx_GetVoltageRange>
 80043fc:	6178      	str	r0, [r7, #20]
 80043fe:	e014      	b.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	4a24      	ldr	r2, [pc, #144]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6593      	str	r3, [r2, #88]	; 0x58
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004418:	f7ff f920 	bl	800365c <HAL_PWREx_GetVoltageRange>
 800441c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004430:	d10b      	bne.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d919      	bls.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2ba0      	cmp	r3, #160	; 0xa0
 800443c:	d902      	bls.n	8004444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800443e:	2302      	movs	r3, #2
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e013      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004444:	2301      	movs	r3, #1
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e010      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d902      	bls.n	8004456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004450:	2303      	movs	r3, #3
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	e00a      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b80      	cmp	r3, #128	; 0x80
 800445a:	d102      	bne.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800445c:	2302      	movs	r3, #2
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	e004      	b.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b70      	cmp	r3, #112	; 0x70
 8004466:	d101      	bne.n	800446c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004468:	2301      	movs	r3, #1
 800446a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 0207 	bic.w	r2, r3, #7
 8004474:	4909      	ldr	r1, [pc, #36]	; (800449c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	40022000 	.word	0x40022000

080044a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044a8:	2300      	movs	r3, #0
 80044aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044ac:	2300      	movs	r3, #0
 80044ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d03f      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c4:	d01c      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80044c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ca:	d802      	bhi.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00e      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80044d0:	e01f      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80044d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044d6:	d003      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80044d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044dc:	d01c      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80044de:	e018      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044e0:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a84      	ldr	r2, [pc, #528]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80044e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ec:	e015      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fac9 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044fe:	e00c      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3320      	adds	r3, #32
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fbb0 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004510:	e003      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	74fb      	strb	r3, [r7, #19]
      break;
 8004516:	e000      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004520:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452e:	4972      	ldr	r1, [pc, #456]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004536:	e001      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	7cfb      	ldrb	r3, [r7, #19]
 800453a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d03f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004550:	d01c      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004552:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004556:	d802      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800455c:	e01f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800455e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004562:	d003      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004564:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004568:	d01c      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800456a:	e018      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800456c:	4b62      	ldr	r3, [pc, #392]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a61      	ldr	r2, [pc, #388]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004576:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004578:	e015      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fa83 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800458a:	e00c      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3320      	adds	r3, #32
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fb6a 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	74fb      	strb	r3, [r7, #19]
      break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7cfb      	ldrb	r3, [r7, #19]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045ac:	4b52      	ldr	r3, [pc, #328]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ba:	494f      	ldr	r1, [pc, #316]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80a0 	beq.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045da:	4b47      	ldr	r3, [pc, #284]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045f0:	4b41      	ldr	r3, [pc, #260]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	4a40      	ldr	r2, [pc, #256]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6593      	str	r3, [r2, #88]	; 0x58
 80045fc:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004608:	2301      	movs	r3, #1
 800460a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800460c:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a3a      	ldr	r2, [pc, #232]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004618:	f7fd f846 	bl	80016a8 <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461e:	e009      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004620:	f7fd f842 	bl	80016a8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	74fb      	strb	r3, [r7, #19]
        break;
 8004632:	e005      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d15c      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004646:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01f      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	429a      	cmp	r2, r3
 8004662:	d019      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fd f801 	bl	80016a8 <HAL_GetTick>
 80046a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	e00b      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fc fffd 	bl	80016a8 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d902      	bls.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	74fb      	strb	r3, [r7, #19]
            break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ec      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	4904      	ldr	r1, [pc, #16]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
 80046f4:	e006      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004704:	7c7b      	ldrb	r3, [r7, #17]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4b9e      	ldr	r3, [pc, #632]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800470c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470e:	4a9d      	ldr	r2, [pc, #628]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004714:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004722:	4b98      	ldr	r3, [pc, #608]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004728:	f023 0203 	bic.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	4994      	ldr	r1, [pc, #592]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004744:	4b8f      	ldr	r3, [pc, #572]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474a:	f023 020c 	bic.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004752:	498c      	ldr	r1, [pc, #560]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004766:	4b87      	ldr	r3, [pc, #540]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	4983      	ldr	r1, [pc, #524]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004788:	4b7e      	ldr	r3, [pc, #504]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	497b      	ldr	r1, [pc, #492]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047aa:	4b76      	ldr	r3, [pc, #472]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b8:	4972      	ldr	r1, [pc, #456]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047cc:	4b6d      	ldr	r3, [pc, #436]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	496a      	ldr	r1, [pc, #424]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ee:	4b65      	ldr	r3, [pc, #404]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	4961      	ldr	r1, [pc, #388]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004810:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481e:	4959      	ldr	r1, [pc, #356]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004832:	4b54      	ldr	r3, [pc, #336]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	4950      	ldr	r1, [pc, #320]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004854:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	4948      	ldr	r1, [pc, #288]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004876:	4b43      	ldr	r3, [pc, #268]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	493f      	ldr	r1, [pc, #252]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d028      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004898:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a6:	4937      	ldr	r1, [pc, #220]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b6:	d106      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a31      	ldr	r2, [pc, #196]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]
 80048c4:	e011      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ce:	d10c      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	2101      	movs	r1, #1
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f8d8 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d028      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004904:	491f      	ldr	r1, [pc, #124]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004914:	d106      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4a1a      	ldr	r2, [pc, #104]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800491c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004920:	60d3      	str	r3, [r2, #12]
 8004922:	e011      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800492c:	d10c      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	2101      	movs	r1, #1
 8004934:	4618      	mov	r0, r3
 8004936:	f000 f8a9 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d02b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	4908      	ldr	r1, [pc, #32]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004972:	d109      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a02      	ldr	r2, [pc, #8]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800497e:	60d3      	str	r3, [r2, #12]
 8004980:	e014      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004990:	d10c      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3304      	adds	r3, #4
 8004996:	2101      	movs	r1, #1
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f877 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049b8:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c6:	4928      	ldr	r1, [pc, #160]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049d6:	d10d      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f854 	bl	8004a8c <RCCEx_PLLSAI1_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d014      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	74bb      	strb	r3, [r7, #18]
 80049f2:	e011      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3320      	adds	r3, #32
 8004a02:	2102      	movs	r1, #2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f931 	bl	8004c6c <RCCEx_PLLSAI2_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a24:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a32:	490d      	ldr	r1, [pc, #52]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a56:	4904      	ldr	r1, [pc, #16]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000

08004a6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a76:	f043 0304 	orr.w	r3, r3, #4
 8004a7a:	6013      	str	r3, [r2, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000

08004a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a9a:	4b73      	ldr	r3, [pc, #460]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d018      	beq.n	8004ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aa6:	4b70      	ldr	r3, [pc, #448]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f003 0203 	and.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d10d      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004abe:	4b6a      	ldr	r3, [pc, #424]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d044      	beq.n	8004b5c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
 8004ad6:	e041      	b.n	8004b5c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d00c      	beq.n	8004afa <RCCEx_PLLSAI1_Config+0x6e>
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d013      	beq.n	8004b0c <RCCEx_PLLSAI1_Config+0x80>
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d120      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae8:	4b5f      	ldr	r3, [pc, #380]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d11d      	bne.n	8004b30 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af8:	e01a      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004afa:	4b5b      	ldr	r3, [pc, #364]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d116      	bne.n	8004b34 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0a:	e013      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b0c:	4b56      	ldr	r3, [pc, #344]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10f      	bne.n	8004b38 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b18:	4b53      	ldr	r3, [pc, #332]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b28:	e006      	b.n	8004b38 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2e:	e004      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b30:	bf00      	nop
 8004b32:	e002      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b34:	bf00      	nop
 8004b36:	e000      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004b38:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10d      	bne.n	8004b5c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b40:	4b49      	ldr	r3, [pc, #292]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6819      	ldr	r1, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	430b      	orrs	r3, r1
 8004b56:	4944      	ldr	r1, [pc, #272]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d17d      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b62:	4b41      	ldr	r3, [pc, #260]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a40      	ldr	r2, [pc, #256]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6e:	f7fc fd9b 	bl	80016a8 <HAL_GetTick>
 8004b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b74:	e009      	b.n	8004b8a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b76:	f7fc fd97 	bl	80016a8 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d902      	bls.n	8004b8a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	73fb      	strb	r3, [r7, #15]
        break;
 8004b88:	e005      	b.n	8004b96 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b8a:	4b37      	ldr	r3, [pc, #220]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1ef      	bne.n	8004b76 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d160      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d111      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba2:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6892      	ldr	r2, [r2, #8]
 8004bb2:	0211      	lsls	r1, r2, #8
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68d2      	ldr	r2, [r2, #12]
 8004bb8:	0912      	lsrs	r2, r2, #4
 8004bba:	0452      	lsls	r2, r2, #17
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	492a      	ldr	r1, [pc, #168]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	610b      	str	r3, [r1, #16]
 8004bc4:	e027      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d112      	bne.n	8004bf2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bcc:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6892      	ldr	r2, [r2, #8]
 8004bdc:	0211      	lsls	r1, r2, #8
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6912      	ldr	r2, [r2, #16]
 8004be2:	0852      	lsrs	r2, r2, #1
 8004be4:	3a01      	subs	r2, #1
 8004be6:	0552      	lsls	r2, r2, #21
 8004be8:	430a      	orrs	r2, r1
 8004bea:	491f      	ldr	r1, [pc, #124]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	610b      	str	r3, [r1, #16]
 8004bf0:	e011      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6892      	ldr	r2, [r2, #8]
 8004c02:	0211      	lsls	r1, r2, #8
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6952      	ldr	r2, [r2, #20]
 8004c08:	0852      	lsrs	r2, r2, #1
 8004c0a:	3a01      	subs	r2, #1
 8004c0c:	0652      	lsls	r2, r2, #25
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	4915      	ldr	r1, [pc, #84]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c16:	4b14      	ldr	r3, [pc, #80]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a13      	ldr	r2, [pc, #76]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fc fd41 	bl	80016a8 <HAL_GetTick>
 8004c26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c28:	e009      	b.n	8004c3e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c2a:	f7fc fd3d 	bl	80016a8 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d902      	bls.n	8004c3e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	73fb      	strb	r3, [r7, #15]
          break;
 8004c3c:	e005      	b.n	8004c4a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0ef      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	4903      	ldr	r1, [pc, #12]	; (8004c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000

08004c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c7a:	4b68      	ldr	r3, [pc, #416]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d018      	beq.n	8004cb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c86:	4b65      	ldr	r3, [pc, #404]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0203 	and.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d10d      	bne.n	8004cb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
       ||
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
       ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d044      	beq.n	8004d3c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	e041      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d00c      	beq.n	8004cda <RCCEx_PLLSAI2_Config+0x6e>
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d013      	beq.n	8004cec <RCCEx_PLLSAI2_Config+0x80>
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d120      	bne.n	8004d0a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cc8:	4b54      	ldr	r3, [pc, #336]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11d      	bne.n	8004d10 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd8:	e01a      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cda:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d116      	bne.n	8004d14 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cea:	e013      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cec:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10f      	bne.n	8004d18 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cf8:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d08:	e006      	b.n	8004d18 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0e:	e004      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004d18:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10d      	bne.n	8004d3c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d20:	4b3e      	ldr	r3, [pc, #248]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	430b      	orrs	r3, r1
 8004d36:	4939      	ldr	r1, [pc, #228]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d167      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a35      	ldr	r2, [pc, #212]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4e:	f7fc fcab 	bl	80016a8 <HAL_GetTick>
 8004d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d54:	e009      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d56:	f7fc fca7 	bl	80016a8 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d902      	bls.n	8004d6a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	73fb      	strb	r3, [r7, #15]
        break;
 8004d68:	e005      	b.n	8004d76 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d6a:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ef      	bne.n	8004d56 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d14a      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d111      	bne.n	8004da6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d82:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6892      	ldr	r2, [r2, #8]
 8004d92:	0211      	lsls	r1, r2, #8
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68d2      	ldr	r2, [r2, #12]
 8004d98:	0912      	lsrs	r2, r2, #4
 8004d9a:	0452      	lsls	r2, r2, #17
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	491f      	ldr	r1, [pc, #124]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	614b      	str	r3, [r1, #20]
 8004da4:	e011      	b.n	8004dca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004da6:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6892      	ldr	r2, [r2, #8]
 8004db6:	0211      	lsls	r1, r2, #8
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6912      	ldr	r2, [r2, #16]
 8004dbc:	0852      	lsrs	r2, r2, #1
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	0652      	lsls	r2, r2, #25
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	4915      	ldr	r1, [pc, #84]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dca:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd6:	f7fc fc67 	bl	80016a8 <HAL_GetTick>
 8004dda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ddc:	e009      	b.n	8004df2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004dde:	f7fc fc63 	bl	80016a8 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d902      	bls.n	8004df2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	73fb      	strb	r3, [r7, #15]
          break;
 8004df0:	e005      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0ef      	beq.n	8004dde <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	4903      	ldr	r1, [pc, #12]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e07c      	b.n	8004f2c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fc f9ab 	bl	80011a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e72:	d902      	bls.n	8004e7a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e002      	b.n	8004e80 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e88:	d007      	beq.n	8004e9a <HAL_SPI_Init+0x7a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e92:	d002      	beq.n	8004e9a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eaa:	d903      	bls.n	8004eb4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8004eb2:	e002      	b.n	8004eba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	ea42 0103 	orr.w	r1, r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	f003 0204 	and.w	r2, r3, #4
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	ea42 0103 	orr.w	r1, r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e01d      	b.n	8004f82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f815 	bl	8004f8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 f986 	bl	8005284 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <HAL_TIM_Base_Start_IT+0x50>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x42>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d007      	beq.n	8004fe2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	00010007 	.word	0x00010007

08004ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d122      	bne.n	8005050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b02      	cmp	r3, #2
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0202 	mvn.w	r2, #2
 8005020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f905 	bl	8005246 <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f8f7 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f908 	bl	800525a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0204 	mvn.w	r2, #4
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8db 	bl	8005246 <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8cd 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8de 	bl	800525a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d122      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d11b      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0208 	mvn.w	r2, #8
 80050c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2204      	movs	r2, #4
 80050ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8b1 	bl	8005246 <HAL_TIM_IC_CaptureCallback>
 80050e4:	e005      	b.n	80050f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8a3 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8b4 	bl	800525a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b10      	cmp	r3, #16
 8005104:	d122      	bne.n	800514c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b10      	cmp	r3, #16
 8005112:	d11b      	bne.n	800514c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0210 	mvn.w	r2, #16
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2208      	movs	r2, #8
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f887 	bl	8005246 <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f879 	bl	8005232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f88a 	bl	800525a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d10e      	bne.n	8005178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d107      	bne.n	8005178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0201 	mvn.w	r2, #1
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb fe98 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005190:	2b80      	cmp	r3, #128	; 0x80
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f914 	bl	80053cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b2:	d10e      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d107      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f907 	bl	80053e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b40      	cmp	r3, #64	; 0x40
 80051de:	d10e      	bne.n	80051fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d107      	bne.n	80051fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f838 	bl	800526e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b20      	cmp	r3, #32
 800520a:	d10e      	bne.n	800522a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b20      	cmp	r3, #32
 8005218:	d107      	bne.n	800522a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0220 	mvn.w	r2, #32
 8005222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8c7 	bl	80053b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a40      	ldr	r2, [pc, #256]	; (8005398 <TIM_Base_SetConfig+0x114>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a2:	d00f      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3d      	ldr	r2, [pc, #244]	; (800539c <TIM_Base_SetConfig+0x118>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3c      	ldr	r2, [pc, #240]	; (80053a0 <TIM_Base_SetConfig+0x11c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3b      	ldr	r2, [pc, #236]	; (80053a4 <TIM_Base_SetConfig+0x120>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3a      	ldr	r2, [pc, #232]	; (80053a8 <TIM_Base_SetConfig+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d108      	bne.n	80052d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <TIM_Base_SetConfig+0x114>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01f      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e4:	d01b      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2c      	ldr	r2, [pc, #176]	; (800539c <TIM_Base_SetConfig+0x118>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d017      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2b      	ldr	r2, [pc, #172]	; (80053a0 <TIM_Base_SetConfig+0x11c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <TIM_Base_SetConfig+0x120>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00f      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a29      	ldr	r2, [pc, #164]	; (80053a8 <TIM_Base_SetConfig+0x124>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a28      	ldr	r2, [pc, #160]	; (80053ac <TIM_Base_SetConfig+0x128>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a27      	ldr	r2, [pc, #156]	; (80053b0 <TIM_Base_SetConfig+0x12c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <TIM_Base_SetConfig+0x130>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d108      	bne.n	8005330 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a10      	ldr	r2, [pc, #64]	; (8005398 <TIM_Base_SetConfig+0x114>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00f      	beq.n	800537c <TIM_Base_SetConfig+0xf8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <TIM_Base_SetConfig+0x124>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00b      	beq.n	800537c <TIM_Base_SetConfig+0xf8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a11      	ldr	r2, [pc, #68]	; (80053ac <TIM_Base_SetConfig+0x128>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d007      	beq.n	800537c <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a10      	ldr	r2, [pc, #64]	; (80053b0 <TIM_Base_SetConfig+0x12c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_Base_SetConfig+0xf8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a0f      	ldr	r2, [pc, #60]	; (80053b4 <TIM_Base_SetConfig+0x130>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d103      	bne.n	8005384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	615a      	str	r2, [r3, #20]
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800
 80053a4:	40000c00 	.word	0x40000c00
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e040      	b.n	8005488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fb ff0a 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8c0 	bl	80055b8 <UART_SetConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e022      	b.n	8005488 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fbfc 	bl	8005c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800545e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800546e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fc83 	bl	8005d8c <UART_CheckIdleState>
 8005486:	4603      	mov	r3, r0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	f040 8081 	bne.w	80055ac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_UART_Transmit+0x26>
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e079      	b.n	80055ae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Transmit+0x38>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e072      	b.n	80055ae <HAL_UART_Transmit+0x11e>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2221      	movs	r2, #33	; 0x21
 80054da:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054dc:	f7fc f8e4 	bl	80016a8 <HAL_GetTick>
 80054e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	88fa      	ldrh	r2, [r7, #6]
 80054ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d108      	bne.n	800550e <HAL_UART_Transmit+0x7e>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e003      	b.n	8005516 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005516:	e02d      	b.n	8005574 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fc77 	bl	8005e16 <UART_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e03d      	b.n	80055ae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	881a      	ldrh	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005544:	b292      	uxth	r2, r2
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3302      	adds	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e008      	b.n	8005562 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	b292      	uxth	r2, r2
 800555a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	3301      	adds	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1cb      	bne.n	8005518 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fc43 	bl	8005e16 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e009      	b.n	80055ae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80055bc:	b088      	sub	sp, #32
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4bac      	ldr	r3, [pc, #688]	; (80058a0 <UART_SetConfig+0x2e8>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	69f9      	ldr	r1, [r7, #28]
 80055f6:	430b      	orrs	r3, r1
 80055f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4aa2      	ldr	r2, [pc, #648]	; (80058a4 <UART_SetConfig+0x2ec>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	4313      	orrs	r3, r2
 8005628:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a99      	ldr	r2, [pc, #612]	; (80058a8 <UART_SetConfig+0x2f0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d121      	bne.n	800568c <UART_SetConfig+0xd4>
 8005648:	4b98      	ldr	r3, [pc, #608]	; (80058ac <UART_SetConfig+0x2f4>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b03      	cmp	r3, #3
 8005654:	d816      	bhi.n	8005684 <UART_SetConfig+0xcc>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0xa4>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	0800566d 	.word	0x0800566d
 8005660:	08005679 	.word	0x08005679
 8005664:	08005673 	.word	0x08005673
 8005668:	0800567f 	.word	0x0800567f
 800566c:	2301      	movs	r3, #1
 800566e:	76fb      	strb	r3, [r7, #27]
 8005670:	e0e8      	b.n	8005844 <UART_SetConfig+0x28c>
 8005672:	2302      	movs	r3, #2
 8005674:	76fb      	strb	r3, [r7, #27]
 8005676:	e0e5      	b.n	8005844 <UART_SetConfig+0x28c>
 8005678:	2304      	movs	r3, #4
 800567a:	76fb      	strb	r3, [r7, #27]
 800567c:	e0e2      	b.n	8005844 <UART_SetConfig+0x28c>
 800567e:	2308      	movs	r3, #8
 8005680:	76fb      	strb	r3, [r7, #27]
 8005682:	e0df      	b.n	8005844 <UART_SetConfig+0x28c>
 8005684:	2310      	movs	r3, #16
 8005686:	76fb      	strb	r3, [r7, #27]
 8005688:	bf00      	nop
 800568a:	e0db      	b.n	8005844 <UART_SetConfig+0x28c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a87      	ldr	r2, [pc, #540]	; (80058b0 <UART_SetConfig+0x2f8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d134      	bne.n	8005700 <UART_SetConfig+0x148>
 8005696:	4b85      	ldr	r3, [pc, #532]	; (80058ac <UART_SetConfig+0x2f4>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d829      	bhi.n	80056f8 <UART_SetConfig+0x140>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0xf4>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	080056f9 	.word	0x080056f9
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	080056ed 	.word	0x080056ed
 80056c0:	080056f9 	.word	0x080056f9
 80056c4:	080056f9 	.word	0x080056f9
 80056c8:	080056f9 	.word	0x080056f9
 80056cc:	080056e7 	.word	0x080056e7
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	080056f9 	.word	0x080056f9
 80056dc:	080056f3 	.word	0x080056f3
 80056e0:	2300      	movs	r3, #0
 80056e2:	76fb      	strb	r3, [r7, #27]
 80056e4:	e0ae      	b.n	8005844 <UART_SetConfig+0x28c>
 80056e6:	2302      	movs	r3, #2
 80056e8:	76fb      	strb	r3, [r7, #27]
 80056ea:	e0ab      	b.n	8005844 <UART_SetConfig+0x28c>
 80056ec:	2304      	movs	r3, #4
 80056ee:	76fb      	strb	r3, [r7, #27]
 80056f0:	e0a8      	b.n	8005844 <UART_SetConfig+0x28c>
 80056f2:	2308      	movs	r3, #8
 80056f4:	76fb      	strb	r3, [r7, #27]
 80056f6:	e0a5      	b.n	8005844 <UART_SetConfig+0x28c>
 80056f8:	2310      	movs	r3, #16
 80056fa:	76fb      	strb	r3, [r7, #27]
 80056fc:	bf00      	nop
 80056fe:	e0a1      	b.n	8005844 <UART_SetConfig+0x28c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a6b      	ldr	r2, [pc, #428]	; (80058b4 <UART_SetConfig+0x2fc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d120      	bne.n	800574c <UART_SetConfig+0x194>
 800570a:	4b68      	ldr	r3, [pc, #416]	; (80058ac <UART_SetConfig+0x2f4>)
 800570c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005710:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005714:	2b10      	cmp	r3, #16
 8005716:	d00f      	beq.n	8005738 <UART_SetConfig+0x180>
 8005718:	2b10      	cmp	r3, #16
 800571a:	d802      	bhi.n	8005722 <UART_SetConfig+0x16a>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <UART_SetConfig+0x174>
 8005720:	e010      	b.n	8005744 <UART_SetConfig+0x18c>
 8005722:	2b20      	cmp	r3, #32
 8005724:	d005      	beq.n	8005732 <UART_SetConfig+0x17a>
 8005726:	2b30      	cmp	r3, #48	; 0x30
 8005728:	d009      	beq.n	800573e <UART_SetConfig+0x186>
 800572a:	e00b      	b.n	8005744 <UART_SetConfig+0x18c>
 800572c:	2300      	movs	r3, #0
 800572e:	76fb      	strb	r3, [r7, #27]
 8005730:	e088      	b.n	8005844 <UART_SetConfig+0x28c>
 8005732:	2302      	movs	r3, #2
 8005734:	76fb      	strb	r3, [r7, #27]
 8005736:	e085      	b.n	8005844 <UART_SetConfig+0x28c>
 8005738:	2304      	movs	r3, #4
 800573a:	76fb      	strb	r3, [r7, #27]
 800573c:	e082      	b.n	8005844 <UART_SetConfig+0x28c>
 800573e:	2308      	movs	r3, #8
 8005740:	76fb      	strb	r3, [r7, #27]
 8005742:	e07f      	b.n	8005844 <UART_SetConfig+0x28c>
 8005744:	2310      	movs	r3, #16
 8005746:	76fb      	strb	r3, [r7, #27]
 8005748:	bf00      	nop
 800574a:	e07b      	b.n	8005844 <UART_SetConfig+0x28c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a59      	ldr	r2, [pc, #356]	; (80058b8 <UART_SetConfig+0x300>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d120      	bne.n	8005798 <UART_SetConfig+0x1e0>
 8005756:	4b55      	ldr	r3, [pc, #340]	; (80058ac <UART_SetConfig+0x2f4>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d00f      	beq.n	8005784 <UART_SetConfig+0x1cc>
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d802      	bhi.n	800576e <UART_SetConfig+0x1b6>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <UART_SetConfig+0x1c0>
 800576c:	e010      	b.n	8005790 <UART_SetConfig+0x1d8>
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d005      	beq.n	800577e <UART_SetConfig+0x1c6>
 8005772:	2bc0      	cmp	r3, #192	; 0xc0
 8005774:	d009      	beq.n	800578a <UART_SetConfig+0x1d2>
 8005776:	e00b      	b.n	8005790 <UART_SetConfig+0x1d8>
 8005778:	2300      	movs	r3, #0
 800577a:	76fb      	strb	r3, [r7, #27]
 800577c:	e062      	b.n	8005844 <UART_SetConfig+0x28c>
 800577e:	2302      	movs	r3, #2
 8005780:	76fb      	strb	r3, [r7, #27]
 8005782:	e05f      	b.n	8005844 <UART_SetConfig+0x28c>
 8005784:	2304      	movs	r3, #4
 8005786:	76fb      	strb	r3, [r7, #27]
 8005788:	e05c      	b.n	8005844 <UART_SetConfig+0x28c>
 800578a:	2308      	movs	r3, #8
 800578c:	76fb      	strb	r3, [r7, #27]
 800578e:	e059      	b.n	8005844 <UART_SetConfig+0x28c>
 8005790:	2310      	movs	r3, #16
 8005792:	76fb      	strb	r3, [r7, #27]
 8005794:	bf00      	nop
 8005796:	e055      	b.n	8005844 <UART_SetConfig+0x28c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a47      	ldr	r2, [pc, #284]	; (80058bc <UART_SetConfig+0x304>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d124      	bne.n	80057ec <UART_SetConfig+0x234>
 80057a2:	4b42      	ldr	r3, [pc, #264]	; (80058ac <UART_SetConfig+0x2f4>)
 80057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b0:	d012      	beq.n	80057d8 <UART_SetConfig+0x220>
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d802      	bhi.n	80057be <UART_SetConfig+0x206>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <UART_SetConfig+0x214>
 80057bc:	e012      	b.n	80057e4 <UART_SetConfig+0x22c>
 80057be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c2:	d006      	beq.n	80057d2 <UART_SetConfig+0x21a>
 80057c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c8:	d009      	beq.n	80057de <UART_SetConfig+0x226>
 80057ca:	e00b      	b.n	80057e4 <UART_SetConfig+0x22c>
 80057cc:	2300      	movs	r3, #0
 80057ce:	76fb      	strb	r3, [r7, #27]
 80057d0:	e038      	b.n	8005844 <UART_SetConfig+0x28c>
 80057d2:	2302      	movs	r3, #2
 80057d4:	76fb      	strb	r3, [r7, #27]
 80057d6:	e035      	b.n	8005844 <UART_SetConfig+0x28c>
 80057d8:	2304      	movs	r3, #4
 80057da:	76fb      	strb	r3, [r7, #27]
 80057dc:	e032      	b.n	8005844 <UART_SetConfig+0x28c>
 80057de:	2308      	movs	r3, #8
 80057e0:	76fb      	strb	r3, [r7, #27]
 80057e2:	e02f      	b.n	8005844 <UART_SetConfig+0x28c>
 80057e4:	2310      	movs	r3, #16
 80057e6:	76fb      	strb	r3, [r7, #27]
 80057e8:	bf00      	nop
 80057ea:	e02b      	b.n	8005844 <UART_SetConfig+0x28c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2c      	ldr	r2, [pc, #176]	; (80058a4 <UART_SetConfig+0x2ec>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d124      	bne.n	8005840 <UART_SetConfig+0x288>
 80057f6:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <UART_SetConfig+0x2f4>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d012      	beq.n	800582c <UART_SetConfig+0x274>
 8005806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580a:	d802      	bhi.n	8005812 <UART_SetConfig+0x25a>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d007      	beq.n	8005820 <UART_SetConfig+0x268>
 8005810:	e012      	b.n	8005838 <UART_SetConfig+0x280>
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005816:	d006      	beq.n	8005826 <UART_SetConfig+0x26e>
 8005818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800581c:	d009      	beq.n	8005832 <UART_SetConfig+0x27a>
 800581e:	e00b      	b.n	8005838 <UART_SetConfig+0x280>
 8005820:	2300      	movs	r3, #0
 8005822:	76fb      	strb	r3, [r7, #27]
 8005824:	e00e      	b.n	8005844 <UART_SetConfig+0x28c>
 8005826:	2302      	movs	r3, #2
 8005828:	76fb      	strb	r3, [r7, #27]
 800582a:	e00b      	b.n	8005844 <UART_SetConfig+0x28c>
 800582c:	2304      	movs	r3, #4
 800582e:	76fb      	strb	r3, [r7, #27]
 8005830:	e008      	b.n	8005844 <UART_SetConfig+0x28c>
 8005832:	2308      	movs	r3, #8
 8005834:	76fb      	strb	r3, [r7, #27]
 8005836:	e005      	b.n	8005844 <UART_SetConfig+0x28c>
 8005838:	2310      	movs	r3, #16
 800583a:	76fb      	strb	r3, [r7, #27]
 800583c:	bf00      	nop
 800583e:	e001      	b.n	8005844 <UART_SetConfig+0x28c>
 8005840:	2310      	movs	r3, #16
 8005842:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <UART_SetConfig+0x2ec>)
 800584a:	4293      	cmp	r3, r2
 800584c:	f040 80fa 	bne.w	8005a44 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005850:	7efb      	ldrb	r3, [r7, #27]
 8005852:	2b08      	cmp	r3, #8
 8005854:	d836      	bhi.n	80058c4 <UART_SetConfig+0x30c>
 8005856:	a201      	add	r2, pc, #4	; (adr r2, 800585c <UART_SetConfig+0x2a4>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	08005881 	.word	0x08005881
 8005860:	080058c5 	.word	0x080058c5
 8005864:	08005889 	.word	0x08005889
 8005868:	080058c5 	.word	0x080058c5
 800586c:	0800588f 	.word	0x0800588f
 8005870:	080058c5 	.word	0x080058c5
 8005874:	080058c5 	.word	0x080058c5
 8005878:	080058c5 	.word	0x080058c5
 800587c:	08005897 	.word	0x08005897
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005880:	f7fe fd50 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005884:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005886:	e020      	b.n	80058ca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <UART_SetConfig+0x308>)
 800588a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800588c:	e01d      	b.n	80058ca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800588e:	f7fe fcb3 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 8005892:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005894:	e019      	b.n	80058ca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800589c:	e015      	b.n	80058ca <UART_SetConfig+0x312>
 800589e:	bf00      	nop
 80058a0:	efff69f3 	.word	0xefff69f3
 80058a4:	40008000 	.word	0x40008000
 80058a8:	40013800 	.word	0x40013800
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40004400 	.word	0x40004400
 80058b4:	40004800 	.word	0x40004800
 80058b8:	40004c00 	.word	0x40004c00
 80058bc:	40005000 	.word	0x40005000
 80058c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	74fb      	strb	r3, [r7, #19]
        break;
 80058c8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 81ac 	beq.w	8005c2a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d305      	bcc.n	80058ee <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d902      	bls.n	80058f4 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	74fb      	strb	r3, [r7, #19]
 80058f2:	e19a      	b.n	8005c2a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80058f4:	7efb      	ldrb	r3, [r7, #27]
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	f200 8091 	bhi.w	8005a1e <UART_SetConfig+0x466>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x34c>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005929 	.word	0x08005929
 8005908:	08005a1f 	.word	0x08005a1f
 800590c:	08005975 	.word	0x08005975
 8005910:	08005a1f 	.word	0x08005a1f
 8005914:	080059a9 	.word	0x080059a9
 8005918:	08005a1f 	.word	0x08005a1f
 800591c:	08005a1f 	.word	0x08005a1f
 8005920:	08005a1f 	.word	0x08005a1f
 8005924:	080059f5 	.word	0x080059f5
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005928:	f7fe fcfc 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 800592c:	4603      	mov	r3, r0
 800592e:	4619      	mov	r1, r3
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	0214      	lsls	r4, r2, #8
 800593e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005942:	020b      	lsls	r3, r1, #8
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	0852      	lsrs	r2, r2, #1
 800594a:	4611      	mov	r1, r2
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	eb13 0b01 	adds.w	fp, r3, r1
 8005954:	eb44 0c02 	adc.w	ip, r4, r2
 8005958:	4658      	mov	r0, fp
 800595a:	4661      	mov	r1, ip
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f04f 0400 	mov.w	r4, #0
 8005964:	461a      	mov	r2, r3
 8005966:	4623      	mov	r3, r4
 8005968:	f7fa fc8a 	bl	8000280 <__aeabi_uldivmod>
 800596c:	4603      	mov	r3, r0
 800596e:	460c      	mov	r4, r1
 8005970:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005972:	e057      	b.n	8005a24 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	f04f 0400 	mov.w	r4, #0
 800597e:	49b1      	ldr	r1, [pc, #708]	; (8005c44 <UART_SetConfig+0x68c>)
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	eb13 0b01 	adds.w	fp, r3, r1
 8005988:	eb44 0c02 	adc.w	ip, r4, r2
 800598c:	4658      	mov	r0, fp
 800598e:	4661      	mov	r1, ip
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f04f 0400 	mov.w	r4, #0
 8005998:	461a      	mov	r2, r3
 800599a:	4623      	mov	r3, r4
 800599c:	f7fa fc70 	bl	8000280 <__aeabi_uldivmod>
 80059a0:	4603      	mov	r3, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80059a6:	e03d      	b.n	8005a24 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80059a8:	f7fe fc26 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80059ac:	4603      	mov	r3, r0
 80059ae:	4619      	mov	r1, r3
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	f04f 0400 	mov.w	r4, #0
 80059bc:	0214      	lsls	r4, r2, #8
 80059be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059c2:	020b      	lsls	r3, r1, #8
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6852      	ldr	r2, [r2, #4]
 80059c8:	0852      	lsrs	r2, r2, #1
 80059ca:	4611      	mov	r1, r2
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	eb13 0b01 	adds.w	fp, r3, r1
 80059d4:	eb44 0c02 	adc.w	ip, r4, r2
 80059d8:	4658      	mov	r0, fp
 80059da:	4661      	mov	r1, ip
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f04f 0400 	mov.w	r4, #0
 80059e4:	461a      	mov	r2, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	f7fa fc4a 	bl	8000280 <__aeabi_uldivmod>
 80059ec:	4603      	mov	r3, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80059f2:	e017      	b.n	8005a24 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	f04f 0400 	mov.w	r4, #0
 80059fe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005a02:	f144 0100 	adc.w	r1, r4, #0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f04f 0400 	mov.w	r4, #0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4623      	mov	r3, r4
 8005a12:	f7fa fc35 	bl	8000280 <__aeabi_uldivmod>
 8005a16:	4603      	mov	r3, r0
 8005a18:	460c      	mov	r4, r1
 8005a1a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005a1c:	e002      	b.n	8005a24 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	74fb      	strb	r3, [r7, #19]
            break;
 8005a22:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a2a:	d308      	bcc.n	8005a3e <UART_SetConfig+0x486>
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a32:	d204      	bcs.n	8005a3e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e0f5      	b.n	8005c2a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	74fb      	strb	r3, [r7, #19]
 8005a42:	e0f2      	b.n	8005c2a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a4c:	d17f      	bne.n	8005b4e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8005a4e:	7efb      	ldrb	r3, [r7, #27]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d85c      	bhi.n	8005b0e <UART_SetConfig+0x556>
 8005a54:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <UART_SetConfig+0x4a4>)
 8005a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5a:	bf00      	nop
 8005a5c:	08005a81 	.word	0x08005a81
 8005a60:	08005a9f 	.word	0x08005a9f
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005b0f 	.word	0x08005b0f
 8005a6c:	08005ad9 	.word	0x08005ad9
 8005a70:	08005b0f 	.word	0x08005b0f
 8005a74:	08005b0f 	.word	0x08005b0f
 8005a78:	08005b0f 	.word	0x08005b0f
 8005a7c:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a80:	f7fe fc50 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005a84:	4603      	mov	r3, r0
 8005a86:	005a      	lsls	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	085b      	lsrs	r3, r3, #1
 8005a8e:	441a      	add	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a9c:	e03a      	b.n	8005b14 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005a9e:	f7fe fc57 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	005a      	lsls	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	441a      	add	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005aba:	e02b      	b.n	8005b14 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005ac6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6852      	ldr	r2, [r2, #4]
 8005ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ad6:	e01d      	b.n	8005b14 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ad8:	f7fe fb8e 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 8005adc:	4603      	mov	r3, r0
 8005ade:	005a      	lsls	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	441a      	add	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005af4:	e00e      	b.n	8005b14 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b0c:	e002      	b.n	8005b14 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	74fb      	strb	r3, [r7, #19]
        break;
 8005b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d916      	bls.n	8005b48 <UART_SetConfig+0x590>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d212      	bcs.n	8005b48 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f023 030f 	bic.w	r3, r3, #15
 8005b2a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	897b      	ldrh	r3, [r7, #10]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	897a      	ldrh	r2, [r7, #10]
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	e070      	b.n	8005c2a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	74fb      	strb	r3, [r7, #19]
 8005b4c:	e06d      	b.n	8005c2a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8005b4e:	7efb      	ldrb	r3, [r7, #27]
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d859      	bhi.n	8005c08 <UART_SetConfig+0x650>
 8005b54:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0x5a4>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b81 	.word	0x08005b81
 8005b60:	08005b9d 	.word	0x08005b9d
 8005b64:	08005bb9 	.word	0x08005bb9
 8005b68:	08005c09 	.word	0x08005c09
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005c09 	.word	0x08005c09
 8005b74:	08005c09 	.word	0x08005c09
 8005b78:	08005c09 	.word	0x08005c09
 8005b7c:	08005bf1 	.word	0x08005bf1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b80:	f7fe fbd0 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	085b      	lsrs	r3, r3, #1
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005b9a:	e038      	b.n	8005c0e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b9c:	f7fe fbd8 	bl	8004350 <HAL_RCC_GetPCLK2Freq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	441a      	add	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bb6:	e02a      	b.n	8005c0e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005bc2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6852      	ldr	r2, [r2, #4]
 8005bca:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bd2:	e01c      	b.n	8005c0e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bd4:	f7fe fb10 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	441a      	add	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005bee:	e00e      	b.n	8005c0e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c06:	e002      	b.n	8005c0e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	74fb      	strb	r3, [r7, #19]
        break;
 8005c0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b0f      	cmp	r3, #15
 8005c12:	d908      	bls.n	8005c26 <UART_SetConfig+0x66e>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1a:	d204      	bcs.n	8005c26 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	60da      	str	r2, [r3, #12]
 8005c24:	e001      	b.n	8005c2a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005c42:	bf00      	nop
 8005c44:	f4240000 	.word	0xf4240000

08005c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00a      	beq.n	8005c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00a      	beq.n	8005cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d46:	d10a      	bne.n	8005d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005d9a:	f7fb fc85 	bl	80016a8 <HAL_GetTick>
 8005d9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d10e      	bne.n	8005dcc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f82a 	bl	8005e16 <UART_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e020      	b.n	8005e0e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d10e      	bne.n	8005df8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f814 	bl	8005e16 <UART_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e00a      	b.n	8005e0e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	4613      	mov	r3, r2
 8005e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e26:	e02a      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d026      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e30:	f7fb fc3a 	bl	80016a8 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d302      	bcc.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11b      	bne.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e54:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e00f      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d0c5      	beq.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	f107 001c 	add.w	r0, r7, #28
 8005eb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d122      	bne.n	8005f04 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa1d 	bl	8006338 <USB_CoreReset>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	e01a      	b.n	8005f3a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa11 	bl	8006338 <USB_CoreReset>
 8005f16:	4603      	mov	r3, r0
 8005f18:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f2c:	e005      	b.n	8005f3a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f46:	b004      	add	sp, #16
 8005f48:	4770      	bx	lr

08005f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d106      	bne.n	8005f98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]
 8005f96:	e00b      	b.n	8005fb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	e001      	b.n	8005fb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e003      	b.n	8005fb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fb0:	2032      	movs	r0, #50	; 0x32
 8005fb2:	f7fb fb85 	bl	80016c0 <HAL_Delay>

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e009      	b.n	8005ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3340      	adds	r3, #64	; 0x40
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2b0e      	cmp	r3, #14
 8005ff8:	d9f2      	bls.n	8005fe0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d112      	bne.n	8006026 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e005      	b.n	8006032 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006038:	461a      	mov	r2, r3
 800603a:	2300      	movs	r3, #0
 800603c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	4619      	mov	r1, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	461a      	mov	r2, r3
 800604e:	680b      	ldr	r3, [r1, #0]
 8006050:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006052:	2103      	movs	r1, #3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f93d 	bl	80062d4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800605a:	2110      	movs	r1, #16
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8f1 	bl	8006244 <USB_FlushTxFifo>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f90f 	bl	8006290 <USB_FlushRxFifo>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	461a      	mov	r2, r3
 8006084:	2300      	movs	r3, #0
 8006086:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	461a      	mov	r2, r3
 8006090:	2300      	movs	r3, #0
 8006092:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	461a      	mov	r2, r3
 800609c:	2300      	movs	r3, #0
 800609e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	e043      	b.n	800612e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060bc:	d118      	bne.n	80060f0 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	461a      	mov	r2, r3
 80060d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e013      	b.n	8006102 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	461a      	mov	r2, r3
 80060e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	e008      	b.n	8006102 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610e:	461a      	mov	r2, r3
 8006110:	2300      	movs	r3, #0
 8006112:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	461a      	mov	r2, r3
 8006122:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3301      	adds	r3, #1
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	429a      	cmp	r2, r3
 8006134:	d3b7      	bcc.n	80060a6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	e043      	b.n	80061c4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800614e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006152:	d118      	bne.n	8006186 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	461a      	mov	r2, r3
 8006168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e013      	b.n	8006198 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	461a      	mov	r2, r3
 800617e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e008      	b.n	8006198 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	461a      	mov	r2, r3
 8006194:	2300      	movs	r3, #0
 8006196:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	461a      	mov	r2, r3
 80061a6:	2300      	movs	r3, #0
 80061a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	461a      	mov	r2, r3
 80061b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3301      	adds	r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3b7      	bcc.n	800613c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	f043 0210 	orr.w	r2, r3, #16
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <USB_DevInit+0x280>)
 8006200:	4313      	orrs	r3, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	f043 0208 	orr.w	r2, r3, #8
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d107      	bne.n	800622e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006226:	f043 0304 	orr.w	r3, r3, #4
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800623a:	b004      	add	sp, #16
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	803c3800 	.word	0x803c3800

08006244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	019b      	lsls	r3, r3, #6
 8006256:	f043 0220 	orr.w	r2, r3, #32
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <USB_FlushTxFifo+0x48>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d901      	bls.n	8006270 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e006      	b.n	800627e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	2b20      	cmp	r3, #32
 800627a:	d0f0      	beq.n	800625e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	00030d40 	.word	0x00030d40

08006290 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2210      	movs	r2, #16
 80062a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3301      	adds	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <USB_FlushRxFifo+0x40>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d901      	bls.n	80062b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e006      	b.n	80062c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b10      	cmp	r3, #16
 80062be:	d0f0      	beq.n	80062a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	00030d40 	.word	0x00030d40

080062d4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	68f9      	ldr	r1, [r7, #12]
 80062f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062f4:	4313      	orrs	r3, r2
 80062f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006320:	f043 0302 	orr.w	r3, r3, #2
 8006324:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006326:	2003      	movs	r0, #3
 8006328:	f7fb f9ca 	bl	80016c0 <HAL_Delay>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3301      	adds	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a13      	ldr	r2, [pc, #76]	; (800639c <USB_CoreReset+0x64>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e01b      	b.n	800638e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	daf2      	bge.n	8006344 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f043 0201 	orr.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a09      	ldr	r2, [pc, #36]	; (800639c <USB_CoreReset+0x64>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e006      	b.n	800638e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b01      	cmp	r3, #1
 800638a:	d0f0      	beq.n	800636e <USB_CoreReset+0x36>

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	00030d40 	.word	0x00030d40

080063a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80063ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063b2:	2b84      	cmp	r3, #132	; 0x84
 80063b4:	d005      	beq.n	80063c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80063b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	3303      	adds	r3, #3
 80063c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80063c2:	68fb      	ldr	r3, [r7, #12]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063d4:	f000 fad2 	bl	800697c <vTaskStartScheduler>
  
  return osOK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	bd80      	pop	{r7, pc}

080063de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e0:	b089      	sub	sp, #36	; 0x24
 80063e2:	af04      	add	r7, sp, #16
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d020      	beq.n	8006432 <osThreadCreate+0x54>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01c      	beq.n	8006432 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685c      	ldr	r4, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681d      	ldr	r5, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691e      	ldr	r6, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff ffc8 	bl	80063a0 <makeFreeRtosPriority>
 8006410:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800641a:	9202      	str	r2, [sp, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	9100      	str	r1, [sp, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	4632      	mov	r2, r6
 8006424:	4629      	mov	r1, r5
 8006426:	4620      	mov	r0, r4
 8006428:	f000 f8ed 	bl	8006606 <xTaskCreateStatic>
 800642c:	4603      	mov	r3, r0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e01c      	b.n	800646c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685c      	ldr	r4, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800643e:	b29e      	uxth	r6, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff ffaa 	bl	80063a0 <makeFreeRtosPriority>
 800644c:	4602      	mov	r2, r0
 800644e:	f107 030c 	add.w	r3, r7, #12
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	9200      	str	r2, [sp, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	4632      	mov	r2, r6
 800645a:	4629      	mov	r1, r5
 800645c:	4620      	mov	r0, r4
 800645e:	f000 f92b 	bl	80066b8 <xTaskCreate>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d001      	beq.n	800646c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	e000      	b.n	800646e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006476 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <osDelay+0x16>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	e000      	b.n	800648e <osDelay+0x18>
 800648c:	2301      	movs	r3, #1
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fa40 	bl	8006914 <vTaskDelay>
  
  return osOK;
 8006494:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f103 0208 	add.w	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295
 80064b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f103 0208 	add.w	r2, r3, #8
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f103 0208 	add.w	r2, r3, #8
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064de:	b480      	push	{r7}
 80064e0:	b083      	sub	sp, #12
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	601a      	str	r2, [r3, #0]
}
 8006534:	bf00      	nop
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d103      	bne.n	8006560 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e00c      	b.n	800657a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3308      	adds	r3, #8
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e002      	b.n	800656e <vListInsert+0x2e>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	d2f6      	bcs.n	8006568 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
}
 80065a6:	bf00      	nop
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6892      	ldr	r2, [r2, #8]
 80065c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6852      	ldr	r2, [r2, #4]
 80065d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d103      	bne.n	80065e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	1e5a      	subs	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006606:	b580      	push	{r7, lr}
 8006608:	b08e      	sub	sp, #56	; 0x38
 800660a:	af04      	add	r7, sp, #16
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	623b      	str	r3, [r7, #32]
 800662c:	e7fe      	b.n	800662c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <xTaskCreateStatic+0x42>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e7fe      	b.n	8006646 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006648:	2354      	movs	r3, #84	; 0x54
 800664a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b54      	cmp	r3, #84	; 0x54
 8006650:	d009      	beq.n	8006666 <xTaskCreateStatic+0x60>
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e7fe      	b.n	8006664 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01e      	beq.n	80066aa <xTaskCreateStatic+0xa4>
 800666c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01b      	beq.n	80066aa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800667a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	2202      	movs	r2, #2
 8006680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006684:	2300      	movs	r3, #0
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	9302      	str	r3, [sp, #8]
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f850 	bl	8006742 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066a4:	f000 f8cc 	bl	8006840 <prvAddNewTaskToReadyList>
 80066a8:	e001      	b.n	80066ae <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066ae:	697b      	ldr	r3, [r7, #20]
	}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3728      	adds	r7, #40	; 0x28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af04      	add	r7, sp, #16
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	4613      	mov	r3, r2
 80066c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 feb1 	bl	8007434 <pvPortMalloc>
 80066d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00e      	beq.n	80066f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066da:	2054      	movs	r0, #84	; 0x54
 80066dc:	f000 feaa 	bl	8007434 <pvPortMalloc>
 80066e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
 80066ee:	e005      	b.n	80066fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066f0:	6978      	ldr	r0, [r7, #20]
 80066f2:	f000 ff61 	bl	80075b8 <vPortFree>
 80066f6:	e001      	b.n	80066fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d017      	beq.n	8006732 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	2300      	movs	r3, #0
 800670e:	9303      	str	r3, [sp, #12]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	9302      	str	r3, [sp, #8]
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68b9      	ldr	r1, [r7, #8]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 f80e 	bl	8006742 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006726:	69f8      	ldr	r0, [r7, #28]
 8006728:	f000 f88a 	bl	8006840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800672c:	2301      	movs	r3, #1
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	e002      	b.n	8006738 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006732:	f04f 33ff 	mov.w	r3, #4294967295
 8006736:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006738:	69bb      	ldr	r3, [r7, #24]
	}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b088      	sub	sp, #32
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800675a:	3b01      	subs	r3, #1
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	f023 0307 	bic.w	r3, r3, #7
 8006768:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <prvInitialiseNewTask+0x46>
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e7fe      	b.n	8006786 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006788:	2300      	movs	r3, #0
 800678a:	61fb      	str	r3, [r7, #28]
 800678c:	e012      	b.n	80067b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	7819      	ldrb	r1, [r3, #0]
 8006796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	3334      	adds	r3, #52	; 0x34
 800679e:	460a      	mov	r2, r1
 80067a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d006      	beq.n	80067bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3301      	adds	r3, #1
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	d9e9      	bls.n	800678e <prvInitialiseNewTask+0x4c>
 80067ba:	e000      	b.n	80067be <prvInitialiseNewTask+0x7c>
		{
			break;
 80067bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c8:	2b06      	cmp	r3, #6
 80067ca:	d901      	bls.n	80067d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067cc:	2306      	movs	r3, #6
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	2200      	movs	r2, #0
 80067e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	3304      	adds	r3, #4
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fe79 	bl	80064de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	3318      	adds	r3, #24
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fe74 	bl	80064de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	f1c3 0207 	rsb	r2, r3, #7
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800680a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	2200      	movs	r2, #0
 8006810:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	69b8      	ldr	r0, [r7, #24]
 8006820:	f000 fc08 	bl	8007034 <pxPortInitialiseStack>
 8006824:	4602      	mov	r2, r0
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006836:	bf00      	nop
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006848:	f000 fd18 	bl	800727c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800684c:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	4a29      	ldr	r2, [pc, #164]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 8006854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006856:	4b29      	ldr	r3, [pc, #164]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800685e:	4a27      	ldr	r2, [pc, #156]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006864:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <prvAddNewTaskToReadyList+0xb8>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d110      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800686c:	f000 fabc 	bl	8006de8 <prvInitialiseTaskLists>
 8006870:	e00d      	b.n	800688e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006872:	4b23      	ldr	r3, [pc, #140]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800687a:	4b20      	ldr	r3, [pc, #128]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d802      	bhi.n	800688e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006888:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006896:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	2201      	movs	r2, #1
 800689e:	409a      	lsls	r2, r3
 80068a0:	4b19      	ldr	r3, [pc, #100]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4a15      	ldr	r2, [pc, #84]	; (800690c <prvAddNewTaskToReadyList+0xcc>)
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3304      	adds	r3, #4
 80068be:	4619      	mov	r1, r3
 80068c0:	4610      	mov	r0, r2
 80068c2:	f7ff fe19 	bl	80064f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068c6:	f000 fd07 	bl	80072d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068d2:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <prvAddNewTaskToReadyList+0xbc>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	429a      	cmp	r2, r3
 80068de:	d207      	bcs.n	80068f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <prvAddNewTaskToReadyList+0xd0>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000410 	.word	0x20000410
 80068fc:	20000310 	.word	0x20000310
 8006900:	2000041c 	.word	0x2000041c
 8006904:	2000042c 	.word	0x2000042c
 8006908:	20000418 	.word	0x20000418
 800690c:	20000314 	.word	0x20000314
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d016      	beq.n	8006954 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <vTaskDelay+0x60>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <vTaskDelay+0x2e>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60bb      	str	r3, [r7, #8]
 8006940:	e7fe      	b.n	8006940 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006942:	f000 f879 	bl	8006a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006946:	2100      	movs	r1, #0
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb0d 	bl	8006f68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800694e:	f000 f881 	bl	8006a54 <xTaskResumeAll>
 8006952:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d107      	bne.n	800696a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800695a:	4b07      	ldr	r3, [pc, #28]	; (8006978 <vTaskDelay+0x64>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000438 	.word	0x20000438
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08a      	sub	sp, #40	; 0x28
 8006980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800698a:	463a      	mov	r2, r7
 800698c:	1d39      	adds	r1, r7, #4
 800698e:	f107 0308 	add.w	r3, r7, #8
 8006992:	4618      	mov	r0, r3
 8006994:	f7f9 fdf4 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	9202      	str	r2, [sp, #8]
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2300      	movs	r3, #0
 80069a8:	460a      	mov	r2, r1
 80069aa:	491d      	ldr	r1, [pc, #116]	; (8006a20 <vTaskStartScheduler+0xa4>)
 80069ac:	481d      	ldr	r0, [pc, #116]	; (8006a24 <vTaskStartScheduler+0xa8>)
 80069ae:	f7ff fe2a 	bl	8006606 <xTaskCreateStatic>
 80069b2:	4602      	mov	r2, r0
 80069b4:	4b1c      	ldr	r3, [pc, #112]	; (8006a28 <vTaskStartScheduler+0xac>)
 80069b6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069b8:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <vTaskStartScheduler+0xac>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069c0:	2301      	movs	r3, #1
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e001      	b.n	80069ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d115      	bne.n	80069fc <vTaskStartScheduler+0x80>
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069e2:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <vTaskStartScheduler+0xb0>)
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069ea:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <vTaskStartScheduler+0xb4>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80069f0:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <vTaskStartScheduler+0xb8>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069f6:	f000 fba3 	bl	8007140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069fa:	e00d      	b.n	8006a18 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d109      	bne.n	8006a18 <vTaskStartScheduler+0x9c>
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	e7fe      	b.n	8006a16 <vTaskStartScheduler+0x9a>
}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	080080b0 	.word	0x080080b0
 8006a24:	08006db9 	.word	0x08006db9
 8006a28:	20000434 	.word	0x20000434
 8006a2c:	20000430 	.word	0x20000430
 8006a30:	2000041c 	.word	0x2000041c
 8006a34:	20000414 	.word	0x20000414

08006a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a3c:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <vTaskSuspendAll+0x18>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3301      	adds	r3, #1
 8006a42:	4a03      	ldr	r2, [pc, #12]	; (8006a50 <vTaskSuspendAll+0x18>)
 8006a44:	6013      	str	r3, [r2, #0]
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20000438 	.word	0x20000438

08006a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a62:	4b41      	ldr	r3, [pc, #260]	; (8006b68 <xTaskResumeAll+0x114>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <xTaskResumeAll+0x2a>
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	e7fe      	b.n	8006a7c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a7e:	f000 fbfd 	bl	800727c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a82:	4b39      	ldr	r3, [pc, #228]	; (8006b68 <xTaskResumeAll+0x114>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	4a37      	ldr	r2, [pc, #220]	; (8006b68 <xTaskResumeAll+0x114>)
 8006a8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8c:	4b36      	ldr	r3, [pc, #216]	; (8006b68 <xTaskResumeAll+0x114>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d161      	bne.n	8006b58 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a94:	4b35      	ldr	r3, [pc, #212]	; (8006b6c <xTaskResumeAll+0x118>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d05d      	beq.n	8006b58 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a9c:	e02e      	b.n	8006afc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006a9e:	4b34      	ldr	r3, [pc, #208]	; (8006b70 <xTaskResumeAll+0x11c>)
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3318      	adds	r3, #24
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff fd81 	bl	80065b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff fd7c 	bl	80065b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	2201      	movs	r2, #1
 8006ac0:	409a      	lsls	r2, r3
 8006ac2:	4b2c      	ldr	r3, [pc, #176]	; (8006b74 <xTaskResumeAll+0x120>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	4a2a      	ldr	r2, [pc, #168]	; (8006b74 <xTaskResumeAll+0x120>)
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4a27      	ldr	r2, [pc, #156]	; (8006b78 <xTaskResumeAll+0x124>)
 8006ada:	441a      	add	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	4610      	mov	r0, r2
 8006ae4:	f7ff fd08 	bl	80064f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <xTaskResumeAll+0x128>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006af6:	4b22      	ldr	r3, [pc, #136]	; (8006b80 <xTaskResumeAll+0x12c>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006afc:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <xTaskResumeAll+0x11c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1cc      	bne.n	8006a9e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b0a:	f000 fa07 	bl	8006f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <xTaskResumeAll+0x130>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d010      	beq.n	8006b3c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b1a:	f000 f837 	bl	8006b8c <xTaskIncrementTick>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <xTaskResumeAll+0x12c>)
 8006b26:	2201      	movs	r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f1      	bne.n	8006b1a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006b36:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <xTaskResumeAll+0x130>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b3c:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <xTaskResumeAll+0x12c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b48:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <xTaskResumeAll+0x134>)
 8006b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b58:	f000 fbbe 	bl	80072d8 <vPortExitCritical>

	return xAlreadyYielded;
 8006b5c:	68bb      	ldr	r3, [r7, #8]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000438 	.word	0x20000438
 8006b6c:	20000410 	.word	0x20000410
 8006b70:	200003d0 	.word	0x200003d0
 8006b74:	20000418 	.word	0x20000418
 8006b78:	20000314 	.word	0x20000314
 8006b7c:	20000310 	.word	0x20000310
 8006b80:	20000424 	.word	0x20000424
 8006b84:	20000420 	.word	0x20000420
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b96:	4b50      	ldr	r3, [pc, #320]	; (8006cd8 <xTaskIncrementTick+0x14c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f040 808c 	bne.w	8006cb8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ba0:	4b4e      	ldr	r3, [pc, #312]	; (8006cdc <xTaskIncrementTick+0x150>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ba8:	4a4c      	ldr	r2, [pc, #304]	; (8006cdc <xTaskIncrementTick+0x150>)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11f      	bne.n	8006bf4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bb4:	4b4a      	ldr	r3, [pc, #296]	; (8006ce0 <xTaskIncrementTick+0x154>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <xTaskIncrementTick+0x46>
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	e7fe      	b.n	8006bd0 <xTaskIncrementTick+0x44>
 8006bd2:	4b43      	ldr	r3, [pc, #268]	; (8006ce0 <xTaskIncrementTick+0x154>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	4b42      	ldr	r3, [pc, #264]	; (8006ce4 <xTaskIncrementTick+0x158>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a40      	ldr	r2, [pc, #256]	; (8006ce0 <xTaskIncrementTick+0x154>)
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	4a40      	ldr	r2, [pc, #256]	; (8006ce4 <xTaskIncrementTick+0x158>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	4b40      	ldr	r3, [pc, #256]	; (8006ce8 <xTaskIncrementTick+0x15c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	3301      	adds	r3, #1
 8006bec:	4a3e      	ldr	r2, [pc, #248]	; (8006ce8 <xTaskIncrementTick+0x15c>)
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	f000 f994 	bl	8006f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bf4:	4b3d      	ldr	r3, [pc, #244]	; (8006cec <xTaskIncrementTick+0x160>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d34d      	bcc.n	8006c9a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bfe:	4b38      	ldr	r3, [pc, #224]	; (8006ce0 <xTaskIncrementTick+0x154>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <xTaskIncrementTick+0x80>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <xTaskIncrementTick+0x82>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d004      	beq.n	8006c1c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c12:	4b36      	ldr	r3, [pc, #216]	; (8006cec <xTaskIncrementTick+0x160>)
 8006c14:	f04f 32ff 	mov.w	r2, #4294967295
 8006c18:	601a      	str	r2, [r3, #0]
					break;
 8006c1a:	e03e      	b.n	8006c9a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c1c:	4b30      	ldr	r3, [pc, #192]	; (8006ce0 <xTaskIncrementTick+0x154>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d203      	bcs.n	8006c3c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c34:	4a2d      	ldr	r2, [pc, #180]	; (8006cec <xTaskIncrementTick+0x160>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6013      	str	r3, [r2, #0]
						break;
 8006c3a:	e02e      	b.n	8006c9a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fcb6 	bl	80065b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	3318      	adds	r3, #24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff fcad 	bl	80065b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	4b23      	ldr	r3, [pc, #140]	; (8006cf0 <xTaskIncrementTick+0x164>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <xTaskIncrementTick+0x164>)
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a1f      	ldr	r2, [pc, #124]	; (8006cf4 <xTaskIncrementTick+0x168>)
 8006c78:	441a      	add	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7ff fc39 	bl	80064f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	; (8006cf8 <xTaskIncrementTick+0x16c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d3b4      	bcc.n	8006bfe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c98:	e7b1      	b.n	8006bfe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c9a:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <xTaskIncrementTick+0x16c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	4914      	ldr	r1, [pc, #80]	; (8006cf4 <xTaskIncrementTick+0x168>)
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d907      	bls.n	8006cc2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	e004      	b.n	8006cc2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006cb8:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <xTaskIncrementTick+0x170>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	4a0f      	ldr	r2, [pc, #60]	; (8006cfc <xTaskIncrementTick+0x170>)
 8006cc0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <xTaskIncrementTick+0x174>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006cce:	697b      	ldr	r3, [r7, #20]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000438 	.word	0x20000438
 8006cdc:	20000414 	.word	0x20000414
 8006ce0:	200003c8 	.word	0x200003c8
 8006ce4:	200003cc 	.word	0x200003cc
 8006ce8:	20000428 	.word	0x20000428
 8006cec:	20000430 	.word	0x20000430
 8006cf0:	20000418 	.word	0x20000418
 8006cf4:	20000314 	.word	0x20000314
 8006cf8:	20000310 	.word	0x20000310
 8006cfc:	20000420 	.word	0x20000420
 8006d00:	20000424 	.word	0x20000424

08006d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d0a:	4b26      	ldr	r3, [pc, #152]	; (8006da4 <vTaskSwitchContext+0xa0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d12:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <vTaskSwitchContext+0xa4>)
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d18:	e03e      	b.n	8006d98 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <vTaskSwitchContext+0xa4>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d20:	4b22      	ldr	r3, [pc, #136]	; (8006dac <vTaskSwitchContext+0xa8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	fab3 f383 	clz	r3, r3
 8006d2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d2e:	7afb      	ldrb	r3, [r7, #11]
 8006d30:	f1c3 031f 	rsb	r3, r3, #31
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	491e      	ldr	r1, [pc, #120]	; (8006db0 <vTaskSwitchContext+0xac>)
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d109      	bne.n	8006d5e <vTaskSwitchContext+0x5a>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	e7fe      	b.n	8006d5c <vTaskSwitchContext+0x58>
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4a11      	ldr	r2, [pc, #68]	; (8006db0 <vTaskSwitchContext+0xac>)
 8006d6a:	4413      	add	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	3308      	adds	r3, #8
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d104      	bne.n	8006d8e <vTaskSwitchContext+0x8a>
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4a07      	ldr	r2, [pc, #28]	; (8006db4 <vTaskSwitchContext+0xb0>)
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	20000438 	.word	0x20000438
 8006da8:	20000424 	.word	0x20000424
 8006dac:	20000418 	.word	0x20000418
 8006db0:	20000314 	.word	0x20000314
 8006db4:	20000310 	.word	0x20000310

08006db8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006dc0:	f000 f852 	bl	8006e68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <prvIdleTask+0x28>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d9f9      	bls.n	8006dc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <prvIdleTask+0x2c>)
 8006dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ddc:	e7f0      	b.n	8006dc0 <prvIdleTask+0x8>
 8006dde:	bf00      	nop
 8006de0:	20000314 	.word	0x20000314
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006dee:	2300      	movs	r3, #0
 8006df0:	607b      	str	r3, [r7, #4]
 8006df2:	e00c      	b.n	8006e0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4a12      	ldr	r2, [pc, #72]	; (8006e48 <prvInitialiseTaskLists+0x60>)
 8006e00:	4413      	add	r3, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff fb4b 	bl	800649e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	607b      	str	r3, [r7, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b06      	cmp	r3, #6
 8006e12:	d9ef      	bls.n	8006df4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e14:	480d      	ldr	r0, [pc, #52]	; (8006e4c <prvInitialiseTaskLists+0x64>)
 8006e16:	f7ff fb42 	bl	800649e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e1a:	480d      	ldr	r0, [pc, #52]	; (8006e50 <prvInitialiseTaskLists+0x68>)
 8006e1c:	f7ff fb3f 	bl	800649e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e20:	480c      	ldr	r0, [pc, #48]	; (8006e54 <prvInitialiseTaskLists+0x6c>)
 8006e22:	f7ff fb3c 	bl	800649e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e26:	480c      	ldr	r0, [pc, #48]	; (8006e58 <prvInitialiseTaskLists+0x70>)
 8006e28:	f7ff fb39 	bl	800649e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e2c:	480b      	ldr	r0, [pc, #44]	; (8006e5c <prvInitialiseTaskLists+0x74>)
 8006e2e:	f7ff fb36 	bl	800649e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <prvInitialiseTaskLists+0x78>)
 8006e34:	4a05      	ldr	r2, [pc, #20]	; (8006e4c <prvInitialiseTaskLists+0x64>)
 8006e36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <prvInitialiseTaskLists+0x7c>)
 8006e3a:	4a05      	ldr	r2, [pc, #20]	; (8006e50 <prvInitialiseTaskLists+0x68>)
 8006e3c:	601a      	str	r2, [r3, #0]
}
 8006e3e:	bf00      	nop
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000314 	.word	0x20000314
 8006e4c:	200003a0 	.word	0x200003a0
 8006e50:	200003b4 	.word	0x200003b4
 8006e54:	200003d0 	.word	0x200003d0
 8006e58:	200003e4 	.word	0x200003e4
 8006e5c:	200003fc 	.word	0x200003fc
 8006e60:	200003c8 	.word	0x200003c8
 8006e64:	200003cc 	.word	0x200003cc

08006e68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e6e:	e019      	b.n	8006ea4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e70:	f000 fa04 	bl	800727c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <prvCheckTasksWaitingTermination+0x4c>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fb96 	bl	80065b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvCheckTasksWaitingTermination+0x50>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	4a0a      	ldr	r2, [pc, #40]	; (8006eb8 <prvCheckTasksWaitingTermination+0x50>)
 8006e8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <prvCheckTasksWaitingTermination+0x54>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <prvCheckTasksWaitingTermination+0x54>)
 8006e98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e9a:	f000 fa1d 	bl	80072d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f80e 	bl	8006ec0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <prvCheckTasksWaitingTermination+0x54>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e1      	bne.n	8006e70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	200003e4 	.word	0x200003e4
 8006eb8:	20000410 	.word	0x20000410
 8006ebc:	200003f8 	.word	0x200003f8

08006ec0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d108      	bne.n	8006ee4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fb6e 	bl	80075b8 <vPortFree>
				vPortFree( pxTCB );
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fb6b 	bl	80075b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ee2:	e017      	b.n	8006f14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d103      	bne.n	8006ef6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fb62 	bl	80075b8 <vPortFree>
	}
 8006ef4:	e00e      	b.n	8006f14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d009      	beq.n	8006f14 <prvDeleteTCB+0x54>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e7fe      	b.n	8006f12 <prvDeleteTCB+0x52>
	}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f22:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <prvResetNextTaskUnblockTime+0x44>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <prvResetNextTaskUnblockTime+0x14>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <prvResetNextTaskUnblockTime+0x16>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <prvResetNextTaskUnblockTime+0x48>)
 8006f38:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f3e:	e008      	b.n	8006f52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <prvResetNextTaskUnblockTime+0x44>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <prvResetNextTaskUnblockTime+0x48>)
 8006f50:	6013      	str	r3, [r2, #0]
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	200003c8 	.word	0x200003c8
 8006f64:	20000430 	.word	0x20000430

08006f68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f72:	4b29      	ldr	r3, [pc, #164]	; (8007018 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f78:	4b28      	ldr	r3, [pc, #160]	; (800701c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff fb17 	bl	80065b2 <uxListRemove>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2201      	movs	r2, #1
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	43da      	mvns	r2, r3
 8006f98:	4b21      	ldr	r3, [pc, #132]	; (8007020 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	4a20      	ldr	r2, [pc, #128]	; (8007020 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006fa0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa8:	d10a      	bne.n	8006fc0 <prvAddCurrentTaskToDelayedList+0x58>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	481a      	ldr	r0, [pc, #104]	; (8007024 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006fba:	f7ff fa9d 	bl	80064f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fbe:	e026      	b.n	800700e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fc8:	4b14      	ldr	r3, [pc, #80]	; (800701c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d209      	bcs.n	8006fec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd8:	4b13      	ldr	r3, [pc, #76]	; (8007028 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	f7ff faab 	bl	8006540 <vListInsert>
}
 8006fea:	e010      	b.n	800700e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fec:	4b0f      	ldr	r3, [pc, #60]	; (800702c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f7ff faa1 	bl	8006540 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ffe:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	429a      	cmp	r2, r3
 8007006:	d202      	bcs.n	800700e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007008:	4a09      	ldr	r2, [pc, #36]	; (8007030 <prvAddCurrentTaskToDelayedList+0xc8>)
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6013      	str	r3, [r2, #0]
}
 800700e:	bf00      	nop
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000414 	.word	0x20000414
 800701c:	20000310 	.word	0x20000310
 8007020:	20000418 	.word	0x20000418
 8007024:	200003fc 	.word	0x200003fc
 8007028:	200003cc 	.word	0x200003cc
 800702c:	200003c8 	.word	0x200003c8
 8007030:	20000430 	.word	0x20000430

08007034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3b04      	subs	r3, #4
 8007044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800704c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3b04      	subs	r3, #4
 8007052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f023 0201 	bic.w	r2, r3, #1
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3b04      	subs	r3, #4
 8007062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007064:	4a0c      	ldr	r2, [pc, #48]	; (8007098 <pxPortInitialiseStack+0x64>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3b14      	subs	r3, #20
 800706e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b04      	subs	r3, #4
 800707a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f06f 0202 	mvn.w	r2, #2
 8007082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3b20      	subs	r3, #32
 8007088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800708a:	68fb      	ldr	r3, [r7, #12]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	0800709d 	.word	0x0800709d

0800709c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <prvTaskExitError+0x50>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d009      	beq.n	80070c4 <prvTaskExitError+0x28>
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e7fe      	b.n	80070c2 <prvTaskExitError+0x26>
 80070c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070d6:	bf00      	nop
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0fc      	beq.n	80070d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	2000000c 	.word	0x2000000c

080070f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <pxCurrentTCBConst2>)
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	f380 8809 	msr	PSP, r0
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8811 	msr	BASEPRI, r0
 800710a:	4770      	bx	lr
 800710c:	f3af 8000 	nop.w

08007110 <pxCurrentTCBConst2>:
 8007110:	20000310 	.word	0x20000310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop

08007118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007118:	4808      	ldr	r0, [pc, #32]	; (800713c <prvPortStartFirstTask+0x24>)
 800711a:	6800      	ldr	r0, [r0, #0]
 800711c:	6800      	ldr	r0, [r0, #0]
 800711e:	f380 8808 	msr	MSP, r0
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f380 8814 	msr	CONTROL, r0
 800712a:	b662      	cpsie	i
 800712c:	b661      	cpsie	f
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	df00      	svc	0
 8007138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800713a:	bf00      	nop
 800713c:	e000ed08 	.word	0xe000ed08

08007140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007146:	4b44      	ldr	r3, [pc, #272]	; (8007258 <xPortStartScheduler+0x118>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a44      	ldr	r2, [pc, #272]	; (800725c <xPortStartScheduler+0x11c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d109      	bne.n	8007164 <xPortStartScheduler+0x24>
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	e7fe      	b.n	8007162 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007164:	4b3c      	ldr	r3, [pc, #240]	; (8007258 <xPortStartScheduler+0x118>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3d      	ldr	r2, [pc, #244]	; (8007260 <xPortStartScheduler+0x120>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d109      	bne.n	8007182 <xPortStartScheduler+0x42>
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e7fe      	b.n	8007180 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007182:	4b38      	ldr	r3, [pc, #224]	; (8007264 <xPortStartScheduler+0x124>)
 8007184:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	22ff      	movs	r2, #255	; 0xff
 8007192:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	4b30      	ldr	r3, [pc, #192]	; (8007268 <xPortStartScheduler+0x128>)
 80071a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071aa:	4b30      	ldr	r3, [pc, #192]	; (800726c <xPortStartScheduler+0x12c>)
 80071ac:	2207      	movs	r2, #7
 80071ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071b0:	e009      	b.n	80071c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80071b2:	4b2e      	ldr	r3, [pc, #184]	; (800726c <xPortStartScheduler+0x12c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	4a2c      	ldr	r2, [pc, #176]	; (800726c <xPortStartScheduler+0x12c>)
 80071ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b80      	cmp	r3, #128	; 0x80
 80071d0:	d0ef      	beq.n	80071b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071d2:	4b26      	ldr	r3, [pc, #152]	; (800726c <xPortStartScheduler+0x12c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f1c3 0307 	rsb	r3, r3, #7
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d009      	beq.n	80071f2 <xPortStartScheduler+0xb2>
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	60bb      	str	r3, [r7, #8]
 80071f0:	e7fe      	b.n	80071f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071f2:	4b1e      	ldr	r3, [pc, #120]	; (800726c <xPortStartScheduler+0x12c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	4a1c      	ldr	r2, [pc, #112]	; (800726c <xPortStartScheduler+0x12c>)
 80071fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071fc:	4b1b      	ldr	r3, [pc, #108]	; (800726c <xPortStartScheduler+0x12c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <xPortStartScheduler+0x12c>)
 8007206:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	b2da      	uxtb	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007210:	4b17      	ldr	r3, [pc, #92]	; (8007270 <xPortStartScheduler+0x130>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a16      	ldr	r2, [pc, #88]	; (8007270 <xPortStartScheduler+0x130>)
 8007216:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800721a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800721c:	4b14      	ldr	r3, [pc, #80]	; (8007270 <xPortStartScheduler+0x130>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a13      	ldr	r2, [pc, #76]	; (8007270 <xPortStartScheduler+0x130>)
 8007222:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007226:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007228:	f000 f8d6 	bl	80073d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800722c:	4b11      	ldr	r3, [pc, #68]	; (8007274 <xPortStartScheduler+0x134>)
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007232:	f000 f8f5 	bl	8007420 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007236:	4b10      	ldr	r3, [pc, #64]	; (8007278 <xPortStartScheduler+0x138>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <xPortStartScheduler+0x138>)
 800723c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007240:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007242:	f7ff ff69 	bl	8007118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007246:	f7ff fd5d 	bl	8006d04 <vTaskSwitchContext>
	prvTaskExitError();
 800724a:	f7ff ff27 	bl	800709c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	e000ed00 	.word	0xe000ed00
 800725c:	410fc271 	.word	0x410fc271
 8007260:	410fc270 	.word	0x410fc270
 8007264:	e000e400 	.word	0xe000e400
 8007268:	2000043c 	.word	0x2000043c
 800726c:	20000440 	.word	0x20000440
 8007270:	e000ed20 	.word	0xe000ed20
 8007274:	2000000c 	.word	0x2000000c
 8007278:	e000ef34 	.word	0xe000ef34

0800727c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007294:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <vPortEnterCritical+0x54>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	4a0d      	ldr	r2, [pc, #52]	; (80072d0 <vPortEnterCritical+0x54>)
 800729c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <vPortEnterCritical+0x54>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d10e      	bne.n	80072c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072a6:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <vPortEnterCritical+0x58>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <vPortEnterCritical+0x48>
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	603b      	str	r3, [r7, #0]
 80072c2:	e7fe      	b.n	80072c2 <vPortEnterCritical+0x46>
	}
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	2000000c 	.word	0x2000000c
 80072d4:	e000ed04 	.word	0xe000ed04

080072d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072de:	4b11      	ldr	r3, [pc, #68]	; (8007324 <vPortExitCritical+0x4c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d109      	bne.n	80072fa <vPortExitCritical+0x22>
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	e7fe      	b.n	80072f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80072fa:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <vPortExitCritical+0x4c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3b01      	subs	r3, #1
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <vPortExitCritical+0x4c>)
 8007302:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <vPortExitCritical+0x4c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <vPortExitCritical+0x3e>
 800730c:	2300      	movs	r3, #0
 800730e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	2000000c 	.word	0x2000000c
	...

08007330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007330:	f3ef 8009 	mrs	r0, PSP
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	4b15      	ldr	r3, [pc, #84]	; (8007390 <pxCurrentTCBConst>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	f01e 0f10 	tst.w	lr, #16
 8007340:	bf08      	it	eq
 8007342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	6010      	str	r0, [r2, #0]
 800734c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007354:	f380 8811 	msr	BASEPRI, r0
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f7ff fcd0 	bl	8006d04 <vTaskSwitchContext>
 8007364:	f04f 0000 	mov.w	r0, #0
 8007368:	f380 8811 	msr	BASEPRI, r0
 800736c:	bc09      	pop	{r0, r3}
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	6808      	ldr	r0, [r1, #0]
 8007372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007376:	f01e 0f10 	tst.w	lr, #16
 800737a:	bf08      	it	eq
 800737c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007380:	f380 8809 	msr	PSP, r0
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w

08007390 <pxCurrentTCBConst>:
 8007390:	20000310 	.word	0x20000310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073b0:	f7ff fbec 	bl	8006b8c <xTaskIncrementTick>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <SysTick_Handler+0x3c>)
 80073bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	2300      	movs	r3, #0
 80073c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <vPortSetupTimerInterrupt+0x34>)
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <vPortSetupTimerInterrupt+0x38>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <vPortSetupTimerInterrupt+0x3c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a0a      	ldr	r2, [pc, #40]	; (8007418 <vPortSetupTimerInterrupt+0x40>)
 80073ee:	fba2 2303 	umull	r2, r3, r2, r3
 80073f2:	099b      	lsrs	r3, r3, #6
 80073f4:	4a09      	ldr	r2, [pc, #36]	; (800741c <vPortSetupTimerInterrupt+0x44>)
 80073f6:	3b01      	subs	r3, #1
 80073f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073fa:	4b04      	ldr	r3, [pc, #16]	; (800740c <vPortSetupTimerInterrupt+0x34>)
 80073fc:	2207      	movs	r2, #7
 80073fe:	601a      	str	r2, [r3, #0]
}
 8007400:	bf00      	nop
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	e000e010 	.word	0xe000e010
 8007410:	e000e018 	.word	0xe000e018
 8007414:	20000000 	.word	0x20000000
 8007418:	10624dd3 	.word	0x10624dd3
 800741c:	e000e014 	.word	0xe000e014

08007420 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007420:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007430 <vPortEnableVFP+0x10>
 8007424:	6801      	ldr	r1, [r0, #0]
 8007426:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800742a:	6001      	str	r1, [r0, #0]
 800742c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800742e:	bf00      	nop
 8007430:	e000ed88 	.word	0xe000ed88

08007434 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800743c:	2300      	movs	r3, #0
 800743e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007440:	f7ff fafa 	bl	8006a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007444:	4b57      	ldr	r3, [pc, #348]	; (80075a4 <pvPortMalloc+0x170>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800744c:	f000 f90c 	bl	8007668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007450:	4b55      	ldr	r3, [pc, #340]	; (80075a8 <pvPortMalloc+0x174>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4013      	ands	r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	f040 808c 	bne.w	8007576 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01c      	beq.n	800749e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007464:	2208      	movs	r2, #8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b00      	cmp	r3, #0
 8007474:	d013      	beq.n	800749e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f023 0307 	bic.w	r3, r3, #7
 800747c:	3308      	adds	r3, #8
 800747e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <pvPortMalloc+0x6a>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e7fe      	b.n	800749c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d068      	beq.n	8007576 <pvPortMalloc+0x142>
 80074a4:	4b41      	ldr	r3, [pc, #260]	; (80075ac <pvPortMalloc+0x178>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d863      	bhi.n	8007576 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074ae:	4b40      	ldr	r3, [pc, #256]	; (80075b0 <pvPortMalloc+0x17c>)
 80074b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074b2:	4b3f      	ldr	r3, [pc, #252]	; (80075b0 <pvPortMalloc+0x17c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074b8:	e004      	b.n	80074c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d903      	bls.n	80074d6 <pvPortMalloc+0xa2>
 80074ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f1      	bne.n	80074ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074d6:	4b33      	ldr	r3, [pc, #204]	; (80075a4 <pvPortMalloc+0x170>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074dc:	429a      	cmp	r2, r3
 80074de:	d04a      	beq.n	8007576 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2208      	movs	r2, #8
 80074e6:	4413      	add	r3, r2
 80074e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	1ad2      	subs	r2, r2, r3
 80074fa:	2308      	movs	r3, #8
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	429a      	cmp	r2, r3
 8007500:	d91e      	bls.n	8007540 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <pvPortMalloc+0xf4>
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	e7fe      	b.n	8007526 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800753a:	69b8      	ldr	r0, [r7, #24]
 800753c:	f000 f8f6 	bl	800772c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007540:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <pvPortMalloc+0x178>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	4a18      	ldr	r2, [pc, #96]	; (80075ac <pvPortMalloc+0x178>)
 800754c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800754e:	4b17      	ldr	r3, [pc, #92]	; (80075ac <pvPortMalloc+0x178>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <pvPortMalloc+0x180>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d203      	bcs.n	8007562 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <pvPortMalloc+0x178>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <pvPortMalloc+0x180>)
 8007560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <pvPortMalloc+0x174>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	431a      	orrs	r2, r3
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007576:	f7ff fa6d 	bl	8006a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <pvPortMalloc+0x164>
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e7fe      	b.n	8007596 <pvPortMalloc+0x162>
	return pvReturn;
 8007598:	69fb      	ldr	r3, [r7, #28]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3728      	adds	r7, #40	; 0x28
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20001004 	.word	0x20001004
 80075a8:	20001010 	.word	0x20001010
 80075ac:	20001008 	.word	0x20001008
 80075b0:	20000ffc 	.word	0x20000ffc
 80075b4:	2000100c 	.word	0x2000100c

080075b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d046      	beq.n	8007658 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075ca:	2308      	movs	r3, #8
 80075cc:	425b      	negs	r3, r3
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	4b20      	ldr	r3, [pc, #128]	; (8007660 <vPortFree+0xa8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <vPortFree+0x42>
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	f383 8811 	msr	BASEPRI, r3
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	e7fe      	b.n	80075f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <vPortFree+0x5e>
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60bb      	str	r3, [r7, #8]
 8007614:	e7fe      	b.n	8007614 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	4b11      	ldr	r3, [pc, #68]	; (8007660 <vPortFree+0xa8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4013      	ands	r3, r2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d019      	beq.n	8007658 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d115      	bne.n	8007658 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <vPortFree+0xa8>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	43db      	mvns	r3, r3
 8007636:	401a      	ands	r2, r3
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800763c:	f7ff f9fc 	bl	8006a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	4b07      	ldr	r3, [pc, #28]	; (8007664 <vPortFree+0xac>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4413      	add	r3, r2
 800764a:	4a06      	ldr	r2, [pc, #24]	; (8007664 <vPortFree+0xac>)
 800764c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800764e:	6938      	ldr	r0, [r7, #16]
 8007650:	f000 f86c 	bl	800772c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007654:	f7ff f9fe 	bl	8006a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007658:	bf00      	nop
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20001010 	.word	0x20001010
 8007664:	20001008 	.word	0x20001008

08007668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800766e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007674:	4b27      	ldr	r3, [pc, #156]	; (8007714 <prvHeapInit+0xac>)
 8007676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00c      	beq.n	800769c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3307      	adds	r3, #7
 8007686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	4a1f      	ldr	r2, [pc, #124]	; (8007714 <prvHeapInit+0xac>)
 8007698:	4413      	add	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076a0:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <prvHeapInit+0xb0>)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076a6:	4b1c      	ldr	r3, [pc, #112]	; (8007718 <prvHeapInit+0xb0>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4413      	add	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076b4:	2208      	movs	r2, #8
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	1a9b      	subs	r3, r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0307 	bic.w	r3, r3, #7
 80076c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a15      	ldr	r2, [pc, #84]	; (800771c <prvHeapInit+0xb4>)
 80076c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076ca:	4b14      	ldr	r3, [pc, #80]	; (800771c <prvHeapInit+0xb4>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <prvHeapInit+0xb4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	1ad2      	subs	r2, r2, r3
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076e8:	4b0c      	ldr	r3, [pc, #48]	; (800771c <prvHeapInit+0xb4>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	4a0a      	ldr	r2, [pc, #40]	; (8007720 <prvHeapInit+0xb8>)
 80076f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	4a09      	ldr	r2, [pc, #36]	; (8007724 <prvHeapInit+0xbc>)
 80076fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007700:	4b09      	ldr	r3, [pc, #36]	; (8007728 <prvHeapInit+0xc0>)
 8007702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007706:	601a      	str	r2, [r3, #0]
}
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20000444 	.word	0x20000444
 8007718:	20000ffc 	.word	0x20000ffc
 800771c:	20001004 	.word	0x20001004
 8007720:	2000100c 	.word	0x2000100c
 8007724:	20001008 	.word	0x20001008
 8007728:	20001010 	.word	0x20001010

0800772c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007734:	4b28      	ldr	r3, [pc, #160]	; (80077d8 <prvInsertBlockIntoFreeList+0xac>)
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	e002      	b.n	8007740 <prvInsertBlockIntoFreeList+0x14>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	429a      	cmp	r2, r3
 8007748:	d8f7      	bhi.n	800773a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	429a      	cmp	r2, r3
 800775a:	d108      	bne.n	800776e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	441a      	add	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d118      	bne.n	80077b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	4b15      	ldr	r3, [pc, #84]	; (80077dc <prvInsertBlockIntoFreeList+0xb0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d00d      	beq.n	80077aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685a      	ldr	r2, [r3, #4]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	441a      	add	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	e008      	b.n	80077bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077aa:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <prvInsertBlockIntoFreeList+0xb0>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	e003      	b.n	80077bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d002      	beq.n	80077ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ca:	bf00      	nop
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20000ffc 	.word	0x20000ffc
 80077dc:	20001004 	.word	0x20001004

080077e0 <__errno>:
 80077e0:	4b01      	ldr	r3, [pc, #4]	; (80077e8 <__errno+0x8>)
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000010 	.word	0x20000010

080077ec <__libc_init_array>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	4e0d      	ldr	r6, [pc, #52]	; (8007824 <__libc_init_array+0x38>)
 80077f0:	4c0d      	ldr	r4, [pc, #52]	; (8007828 <__libc_init_array+0x3c>)
 80077f2:	1ba4      	subs	r4, r4, r6
 80077f4:	10a4      	asrs	r4, r4, #2
 80077f6:	2500      	movs	r5, #0
 80077f8:	42a5      	cmp	r5, r4
 80077fa:	d109      	bne.n	8007810 <__libc_init_array+0x24>
 80077fc:	4e0b      	ldr	r6, [pc, #44]	; (800782c <__libc_init_array+0x40>)
 80077fe:	4c0c      	ldr	r4, [pc, #48]	; (8007830 <__libc_init_array+0x44>)
 8007800:	f000 fc28 	bl	8008054 <_init>
 8007804:	1ba4      	subs	r4, r4, r6
 8007806:	10a4      	asrs	r4, r4, #2
 8007808:	2500      	movs	r5, #0
 800780a:	42a5      	cmp	r5, r4
 800780c:	d105      	bne.n	800781a <__libc_init_array+0x2e>
 800780e:	bd70      	pop	{r4, r5, r6, pc}
 8007810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007814:	4798      	blx	r3
 8007816:	3501      	adds	r5, #1
 8007818:	e7ee      	b.n	80077f8 <__libc_init_array+0xc>
 800781a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800781e:	4798      	blx	r3
 8007820:	3501      	adds	r5, #1
 8007822:	e7f2      	b.n	800780a <__libc_init_array+0x1e>
 8007824:	0800813c 	.word	0x0800813c
 8007828:	0800813c 	.word	0x0800813c
 800782c:	0800813c 	.word	0x0800813c
 8007830:	08008140 	.word	0x08008140

08007834 <memcpy>:
 8007834:	b510      	push	{r4, lr}
 8007836:	1e43      	subs	r3, r0, #1
 8007838:	440a      	add	r2, r1
 800783a:	4291      	cmp	r1, r2
 800783c:	d100      	bne.n	8007840 <memcpy+0xc>
 800783e:	bd10      	pop	{r4, pc}
 8007840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007848:	e7f7      	b.n	800783a <memcpy+0x6>

0800784a <memset>:
 800784a:	4402      	add	r2, r0
 800784c:	4603      	mov	r3, r0
 800784e:	4293      	cmp	r3, r2
 8007850:	d100      	bne.n	8007854 <memset+0xa>
 8007852:	4770      	bx	lr
 8007854:	f803 1b01 	strb.w	r1, [r3], #1
 8007858:	e7f9      	b.n	800784e <memset+0x4>
	...

0800785c <siprintf>:
 800785c:	b40e      	push	{r1, r2, r3}
 800785e:	b500      	push	{lr}
 8007860:	b09c      	sub	sp, #112	; 0x70
 8007862:	ab1d      	add	r3, sp, #116	; 0x74
 8007864:	9002      	str	r0, [sp, #8]
 8007866:	9006      	str	r0, [sp, #24]
 8007868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800786c:	4809      	ldr	r0, [pc, #36]	; (8007894 <siprintf+0x38>)
 800786e:	9107      	str	r1, [sp, #28]
 8007870:	9104      	str	r1, [sp, #16]
 8007872:	4909      	ldr	r1, [pc, #36]	; (8007898 <siprintf+0x3c>)
 8007874:	f853 2b04 	ldr.w	r2, [r3], #4
 8007878:	9105      	str	r1, [sp, #20]
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	a902      	add	r1, sp, #8
 8007880:	f000 f866 	bl	8007950 <_svfiprintf_r>
 8007884:	9b02      	ldr	r3, [sp, #8]
 8007886:	2200      	movs	r2, #0
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	b01c      	add	sp, #112	; 0x70
 800788c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007890:	b003      	add	sp, #12
 8007892:	4770      	bx	lr
 8007894:	20000010 	.word	0x20000010
 8007898:	ffff0208 	.word	0xffff0208

0800789c <__ssputs_r>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	688e      	ldr	r6, [r1, #8]
 80078a2:	429e      	cmp	r6, r3
 80078a4:	4682      	mov	sl, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	4690      	mov	r8, r2
 80078aa:	4699      	mov	r9, r3
 80078ac:	d837      	bhi.n	800791e <__ssputs_r+0x82>
 80078ae:	898a      	ldrh	r2, [r1, #12]
 80078b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078b4:	d031      	beq.n	800791a <__ssputs_r+0x7e>
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	6909      	ldr	r1, [r1, #16]
 80078ba:	1a6f      	subs	r7, r5, r1
 80078bc:	6965      	ldr	r5, [r4, #20]
 80078be:	2302      	movs	r3, #2
 80078c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80078c8:	f109 0301 	add.w	r3, r9, #1
 80078cc:	443b      	add	r3, r7
 80078ce:	429d      	cmp	r5, r3
 80078d0:	bf38      	it	cc
 80078d2:	461d      	movcc	r5, r3
 80078d4:	0553      	lsls	r3, r2, #21
 80078d6:	d530      	bpl.n	800793a <__ssputs_r+0x9e>
 80078d8:	4629      	mov	r1, r5
 80078da:	f000 fb21 	bl	8007f20 <_malloc_r>
 80078de:	4606      	mov	r6, r0
 80078e0:	b950      	cbnz	r0, 80078f8 <__ssputs_r+0x5c>
 80078e2:	230c      	movs	r3, #12
 80078e4:	f8ca 3000 	str.w	r3, [sl]
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f8:	463a      	mov	r2, r7
 80078fa:	6921      	ldr	r1, [r4, #16]
 80078fc:	f7ff ff9a 	bl	8007834 <memcpy>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	6126      	str	r6, [r4, #16]
 800790e:	6165      	str	r5, [r4, #20]
 8007910:	443e      	add	r6, r7
 8007912:	1bed      	subs	r5, r5, r7
 8007914:	6026      	str	r6, [r4, #0]
 8007916:	60a5      	str	r5, [r4, #8]
 8007918:	464e      	mov	r6, r9
 800791a:	454e      	cmp	r6, r9
 800791c:	d900      	bls.n	8007920 <__ssputs_r+0x84>
 800791e:	464e      	mov	r6, r9
 8007920:	4632      	mov	r2, r6
 8007922:	4641      	mov	r1, r8
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	f000 fa93 	bl	8007e50 <memmove>
 800792a:	68a3      	ldr	r3, [r4, #8]
 800792c:	1b9b      	subs	r3, r3, r6
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	441e      	add	r6, r3
 8007934:	6026      	str	r6, [r4, #0]
 8007936:	2000      	movs	r0, #0
 8007938:	e7dc      	b.n	80078f4 <__ssputs_r+0x58>
 800793a:	462a      	mov	r2, r5
 800793c:	f000 fb4a 	bl	8007fd4 <_realloc_r>
 8007940:	4606      	mov	r6, r0
 8007942:	2800      	cmp	r0, #0
 8007944:	d1e2      	bne.n	800790c <__ssputs_r+0x70>
 8007946:	6921      	ldr	r1, [r4, #16]
 8007948:	4650      	mov	r0, sl
 800794a:	f000 fa9b 	bl	8007e84 <_free_r>
 800794e:	e7c8      	b.n	80078e2 <__ssputs_r+0x46>

08007950 <_svfiprintf_r>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	461d      	mov	r5, r3
 8007956:	898b      	ldrh	r3, [r1, #12]
 8007958:	061f      	lsls	r7, r3, #24
 800795a:	b09d      	sub	sp, #116	; 0x74
 800795c:	4680      	mov	r8, r0
 800795e:	460c      	mov	r4, r1
 8007960:	4616      	mov	r6, r2
 8007962:	d50f      	bpl.n	8007984 <_svfiprintf_r+0x34>
 8007964:	690b      	ldr	r3, [r1, #16]
 8007966:	b96b      	cbnz	r3, 8007984 <_svfiprintf_r+0x34>
 8007968:	2140      	movs	r1, #64	; 0x40
 800796a:	f000 fad9 	bl	8007f20 <_malloc_r>
 800796e:	6020      	str	r0, [r4, #0]
 8007970:	6120      	str	r0, [r4, #16]
 8007972:	b928      	cbnz	r0, 8007980 <_svfiprintf_r+0x30>
 8007974:	230c      	movs	r3, #12
 8007976:	f8c8 3000 	str.w	r3, [r8]
 800797a:	f04f 30ff 	mov.w	r0, #4294967295
 800797e:	e0c8      	b.n	8007b12 <_svfiprintf_r+0x1c2>
 8007980:	2340      	movs	r3, #64	; 0x40
 8007982:	6163      	str	r3, [r4, #20]
 8007984:	2300      	movs	r3, #0
 8007986:	9309      	str	r3, [sp, #36]	; 0x24
 8007988:	2320      	movs	r3, #32
 800798a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800798e:	2330      	movs	r3, #48	; 0x30
 8007990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007994:	9503      	str	r5, [sp, #12]
 8007996:	f04f 0b01 	mov.w	fp, #1
 800799a:	4637      	mov	r7, r6
 800799c:	463d      	mov	r5, r7
 800799e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079a2:	b10b      	cbz	r3, 80079a8 <_svfiprintf_r+0x58>
 80079a4:	2b25      	cmp	r3, #37	; 0x25
 80079a6:	d13e      	bne.n	8007a26 <_svfiprintf_r+0xd6>
 80079a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80079ac:	d00b      	beq.n	80079c6 <_svfiprintf_r+0x76>
 80079ae:	4653      	mov	r3, sl
 80079b0:	4632      	mov	r2, r6
 80079b2:	4621      	mov	r1, r4
 80079b4:	4640      	mov	r0, r8
 80079b6:	f7ff ff71 	bl	800789c <__ssputs_r>
 80079ba:	3001      	adds	r0, #1
 80079bc:	f000 80a4 	beq.w	8007b08 <_svfiprintf_r+0x1b8>
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	4453      	add	r3, sl
 80079c4:	9309      	str	r3, [sp, #36]	; 0x24
 80079c6:	783b      	ldrb	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 809d 	beq.w	8007b08 <_svfiprintf_r+0x1b8>
 80079ce:	2300      	movs	r3, #0
 80079d0:	f04f 32ff 	mov.w	r2, #4294967295
 80079d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079e0:	931a      	str	r3, [sp, #104]	; 0x68
 80079e2:	462f      	mov	r7, r5
 80079e4:	2205      	movs	r2, #5
 80079e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079ea:	4850      	ldr	r0, [pc, #320]	; (8007b2c <_svfiprintf_r+0x1dc>)
 80079ec:	f7f8 fbf8 	bl	80001e0 <memchr>
 80079f0:	9b04      	ldr	r3, [sp, #16]
 80079f2:	b9d0      	cbnz	r0, 8007a2a <_svfiprintf_r+0xda>
 80079f4:	06d9      	lsls	r1, r3, #27
 80079f6:	bf44      	itt	mi
 80079f8:	2220      	movmi	r2, #32
 80079fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079fe:	071a      	lsls	r2, r3, #28
 8007a00:	bf44      	itt	mi
 8007a02:	222b      	movmi	r2, #43	; 0x2b
 8007a04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a08:	782a      	ldrb	r2, [r5, #0]
 8007a0a:	2a2a      	cmp	r2, #42	; 0x2a
 8007a0c:	d015      	beq.n	8007a3a <_svfiprintf_r+0xea>
 8007a0e:	9a07      	ldr	r2, [sp, #28]
 8007a10:	462f      	mov	r7, r5
 8007a12:	2000      	movs	r0, #0
 8007a14:	250a      	movs	r5, #10
 8007a16:	4639      	mov	r1, r7
 8007a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a1c:	3b30      	subs	r3, #48	; 0x30
 8007a1e:	2b09      	cmp	r3, #9
 8007a20:	d94d      	bls.n	8007abe <_svfiprintf_r+0x16e>
 8007a22:	b1b8      	cbz	r0, 8007a54 <_svfiprintf_r+0x104>
 8007a24:	e00f      	b.n	8007a46 <_svfiprintf_r+0xf6>
 8007a26:	462f      	mov	r7, r5
 8007a28:	e7b8      	b.n	800799c <_svfiprintf_r+0x4c>
 8007a2a:	4a40      	ldr	r2, [pc, #256]	; (8007b2c <_svfiprintf_r+0x1dc>)
 8007a2c:	1a80      	subs	r0, r0, r2
 8007a2e:	fa0b f000 	lsl.w	r0, fp, r0
 8007a32:	4318      	orrs	r0, r3
 8007a34:	9004      	str	r0, [sp, #16]
 8007a36:	463d      	mov	r5, r7
 8007a38:	e7d3      	b.n	80079e2 <_svfiprintf_r+0x92>
 8007a3a:	9a03      	ldr	r2, [sp, #12]
 8007a3c:	1d11      	adds	r1, r2, #4
 8007a3e:	6812      	ldr	r2, [r2, #0]
 8007a40:	9103      	str	r1, [sp, #12]
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	db01      	blt.n	8007a4a <_svfiprintf_r+0xfa>
 8007a46:	9207      	str	r2, [sp, #28]
 8007a48:	e004      	b.n	8007a54 <_svfiprintf_r+0x104>
 8007a4a:	4252      	negs	r2, r2
 8007a4c:	f043 0302 	orr.w	r3, r3, #2
 8007a50:	9207      	str	r2, [sp, #28]
 8007a52:	9304      	str	r3, [sp, #16]
 8007a54:	783b      	ldrb	r3, [r7, #0]
 8007a56:	2b2e      	cmp	r3, #46	; 0x2e
 8007a58:	d10c      	bne.n	8007a74 <_svfiprintf_r+0x124>
 8007a5a:	787b      	ldrb	r3, [r7, #1]
 8007a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a5e:	d133      	bne.n	8007ac8 <_svfiprintf_r+0x178>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	1d1a      	adds	r2, r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	9203      	str	r2, [sp, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	bfb8      	it	lt
 8007a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a70:	3702      	adds	r7, #2
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	4d2e      	ldr	r5, [pc, #184]	; (8007b30 <_svfiprintf_r+0x1e0>)
 8007a76:	7839      	ldrb	r1, [r7, #0]
 8007a78:	2203      	movs	r2, #3
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f7f8 fbb0 	bl	80001e0 <memchr>
 8007a80:	b138      	cbz	r0, 8007a92 <_svfiprintf_r+0x142>
 8007a82:	2340      	movs	r3, #64	; 0x40
 8007a84:	1b40      	subs	r0, r0, r5
 8007a86:	fa03 f000 	lsl.w	r0, r3, r0
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	4303      	orrs	r3, r0
 8007a8e:	3701      	adds	r7, #1
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	7839      	ldrb	r1, [r7, #0]
 8007a94:	4827      	ldr	r0, [pc, #156]	; (8007b34 <_svfiprintf_r+0x1e4>)
 8007a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a9a:	2206      	movs	r2, #6
 8007a9c:	1c7e      	adds	r6, r7, #1
 8007a9e:	f7f8 fb9f 	bl	80001e0 <memchr>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d038      	beq.n	8007b18 <_svfiprintf_r+0x1c8>
 8007aa6:	4b24      	ldr	r3, [pc, #144]	; (8007b38 <_svfiprintf_r+0x1e8>)
 8007aa8:	bb13      	cbnz	r3, 8007af0 <_svfiprintf_r+0x1a0>
 8007aaa:	9b03      	ldr	r3, [sp, #12]
 8007aac:	3307      	adds	r3, #7
 8007aae:	f023 0307 	bic.w	r3, r3, #7
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	9303      	str	r3, [sp, #12]
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	444b      	add	r3, r9
 8007aba:	9309      	str	r3, [sp, #36]	; 0x24
 8007abc:	e76d      	b.n	800799a <_svfiprintf_r+0x4a>
 8007abe:	fb05 3202 	mla	r2, r5, r2, r3
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	e7a6      	b.n	8007a16 <_svfiprintf_r+0xc6>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	3701      	adds	r7, #1
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	250a      	movs	r5, #10
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ad8:	3a30      	subs	r2, #48	; 0x30
 8007ada:	2a09      	cmp	r2, #9
 8007adc:	d903      	bls.n	8007ae6 <_svfiprintf_r+0x196>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0c8      	beq.n	8007a74 <_svfiprintf_r+0x124>
 8007ae2:	9105      	str	r1, [sp, #20]
 8007ae4:	e7c6      	b.n	8007a74 <_svfiprintf_r+0x124>
 8007ae6:	fb05 2101 	mla	r1, r5, r1, r2
 8007aea:	2301      	movs	r3, #1
 8007aec:	4607      	mov	r7, r0
 8007aee:	e7f0      	b.n	8007ad2 <_svfiprintf_r+0x182>
 8007af0:	ab03      	add	r3, sp, #12
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4622      	mov	r2, r4
 8007af6:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <_svfiprintf_r+0x1ec>)
 8007af8:	a904      	add	r1, sp, #16
 8007afa:	4640      	mov	r0, r8
 8007afc:	f3af 8000 	nop.w
 8007b00:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b04:	4681      	mov	r9, r0
 8007b06:	d1d6      	bne.n	8007ab6 <_svfiprintf_r+0x166>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	065b      	lsls	r3, r3, #25
 8007b0c:	f53f af35 	bmi.w	800797a <_svfiprintf_r+0x2a>
 8007b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b12:	b01d      	add	sp, #116	; 0x74
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	ab03      	add	r3, sp, #12
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <_svfiprintf_r+0x1ec>)
 8007b20:	a904      	add	r1, sp, #16
 8007b22:	4640      	mov	r0, r8
 8007b24:	f000 f882 	bl	8007c2c <_printf_i>
 8007b28:	e7ea      	b.n	8007b00 <_svfiprintf_r+0x1b0>
 8007b2a:	bf00      	nop
 8007b2c:	08008100 	.word	0x08008100
 8007b30:	08008106 	.word	0x08008106
 8007b34:	0800810a 	.word	0x0800810a
 8007b38:	00000000 	.word	0x00000000
 8007b3c:	0800789d 	.word	0x0800789d

08007b40 <_printf_common>:
 8007b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	4691      	mov	r9, r2
 8007b46:	461f      	mov	r7, r3
 8007b48:	688a      	ldr	r2, [r1, #8]
 8007b4a:	690b      	ldr	r3, [r1, #16]
 8007b4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b50:	4293      	cmp	r3, r2
 8007b52:	bfb8      	it	lt
 8007b54:	4613      	movlt	r3, r2
 8007b56:	f8c9 3000 	str.w	r3, [r9]
 8007b5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b5e:	4606      	mov	r6, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	b112      	cbz	r2, 8007b6a <_printf_common+0x2a>
 8007b64:	3301      	adds	r3, #1
 8007b66:	f8c9 3000 	str.w	r3, [r9]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	0699      	lsls	r1, r3, #26
 8007b6e:	bf42      	ittt	mi
 8007b70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b74:	3302      	addmi	r3, #2
 8007b76:	f8c9 3000 	strmi.w	r3, [r9]
 8007b7a:	6825      	ldr	r5, [r4, #0]
 8007b7c:	f015 0506 	ands.w	r5, r5, #6
 8007b80:	d107      	bne.n	8007b92 <_printf_common+0x52>
 8007b82:	f104 0a19 	add.w	sl, r4, #25
 8007b86:	68e3      	ldr	r3, [r4, #12]
 8007b88:	f8d9 2000 	ldr.w	r2, [r9]
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	42ab      	cmp	r3, r5
 8007b90:	dc28      	bgt.n	8007be4 <_printf_common+0xa4>
 8007b92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	3300      	adds	r3, #0
 8007b9a:	bf18      	it	ne
 8007b9c:	2301      	movne	r3, #1
 8007b9e:	0692      	lsls	r2, r2, #26
 8007ba0:	d42d      	bmi.n	8007bfe <_printf_common+0xbe>
 8007ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	4630      	mov	r0, r6
 8007baa:	47c0      	blx	r8
 8007bac:	3001      	adds	r0, #1
 8007bae:	d020      	beq.n	8007bf2 <_printf_common+0xb2>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	68e5      	ldr	r5, [r4, #12]
 8007bb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007bb8:	f003 0306 	and.w	r3, r3, #6
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	bf08      	it	eq
 8007bc0:	1aad      	subeq	r5, r5, r2
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	6922      	ldr	r2, [r4, #16]
 8007bc6:	bf0c      	ite	eq
 8007bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bcc:	2500      	movne	r5, #0
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	bfc4      	itt	gt
 8007bd2:	1a9b      	subgt	r3, r3, r2
 8007bd4:	18ed      	addgt	r5, r5, r3
 8007bd6:	f04f 0900 	mov.w	r9, #0
 8007bda:	341a      	adds	r4, #26
 8007bdc:	454d      	cmp	r5, r9
 8007bde:	d11a      	bne.n	8007c16 <_printf_common+0xd6>
 8007be0:	2000      	movs	r0, #0
 8007be2:	e008      	b.n	8007bf6 <_printf_common+0xb6>
 8007be4:	2301      	movs	r3, #1
 8007be6:	4652      	mov	r2, sl
 8007be8:	4639      	mov	r1, r7
 8007bea:	4630      	mov	r0, r6
 8007bec:	47c0      	blx	r8
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d103      	bne.n	8007bfa <_printf_common+0xba>
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfa:	3501      	adds	r5, #1
 8007bfc:	e7c3      	b.n	8007b86 <_printf_common+0x46>
 8007bfe:	18e1      	adds	r1, r4, r3
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	2030      	movs	r0, #48	; 0x30
 8007c04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c08:	4422      	add	r2, r4
 8007c0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c12:	3302      	adds	r3, #2
 8007c14:	e7c5      	b.n	8007ba2 <_printf_common+0x62>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4622      	mov	r2, r4
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	47c0      	blx	r8
 8007c20:	3001      	adds	r0, #1
 8007c22:	d0e6      	beq.n	8007bf2 <_printf_common+0xb2>
 8007c24:	f109 0901 	add.w	r9, r9, #1
 8007c28:	e7d8      	b.n	8007bdc <_printf_common+0x9c>
	...

08007c2c <_printf_i>:
 8007c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c34:	460c      	mov	r4, r1
 8007c36:	7e09      	ldrb	r1, [r1, #24]
 8007c38:	b085      	sub	sp, #20
 8007c3a:	296e      	cmp	r1, #110	; 0x6e
 8007c3c:	4617      	mov	r7, r2
 8007c3e:	4606      	mov	r6, r0
 8007c40:	4698      	mov	r8, r3
 8007c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c44:	f000 80b3 	beq.w	8007dae <_printf_i+0x182>
 8007c48:	d822      	bhi.n	8007c90 <_printf_i+0x64>
 8007c4a:	2963      	cmp	r1, #99	; 0x63
 8007c4c:	d036      	beq.n	8007cbc <_printf_i+0x90>
 8007c4e:	d80a      	bhi.n	8007c66 <_printf_i+0x3a>
 8007c50:	2900      	cmp	r1, #0
 8007c52:	f000 80b9 	beq.w	8007dc8 <_printf_i+0x19c>
 8007c56:	2958      	cmp	r1, #88	; 0x58
 8007c58:	f000 8083 	beq.w	8007d62 <_printf_i+0x136>
 8007c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c64:	e032      	b.n	8007ccc <_printf_i+0xa0>
 8007c66:	2964      	cmp	r1, #100	; 0x64
 8007c68:	d001      	beq.n	8007c6e <_printf_i+0x42>
 8007c6a:	2969      	cmp	r1, #105	; 0x69
 8007c6c:	d1f6      	bne.n	8007c5c <_printf_i+0x30>
 8007c6e:	6820      	ldr	r0, [r4, #0]
 8007c70:	6813      	ldr	r3, [r2, #0]
 8007c72:	0605      	lsls	r5, r0, #24
 8007c74:	f103 0104 	add.w	r1, r3, #4
 8007c78:	d52a      	bpl.n	8007cd0 <_printf_i+0xa4>
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6011      	str	r1, [r2, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da03      	bge.n	8007c8a <_printf_i+0x5e>
 8007c82:	222d      	movs	r2, #45	; 0x2d
 8007c84:	425b      	negs	r3, r3
 8007c86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c8a:	486f      	ldr	r0, [pc, #444]	; (8007e48 <_printf_i+0x21c>)
 8007c8c:	220a      	movs	r2, #10
 8007c8e:	e039      	b.n	8007d04 <_printf_i+0xd8>
 8007c90:	2973      	cmp	r1, #115	; 0x73
 8007c92:	f000 809d 	beq.w	8007dd0 <_printf_i+0x1a4>
 8007c96:	d808      	bhi.n	8007caa <_printf_i+0x7e>
 8007c98:	296f      	cmp	r1, #111	; 0x6f
 8007c9a:	d020      	beq.n	8007cde <_printf_i+0xb2>
 8007c9c:	2970      	cmp	r1, #112	; 0x70
 8007c9e:	d1dd      	bne.n	8007c5c <_printf_i+0x30>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	f043 0320 	orr.w	r3, r3, #32
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	e003      	b.n	8007cb2 <_printf_i+0x86>
 8007caa:	2975      	cmp	r1, #117	; 0x75
 8007cac:	d017      	beq.n	8007cde <_printf_i+0xb2>
 8007cae:	2978      	cmp	r1, #120	; 0x78
 8007cb0:	d1d4      	bne.n	8007c5c <_printf_i+0x30>
 8007cb2:	2378      	movs	r3, #120	; 0x78
 8007cb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cb8:	4864      	ldr	r0, [pc, #400]	; (8007e4c <_printf_i+0x220>)
 8007cba:	e055      	b.n	8007d68 <_printf_i+0x13c>
 8007cbc:	6813      	ldr	r3, [r2, #0]
 8007cbe:	1d19      	adds	r1, r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6011      	str	r1, [r2, #0]
 8007cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e08c      	b.n	8007dea <_printf_i+0x1be>
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6011      	str	r1, [r2, #0]
 8007cd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007cd8:	bf18      	it	ne
 8007cda:	b21b      	sxthne	r3, r3
 8007cdc:	e7cf      	b.n	8007c7e <_printf_i+0x52>
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	6825      	ldr	r5, [r4, #0]
 8007ce2:	1d18      	adds	r0, r3, #4
 8007ce4:	6010      	str	r0, [r2, #0]
 8007ce6:	0628      	lsls	r0, r5, #24
 8007ce8:	d501      	bpl.n	8007cee <_printf_i+0xc2>
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	e002      	b.n	8007cf4 <_printf_i+0xc8>
 8007cee:	0668      	lsls	r0, r5, #25
 8007cf0:	d5fb      	bpl.n	8007cea <_printf_i+0xbe>
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	4854      	ldr	r0, [pc, #336]	; (8007e48 <_printf_i+0x21c>)
 8007cf6:	296f      	cmp	r1, #111	; 0x6f
 8007cf8:	bf14      	ite	ne
 8007cfa:	220a      	movne	r2, #10
 8007cfc:	2208      	moveq	r2, #8
 8007cfe:	2100      	movs	r1, #0
 8007d00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d04:	6865      	ldr	r5, [r4, #4]
 8007d06:	60a5      	str	r5, [r4, #8]
 8007d08:	2d00      	cmp	r5, #0
 8007d0a:	f2c0 8095 	blt.w	8007e38 <_printf_i+0x20c>
 8007d0e:	6821      	ldr	r1, [r4, #0]
 8007d10:	f021 0104 	bic.w	r1, r1, #4
 8007d14:	6021      	str	r1, [r4, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d13d      	bne.n	8007d96 <_printf_i+0x16a>
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	f040 808e 	bne.w	8007e3c <_printf_i+0x210>
 8007d20:	4665      	mov	r5, ip
 8007d22:	2a08      	cmp	r2, #8
 8007d24:	d10b      	bne.n	8007d3e <_printf_i+0x112>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	07db      	lsls	r3, r3, #31
 8007d2a:	d508      	bpl.n	8007d3e <_printf_i+0x112>
 8007d2c:	6923      	ldr	r3, [r4, #16]
 8007d2e:	6862      	ldr	r2, [r4, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	bfde      	ittt	le
 8007d34:	2330      	movle	r3, #48	; 0x30
 8007d36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d3e:	ebac 0305 	sub.w	r3, ip, r5
 8007d42:	6123      	str	r3, [r4, #16]
 8007d44:	f8cd 8000 	str.w	r8, [sp]
 8007d48:	463b      	mov	r3, r7
 8007d4a:	aa03      	add	r2, sp, #12
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7ff fef6 	bl	8007b40 <_printf_common>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d14d      	bne.n	8007df4 <_printf_i+0x1c8>
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	b005      	add	sp, #20
 8007d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d62:	4839      	ldr	r0, [pc, #228]	; (8007e48 <_printf_i+0x21c>)
 8007d64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d68:	6813      	ldr	r3, [r2, #0]
 8007d6a:	6821      	ldr	r1, [r4, #0]
 8007d6c:	1d1d      	adds	r5, r3, #4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6015      	str	r5, [r2, #0]
 8007d72:	060a      	lsls	r2, r1, #24
 8007d74:	d50b      	bpl.n	8007d8e <_printf_i+0x162>
 8007d76:	07ca      	lsls	r2, r1, #31
 8007d78:	bf44      	itt	mi
 8007d7a:	f041 0120 	orrmi.w	r1, r1, #32
 8007d7e:	6021      	strmi	r1, [r4, #0]
 8007d80:	b91b      	cbnz	r3, 8007d8a <_printf_i+0x15e>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	f022 0220 	bic.w	r2, r2, #32
 8007d88:	6022      	str	r2, [r4, #0]
 8007d8a:	2210      	movs	r2, #16
 8007d8c:	e7b7      	b.n	8007cfe <_printf_i+0xd2>
 8007d8e:	064d      	lsls	r5, r1, #25
 8007d90:	bf48      	it	mi
 8007d92:	b29b      	uxthmi	r3, r3
 8007d94:	e7ef      	b.n	8007d76 <_printf_i+0x14a>
 8007d96:	4665      	mov	r5, ip
 8007d98:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d9c:	fb02 3311 	mls	r3, r2, r1, r3
 8007da0:	5cc3      	ldrb	r3, [r0, r3]
 8007da2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007da6:	460b      	mov	r3, r1
 8007da8:	2900      	cmp	r1, #0
 8007daa:	d1f5      	bne.n	8007d98 <_printf_i+0x16c>
 8007dac:	e7b9      	b.n	8007d22 <_printf_i+0xf6>
 8007dae:	6813      	ldr	r3, [r2, #0]
 8007db0:	6825      	ldr	r5, [r4, #0]
 8007db2:	6961      	ldr	r1, [r4, #20]
 8007db4:	1d18      	adds	r0, r3, #4
 8007db6:	6010      	str	r0, [r2, #0]
 8007db8:	0628      	lsls	r0, r5, #24
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	d501      	bpl.n	8007dc2 <_printf_i+0x196>
 8007dbe:	6019      	str	r1, [r3, #0]
 8007dc0:	e002      	b.n	8007dc8 <_printf_i+0x19c>
 8007dc2:	066a      	lsls	r2, r5, #25
 8007dc4:	d5fb      	bpl.n	8007dbe <_printf_i+0x192>
 8007dc6:	8019      	strh	r1, [r3, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	6123      	str	r3, [r4, #16]
 8007dcc:	4665      	mov	r5, ip
 8007dce:	e7b9      	b.n	8007d44 <_printf_i+0x118>
 8007dd0:	6813      	ldr	r3, [r2, #0]
 8007dd2:	1d19      	adds	r1, r3, #4
 8007dd4:	6011      	str	r1, [r2, #0]
 8007dd6:	681d      	ldr	r5, [r3, #0]
 8007dd8:	6862      	ldr	r2, [r4, #4]
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f7f8 f9ff 	bl	80001e0 <memchr>
 8007de2:	b108      	cbz	r0, 8007de8 <_printf_i+0x1bc>
 8007de4:	1b40      	subs	r0, r0, r5
 8007de6:	6060      	str	r0, [r4, #4]
 8007de8:	6863      	ldr	r3, [r4, #4]
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	2300      	movs	r3, #0
 8007dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df2:	e7a7      	b.n	8007d44 <_printf_i+0x118>
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	462a      	mov	r2, r5
 8007df8:	4639      	mov	r1, r7
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	47c0      	blx	r8
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d0aa      	beq.n	8007d58 <_printf_i+0x12c>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	079b      	lsls	r3, r3, #30
 8007e06:	d413      	bmi.n	8007e30 <_printf_i+0x204>
 8007e08:	68e0      	ldr	r0, [r4, #12]
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	4298      	cmp	r0, r3
 8007e0e:	bfb8      	it	lt
 8007e10:	4618      	movlt	r0, r3
 8007e12:	e7a3      	b.n	8007d5c <_printf_i+0x130>
 8007e14:	2301      	movs	r3, #1
 8007e16:	464a      	mov	r2, r9
 8007e18:	4639      	mov	r1, r7
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	47c0      	blx	r8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d09a      	beq.n	8007d58 <_printf_i+0x12c>
 8007e22:	3501      	adds	r5, #1
 8007e24:	68e3      	ldr	r3, [r4, #12]
 8007e26:	9a03      	ldr	r2, [sp, #12]
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	42ab      	cmp	r3, r5
 8007e2c:	dcf2      	bgt.n	8007e14 <_printf_i+0x1e8>
 8007e2e:	e7eb      	b.n	8007e08 <_printf_i+0x1dc>
 8007e30:	2500      	movs	r5, #0
 8007e32:	f104 0919 	add.w	r9, r4, #25
 8007e36:	e7f5      	b.n	8007e24 <_printf_i+0x1f8>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1ac      	bne.n	8007d96 <_printf_i+0x16a>
 8007e3c:	7803      	ldrb	r3, [r0, #0]
 8007e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e46:	e76c      	b.n	8007d22 <_printf_i+0xf6>
 8007e48:	08008111 	.word	0x08008111
 8007e4c:	08008122 	.word	0x08008122

08007e50 <memmove>:
 8007e50:	4288      	cmp	r0, r1
 8007e52:	b510      	push	{r4, lr}
 8007e54:	eb01 0302 	add.w	r3, r1, r2
 8007e58:	d807      	bhi.n	8007e6a <memmove+0x1a>
 8007e5a:	1e42      	subs	r2, r0, #1
 8007e5c:	4299      	cmp	r1, r3
 8007e5e:	d00a      	beq.n	8007e76 <memmove+0x26>
 8007e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e64:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e68:	e7f8      	b.n	8007e5c <memmove+0xc>
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	d9f5      	bls.n	8007e5a <memmove+0xa>
 8007e6e:	1881      	adds	r1, r0, r2
 8007e70:	1ad2      	subs	r2, r2, r3
 8007e72:	42d3      	cmn	r3, r2
 8007e74:	d100      	bne.n	8007e78 <memmove+0x28>
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e80:	e7f7      	b.n	8007e72 <memmove+0x22>
	...

08007e84 <_free_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	4605      	mov	r5, r0
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	d045      	beq.n	8007f18 <_free_r+0x94>
 8007e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e90:	1f0c      	subs	r4, r1, #4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bfb8      	it	lt
 8007e96:	18e4      	addlt	r4, r4, r3
 8007e98:	f000 f8d2 	bl	8008040 <__malloc_lock>
 8007e9c:	4a1f      	ldr	r2, [pc, #124]	; (8007f1c <_free_r+0x98>)
 8007e9e:	6813      	ldr	r3, [r2, #0]
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	b933      	cbnz	r3, 8007eb2 <_free_r+0x2e>
 8007ea4:	6063      	str	r3, [r4, #4]
 8007ea6:	6014      	str	r4, [r2, #0]
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eae:	f000 b8c8 	b.w	8008042 <__malloc_unlock>
 8007eb2:	42a3      	cmp	r3, r4
 8007eb4:	d90c      	bls.n	8007ed0 <_free_r+0x4c>
 8007eb6:	6821      	ldr	r1, [r4, #0]
 8007eb8:	1862      	adds	r2, r4, r1
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	bf04      	itt	eq
 8007ebe:	681a      	ldreq	r2, [r3, #0]
 8007ec0:	685b      	ldreq	r3, [r3, #4]
 8007ec2:	6063      	str	r3, [r4, #4]
 8007ec4:	bf04      	itt	eq
 8007ec6:	1852      	addeq	r2, r2, r1
 8007ec8:	6022      	streq	r2, [r4, #0]
 8007eca:	6004      	str	r4, [r0, #0]
 8007ecc:	e7ec      	b.n	8007ea8 <_free_r+0x24>
 8007ece:	4613      	mov	r3, r2
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	b10a      	cbz	r2, 8007ed8 <_free_r+0x54>
 8007ed4:	42a2      	cmp	r2, r4
 8007ed6:	d9fa      	bls.n	8007ece <_free_r+0x4a>
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	1858      	adds	r0, r3, r1
 8007edc:	42a0      	cmp	r0, r4
 8007ede:	d10b      	bne.n	8007ef8 <_free_r+0x74>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	4401      	add	r1, r0
 8007ee4:	1858      	adds	r0, r3, r1
 8007ee6:	4282      	cmp	r2, r0
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	d1dd      	bne.n	8007ea8 <_free_r+0x24>
 8007eec:	6810      	ldr	r0, [r2, #0]
 8007eee:	6852      	ldr	r2, [r2, #4]
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	4401      	add	r1, r0
 8007ef4:	6019      	str	r1, [r3, #0]
 8007ef6:	e7d7      	b.n	8007ea8 <_free_r+0x24>
 8007ef8:	d902      	bls.n	8007f00 <_free_r+0x7c>
 8007efa:	230c      	movs	r3, #12
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	e7d3      	b.n	8007ea8 <_free_r+0x24>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	1821      	adds	r1, r4, r0
 8007f04:	428a      	cmp	r2, r1
 8007f06:	bf04      	itt	eq
 8007f08:	6811      	ldreq	r1, [r2, #0]
 8007f0a:	6852      	ldreq	r2, [r2, #4]
 8007f0c:	6062      	str	r2, [r4, #4]
 8007f0e:	bf04      	itt	eq
 8007f10:	1809      	addeq	r1, r1, r0
 8007f12:	6021      	streq	r1, [r4, #0]
 8007f14:	605c      	str	r4, [r3, #4]
 8007f16:	e7c7      	b.n	8007ea8 <_free_r+0x24>
 8007f18:	bd38      	pop	{r3, r4, r5, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20001014 	.word	0x20001014

08007f20 <_malloc_r>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	1ccd      	adds	r5, r1, #3
 8007f24:	f025 0503 	bic.w	r5, r5, #3
 8007f28:	3508      	adds	r5, #8
 8007f2a:	2d0c      	cmp	r5, #12
 8007f2c:	bf38      	it	cc
 8007f2e:	250c      	movcc	r5, #12
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	4606      	mov	r6, r0
 8007f34:	db01      	blt.n	8007f3a <_malloc_r+0x1a>
 8007f36:	42a9      	cmp	r1, r5
 8007f38:	d903      	bls.n	8007f42 <_malloc_r+0x22>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	6033      	str	r3, [r6, #0]
 8007f3e:	2000      	movs	r0, #0
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
 8007f42:	f000 f87d 	bl	8008040 <__malloc_lock>
 8007f46:	4a21      	ldr	r2, [pc, #132]	; (8007fcc <_malloc_r+0xac>)
 8007f48:	6814      	ldr	r4, [r2, #0]
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	b991      	cbnz	r1, 8007f74 <_malloc_r+0x54>
 8007f4e:	4c20      	ldr	r4, [pc, #128]	; (8007fd0 <_malloc_r+0xb0>)
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	b91b      	cbnz	r3, 8007f5c <_malloc_r+0x3c>
 8007f54:	4630      	mov	r0, r6
 8007f56:	f000 f863 	bl	8008020 <_sbrk_r>
 8007f5a:	6020      	str	r0, [r4, #0]
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f000 f85e 	bl	8008020 <_sbrk_r>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d124      	bne.n	8007fb2 <_malloc_r+0x92>
 8007f68:	230c      	movs	r3, #12
 8007f6a:	6033      	str	r3, [r6, #0]
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 f868 	bl	8008042 <__malloc_unlock>
 8007f72:	e7e4      	b.n	8007f3e <_malloc_r+0x1e>
 8007f74:	680b      	ldr	r3, [r1, #0]
 8007f76:	1b5b      	subs	r3, r3, r5
 8007f78:	d418      	bmi.n	8007fac <_malloc_r+0x8c>
 8007f7a:	2b0b      	cmp	r3, #11
 8007f7c:	d90f      	bls.n	8007f9e <_malloc_r+0x7e>
 8007f7e:	600b      	str	r3, [r1, #0]
 8007f80:	50cd      	str	r5, [r1, r3]
 8007f82:	18cc      	adds	r4, r1, r3
 8007f84:	4630      	mov	r0, r6
 8007f86:	f000 f85c 	bl	8008042 <__malloc_unlock>
 8007f8a:	f104 000b 	add.w	r0, r4, #11
 8007f8e:	1d23      	adds	r3, r4, #4
 8007f90:	f020 0007 	bic.w	r0, r0, #7
 8007f94:	1ac3      	subs	r3, r0, r3
 8007f96:	d0d3      	beq.n	8007f40 <_malloc_r+0x20>
 8007f98:	425a      	negs	r2, r3
 8007f9a:	50e2      	str	r2, [r4, r3]
 8007f9c:	e7d0      	b.n	8007f40 <_malloc_r+0x20>
 8007f9e:	428c      	cmp	r4, r1
 8007fa0:	684b      	ldr	r3, [r1, #4]
 8007fa2:	bf16      	itet	ne
 8007fa4:	6063      	strne	r3, [r4, #4]
 8007fa6:	6013      	streq	r3, [r2, #0]
 8007fa8:	460c      	movne	r4, r1
 8007faa:	e7eb      	b.n	8007f84 <_malloc_r+0x64>
 8007fac:	460c      	mov	r4, r1
 8007fae:	6849      	ldr	r1, [r1, #4]
 8007fb0:	e7cc      	b.n	8007f4c <_malloc_r+0x2c>
 8007fb2:	1cc4      	adds	r4, r0, #3
 8007fb4:	f024 0403 	bic.w	r4, r4, #3
 8007fb8:	42a0      	cmp	r0, r4
 8007fba:	d005      	beq.n	8007fc8 <_malloc_r+0xa8>
 8007fbc:	1a21      	subs	r1, r4, r0
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f000 f82e 	bl	8008020 <_sbrk_r>
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d0cf      	beq.n	8007f68 <_malloc_r+0x48>
 8007fc8:	6025      	str	r5, [r4, #0]
 8007fca:	e7db      	b.n	8007f84 <_malloc_r+0x64>
 8007fcc:	20001014 	.word	0x20001014
 8007fd0:	20001018 	.word	0x20001018

08007fd4 <_realloc_r>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	4614      	mov	r4, r2
 8007fda:	460e      	mov	r6, r1
 8007fdc:	b921      	cbnz	r1, 8007fe8 <_realloc_r+0x14>
 8007fde:	4611      	mov	r1, r2
 8007fe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007fe4:	f7ff bf9c 	b.w	8007f20 <_malloc_r>
 8007fe8:	b922      	cbnz	r2, 8007ff4 <_realloc_r+0x20>
 8007fea:	f7ff ff4b 	bl	8007e84 <_free_r>
 8007fee:	4625      	mov	r5, r4
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff4:	f000 f826 	bl	8008044 <_malloc_usable_size_r>
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d20f      	bcs.n	800801c <_realloc_r+0x48>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4638      	mov	r0, r7
 8008000:	f7ff ff8e 	bl	8007f20 <_malloc_r>
 8008004:	4605      	mov	r5, r0
 8008006:	2800      	cmp	r0, #0
 8008008:	d0f2      	beq.n	8007ff0 <_realloc_r+0x1c>
 800800a:	4631      	mov	r1, r6
 800800c:	4622      	mov	r2, r4
 800800e:	f7ff fc11 	bl	8007834 <memcpy>
 8008012:	4631      	mov	r1, r6
 8008014:	4638      	mov	r0, r7
 8008016:	f7ff ff35 	bl	8007e84 <_free_r>
 800801a:	e7e9      	b.n	8007ff0 <_realloc_r+0x1c>
 800801c:	4635      	mov	r5, r6
 800801e:	e7e7      	b.n	8007ff0 <_realloc_r+0x1c>

08008020 <_sbrk_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4c06      	ldr	r4, [pc, #24]	; (800803c <_sbrk_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4605      	mov	r5, r0
 8008028:	4608      	mov	r0, r1
 800802a:	6023      	str	r3, [r4, #0]
 800802c:	f7f9 fa86 	bl	800153c <_sbrk>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_sbrk_r+0x1a>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	b103      	cbz	r3, 800803a <_sbrk_r+0x1a>
 8008038:	602b      	str	r3, [r5, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	200016fc 	.word	0x200016fc

08008040 <__malloc_lock>:
 8008040:	4770      	bx	lr

08008042 <__malloc_unlock>:
 8008042:	4770      	bx	lr

08008044 <_malloc_usable_size_r>:
 8008044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008048:	1f18      	subs	r0, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfbc      	itt	lt
 800804e:	580b      	ldrlt	r3, [r1, r0]
 8008050:	18c0      	addlt	r0, r0, r3
 8008052:	4770      	bx	lr

08008054 <_init>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	bf00      	nop
 8008058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805a:	bc08      	pop	{r3}
 800805c:	469e      	mov	lr, r3
 800805e:	4770      	bx	lr

08008060 <_fini>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr
