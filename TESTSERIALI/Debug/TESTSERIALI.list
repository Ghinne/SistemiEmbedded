
TESTSERIALI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006210  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006478  08006478  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006480  08006480  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001620  20000010  08006498  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  08006498  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021224  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d73  00000000  00000000  00041264  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ef8  00000000  00000000  00044fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d20  00000000  00000000  00046ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029ef9  00000000  00000000  00048bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016cb1  00000000  00000000  00072ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102f89  00000000  00000000  0008979a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018c723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084bc  00000000  00000000  0018c7a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006388 	.word	0x08006388

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006388 	.word	0x08006388

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 ff82 	bl	8001412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f857 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fa63 	bl	80009dc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000516:	f000 f8f7 	bl	8000708 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800051a:	f000 f92d 	bl	8000778 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800051e:	f000 f96b 	bl	80007f8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000522:	f000 f98f 	bl	8000844 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000526:	f000 f9cb 	bl	80008c0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800052a:	f000 f9f9 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052e:	f000 fa27 	bl	8000980 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Blink1TaskHandl */
  osThreadDef(Blink1TaskHandl, StartBlink1, osPriorityNormal, 0, 128);
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <main+0xa4>)
 8000534:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000538:	461d      	mov	r5, r3
 800053a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000542:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Blink1TaskHandlHandle = osThreadCreate(osThread(Blink1TaskHandl), NULL);
 8000546:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f004 fcee 	bl	8004f2e <osThreadCreate>
 8000552:	4602      	mov	r2, r0
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0xa8>)
 8000556:	601a      	str	r2, [r3, #0]

  /* definition and creation of Blink2TaskHandl */
  osThreadDef(Blink2TaskHandl, StartBlink2, osPriorityNormal, 0, 128);
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <main+0xac>)
 800055a:	f107 0420 	add.w	r4, r7, #32
 800055e:	461d      	mov	r5, r3
 8000560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Blink2TaskHandlHandle = osThreadCreate(osThread(Blink2TaskHandl), NULL);
 800056c:	f107 0320 	add.w	r3, r7, #32
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fcdb 	bl	8004f2e <osThreadCreate>
 8000578:	4602      	mov	r2, r0
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0xb0>)
 800057c:	601a      	str	r2, [r3, #0]

  /* definition and creation of PrintTaskHandle */
  osThreadDef(PrintTaskHandle, StartPrintTask, osPriorityNormal, 0, 128);
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <main+0xb4>)
 8000580:	1d3c      	adds	r4, r7, #4
 8000582:	461d      	mov	r5, r3
 8000584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PrintTaskHandleHandle = osThreadCreate(osThread(PrintTaskHandle), NULL);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f004 fcca 	bl	8004f2e <osThreadCreate>
 800059a:	4602      	mov	r2, r0
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <main+0xb8>)
 800059e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f004 fcbe 	bl	8004f20 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0xa0>
 80005a6:	bf00      	nop
 80005a8:	080063b0 	.word	0x080063b0
 80005ac:	200014c0 	.word	0x200014c0
 80005b0:	080063dc 	.word	0x080063dc
 80005b4:	20000fe8 	.word	0x20000fe8
 80005b8:	08006408 	.word	0x08006408
 80005bc:	20000fe4 	.word	0x20000fe4

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0b8      	sub	sp, #224	; 0xe0
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 fed2 	bl	8006378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2288      	movs	r2, #136	; 0x88
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fec4 	bl	8006378 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f001 fdcc 	bl	800218c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <SystemClock_Config+0x140>)
 80005f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005fa:	4a41      	ldr	r2, [pc, #260]	; (8000700 <SystemClock_Config+0x140>)
 80005fc:	f023 0318 	bic.w	r3, r3, #24
 8000600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000604:	2314      	movs	r3, #20
 8000606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000628:	2301      	movs	r3, #1
 800062a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000634:	2328      	movs	r3, #40	; 0x28
 8000636:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063a:	2307      	movs	r3, #7
 800063c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fee7 	bl	8002424 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800065c:	f000 fbb4 	bl	8000dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000682:	2104      	movs	r1, #4
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fa7d 	bl	8002b84 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000690:	f000 fb9a 	bl	8000dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <SystemClock_Config+0x144>)
 8000696:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800069c:	2300      	movs	r3, #0
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006b8:	2318      	movs	r3, #24
 80006ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006cc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fc8d 	bl	8002ff0 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80006dc:	f000 fb74 	bl	8000dc8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e4:	f001 fd70 	bl	80021c8 <HAL_PWREx_ControlVoltageScaling>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80006ee:	f000 fb6b 	bl	8000dc8 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006f2:	f002 ff63 	bl	80035bc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006f6:	bf00      	nop
 80006f8:	37e0      	adds	r7, #224	; 0xe0
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	00012085 	.word	0x00012085

08000708 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_DFSDM1_Init+0x68>)
 800070e:	4a19      	ldr	r2, [pc, #100]	; (8000774 <MX_DFSDM1_Init+0x6c>)
 8000710:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000714:	2201      	movs	r2, #1
 8000716:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_DFSDM1_Init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000720:	2202      	movs	r2, #2
 8000722:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_DFSDM1_Init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000736:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000738:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_DFSDM1_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000740:	2204      	movs	r2, #4
 8000742:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_DFSDM1_Init+0x68>)
 800074c:	2201      	movs	r2, #1
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_DFSDM1_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_DFSDM1_Init+0x68>)
 800075e:	f000 ff93 	bl	8001688 <HAL_DFSDM_ChannelInit>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000768:	f000 fb2e 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000fac 	.word	0x20000fac
 8000774:	40016020 	.word	0x40016020

08000778 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_I2C2_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_I2C2_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_I2C2_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_I2C2_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C2_Init+0x74>)
 8000790:	2201      	movs	r2, #1
 8000792:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_I2C2_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <MX_I2C2_Init+0x74>)
 80007b4:	f001 fa7b 	bl	8001cae <HAL_I2C_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007be:	f000 fb03 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_I2C2_Init+0x74>)
 80007c6:	f001 fb01 	bl	8001dcc <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d0:	f000 fafa 	bl	8000dc8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_I2C2_Init+0x74>)
 80007d8:	f001 fb43 	bl	8001e62 <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007e2:	f000 faf1 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20001474 	.word	0x20001474
 80007f0:	40005800 	.word	0x40005800
 80007f4:	10909cec 	.word	0x10909cec

080007f8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_QUADSPI_Init+0x44>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <MX_QUADSPI_Init+0x48>)
 8000800:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_QUADSPI_Init+0x44>)
 8000804:	22ff      	movs	r2, #255	; 0xff
 8000806:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_QUADSPI_Init+0x44>)
 800080a:	2201      	movs	r2, #1
 800080c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_QUADSPI_Init+0x44>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_QUADSPI_Init+0x44>)
 8000816:	2201      	movs	r2, #1
 8000818:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_QUADSPI_Init+0x44>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_QUADSPI_Init+0x44>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_QUADSPI_Init+0x44>)
 8000828:	f001 fd34 	bl	8002294 <HAL_QSPI_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000832:	f000 fac9 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200015a8 	.word	0x200015a8
 8000840:	a0001000 	.word	0xa0001000

08000844 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_SPI3_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_SPI3_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_SPI3_Init+0x74>)
 800085e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000862:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_SPI3_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000876:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_SPI3_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000892:	2207      	movs	r2, #7
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_SPI3_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SPI3_Init+0x74>)
 800089e:	2208      	movs	r2, #8
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_SPI3_Init+0x74>)
 80008a4:	f003 f864 	bl	8003970 <HAL_SPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 fa8b 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200014c4 	.word	0x200014c4
 80008bc:	40003c00 	.word	0x40003c00

080008c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART1_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART1_UART_Init+0x58>)
 8000904:	f003 fb1e 	bl	8003f44 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 fa5b 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20001528 	.word	0x20001528
 800091c:	40013800 	.word	0x40013800

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <MX_USART3_UART_Init+0x5c>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_USART3_UART_Init+0x58>)
 8000964:	f003 faee 	bl	8003f44 <HAL_UART_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 fa2b 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000fec 	.word	0x20000fec
 800097c:	40004800 	.word	0x40004800

08000980 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800098a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2206      	movs	r2, #6
 8000990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2202      	movs	r2, #2
 800099c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	f001 fa99 	bl	8001efa <HAL_PCD_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ce:	f000 f9fb 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000106c 	.word	0x2000106c

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	4bba      	ldr	r3, [pc, #744]	; (8000cdc <MX_GPIO_Init+0x300>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4ab9      	ldr	r2, [pc, #740]	; (8000cdc <MX_GPIO_Init+0x300>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4bb7      	ldr	r3, [pc, #732]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4bb4      	ldr	r3, [pc, #720]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4ab3      	ldr	r2, [pc, #716]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4bb1      	ldr	r3, [pc, #708]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4bae      	ldr	r3, [pc, #696]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4aad      	ldr	r2, [pc, #692]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4bab      	ldr	r3, [pc, #684]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4ba8      	ldr	r3, [pc, #672]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4aa7      	ldr	r2, [pc, #668]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4ba5      	ldr	r3, [pc, #660]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4ba2      	ldr	r3, [pc, #648]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4aa1      	ldr	r2, [pc, #644]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b9f      	ldr	r3, [pc, #636]	; (8000cdc <MX_GPIO_Init+0x300>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a70:	489b      	ldr	r0, [pc, #620]	; (8000ce0 <MX_GPIO_Init+0x304>)
 8000a72:	f001 f8c7 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f001 f8c0 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000a84:	2200      	movs	r2, #0
 8000a86:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a8a:	4896      	ldr	r0, [pc, #600]	; (8000ce4 <MX_GPIO_Init+0x308>)
 8000a8c:	f001 f8ba 	bl	8001c04 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a96:	4894      	ldr	r0, [pc, #592]	; (8000ce8 <MX_GPIO_Init+0x30c>)
 8000a98:	f001 f8b4 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	4891      	ldr	r0, [pc, #580]	; (8000ce8 <MX_GPIO_Init+0x30c>)
 8000aa4:	f001 f8ae 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000aae:	488f      	ldr	r0, [pc, #572]	; (8000cec <MX_GPIO_Init+0x310>)
 8000ab0:	f001 f8a8 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	488a      	ldr	r0, [pc, #552]	; (8000ce4 <MX_GPIO_Init+0x308>)
 8000aba:	f001 f8a3 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4887      	ldr	r0, [pc, #540]	; (8000ce0 <MX_GPIO_Init+0x304>)
 8000ac4:	f001 f89e 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ac8:	f240 1315 	movw	r3, #277	; 0x115
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	487f      	ldr	r0, [pc, #508]	; (8000ce0 <MX_GPIO_Init+0x304>)
 8000ae2:	f000 fee7 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ae6:	236a      	movs	r3, #106	; 0x6a
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aea:	4b81      	ldr	r3, [pc, #516]	; (8000cf0 <MX_GPIO_Init+0x314>)
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4879      	ldr	r0, [pc, #484]	; (8000ce0 <MX_GPIO_Init+0x304>)
 8000afa:	f000 fedb 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b04:	4b7b      	ldr	r3, [pc, #492]	; (8000cf4 <MX_GPIO_Init+0x318>)
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4876      	ldr	r0, [pc, #472]	; (8000cec <MX_GPIO_Init+0x310>)
 8000b14:	f000 fece 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000b18:	233f      	movs	r3, #63	; 0x3f
 8000b1a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4870      	ldr	r0, [pc, #448]	; (8000cec <MX_GPIO_Init+0x310>)
 8000b2c:	f000 fec2 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b30:	2303      	movs	r3, #3
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b40:	2308      	movs	r3, #8
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 feb1 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b52:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f000 fea1 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b82:	2301      	movs	r3, #1
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b90:	f000 fe90 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b94:	2310      	movs	r3, #16
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f000 fe83 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bae:	23e0      	movs	r3, #224	; 0xe0
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f000 fe72 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd4:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <MX_GPIO_Init+0x314>)
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4840      	ldr	r0, [pc, #256]	; (8000ce4 <MX_GPIO_Init+0x308>)
 8000be4:	f000 fe66 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000be8:	2302      	movs	r3, #2
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bec:	230b      	movs	r3, #11
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	483a      	ldr	r0, [pc, #232]	; (8000ce4 <MX_GPIO_Init+0x308>)
 8000bfc:	f000 fe5a 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000c00:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c04:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <MX_GPIO_Init+0x308>)
 8000c1a:	f000 fe4b 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8000c1e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c22:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <MX_GPIO_Init+0x314>)
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	482d      	ldr	r0, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0x30c>)
 8000c34:	f000 fe3e 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c38:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4825      	ldr	r0, [pc, #148]	; (8000ce8 <MX_GPIO_Init+0x30c>)
 8000c52:	f000 fe2f 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481f      	ldr	r0, [pc, #124]	; (8000cec <MX_GPIO_Init+0x310>)
 8000c70:	f000 fe20 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_GPIO_Init+0x314>)
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4818      	ldr	r0, [pc, #96]	; (8000cec <MX_GPIO_Init+0x310>)
 8000c8a:	f000 fe13 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <MX_GPIO_Init+0x30c>)
 8000caa:	f000 fe03 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cae:	2378      	movs	r3, #120	; 0x78
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_GPIO_Init+0x30c>)
 8000cca:	f000 fdf3 	bl	80018b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd4:	2312      	movs	r3, #18
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e00d      	b.n	8000cf8 <MX_GPIO_Init+0x31c>
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48001000 	.word	0x48001000
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	48000c00 	.word	0x48000c00
 8000cec:	48000800 	.word	0x48000800
 8000cf0:	10110000 	.word	0x10110000
 8000cf4:	10210000 	.word	0x10210000
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <MX_GPIO_Init+0x35c>)
 8000d0a:	f000 fdd3 	bl	80018b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2017      	movs	r0, #23
 8000d14:	f000 fc8e 	bl	8001634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d18:	2017      	movs	r0, #23
 8000d1a:	f000 fca7 	bl	800166c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	2028      	movs	r0, #40	; 0x28
 8000d24:	f000 fc86 	bl	8001634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d28:	2028      	movs	r0, #40	; 0x28
 8000d2a:	f000 fc9f 	bl	800166c <HAL_NVIC_EnableIRQ>

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	48000400 	.word	0x48000400

08000d3c <StartBlink1>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink1 */
void StartBlink1(void const * argument)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(50);
 8000d44:	2032      	movs	r0, #50	; 0x32
 8000d46:	f004 f93e 	bl	8004fc6 <osDelay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <StartBlink1+0x1c>)
 8000d50:	f000 ff70 	bl	8001c34 <HAL_GPIO_TogglePin>
	  osDelay(50);
 8000d54:	e7f6      	b.n	8000d44 <StartBlink1+0x8>
 8000d56:	bf00      	nop
 8000d58:	48000400 	.word	0x48000400

08000d5c <StartBlink2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink2 */
void StartBlink2(void const * argument)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink2 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(500);
 8000d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d68:	f004 f92d 	bl	8004fc6 <osDelay>
	  HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin);
 8000d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d70:	4801      	ldr	r0, [pc, #4]	; (8000d78 <StartBlink2+0x1c>)
 8000d72:	f000 ff5f 	bl	8001c34 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000d76:	e7f5      	b.n	8000d64 <StartBlink2+0x8>
 8000d78:	48000800 	.word	0x48000800

08000d7c <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void const * argument)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *) "A", strlen("A"), 10);
 8000d84:	230a      	movs	r3, #10
 8000d86:	2201      	movs	r2, #1
 8000d88:	4904      	ldr	r1, [pc, #16]	; (8000d9c <StartPrintTask+0x20>)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <StartPrintTask+0x24>)
 8000d8c:	f003 f928 	bl	8003fe0 <HAL_UART_Transmit>
	  osDelay(1000);
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	f004 f917 	bl	8004fc6 <osDelay>
  {
 8000d98:	e7f4      	b.n	8000d84 <StartPrintTask+0x8>
 8000d9a:	bf00      	nop
 8000d9c:	08006424 	.word	0x08006424
 8000da0:	20001528 	.word	0x20001528

08000da4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db6:	f000 fb45 	bl	8001444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40001000 	.word	0x40001000

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_MspInit+0x4c>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_MspInit+0x4c>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_MspInit+0x4c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210f      	movs	r1, #15
 8000e12:	f06f 0001 	mvn.w	r0, #1
 8000e16:	f000 fc0d 	bl	8001634 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d128      	bne.n	8000e9a <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e4c:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e52:	6613      	str	r3, [r2, #96]	; 0x60
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e78:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e96:	f000 fd0d 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000280 	.word	0x20000280
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48001000 	.word	0x48001000

08000eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_I2C_MspInit+0x7c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d128      	bne.n	8000f24 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef0:	2312      	movs	r3, #18
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000efc:	2304      	movs	r3, #4
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <HAL_I2C_MspInit+0x84>)
 8000f08:	f000 fcd4 	bl	80018b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f16:	6593      	str	r3, [r2, #88]	; 0x58
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_I2C_MspInit+0x80>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40005800 	.word	0x40005800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000400 	.word	0x48000400

08000f38 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_QSPI_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_QSPI_MspInit+0x80>)
 8000f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_QSPI_MspInit+0x80>)
 8000f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f64:	6513      	str	r3, [r2, #80]	; 0x50
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_QSPI_MspInit+0x80>)
 8000f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_QSPI_MspInit+0x80>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_QSPI_MspInit+0x80>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_QSPI_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8000f8a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f8e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f9c:	230a      	movs	r3, #10
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_QSPI_MspInit+0x84>)
 8000fa8:	f000 fc84 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	a0001000 	.word	0xa0001000
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48001000 	.word	0x48001000

08000fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <HAL_SPI_MspInit+0x7c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d128      	bne.n	8001034 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_SPI_MspInit+0x80>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a16      	ldr	r2, [pc, #88]	; (8001040 <HAL_SPI_MspInit+0x80>)
 8000fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_SPI_MspInit+0x80>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_SPI_MspInit+0x80>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a10      	ldr	r2, [pc, #64]	; (8001040 <HAL_SPI_MspInit+0x80>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_SPI_MspInit+0x80>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001012:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001024:	2306      	movs	r3, #6
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <HAL_SPI_MspInit+0x84>)
 8001030:	f000 fc40 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40003c00 	.word	0x40003c00
 8001040:	40021000 	.word	0x40021000
 8001044:	48000800 	.word	0x48000800

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <HAL_UART_MspInit+0xd8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d128      	bne.n	80010bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_UART_MspInit+0xdc>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a2d      	ldr	r2, [pc, #180]	; (8001124 <HAL_UART_MspInit+0xdc>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <HAL_UART_MspInit+0xdc>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_UART_MspInit+0xdc>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a27      	ldr	r2, [pc, #156]	; (8001124 <HAL_UART_MspInit+0xdc>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <HAL_UART_MspInit+0xdc>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800109a:	23c0      	movs	r3, #192	; 0xc0
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010aa:	2307      	movs	r3, #7
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <HAL_UART_MspInit+0xe0>)
 80010b6:	f000 fbfd 	bl	80018b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ba:	e02d      	b.n	8001118 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_UART_MspInit+0xe4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d128      	bne.n	8001118 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_UART_MspInit+0xdc>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <HAL_UART_MspInit+0xdc>)
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_UART_MspInit+0xdc>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0xdc>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_UART_MspInit+0xdc>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0xdc>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001108:	2307      	movs	r3, #7
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	4807      	ldr	r0, [pc, #28]	; (8001130 <HAL_UART_MspInit+0xe8>)
 8001114:	f000 fbce 	bl	80018b4 <HAL_GPIO_Init>
}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40013800 	.word	0x40013800
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400
 800112c:	40004800 	.word	0x40004800
 8001130:	48000c00 	.word	0x48000c00

08001134 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001154:	d154      	bne.n	8001200 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a2b      	ldr	r2, [pc, #172]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800116e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001186:	f000 fb95 	bl	80018b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800118a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800119c:	230a      	movs	r3, #10
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 fb83 	bl	80018b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d114      	bne.n	80011fc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6593      	str	r3, [r2, #88]	; 0x58
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80011ea:	f001 f843 	bl	8002274 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_PCD_MspInit+0xd4>)
 80011f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011fa:	e001      	b.n	8001200 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80011fc:	f001 f83a 	bl	8002274 <HAL_PWREx_EnableVddUSB>
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	2036      	movs	r0, #54	; 0x36
 8001222:	f000 fa07 	bl	8001634 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001226:	2036      	movs	r0, #54	; 0x36
 8001228:	f000 fa20 	bl	800166c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <HAL_InitTick+0x9c>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_InitTick+0x9c>)
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <HAL_InitTick+0x9c>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001244:	f107 0210 	add.w	r2, r7, #16
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fe3c 	bl	8002ecc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001254:	f001 fe0e 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 8001258:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800125a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_InitTick+0xa0>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9b      	lsrs	r3, r3, #18
 8001264:	3b01      	subs	r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_InitTick+0xa4>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <HAL_InitTick+0xa8>)
 800126c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_InitTick+0xa4>)
 8001270:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001274:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001276:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <HAL_InitTick+0xa4>)
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <HAL_InitTick+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_InitTick+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <HAL_InitTick+0xa4>)
 800128a:	f002 fbfb 	bl	8003a84 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d104      	bne.n	800129e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <HAL_InitTick+0xa4>)
 8001296:	f002 fc2b 	bl	8003af0 <HAL_TIM_Base_Start_IT>
 800129a:	4603      	mov	r3, r0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	200015ec 	.word	0x200015ec
 80012b4:	40001000 	.word	0x40001000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80012f0:	2020      	movs	r0, #32
 80012f2:	f000 fcb9 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012f6:	2040      	movs	r0, #64	; 0x40
 80012f8:	f000 fcb6 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80012fc:	2080      	movs	r0, #128	; 0x80
 80012fe:	f000 fcb3 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001302:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001306:	f000 fcaf 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}

0800130e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001312:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001316:	f000 fca7 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800131a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800131e:	f000 fca3 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001322:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001326:	f000 fc9f 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800132a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800132e:	f000 fc9b 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001332:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001336:	f000 fc97 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <TIM6_DAC_IRQHandler+0x10>)
 8001346:	f002 fbfd 	bl	8003b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200015ec 	.word	0x200015ec

08001354 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <SystemInit+0x64>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a16      	ldr	r2, [pc, #88]	; (80013b8 <SystemInit+0x64>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <SystemInit+0x68>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a13      	ldr	r2, [pc, #76]	; (80013bc <SystemInit+0x68>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <SystemInit+0x68>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <SystemInit+0x68>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <SystemInit+0x68>)
 8001380:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001384:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001388:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <SystemInit+0x68>)
 800138c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001390:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <SystemInit+0x68>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <SystemInit+0x68>)
 8001398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <SystemInit+0x68>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SystemInit+0x64>)
 80013a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013aa:	609a      	str	r2, [r3, #8]
#endif
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	40021000 	.word	0x40021000

080013c0 <Reset_Handler>:
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f8 <LoopForever+0x2>
 80013c4:	2100      	movs	r1, #0
 80013c6:	e003      	b.n	80013d0 <LoopCopyDataInit>

080013c8 <CopyDataInit>:
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <LoopForever+0x6>)
 80013ca:	585b      	ldr	r3, [r3, r1]
 80013cc:	5043      	str	r3, [r0, r1]
 80013ce:	3104      	adds	r1, #4

080013d0 <LoopCopyDataInit>:
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <LoopForever+0xa>)
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <LoopForever+0xe>)
 80013d4:	1842      	adds	r2, r0, r1
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3f6      	bcc.n	80013c8 <CopyDataInit>
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <LoopForever+0x12>)
 80013dc:	e002      	b.n	80013e4 <LoopFillZerobss>

080013de <FillZerobss>:
 80013de:	2300      	movs	r3, #0
 80013e0:	f842 3b04 	str.w	r3, [r2], #4

080013e4 <LoopFillZerobss>:
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <LoopForever+0x16>)
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3f9      	bcc.n	80013de <FillZerobss>
 80013ea:	f7ff ffb3 	bl	8001354 <SystemInit>
 80013ee:	f004 ff9f 	bl	8006330 <__libc_init_array>
 80013f2:	f7ff f887 	bl	8000504 <main>

080013f6 <LoopForever>:
 80013f6:	e7fe      	b.n	80013f6 <LoopForever>
 80013f8:	20018000 	.word	0x20018000
 80013fc:	08006488 	.word	0x08006488
 8001400:	20000000 	.word	0x20000000
 8001404:	20000010 	.word	0x20000010
 8001408:	20000010 	.word	0x20000010
 800140c:	20001630 	.word	0x20001630

08001410 <ADC1_2_IRQHandler>:
 8001410:	e7fe      	b.n	8001410 <ADC1_2_IRQHandler>

08001412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f8fe 	bl	800161e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff fef2 	bl	800120c <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	71fb      	strb	r3, [r7, #7]
 8001432:	e001      	b.n	8001438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001434:	f7ff fcd0 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001438:	79fb      	ldrb	r3, [r7, #7]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x1c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x20>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a03      	ldr	r2, [pc, #12]	; (8001460 <HAL_IncTick+0x1c>)
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	2000162c 	.word	0x2000162c
 8001464:	20000008 	.word	0x20000008

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000162c 	.word	0x2000162c

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d004      	beq.n	80014a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_Delay+0x40>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014a4:	bf00      	nop
 80014a6:	f7ff ffdf 	bl	8001468 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d8f7      	bhi.n	80014a6 <HAL_Delay+0x26>
  {
  }
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff4c 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001646:	f7ff ff61 	bl	800150c <__NVIC_GetPriorityGrouping>
 800164a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	6978      	ldr	r0, [r7, #20]
 8001652:	f7ff ffb1 	bl	80015b8 <NVIC_EncodePriority>
 8001656:	4602      	mov	r2, r0
 8001658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff80 	bl	8001564 <__NVIC_SetPriority>
}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff54 	bl	8001528 <__NVIC_EnableIRQ>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0ac      	b.n	80017f4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f8b2 	bl	8001808 <DFSDM_GetChannelFromInstance>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b55      	ldr	r3, [pc, #340]	; (80017fc <HAL_DFSDM_ChannelInit+0x174>)
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e09f      	b.n	80017f4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fbb7 	bl	8000e28 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80016ba:	4b51      	ldr	r3, [pc, #324]	; (8001800 <HAL_DFSDM_ChannelInit+0x178>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a4f      	ldr	r2, [pc, #316]	; (8001800 <HAL_DFSDM_ChannelInit+0x178>)
 80016c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <HAL_DFSDM_ChannelInit+0x178>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d125      	bne.n	8001718 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 80016d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4948      	ldr	r1, [pc, #288]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a46      	ldr	r2, [pc, #280]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80016f0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	791b      	ldrb	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	3b01      	subs	r3, #1
 8001704:	041b      	lsls	r3, r3, #16
 8001706:	493f      	ldr	r1, [pc, #252]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800170c:	4b3d      	ldr	r3, [pc, #244]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a3c      	ldr	r2, [pc, #240]	; (8001804 <HAL_DFSDM_ChannelInit+0x17c>)
 8001712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001716:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001726:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001736:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800173c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 020f 	bic.w	r2, r2, #15
 8001754:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6819      	ldr	r1, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800177c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	3b01      	subs	r3, #1
 800178e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f002 0207 	and.w	r2, r2, #7
 80017a8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f810 	bl	8001808 <DFSDM_GetChannelFromInstance>
 80017e8:	4601      	mov	r1, r0
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_DFSDM_ChannelInit+0x174>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000288 	.word	0x20000288
 8001800:	20000284 	.word	0x20000284
 8001804:	40016000 	.word	0x40016000

08001808 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a20      	ldr	r2, [pc, #128]	; (8001894 <DFSDM_GetChannelFromInstance+0x8c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	e032      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <DFSDM_GetChannelFromInstance+0x90>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d102      	bne.n	800182c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001826:	2301      	movs	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e02b      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a1b      	ldr	r2, [pc, #108]	; (800189c <DFSDM_GetChannelFromInstance+0x94>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d102      	bne.n	800183a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001834:	2302      	movs	r3, #2
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e024      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <DFSDM_GetChannelFromInstance+0x98>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d102      	bne.n	8001848 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8001842:	2303      	movs	r3, #3
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	e01d      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <DFSDM_GetChannelFromInstance+0x9c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d102      	bne.n	8001856 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	e016      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <DFSDM_GetChannelFromInstance+0xa0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d102      	bne.n	8001864 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800185e:	2305      	movs	r3, #5
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e00f      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <DFSDM_GetChannelFromInstance+0xa4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d102      	bne.n	8001872 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800186c:	2306      	movs	r3, #6
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e008      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <DFSDM_GetChannelFromInstance+0xa8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d102      	bne.n	8001880 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 800187a:	2307      	movs	r3, #7
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	e001      	b.n	8001884 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40016000 	.word	0x40016000
 8001898:	40016020 	.word	0x40016020
 800189c:	40016040 	.word	0x40016040
 80018a0:	40016060 	.word	0x40016060
 80018a4:	40016080 	.word	0x40016080
 80018a8:	400160a0 	.word	0x400160a0
 80018ac:	400160c0 	.word	0x400160c0
 80018b0:	400160e0 	.word	0x400160e0

080018b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c2:	e17f      	b.n	8001bc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2101      	movs	r1, #1
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8171 	beq.w	8001bbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x38>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b12      	cmp	r3, #18
 80018ea:	d123      	bne.n	8001934 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	6939      	ldr	r1, [r7, #16]
 8001930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0203 	and.w	r2, r3, #3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d00b      	beq.n	8001988 <HAL_GPIO_Init+0xd4>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800197c:	2b11      	cmp	r3, #17
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b12      	cmp	r3, #18
 8001986:	d130      	bne.n	80019ea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019be:	2201      	movs	r2, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	f003 0201 	and.w	r2, r3, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d118      	bne.n	8001a28 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80019fc:	2201      	movs	r2, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	08db      	lsrs	r3, r3, #3
 8001a12:	f003 0201 	and.w	r2, r3, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80ac 	beq.w	8001bbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b5e      	ldr	r3, [pc, #376]	; (8001be0 <HAL_GPIO_Init+0x32c>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6a:	4a5d      	ldr	r2, [pc, #372]	; (8001be0 <HAL_GPIO_Init+0x32c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6613      	str	r3, [r2, #96]	; 0x60
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_GPIO_Init+0x32c>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a7e:	4a59      	ldr	r2, [pc, #356]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa8:	d025      	beq.n	8001af6 <HAL_GPIO_Init+0x242>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_GPIO_Init+0x334>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01f      	beq.n	8001af2 <HAL_GPIO_Init+0x23e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x338>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x23a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_GPIO_Init+0x33c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x236>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_GPIO_Init+0x340>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x232>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_GPIO_Init+0x344>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x22e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x348>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x22a>
 8001ada:	2306      	movs	r3, #6
 8001adc:	e00c      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e00a      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	e008      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001aea:	2303      	movs	r3, #3
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x244>
 8001af6:	2300      	movs	r3, #0
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b08:	4936      	ldr	r1, [pc, #216]	; (8001be4 <HAL_GPIO_Init+0x330>)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b16:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3a:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb8:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_GPIO_Init+0x34c>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f47f ae78 	bne.w	80018c4 <HAL_GPIO_Init+0x10>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	48000400 	.word	0x48000400
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	48000c00 	.word	0x48000c00
 8001bf4:	48001000 	.word	0x48001000
 8001bf8:	48001400 	.word	0x48001400
 8001bfc:	48001800 	.word	0x48001800
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	887b      	ldrh	r3, [r7, #2]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c54:	887a      	ldrh	r2, [r7, #2]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f806 	bl	8001c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e081      	b.n	8001dc4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d106      	bne.n	8001cda <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff f8eb 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2224      	movs	r2, #36	; 0x24
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cfe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	e006      	b.n	8001d36 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d104      	bne.n	8001d48 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	021a      	lsls	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69d9      	ldr	r1, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1a      	ldr	r2, [r3, #32]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d138      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e032      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2224      	movs	r2, #36	; 0x24
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d139      	bne.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e033      	b.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2224      	movs	r2, #36	; 0x24
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efc:	b08f      	sub	sp, #60	; 0x3c
 8001efe:	af0a      	add	r7, sp, #40	; 0x28
 8001f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e116      	b.n	800213a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff f904 	bl	8001134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fda5 	bl	8004a9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	687e      	ldr	r6, [r7, #4]
 8001f58:	466d      	mov	r5, sp
 8001f5a:	f106 0410 	add.w	r4, r6, #16
 8001f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f6e:	1d33      	adds	r3, r6, #4
 8001f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f72:	6838      	ldr	r0, [r7, #0]
 8001f74:	f002 fd3f 	bl	80049f6 <USB_CoreInit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0d7      	b.n	800213a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 fd93 	bl	8004abc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	e04a      	b.n	8002032 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	333d      	adds	r3, #61	; 0x3d
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	333c      	adds	r3, #60	; 0x3c
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3342      	adds	r3, #66	; 0x42
 8001fd8:	4602      	mov	r2, r0
 8001fda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	333f      	adds	r3, #63	; 0x3f
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3344      	adds	r3, #68	; 0x44
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	3348      	adds	r3, #72	; 0x48
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	3350      	adds	r3, #80	; 0x50
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	3301      	adds	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	429a      	cmp	r2, r3
 800203a:	d3af      	bcc.n	8001f9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e044      	b.n	80020cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	3301      	adds	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3b5      	bcc.n	8002042 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	687e      	ldr	r6, [r7, #4]
 80020de:	466d      	mov	r5, sp
 80020e0:	f106 0410 	add.w	r4, r6, #16
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f4:	1d33      	adds	r3, r6, #4
 80020f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f002 fd09 	bl	8004b10 <USB_DevInit>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e014      	b.n	800213a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	d102      	bne.n	800212e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f80a 	bl	8002142 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fe8f 	bl	8004e56 <USB_DevDisconnect>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002142 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	f043 0303 	orr.w	r3, r3, #3
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40007000 	.word	0x40007000

080021ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007000 	.word	0x40007000

080021c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d6:	d130      	bne.n	800223a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e4:	d038      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021ee:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2232      	movs	r2, #50	; 0x32
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220c:	e002      	b.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3b01      	subs	r3, #1
 8002212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002220:	d102      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f2      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002234:	d110      	bne.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e00f      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d007      	beq.n	8002258 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002256:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000
 800226c:	20000000 	.word	0x20000000
 8002270:	431bde83 	.word	0x431bde83

08002274 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_PWREx_EnableVddUSB+0x1c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_PWREx_EnableVddUSB+0x1c>)
 800227e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002282:	6053      	str	r3, [r2, #4]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40007000 	.word	0x40007000

08002294 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af02      	add	r7, sp, #8
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff f8e4 	bl	8001468 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e06f      	b.n	800238c <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_QSPI_Init+0x28>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e067      	b.n	800238c <HAL_QSPI_Init+0xf8>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe fe2d 	bl	8000f38 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80022de:	f241 3188 	movw	r1, #5000	; 0x1388
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f858 	bl	8002398 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	2120      	movs	r1, #32
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f850 	bl	80023b4 <QSPI_WaitFlagStateUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d131      	bne.n	8002382 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002328:	f023 0310 	bic.w	r3, r3, #16
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	0611      	lsls	r1, r2, #24
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68d2      	ldr	r2, [r2, #12]
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_QSPI_Init+0x100>)
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6912      	ldr	r2, [r2, #16]
 800234e:	0411      	lsls	r1, r2, #16
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6952      	ldr	r2, [r2, #20]
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6992      	ldr	r2, [r2, #24]
 800235a:	4311      	orrs	r1, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800238a:	7afb      	ldrb	r3, [r7, #11]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	ffe0f8fe 	.word	0xffe0f8fe

08002398 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023c4:	e01a      	b.n	80023fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d016      	beq.n	80023fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7ff f84b 	bl	8001468 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2204      	movs	r2, #4
 80023e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00e      	b.n	800241a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4013      	ands	r3, r2
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	429a      	cmp	r2, r3
 8002416:	d1d6      	bne.n	80023c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e39d      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002436:	4ba4      	ldr	r3, [pc, #656]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002440:	4ba1      	ldr	r3, [pc, #644]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80e1 	beq.w	800261a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_RCC_OscConfig+0x4a>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b0c      	cmp	r3, #12
 8002462:	f040 8088 	bne.w	8002576 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b01      	cmp	r3, #1
 800246a:	f040 8084 	bne.w	8002576 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800246e:	4b96      	ldr	r3, [pc, #600]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x62>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e375      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	4b8f      	ldr	r3, [pc, #572]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d004      	beq.n	80024a0 <HAL_RCC_OscConfig+0x7c>
 8002496:	4b8c      	ldr	r3, [pc, #560]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800249e:	e005      	b.n	80024ac <HAL_RCC_OscConfig+0x88>
 80024a0:	4b89      	ldr	r3, [pc, #548]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d223      	bcs.n	80024f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fd3b 	bl	8002f30 <RCC_SetFlashLatencyFromMSIRange>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e356      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c4:	4b80      	ldr	r3, [pc, #512]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a7f      	ldr	r2, [pc, #508]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024ca:	f043 0308 	orr.w	r3, r3, #8
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b7d      	ldr	r3, [pc, #500]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	497a      	ldr	r1, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024e2:	4b79      	ldr	r3, [pc, #484]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	4975      	ldr	r1, [pc, #468]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
 80024f6:	e022      	b.n	800253e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f8:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a72      	ldr	r2, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b70      	ldr	r3, [pc, #448]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	496d      	ldr	r1, [pc, #436]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002516:	4b6c      	ldr	r3, [pc, #432]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	4968      	ldr	r1, [pc, #416]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fcfe 	bl	8002f30 <RCC_SetFlashLatencyFromMSIRange>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e319      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800253e:	f000 fc03 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002542:	4601      	mov	r1, r0
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a5f      	ldr	r2, [pc, #380]	; (80026cc <HAL_RCC_OscConfig+0x2a8>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	fa21 f303 	lsr.w	r3, r1, r3
 800255a:	4a5d      	ldr	r2, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x2ac>)
 800255c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800255e:	4b5d      	ldr	r3, [pc, #372]	; (80026d4 <HAL_RCC_OscConfig+0x2b0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fe52 	bl	800120c <HAL_InitTick>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d052      	beq.n	8002618 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	e2fd      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d032      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800257e:	4b52      	ldr	r3, [pc, #328]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a51      	ldr	r2, [pc, #324]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800258a:	f7fe ff6d 	bl	8001468 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002592:	f7fe ff69 	bl	8001468 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e2e6      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a4:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a44      	ldr	r2, [pc, #272]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b42      	ldr	r3, [pc, #264]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	493f      	ldr	r1, [pc, #252]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	493a      	ldr	r1, [pc, #232]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
 80025e2:	e01a      	b.n	800261a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025e4:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025f0:	f7fe ff3a 	bl	8001468 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025f8:	f7fe ff36 	bl	8001468 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e2b3      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1d4>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d074      	beq.n	8002710 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d005      	beq.n	8002638 <HAL_RCC_OscConfig+0x214>
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d10e      	bne.n	8002650 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d064      	beq.n	800270e <HAL_RCC_OscConfig+0x2ea>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d160      	bne.n	800270e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e290      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x244>
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0x280>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x268>
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0x280>
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_OscConfig+0x2a4>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d01c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fedc 	bl	8001468 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	e011      	b.n	80026d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fed8 	bl	8001468 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d90a      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e255      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08006430 	.word	0x08006430
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d8:	4bae      	ldr	r3, [pc, #696]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0e7      	beq.n	80026b4 <HAL_RCC_OscConfig+0x290>
 80026e4:	e014      	b.n	8002710 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe febf 	bl	8001468 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ee:	f7fe febb 	bl	8001468 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e238      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002700:	4ba4      	ldr	r3, [pc, #656]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x2ca>
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d060      	beq.n	80027de <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b04      	cmp	r3, #4
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x30a>
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d119      	bne.n	800275c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d116      	bne.n	800275c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272e:	4b99      	ldr	r3, [pc, #612]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x322>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e215      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	4b93      	ldr	r3, [pc, #588]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	061b      	lsls	r3, r3, #24
 8002754:	498f      	ldr	r1, [pc, #572]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800275a:	e040      	b.n	80027de <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002764:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a8a      	ldr	r2, [pc, #552]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002770:	f7fe fe7a 	bl	8001468 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002778:	f7fe fe76 	bl	8001468 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1f3      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278a:	4b82      	ldr	r3, [pc, #520]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	061b      	lsls	r3, r3, #24
 80027a4:	497b      	ldr	r1, [pc, #492]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
 80027aa:	e018      	b.n	80027de <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ac:	4b79      	ldr	r3, [pc, #484]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a78      	ldr	r2, [pc, #480]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80027b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fe56 	bl	8001468 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c0:	f7fe fe52 	bl	8001468 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1cf      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d2:	4b70      	ldr	r3, [pc, #448]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03c      	beq.n	8002864 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d01c      	beq.n	800282c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f2:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80027f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027f8:	4a66      	ldr	r2, [pc, #408]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fe31 	bl	8001468 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe fe2d 	bl	8001468 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1aa      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800281c:	4b5d      	ldr	r3, [pc, #372]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 800281e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ef      	beq.n	800280a <HAL_RCC_OscConfig+0x3e6>
 800282a:	e01b      	b.n	8002864 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b59      	ldr	r3, [pc, #356]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 800282e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002832:	4a58      	ldr	r2, [pc, #352]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe fe14 	bl	8001468 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002844:	f7fe fe10 	bl	8001468 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e18d      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002856:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ef      	bne.n	8002844 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a5 	beq.w	80029bc <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b44      	ldr	r3, [pc, #272]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	4a43      	ldr	r2, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289a:	2301      	movs	r3, #1
 800289c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_RCC_OscConfig+0x574>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_OscConfig+0x574>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3a      	ldr	r2, [pc, #232]	; (8002998 <HAL_RCC_OscConfig+0x574>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b6:	f7fe fdd7 	bl	8001468 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe fdd3 	bl	8001468 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e150      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x574>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d108      	bne.n	80028f6 <HAL_RCC_OscConfig+0x4d2>
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f4:	e024      	b.n	8002940 <HAL_RCC_OscConfig+0x51c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d110      	bne.n	8002920 <HAL_RCC_OscConfig+0x4fc>
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291e:	e00f      	b.n	8002940 <HAL_RCC_OscConfig+0x51c>
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d016      	beq.n	8002976 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fd8e 	bl	8001468 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fd8a 	bl	8001468 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e105      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_OscConfig+0x570>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ed      	beq.n	8002950 <HAL_RCC_OscConfig+0x52c>
 8002974:	e019      	b.n	80029aa <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fd77 	bl	8001468 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297c:	e00e      	b.n	800299c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe fd73 	bl	8001468 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d905      	bls.n	800299c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0ee      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299c:	4b77      	ldr	r3, [pc, #476]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e9      	bne.n	800297e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029aa:	7ffb      	ldrb	r3, [r7, #31]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d105      	bne.n	80029bc <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b0:	4b72      	ldr	r3, [pc, #456]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4a71      	ldr	r2, [pc, #452]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80d5 	beq.w	8002b70 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	f000 808e 	beq.w	8002aea <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d15b      	bne.n	8002a8e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d6:	4b69      	ldr	r3, [pc, #420]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a68      	ldr	r2, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 80029dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fd41 	bl	8001468 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe fd3d 	bl	8001468 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0ba      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	4b5f      	ldr	r3, [pc, #380]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a08:	4b5c      	ldr	r3, [pc, #368]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	4b5c      	ldr	r3, [pc, #368]	; (8002b80 <HAL_RCC_OscConfig+0x75c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a18:	3a01      	subs	r2, #1
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a22:	0212      	lsls	r2, r2, #8
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a2a:	0852      	lsrs	r2, r2, #1
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0552      	lsls	r2, r2, #21
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a36:	0852      	lsrs	r2, r2, #1
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	0652      	lsls	r2, r2, #25
 8002a3c:	4311      	orrs	r1, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a42:	0912      	lsrs	r2, r2, #4
 8002a44:	0452      	lsls	r2, r2, #17
 8002a46:	430a      	orrs	r2, r1
 8002a48:	494c      	ldr	r1, [pc, #304]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a4a      	ldr	r2, [pc, #296]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a58:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4a47      	ldr	r2, [pc, #284]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a64:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7fe fcff 	bl	8001468 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fcfb 	bl	8001468 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e078      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x64a>
 8002a8c:	e070      	b.n	8002b70 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a3a      	ldr	r2, [pc, #232]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a98:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002aa6:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4a34      	ldr	r2, [pc, #208]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002aac:	f023 0303 	bic.w	r3, r3, #3
 8002ab0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002ab8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fcd1 	bl	8001468 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fccd 	bl	8001468 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e04a      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x6a6>
 8002ae8:	e042      	b.n	8002b70 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e03d      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_OscConfig+0x758>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0203 	and.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d130      	bne.n	8002b6c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	3b01      	subs	r3, #1
 8002b16:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d127      	bne.n	8002b6c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d11f      	bne.n	8002b6c <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b36:	2a07      	cmp	r2, #7
 8002b38:	bf14      	ite	ne
 8002b3a:	2201      	movne	r2, #1
 8002b3c:	2200      	moveq	r2, #0
 8002b3e:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d113      	bne.n	8002b6c <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d109      	bne.n	8002b6c <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	3b01      	subs	r3, #1
 8002b66:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	f99d808c 	.word	0xf99d808c

08002b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0c8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b98:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d910      	bls.n	8002bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 0207 	bic.w	r2, r3, #7
 8002bae:	4961      	ldr	r1, [pc, #388]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0b0      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d04c      	beq.n	8002c6e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bdc:	4b56      	ldr	r3, [pc, #344]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d121      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e09e      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d115      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e092      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d109      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e086      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1c:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e07e      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2c:	4b42      	ldr	r3, [pc, #264]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 0203 	bic.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	493f      	ldr	r1, [pc, #252]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fc13 	bl	8001468 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c46:	f7fe fc0f 	bl	8001468 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e066      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 020c 	and.w	r2, r3, #12
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d1eb      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	492c      	ldr	r1, [pc, #176]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d210      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 0207 	bic.w	r2, r3, #7
 8002ca2:	4924      	ldr	r1, [pc, #144]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <HAL_RCC_ClockConfig+0x1b0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e036      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4918      	ldr	r1, [pc, #96]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4910      	ldr	r1, [pc, #64]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cfa:	f000 f825 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4601      	mov	r1, r0
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCC_ClockConfig+0x1b4>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	fa21 f303 	lsr.w	r3, r1, r3
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fa74 	bl	800120c <HAL_InitTick>
 8002d24:	4603      	mov	r3, r0
 8002d26:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d28:	7afb      	ldrb	r3, [r7, #11]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40022000 	.word	0x40022000
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08006430 	.word	0x08006430
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d56:	4b3d      	ldr	r3, [pc, #244]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d60:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d121      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d11e      	bne.n	8002dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d7c:	4b33      	ldr	r3, [pc, #204]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d88:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e005      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002da4:	4a2a      	ldr	r2, [pc, #168]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d102      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d101      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d133      	bne.n	8002e3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0xa4>
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0xaa>
 8002dea:	e005      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dee:	617b      	str	r3, [r7, #20]
      break;
 8002df0:	e005      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df4:	617b      	str	r3, [r7, #20]
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	617b      	str	r3, [r7, #20]
      break;
 8002dfc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	3301      	adds	r3, #1
 8002e0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	fb02 f203 	mul.w	r2, r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0e5b      	lsrs	r3, r3, #25
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3724      	adds	r7, #36	; 0x24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	08006448 	.word	0x08006448
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000000 	.word	0x20000000

08002e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e78:	f7ff fff0 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002e7c:	4601      	mov	r1, r0
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	08006440 	.word	0x08006440

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ea4:	f7ff ffda 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002ea8:	4601      	mov	r1, r0
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0adb      	lsrs	r3, r3, #11
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08006440 	.word	0x08006440

08002ecc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	220f      	movs	r2, #15
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0203 	and.w	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_GetClockConfig+0x5c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f0e:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_RCC_GetClockConfig+0x60>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0207 	and.w	r2, r3, #7
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40022000 	.word	0x40022000

08002f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f48:	f7ff f930 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002f4c:	6178      	str	r0, [r7, #20]
 8002f4e:	e014      	b.n	8002f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f50:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f68:	f7ff f920 	bl	80021ac <HAL_PWREx_GetVoltageRange>
 8002f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f80:	d10b      	bne.n	8002f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b80      	cmp	r3, #128	; 0x80
 8002f86:	d919      	bls.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f8c:	d902      	bls.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f8e:	2302      	movs	r3, #2
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e013      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f94:	2301      	movs	r3, #1
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	e010      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d902      	bls.n	8002fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	e00a      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b80      	cmp	r3, #128	; 0x80
 8002faa:	d102      	bne.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fac:	2302      	movs	r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e004      	b.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b70      	cmp	r3, #112	; 0x70
 8002fb6:	d101      	bne.n	8002fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb8:	2301      	movs	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 0207 	bic.w	r2, r3, #7
 8002fc4:	4909      	ldr	r1, [pc, #36]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d001      	beq.n	8002fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40022000 	.word	0x40022000

08002ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	2b00      	cmp	r3, #0
 800300a:	d03f      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003010:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003014:	d01c      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301a:	d802      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003020:	e01f      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003026:	d003      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003028:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302c:	d01c      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800302e:	e018      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003030:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a84      	ldr	r2, [pc, #528]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800303c:	e015      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fac9 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800304e:	e00c      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3320      	adds	r3, #32
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fbb0 	bl	80037bc <RCCEx_PLLSAI2_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003060:	e003      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	74fb      	strb	r3, [r7, #19]
      break;
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307e:	4972      	ldr	r1, [pc, #456]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003086:	e001      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	7cfb      	ldrb	r3, [r7, #19]
 800308a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03f      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a0:	d01c      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80030a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a6:	d802      	bhi.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xda>
 80030ac:	e01f      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80030ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030b2:	d003      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80030b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030b8:	d01c      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80030ba:	e018      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030bc:	4b62      	ldr	r3, [pc, #392]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c8:	e015      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa83 	bl	80035dc <RCCEx_PLLSAI1_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030da:	e00c      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3320      	adds	r3, #32
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fb6a 	bl	80037bc <RCCEx_PLLSAI2_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ec:	e003      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	74fb      	strb	r3, [r7, #19]
      break;
 80030f2:	e000      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030fc:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310a:	494f      	ldr	r1, [pc, #316]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003112:	e001      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003140:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	4a40      	ldr	r2, [pc, #256]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	6593      	str	r3, [r2, #88]	; 0x58
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003158:	2301      	movs	r3, #1
 800315a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003168:	f7fe f97e 	bl	8001468 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800316e:	e009      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe f97a 	bl	8001468 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d902      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	74fb      	strb	r3, [r7, #19]
        break;
 8003182:	e005      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d15c      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01f      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d019      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a20      	ldr	r2, [pc, #128]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe f939 	bl	8001468 <HAL_GetTick>
 80031f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f8:	e00b      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe f935 	bl	8001468 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d902      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	74fb      	strb	r3, [r7, #19]
            break;
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ec      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	4904      	ldr	r1, [pc, #16]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800323e:	e009      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
 8003244:	e006      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003254:	7c7b      	ldrb	r3, [r7, #17]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b9e      	ldr	r3, [pc, #632]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	4a9d      	ldr	r2, [pc, #628]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003272:	4b98      	ldr	r3, [pc, #608]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 0203 	bic.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	4994      	ldr	r1, [pc, #592]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003294:	4b8f      	ldr	r3, [pc, #572]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 020c 	bic.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	498c      	ldr	r1, [pc, #560]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b6:	4b87      	ldr	r3, [pc, #540]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4983      	ldr	r1, [pc, #524]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d8:	4b7e      	ldr	r3, [pc, #504]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	497b      	ldr	r1, [pc, #492]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032fa:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	4972      	ldr	r1, [pc, #456]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800331c:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332a:	496a      	ldr	r1, [pc, #424]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333e:	4b65      	ldr	r3, [pc, #404]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	4961      	ldr	r1, [pc, #388]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003360:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	4959      	ldr	r1, [pc, #356]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003382:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003390:	4950      	ldr	r1, [pc, #320]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	4948      	ldr	r1, [pc, #288]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	493f      	ldr	r1, [pc, #252]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d028      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e8:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f6:	4937      	ldr	r1, [pc, #220]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003406:	d106      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
 8003414:	e011      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800341e:	d10c      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f8d8 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	491f      	ldr	r1, [pc, #124]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003464:	d106      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800346c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003470:	60d3      	str	r3, [r2, #12]
 8003472:	e011      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f8a9 	bl	80035dc <RCCEx_PLLSAI1_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ce:	60d3      	str	r3, [r2, #12]
 80034d0:	e014      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f877 	bl	80035dc <RCCEx_PLLSAI1_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003516:	4928      	ldr	r1, [pc, #160]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003526:	d10d      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f854 	bl	80035dc <RCCEx_PLLSAI1_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d014      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	74bb      	strb	r3, [r7, #18]
 8003542:	e011      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3320      	adds	r3, #32
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f931 	bl	80037bc <RCCEx_PLLSAI2_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003582:	490d      	ldr	r1, [pc, #52]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000

080035bc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6013      	str	r3, [r2, #0]
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000

080035dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ea:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d018      	beq.n	8003628 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035f6:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0203 	and.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d10d      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
       ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800360e:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
       ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d044      	beq.n	80036ac <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
 8003626:	e041      	b.n	80036ac <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d00c      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x6e>
 8003630:	2b03      	cmp	r3, #3
 8003632:	d013      	beq.n	800365c <RCCEx_PLLSAI1_Config+0x80>
 8003634:	2b01      	cmp	r3, #1
 8003636:	d120      	bne.n	800367a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003638:	4b5f      	ldr	r3, [pc, #380]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11d      	bne.n	8003680 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e01a      	b.n	8003680 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800364a:	4b5b      	ldr	r3, [pc, #364]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e013      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800365c:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10f      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003678:	e006      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      break;
 800367e:	e004      	b.n	800368a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003680:	bf00      	nop
 8003682:	e002      	b.n	800368a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003688:	bf00      	nop
    }

    if(status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10d      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	430b      	orrs	r3, r1
 80036a6:	4944      	ldr	r1, [pc, #272]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d17d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a40      	ldr	r2, [pc, #256]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036be:	f7fd fed3 	bl	8001468 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036c4:	e009      	b.n	80036da <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c6:	f7fd fecf 	bl	8001468 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d902      	bls.n	80036da <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	73fb      	strb	r3, [r7, #15]
        break;
 80036d8:	e005      	b.n	80036e6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ef      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d160      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d111      	bne.n	8003716 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	0211      	lsls	r1, r2, #8
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	0912      	lsrs	r2, r2, #4
 800370a:	0452      	lsls	r2, r2, #17
 800370c:	430a      	orrs	r2, r1
 800370e:	492a      	ldr	r1, [pc, #168]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003710:	4313      	orrs	r3, r2
 8003712:	610b      	str	r3, [r1, #16]
 8003714:	e027      	b.n	8003766 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d112      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800371c:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6892      	ldr	r2, [r2, #8]
 800372c:	0211      	lsls	r1, r2, #8
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6912      	ldr	r2, [r2, #16]
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	3a01      	subs	r2, #1
 8003736:	0552      	lsls	r2, r2, #21
 8003738:	430a      	orrs	r2, r1
 800373a:	491f      	ldr	r1, [pc, #124]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	610b      	str	r3, [r1, #16]
 8003740:	e011      	b.n	8003766 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800374a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6892      	ldr	r2, [r2, #8]
 8003752:	0211      	lsls	r1, r2, #8
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6952      	ldr	r2, [r2, #20]
 8003758:	0852      	lsrs	r2, r2, #1
 800375a:	3a01      	subs	r2, #1
 800375c:	0652      	lsls	r2, r2, #25
 800375e:	430a      	orrs	r2, r1
 8003760:	4915      	ldr	r1, [pc, #84]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800376c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003770:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fe79 	bl	8001468 <HAL_GetTick>
 8003776:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003778:	e009      	b.n	800378e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800377a:	f7fd fe75 	bl	8001468 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d902      	bls.n	800378e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	73fb      	strb	r3, [r7, #15]
          break;
 800378c:	e005      	b.n	800379a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0ef      	beq.n	800377a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40021000 	.word	0x40021000

080037bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ca:	4b68      	ldr	r3, [pc, #416]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d018      	beq.n	8003808 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037d6:	4b65      	ldr	r3, [pc, #404]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0203 	and.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d10d      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ee:	4b5f      	ldr	r3, [pc, #380]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
       ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d044      	beq.n	800388c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e041      	b.n	800388c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d00c      	beq.n	800382a <RCCEx_PLLSAI2_Config+0x6e>
 8003810:	2b03      	cmp	r3, #3
 8003812:	d013      	beq.n	800383c <RCCEx_PLLSAI2_Config+0x80>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d120      	bne.n	800385a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003818:	4b54      	ldr	r3, [pc, #336]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d11d      	bne.n	8003860 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003828:	e01a      	b.n	8003860 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800382a:	4b50      	ldr	r3, [pc, #320]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383a:	e013      	b.n	8003864 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383c:	4b4b      	ldr	r3, [pc, #300]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10f      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003848:	4b48      	ldr	r3, [pc, #288]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003858:	e006      	b.n	8003868 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
      break;
 800385e:	e004      	b.n	800386a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003868:	bf00      	nop
    }

    if(status == HAL_OK)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003870:	4b3e      	ldr	r3, [pc, #248]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6819      	ldr	r1, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	3b01      	subs	r3, #1
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	430b      	orrs	r3, r1
 8003886:	4939      	ldr	r1, [pc, #228]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d167      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a35      	ldr	r2, [pc, #212]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389e:	f7fd fde3 	bl	8001468 <HAL_GetTick>
 80038a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a4:	e009      	b.n	80038ba <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a6:	f7fd fddf 	bl	8001468 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d902      	bls.n	80038ba <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	73fb      	strb	r3, [r7, #15]
        break;
 80038b8:	e005      	b.n	80038c6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ba:	4b2c      	ldr	r3, [pc, #176]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ef      	bne.n	80038a6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d14a      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d111      	bne.n	80038f6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	0211      	lsls	r1, r2, #8
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68d2      	ldr	r2, [r2, #12]
 80038e8:	0912      	lsrs	r2, r2, #4
 80038ea:	0452      	lsls	r2, r2, #17
 80038ec:	430a      	orrs	r2, r1
 80038ee:	491f      	ldr	r1, [pc, #124]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	614b      	str	r3, [r1, #20]
 80038f4:	e011      	b.n	800391a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6912      	ldr	r2, [r2, #16]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0652      	lsls	r2, r2, #25
 8003912:	430a      	orrs	r2, r1
 8003914:	4915      	ldr	r1, [pc, #84]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a13      	ldr	r2, [pc, #76]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fd fd9f 	bl	8001468 <HAL_GetTick>
 800392a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800392c:	e009      	b.n	8003942 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800392e:	f7fd fd9b 	bl	8001468 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d902      	bls.n	8003942 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	73fb      	strb	r3, [r7, #15]
          break;
 8003940:	e005      	b.n	800394e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003942:	4b0a      	ldr	r3, [pc, #40]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0ef      	beq.n	800392e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <RCCEx_PLLSAI2_Config+0x1b0>)
 800395e:	4313      	orrs	r3, r2
 8003960:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07c      	b.n	8003a7c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fd fb0f 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c2:	d902      	bls.n	80039ca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e002      	b.n	80039d0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039d8:	d007      	beq.n	80039ea <HAL_SPI_Init+0x7a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e2:	d002      	beq.n	80039ea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039fa:	d903      	bls.n	8003a04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
 8003a02:	e002      	b.n	8003a0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	ea42 0103 	orr.w	r1, r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0204 	and.w	r2, r3, #4
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e01d      	b.n	8003ad2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f815 	bl	8003ada <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f000 f986 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <HAL_TIM_Base_Start_IT+0x50>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d00b      	beq.n	8003b32 <HAL_TIM_Base_Start_IT+0x42>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b20:	d007      	beq.n	8003b32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	00010007 	.word	0x00010007

08003b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d122      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d11b      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0202 	mvn.w	r2, #2
 8003b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f905 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003b8c:	e005      	b.n	8003b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8f7 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f908 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d122      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0204 	mvn.w	r2, #4
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8db 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8cd 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8de 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0208 	mvn.w	r2, #8
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f8b1 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f8a3 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f8b4 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d122      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0210 	mvn.w	r2, #16
 8003c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2208      	movs	r2, #8
 8003c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f887 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f879 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f88a 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0201 	mvn.w	r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fd f86e 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d107      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f914 	bl	8003f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d02:	d10e      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d107      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f907 	bl	8003f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d10e      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f838 	bl	8003dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d10e      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d107      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f06f 0220 	mvn.w	r2, #32
 8003d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f8c7 	bl	8003f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d00f      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3d      	ldr	r2, [pc, #244]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3b      	ldr	r2, [pc, #236]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d108      	bne.n	8003e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01f      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d01b      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d017      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00f      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00b      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <TIM_Base_SetConfig+0x128>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <TIM_Base_SetConfig+0x12c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d003      	beq.n	8003e6e <TIM_Base_SetConfig+0x9a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <TIM_Base_SetConfig+0x130>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d108      	bne.n	8003e80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00f      	beq.n	8003ecc <TIM_Base_SetConfig+0xf8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a12      	ldr	r2, [pc, #72]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0xf8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a11      	ldr	r2, [pc, #68]	; (8003efc <TIM_Base_SetConfig+0x128>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0xf8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a10      	ldr	r2, [pc, #64]	; (8003f00 <TIM_Base_SetConfig+0x12c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0xf8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0f      	ldr	r2, [pc, #60]	; (8003f04 <TIM_Base_SetConfig+0x130>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d103      	bne.n	8003ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40013400 	.word	0x40013400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e040      	b.n	8003fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd f86e 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8c0 	bl	8004108 <UART_SetConfig>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e022      	b.n	8003fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fbfc 	bl	8004798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fc83 	bl	80048dc <UART_CheckIdleState>
 8003fd6:	4603      	mov	r3, r0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	f040 8081 	bne.w	80040fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_UART_Transmit+0x26>
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e079      	b.n	80040fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_UART_Transmit+0x38>
 8004014:	2302      	movs	r3, #2
 8004016:	e072      	b.n	80040fe <HAL_UART_Transmit+0x11e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2221      	movs	r2, #33	; 0x21
 800402a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800402c:	f7fd fa1c 	bl	8001468 <HAL_GetTick>
 8004030:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	88fa      	ldrh	r2, [r7, #6]
 800403e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d108      	bne.n	800405e <HAL_UART_Transmit+0x7e>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e003      	b.n	8004066 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004066:	e02d      	b.n	80040c4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fc77 	bl	8004966 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e03d      	b.n	80040fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004094:	b292      	uxth	r2, r2
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	3302      	adds	r3, #2
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e008      	b.n	80040b2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	b292      	uxth	r2, r2
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1cb      	bne.n	8004068 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2140      	movs	r1, #64	; 0x40
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fc43 	bl	8004966 <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e009      	b.n	80040fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e000      	b.n	80040fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80040fc:	2302      	movs	r3, #2
  }
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004108:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800410c:	b088      	sub	sp, #32
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	4313      	orrs	r3, r2
 8004134:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4bac      	ldr	r3, [pc, #688]	; (80043f0 <UART_SetConfig+0x2e8>)
 800413e:	4013      	ands	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	69f9      	ldr	r1, [r7, #28]
 8004146:	430b      	orrs	r3, r1
 8004148:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4aa2      	ldr	r2, [pc, #648]	; (80043f4 <UART_SetConfig+0x2ec>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	4313      	orrs	r3, r2
 8004178:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a99      	ldr	r2, [pc, #612]	; (80043f8 <UART_SetConfig+0x2f0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d121      	bne.n	80041dc <UART_SetConfig+0xd4>
 8004198:	4b98      	ldr	r3, [pc, #608]	; (80043fc <UART_SetConfig+0x2f4>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d816      	bhi.n	80041d4 <UART_SetConfig+0xcc>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0xa4>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041c9 	.word	0x080041c9
 80041b4:	080041c3 	.word	0x080041c3
 80041b8:	080041cf 	.word	0x080041cf
 80041bc:	2301      	movs	r3, #1
 80041be:	76fb      	strb	r3, [r7, #27]
 80041c0:	e0e8      	b.n	8004394 <UART_SetConfig+0x28c>
 80041c2:	2302      	movs	r3, #2
 80041c4:	76fb      	strb	r3, [r7, #27]
 80041c6:	e0e5      	b.n	8004394 <UART_SetConfig+0x28c>
 80041c8:	2304      	movs	r3, #4
 80041ca:	76fb      	strb	r3, [r7, #27]
 80041cc:	e0e2      	b.n	8004394 <UART_SetConfig+0x28c>
 80041ce:	2308      	movs	r3, #8
 80041d0:	76fb      	strb	r3, [r7, #27]
 80041d2:	e0df      	b.n	8004394 <UART_SetConfig+0x28c>
 80041d4:	2310      	movs	r3, #16
 80041d6:	76fb      	strb	r3, [r7, #27]
 80041d8:	bf00      	nop
 80041da:	e0db      	b.n	8004394 <UART_SetConfig+0x28c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a87      	ldr	r2, [pc, #540]	; (8004400 <UART_SetConfig+0x2f8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d134      	bne.n	8004250 <UART_SetConfig+0x148>
 80041e6:	4b85      	ldr	r3, [pc, #532]	; (80043fc <UART_SetConfig+0x2f4>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	d829      	bhi.n	8004248 <UART_SetConfig+0x140>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0xf4>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004249 	.word	0x08004249
 8004204:	08004249 	.word	0x08004249
 8004208:	08004249 	.word	0x08004249
 800420c:	0800423d 	.word	0x0800423d
 8004210:	08004249 	.word	0x08004249
 8004214:	08004249 	.word	0x08004249
 8004218:	08004249 	.word	0x08004249
 800421c:	08004237 	.word	0x08004237
 8004220:	08004249 	.word	0x08004249
 8004224:	08004249 	.word	0x08004249
 8004228:	08004249 	.word	0x08004249
 800422c:	08004243 	.word	0x08004243
 8004230:	2300      	movs	r3, #0
 8004232:	76fb      	strb	r3, [r7, #27]
 8004234:	e0ae      	b.n	8004394 <UART_SetConfig+0x28c>
 8004236:	2302      	movs	r3, #2
 8004238:	76fb      	strb	r3, [r7, #27]
 800423a:	e0ab      	b.n	8004394 <UART_SetConfig+0x28c>
 800423c:	2304      	movs	r3, #4
 800423e:	76fb      	strb	r3, [r7, #27]
 8004240:	e0a8      	b.n	8004394 <UART_SetConfig+0x28c>
 8004242:	2308      	movs	r3, #8
 8004244:	76fb      	strb	r3, [r7, #27]
 8004246:	e0a5      	b.n	8004394 <UART_SetConfig+0x28c>
 8004248:	2310      	movs	r3, #16
 800424a:	76fb      	strb	r3, [r7, #27]
 800424c:	bf00      	nop
 800424e:	e0a1      	b.n	8004394 <UART_SetConfig+0x28c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6b      	ldr	r2, [pc, #428]	; (8004404 <UART_SetConfig+0x2fc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d120      	bne.n	800429c <UART_SetConfig+0x194>
 800425a:	4b68      	ldr	r3, [pc, #416]	; (80043fc <UART_SetConfig+0x2f4>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004264:	2b10      	cmp	r3, #16
 8004266:	d00f      	beq.n	8004288 <UART_SetConfig+0x180>
 8004268:	2b10      	cmp	r3, #16
 800426a:	d802      	bhi.n	8004272 <UART_SetConfig+0x16a>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <UART_SetConfig+0x174>
 8004270:	e010      	b.n	8004294 <UART_SetConfig+0x18c>
 8004272:	2b20      	cmp	r3, #32
 8004274:	d005      	beq.n	8004282 <UART_SetConfig+0x17a>
 8004276:	2b30      	cmp	r3, #48	; 0x30
 8004278:	d009      	beq.n	800428e <UART_SetConfig+0x186>
 800427a:	e00b      	b.n	8004294 <UART_SetConfig+0x18c>
 800427c:	2300      	movs	r3, #0
 800427e:	76fb      	strb	r3, [r7, #27]
 8004280:	e088      	b.n	8004394 <UART_SetConfig+0x28c>
 8004282:	2302      	movs	r3, #2
 8004284:	76fb      	strb	r3, [r7, #27]
 8004286:	e085      	b.n	8004394 <UART_SetConfig+0x28c>
 8004288:	2304      	movs	r3, #4
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	e082      	b.n	8004394 <UART_SetConfig+0x28c>
 800428e:	2308      	movs	r3, #8
 8004290:	76fb      	strb	r3, [r7, #27]
 8004292:	e07f      	b.n	8004394 <UART_SetConfig+0x28c>
 8004294:	2310      	movs	r3, #16
 8004296:	76fb      	strb	r3, [r7, #27]
 8004298:	bf00      	nop
 800429a:	e07b      	b.n	8004394 <UART_SetConfig+0x28c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a59      	ldr	r2, [pc, #356]	; (8004408 <UART_SetConfig+0x300>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d120      	bne.n	80042e8 <UART_SetConfig+0x1e0>
 80042a6:	4b55      	ldr	r3, [pc, #340]	; (80043fc <UART_SetConfig+0x2f4>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d00f      	beq.n	80042d4 <UART_SetConfig+0x1cc>
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d802      	bhi.n	80042be <UART_SetConfig+0x1b6>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <UART_SetConfig+0x1c0>
 80042bc:	e010      	b.n	80042e0 <UART_SetConfig+0x1d8>
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d005      	beq.n	80042ce <UART_SetConfig+0x1c6>
 80042c2:	2bc0      	cmp	r3, #192	; 0xc0
 80042c4:	d009      	beq.n	80042da <UART_SetConfig+0x1d2>
 80042c6:	e00b      	b.n	80042e0 <UART_SetConfig+0x1d8>
 80042c8:	2300      	movs	r3, #0
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	e062      	b.n	8004394 <UART_SetConfig+0x28c>
 80042ce:	2302      	movs	r3, #2
 80042d0:	76fb      	strb	r3, [r7, #27]
 80042d2:	e05f      	b.n	8004394 <UART_SetConfig+0x28c>
 80042d4:	2304      	movs	r3, #4
 80042d6:	76fb      	strb	r3, [r7, #27]
 80042d8:	e05c      	b.n	8004394 <UART_SetConfig+0x28c>
 80042da:	2308      	movs	r3, #8
 80042dc:	76fb      	strb	r3, [r7, #27]
 80042de:	e059      	b.n	8004394 <UART_SetConfig+0x28c>
 80042e0:	2310      	movs	r3, #16
 80042e2:	76fb      	strb	r3, [r7, #27]
 80042e4:	bf00      	nop
 80042e6:	e055      	b.n	8004394 <UART_SetConfig+0x28c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a47      	ldr	r2, [pc, #284]	; (800440c <UART_SetConfig+0x304>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d124      	bne.n	800433c <UART_SetConfig+0x234>
 80042f2:	4b42      	ldr	r3, [pc, #264]	; (80043fc <UART_SetConfig+0x2f4>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004300:	d012      	beq.n	8004328 <UART_SetConfig+0x220>
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d802      	bhi.n	800430e <UART_SetConfig+0x206>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <UART_SetConfig+0x214>
 800430c:	e012      	b.n	8004334 <UART_SetConfig+0x22c>
 800430e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004312:	d006      	beq.n	8004322 <UART_SetConfig+0x21a>
 8004314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004318:	d009      	beq.n	800432e <UART_SetConfig+0x226>
 800431a:	e00b      	b.n	8004334 <UART_SetConfig+0x22c>
 800431c:	2300      	movs	r3, #0
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e038      	b.n	8004394 <UART_SetConfig+0x28c>
 8004322:	2302      	movs	r3, #2
 8004324:	76fb      	strb	r3, [r7, #27]
 8004326:	e035      	b.n	8004394 <UART_SetConfig+0x28c>
 8004328:	2304      	movs	r3, #4
 800432a:	76fb      	strb	r3, [r7, #27]
 800432c:	e032      	b.n	8004394 <UART_SetConfig+0x28c>
 800432e:	2308      	movs	r3, #8
 8004330:	76fb      	strb	r3, [r7, #27]
 8004332:	e02f      	b.n	8004394 <UART_SetConfig+0x28c>
 8004334:	2310      	movs	r3, #16
 8004336:	76fb      	strb	r3, [r7, #27]
 8004338:	bf00      	nop
 800433a:	e02b      	b.n	8004394 <UART_SetConfig+0x28c>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <UART_SetConfig+0x2ec>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d124      	bne.n	8004390 <UART_SetConfig+0x288>
 8004346:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <UART_SetConfig+0x2f4>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	d012      	beq.n	800437c <UART_SetConfig+0x274>
 8004356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435a:	d802      	bhi.n	8004362 <UART_SetConfig+0x25a>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <UART_SetConfig+0x268>
 8004360:	e012      	b.n	8004388 <UART_SetConfig+0x280>
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004366:	d006      	beq.n	8004376 <UART_SetConfig+0x26e>
 8004368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800436c:	d009      	beq.n	8004382 <UART_SetConfig+0x27a>
 800436e:	e00b      	b.n	8004388 <UART_SetConfig+0x280>
 8004370:	2300      	movs	r3, #0
 8004372:	76fb      	strb	r3, [r7, #27]
 8004374:	e00e      	b.n	8004394 <UART_SetConfig+0x28c>
 8004376:	2302      	movs	r3, #2
 8004378:	76fb      	strb	r3, [r7, #27]
 800437a:	e00b      	b.n	8004394 <UART_SetConfig+0x28c>
 800437c:	2304      	movs	r3, #4
 800437e:	76fb      	strb	r3, [r7, #27]
 8004380:	e008      	b.n	8004394 <UART_SetConfig+0x28c>
 8004382:	2308      	movs	r3, #8
 8004384:	76fb      	strb	r3, [r7, #27]
 8004386:	e005      	b.n	8004394 <UART_SetConfig+0x28c>
 8004388:	2310      	movs	r3, #16
 800438a:	76fb      	strb	r3, [r7, #27]
 800438c:	bf00      	nop
 800438e:	e001      	b.n	8004394 <UART_SetConfig+0x28c>
 8004390:	2310      	movs	r3, #16
 8004392:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <UART_SetConfig+0x2ec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	f040 80fa 	bne.w	8004594 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043a0:	7efb      	ldrb	r3, [r7, #27]
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d836      	bhi.n	8004414 <UART_SetConfig+0x30c>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0x2a4>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	08004415 	.word	0x08004415
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	08004415 	.word	0x08004415
 80043bc:	080043df 	.word	0x080043df
 80043c0:	08004415 	.word	0x08004415
 80043c4:	08004415 	.word	0x08004415
 80043c8:	08004415 	.word	0x08004415
 80043cc:	080043e7 	.word	0x080043e7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe fd50 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80043d4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043d6:	e020      	b.n	800441a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <UART_SetConfig+0x308>)
 80043da:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043dc:	e01d      	b.n	800441a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80043de:	f7fe fcb3 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 80043e2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043e4:	e019      	b.n	800441a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80043e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ea:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ec:	e015      	b.n	800441a <UART_SetConfig+0x312>
 80043ee:	bf00      	nop
 80043f0:	efff69f3 	.word	0xefff69f3
 80043f4:	40008000 	.word	0x40008000
 80043f8:	40013800 	.word	0x40013800
 80043fc:	40021000 	.word	0x40021000
 8004400:	40004400 	.word	0x40004400
 8004404:	40004800 	.word	0x40004800
 8004408:	40004c00 	.word	0x40004c00
 800440c:	40005000 	.word	0x40005000
 8004410:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	74fb      	strb	r3, [r7, #19]
        break;
 8004418:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 81ac 	beq.w	800477a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	429a      	cmp	r2, r3
 8004430:	d305      	bcc.n	800443e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	429a      	cmp	r2, r3
 800443c:	d902      	bls.n	8004444 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	74fb      	strb	r3, [r7, #19]
 8004442:	e19a      	b.n	800477a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004444:	7efb      	ldrb	r3, [r7, #27]
 8004446:	2b08      	cmp	r3, #8
 8004448:	f200 8091 	bhi.w	800456e <UART_SetConfig+0x466>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x34c>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004479 	.word	0x08004479
 8004458:	0800456f 	.word	0x0800456f
 800445c:	080044c5 	.word	0x080044c5
 8004460:	0800456f 	.word	0x0800456f
 8004464:	080044f9 	.word	0x080044f9
 8004468:	0800456f 	.word	0x0800456f
 800446c:	0800456f 	.word	0x0800456f
 8004470:	0800456f 	.word	0x0800456f
 8004474:	08004545 	.word	0x08004545
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004478:	f7fe fcfc 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 800447c:	4603      	mov	r3, r0
 800447e:	4619      	mov	r1, r3
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	0214      	lsls	r4, r2, #8
 800448e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004492:	020b      	lsls	r3, r1, #8
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6852      	ldr	r2, [r2, #4]
 8004498:	0852      	lsrs	r2, r2, #1
 800449a:	4611      	mov	r1, r2
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	eb13 0b01 	adds.w	fp, r3, r1
 80044a4:	eb44 0c02 	adc.w	ip, r4, r2
 80044a8:	4658      	mov	r0, fp
 80044aa:	4661      	mov	r1, ip
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f04f 0400 	mov.w	r4, #0
 80044b4:	461a      	mov	r2, r3
 80044b6:	4623      	mov	r3, r4
 80044b8:	f7fb fe8a 	bl	80001d0 <__aeabi_uldivmod>
 80044bc:	4603      	mov	r3, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80044c2:	e057      	b.n	8004574 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	f04f 0400 	mov.w	r4, #0
 80044ce:	49b1      	ldr	r1, [pc, #708]	; (8004794 <UART_SetConfig+0x68c>)
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	eb13 0b01 	adds.w	fp, r3, r1
 80044d8:	eb44 0c02 	adc.w	ip, r4, r2
 80044dc:	4658      	mov	r0, fp
 80044de:	4661      	mov	r1, ip
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f04f 0400 	mov.w	r4, #0
 80044e8:	461a      	mov	r2, r3
 80044ea:	4623      	mov	r3, r4
 80044ec:	f7fb fe70 	bl	80001d0 <__aeabi_uldivmod>
 80044f0:	4603      	mov	r3, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80044f6:	e03d      	b.n	8004574 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044f8:	f7fe fc26 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4619      	mov	r1, r3
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	0214      	lsls	r4, r2, #8
 800450e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004512:	020b      	lsls	r3, r1, #8
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6852      	ldr	r2, [r2, #4]
 8004518:	0852      	lsrs	r2, r2, #1
 800451a:	4611      	mov	r1, r2
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	eb13 0b01 	adds.w	fp, r3, r1
 8004524:	eb44 0c02 	adc.w	ip, r4, r2
 8004528:	4658      	mov	r0, fp
 800452a:	4661      	mov	r1, ip
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f04f 0400 	mov.w	r4, #0
 8004534:	461a      	mov	r2, r3
 8004536:	4623      	mov	r3, r4
 8004538:	f7fb fe4a 	bl	80001d0 <__aeabi_uldivmod>
 800453c:	4603      	mov	r3, r0
 800453e:	460c      	mov	r4, r1
 8004540:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004542:	e017      	b.n	8004574 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004552:	f144 0100 	adc.w	r1, r4, #0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f04f 0400 	mov.w	r4, #0
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	f7fb fe35 	bl	80001d0 <__aeabi_uldivmod>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800456c:	e002      	b.n	8004574 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	74fb      	strb	r3, [r7, #19]
            break;
 8004572:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800457a:	d308      	bcc.n	800458e <UART_SetConfig+0x486>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004582:	d204      	bcs.n	800458e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	e0f5      	b.n	800477a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	74fb      	strb	r3, [r7, #19]
 8004592:	e0f2      	b.n	800477a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459c:	d17f      	bne.n	800469e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800459e:	7efb      	ldrb	r3, [r7, #27]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d85c      	bhi.n	800465e <UART_SetConfig+0x556>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0x4a4>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045ef 	.word	0x080045ef
 80045b4:	0800460d 	.word	0x0800460d
 80045b8:	0800465f 	.word	0x0800465f
 80045bc:	08004629 	.word	0x08004629
 80045c0:	0800465f 	.word	0x0800465f
 80045c4:	0800465f 	.word	0x0800465f
 80045c8:	0800465f 	.word	0x0800465f
 80045cc:	08004647 	.word	0x08004647
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045d0:	f7fe fc50 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80045d4:	4603      	mov	r3, r0
 80045d6:	005a      	lsls	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	441a      	add	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045ec:	e03a      	b.n	8004664 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80045ee:	f7fe fc57 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 80045f2:	4603      	mov	r3, r0
 80045f4:	005a      	lsls	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	441a      	add	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	b29b      	uxth	r3, r3
 8004608:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800460a:	e02b      	b.n	8004664 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004616:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6852      	ldr	r2, [r2, #4]
 800461e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004626:	e01d      	b.n	8004664 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004628:	f7fe fb8e 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 800462c:	4603      	mov	r3, r0
 800462e:	005a      	lsls	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	085b      	lsrs	r3, r3, #1
 8004636:	441a      	add	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	b29b      	uxth	r3, r3
 8004642:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004644:	e00e      	b.n	8004664 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800465c:	e002      	b.n	8004664 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	74fb      	strb	r3, [r7, #19]
        break;
 8004662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	d916      	bls.n	8004698 <UART_SetConfig+0x590>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d212      	bcs.n	8004698 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	b29b      	uxth	r3, r3
 8004676:	f023 030f 	bic.w	r3, r3, #15
 800467a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	b29b      	uxth	r3, r3
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	b29a      	uxth	r2, r3
 8004688:	897b      	ldrh	r3, [r7, #10]
 800468a:	4313      	orrs	r3, r2
 800468c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	897a      	ldrh	r2, [r7, #10]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	e070      	b.n	800477a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	74fb      	strb	r3, [r7, #19]
 800469c:	e06d      	b.n	800477a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800469e:	7efb      	ldrb	r3, [r7, #27]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d859      	bhi.n	8004758 <UART_SetConfig+0x650>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0x5a4>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	080046ed 	.word	0x080046ed
 80046b4:	08004709 	.word	0x08004709
 80046b8:	08004759 	.word	0x08004759
 80046bc:	08004725 	.word	0x08004725
 80046c0:	08004759 	.word	0x08004759
 80046c4:	08004759 	.word	0x08004759
 80046c8:	08004759 	.word	0x08004759
 80046cc:	08004741 	.word	0x08004741
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046d0:	f7fe fbd0 	bl	8002e74 <HAL_RCC_GetPCLK1Freq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046ea:	e038      	b.n	800475e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046ec:	f7fe fbd8 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	441a      	add	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	b29b      	uxth	r3, r3
 8004704:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004706:	e02a      	b.n	800475e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004712:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6852      	ldr	r2, [r2, #4]
 800471a:	fbb3 f3f2 	udiv	r3, r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004722:	e01c      	b.n	800475e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004724:	f7fe fb10 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	085b      	lsrs	r3, r3, #1
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	b29b      	uxth	r3, r3
 800473c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800473e:	e00e      	b.n	800475e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	b29b      	uxth	r3, r3
 8004754:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004756:	e002      	b.n	800475e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	74fb      	strb	r3, [r7, #19]
        break;
 800475c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b0f      	cmp	r3, #15
 8004762:	d908      	bls.n	8004776 <UART_SetConfig+0x66e>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d204      	bcs.n	8004776 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	60da      	str	r2, [r3, #12]
 8004774:	e001      	b.n	800477a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004792:	bf00      	nop
 8004794:	f4240000 	.word	0xf4240000

08004798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01a      	beq.n	80048ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004896:	d10a      	bne.n	80048ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048ea:	f7fc fdbd 	bl	8001468 <HAL_GetTick>
 80048ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d10e      	bne.n	800491c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f82a 	bl	8004966 <UART_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e020      	b.n	800495e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d10e      	bne.n	8004948 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800492a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f814 	bl	8004966 <UART_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e00a      	b.n	800495e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004976:	e02a      	b.n	80049ce <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d026      	beq.n	80049ce <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004980:	f7fc fd72 	bl	8001468 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <UART_WaitOnFlagUntilTimeout+0x30>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11b      	bne.n	80049ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 0201 	bic.w	r2, r2, #1
 80049b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e00f      	b.n	80049ee <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	bf0c      	ite	eq
 80049de:	2301      	moveq	r3, #1
 80049e0:	2300      	movne	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d0c5      	beq.n	8004978 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <USB_CoreInit>:
 80049f6:	b084      	sub	sp, #16
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	f107 001c 	add.w	r0, r7, #28
 8004a04:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d122      	bne.n	8004a54 <USB_CoreInit+0x5e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	60d3      	str	r3, [r2, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d105      	bne.n	8004a48 <USB_CoreInit+0x52>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fa1d 	bl	8004e88 <USB_CoreReset>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	e01a      	b.n	8004a8a <USB_CoreInit+0x94>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60da      	str	r2, [r3, #12]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa11 	bl	8004e88 <USB_CoreReset>
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <USB_CoreInit+0x88>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a7c:	e005      	b.n	8004a8a <USB_CoreInit+0x94>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a96:	b004      	add	sp, #16
 8004a98:	4770      	bx	lr

08004a9a <USB_DisableGlobalInt>:
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_SetCurrentMode>:
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d106      	bne.n	8004ae8 <USB_SetCurrentMode+0x2c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	e00b      	b.n	8004b00 <USB_SetCurrentMode+0x44>
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <USB_SetCurrentMode+0x40>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	e001      	b.n	8004b00 <USB_SetCurrentMode+0x44>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e003      	b.n	8004b08 <USB_SetCurrentMode+0x4c>
 8004b00:	2032      	movs	r0, #50	; 0x32
 8004b02:	f7fc fcbd 	bl	8001480 <HAL_Delay>
 8004b06:	2300      	movs	r3, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <USB_DevInit>:
 8004b10:	b084      	sub	sp, #16
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004b22:	2300      	movs	r3, #0
 8004b24:	75fb      	strb	r3, [r7, #23]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e009      	b.n	8004b44 <USB_DevInit+0x34>
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	3340      	adds	r3, #64	; 0x40
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	3301      	adds	r3, #1
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b0e      	cmp	r3, #14
 8004b48:	d9f2      	bls.n	8004b30 <USB_DevInit+0x20>
 8004b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d112      	bne.n	8004b76 <USB_DevInit+0x66>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	e005      	b.n	8004b82 <USB_DevInit+0x72>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b94:	4619      	mov	r1, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	680b      	ldr	r3, [r1, #0]
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	2103      	movs	r1, #3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f93d 	bl	8004e24 <USB_SetDevSpeed>
 8004baa:	2110      	movs	r1, #16
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8f1 	bl	8004d94 <USB_FlushTxFifo>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <USB_DevInit+0xac>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	75fb      	strb	r3, [r7, #23]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f90f 	bl	8004de0 <USB_FlushRxFifo>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <USB_DevInit+0xbc>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6113      	str	r3, [r2, #16]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	461a      	mov	r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	6153      	str	r3, [r2, #20]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	461a      	mov	r2, r3
 8004bec:	2300      	movs	r3, #0
 8004bee:	61d3      	str	r3, [r2, #28]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e043      	b.n	8004c7e <USB_DevInit+0x16e>
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0c:	d118      	bne.n	8004c40 <USB_DevInit+0x130>
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <USB_DevInit+0x11a>
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e013      	b.n	8004c52 <USB_DevInit+0x142>
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e008      	b.n	8004c52 <USB_DevInit+0x142>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2300      	movs	r3, #0
 8004c62:	6113      	str	r3, [r2, #16]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	461a      	mov	r2, r3
 8004c72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c76:	6093      	str	r3, [r2, #8]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d3b7      	bcc.n	8004bf6 <USB_DevInit+0xe6>
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	e043      	b.n	8004d14 <USB_DevInit+0x204>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca2:	d118      	bne.n	8004cd6 <USB_DevInit+0x1c6>
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <USB_DevInit+0x1b0>
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e013      	b.n	8004ce8 <USB_DevInit+0x1d8>
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e008      	b.n	8004ce8 <USB_DevInit+0x1d8>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6113      	str	r3, [r2, #16]
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	461a      	mov	r2, r3
 8004d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d0c:	6093      	str	r3, [r2, #8]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	3301      	adds	r3, #1
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d3b7      	bcc.n	8004c8c <USB_DevInit+0x17c>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2e:	6113      	str	r3, [r2, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	619a      	str	r2, [r3, #24]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d3c:	615a      	str	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f043 0210 	orr.w	r2, r3, #16
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	619a      	str	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <USB_DevInit+0x280>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6193      	str	r3, [r2, #24]
 8004d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <USB_DevInit+0x258>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	f043 0208 	orr.w	r2, r3, #8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	619a      	str	r2, [r3, #24]
 8004d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d107      	bne.n	8004d7e <USB_DevInit+0x26e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d76:	f043 0304 	orr.w	r3, r3, #4
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6193      	str	r3, [r2, #24]
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d8a:	b004      	add	sp, #16
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	803c3800 	.word	0x803c3800

08004d94 <USB_FlushTxFifo>:
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	611a      	str	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3301      	adds	r3, #1
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <USB_FlushTxFifo+0x48>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <USB_FlushTxFifo+0x2c>
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e006      	b.n	8004dce <USB_FlushTxFifo+0x3a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d0f0      	beq.n	8004dae <USB_FlushTxFifo+0x1a>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	00030d40 	.word	0x00030d40

08004de0 <USB_FlushRxFifo>:
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2210      	movs	r2, #16
 8004df0:	611a      	str	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a09      	ldr	r2, [pc, #36]	; (8004e20 <USB_FlushRxFifo+0x40>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <USB_FlushRxFifo+0x24>
 8004e00:	2303      	movs	r3, #3
 8004e02:	e006      	b.n	8004e12 <USB_FlushRxFifo+0x32>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d0f0      	beq.n	8004df2 <USB_FlushRxFifo+0x12>
 8004e10:	2300      	movs	r3, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	00030d40 	.word	0x00030d40

08004e24 <USB_SetDevSpeed>:
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e44:	4313      	orrs	r3, r2
 8004e46:	600b      	str	r3, [r1, #0]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USB_DevDisconnect>:
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e70:	f043 0302 	orr.w	r3, r3, #2
 8004e74:	6053      	str	r3, [r2, #4]
 8004e76:	2003      	movs	r0, #3
 8004e78:	f7fc fb02 	bl	8001480 <HAL_Delay>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <USB_CoreReset>:
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a13      	ldr	r2, [pc, #76]	; (8004eec <USB_CoreReset+0x64>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <USB_CoreReset+0x1e>
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e01b      	b.n	8004ede <USB_CoreReset+0x56>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	daf2      	bge.n	8004e94 <USB_CoreReset+0xc>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f043 0201 	orr.w	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	611a      	str	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <USB_CoreReset+0x64>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <USB_CoreReset+0x48>
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e006      	b.n	8004ede <USB_CoreReset+0x56>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d0f0      	beq.n	8004ebe <USB_CoreReset+0x36>
 8004edc:	2300      	movs	r3, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	00030d40 	.word	0x00030d40

08004ef0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f02:	2b84      	cmp	r3, #132	; 0x84
 8004f04:	d005      	beq.n	8004f12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3303      	adds	r3, #3
 8004f10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f12:	68fb      	ldr	r3, [r7, #12]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f24:	f000 fad2 	bl	80054cc <vTaskStartScheduler>
  
  return osOK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f30:	b089      	sub	sp, #36	; 0x24
 8004f32:	af04      	add	r7, sp, #16
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d020      	beq.n	8004f82 <osThreadCreate+0x54>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685c      	ldr	r4, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681d      	ldr	r5, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691e      	ldr	r6, [r3, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ffc8 	bl	8004ef0 <makeFreeRtosPriority>
 8004f60:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f6a:	9202      	str	r2, [sp, #8]
 8004f6c:	9301      	str	r3, [sp, #4]
 8004f6e:	9100      	str	r1, [sp, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4632      	mov	r2, r6
 8004f74:	4629      	mov	r1, r5
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 f8ed 	bl	8005156 <xTaskCreateStatic>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e01c      	b.n	8004fbc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685c      	ldr	r4, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f8e:	b29e      	uxth	r6, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff ffaa 	bl	8004ef0 <makeFreeRtosPriority>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f107 030c 	add.w	r3, r7, #12
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	9200      	str	r2, [sp, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	4632      	mov	r2, r6
 8004faa:	4629      	mov	r1, r5
 8004fac:	4620      	mov	r0, r4
 8004fae:	f000 f92b 	bl	8005208 <xTaskCreate>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d001      	beq.n	8004fbc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e000      	b.n	8004fbe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fc6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <osDelay+0x16>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	e000      	b.n	8004fde <osDelay+0x18>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fa40 	bl	8005464 <vTaskDelay>
  
  return osOK;
 8004fe4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f103 0208 	add.w	r2, r3, #8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f04f 32ff 	mov.w	r2, #4294967295
 8005006:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f103 0208 	add.w	r2, r3, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f103 0208 	add.w	r2, r3, #8
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d103      	bne.n	80050b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e00c      	b.n	80050ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3308      	adds	r3, #8
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e002      	b.n	80050be <vListInsert+0x2e>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d2f6      	bcs.n	80050b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005102:	b480      	push	{r7}
 8005104:	b085      	sub	sp, #20
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6892      	ldr	r2, [r2, #8]
 8005118:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6852      	ldr	r2, [r2, #4]
 8005122:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d103      	bne.n	8005136 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1e5a      	subs	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005156:	b580      	push	{r7, lr}
 8005158:	b08e      	sub	sp, #56	; 0x38
 800515a:	af04      	add	r7, sp, #16
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	e7fe      	b.n	800517c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	2b00      	cmp	r3, #0
 8005182:	d109      	bne.n	8005198 <xTaskCreateStatic+0x42>
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e7fe      	b.n	8005196 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005198:	2354      	movs	r3, #84	; 0x54
 800519a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b54      	cmp	r3, #84	; 0x54
 80051a0:	d009      	beq.n	80051b6 <xTaskCreateStatic+0x60>
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e7fe      	b.n	80051b4 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01e      	beq.n	80051fa <xTaskCreateStatic+0xa4>
 80051bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01b      	beq.n	80051fa <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051d4:	2300      	movs	r3, #0
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68b9      	ldr	r1, [r7, #8]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f850 	bl	8005292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051f4:	f000 f8cc 	bl	8005390 <prvAddNewTaskToReadyList>
 80051f8:	e001      	b.n	80051fe <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051fe:	697b      	ldr	r3, [r7, #20]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	; 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08c      	sub	sp, #48	; 0x30
 800520c:	af04      	add	r7, sp, #16
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4618      	mov	r0, r3
 800521e:	f000 feb1 	bl	8005f84 <pvPortMalloc>
 8005222:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00e      	beq.n	8005248 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800522a:	2054      	movs	r0, #84	; 0x54
 800522c:	f000 feaa 	bl	8005f84 <pvPortMalloc>
 8005230:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
 800523e:	e005      	b.n	800524c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f000 ff61 	bl	8006108 <vPortFree>
 8005246:	e001      	b.n	800524c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d017      	beq.n	8005282 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	2300      	movs	r3, #0
 800525e:	9303      	str	r3, [sp, #12]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	9302      	str	r3, [sp, #8]
 8005264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f80e 	bl	8005292 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005276:	69f8      	ldr	r0, [r7, #28]
 8005278:	f000 f88a 	bl	8005390 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800527c:	2301      	movs	r3, #1
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e002      	b.n	8005288 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295
 8005286:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005288:	69bb      	ldr	r3, [r7, #24]
	}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b088      	sub	sp, #32
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052aa:	3b01      	subs	r3, #1
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f023 0307 	bic.w	r3, r3, #7
 80052b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d009      	beq.n	80052d8 <prvInitialiseNewTask+0x46>
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	e7fe      	b.n	80052d6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	e012      	b.n	8005304 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	7819      	ldrb	r1, [r3, #0]
 80052e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	3334      	adds	r3, #52	; 0x34
 80052ee:	460a      	mov	r2, r1
 80052f0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d006      	beq.n	800530c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d9e9      	bls.n	80052de <prvInitialiseNewTask+0x4c>
 800530a:	e000      	b.n	800530e <prvInitialiseNewTask+0x7c>
		{
			break;
 800530c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	2b06      	cmp	r3, #6
 800531a:	d901      	bls.n	8005320 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800531c:	2306      	movs	r3, #6
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005324:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800532a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	2200      	movs	r2, #0
 8005330:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	3304      	adds	r3, #4
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fe79 	bl	800502e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	3318      	adds	r3, #24
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fe74 	bl	800502e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	f1c3 0207 	rsb	r2, r3, #7
 8005352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005354:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800535a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	2200      	movs	r2, #0
 8005360:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	68f9      	ldr	r1, [r7, #12]
 800536e:	69b8      	ldr	r0, [r7, #24]
 8005370:	f000 fc08 	bl	8005b84 <pxPortInitialiseStack>
 8005374:	4602      	mov	r2, r0
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005386:	bf00      	nop
 8005388:	3720      	adds	r7, #32
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005398:	f000 fd18 	bl	8005dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800539c:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <prvAddNewTaskToReadyList+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	4a29      	ldr	r2, [pc, #164]	; (8005448 <prvAddNewTaskToReadyList+0xb8>)
 80053a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053a6:	4b29      	ldr	r3, [pc, #164]	; (800544c <prvAddNewTaskToReadyList+0xbc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053ae:	4a27      	ldr	r2, [pc, #156]	; (800544c <prvAddNewTaskToReadyList+0xbc>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053b4:	4b24      	ldr	r3, [pc, #144]	; (8005448 <prvAddNewTaskToReadyList+0xb8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d110      	bne.n	80053de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053bc:	f000 fabc 	bl	8005938 <prvInitialiseTaskLists>
 80053c0:	e00d      	b.n	80053de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <prvAddNewTaskToReadyList+0xc0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053ca:	4b20      	ldr	r3, [pc, #128]	; (800544c <prvAddNewTaskToReadyList+0xbc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d802      	bhi.n	80053de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053d8:	4a1c      	ldr	r2, [pc, #112]	; (800544c <prvAddNewTaskToReadyList+0xbc>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053de:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <prvAddNewTaskToReadyList+0xc4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <prvAddNewTaskToReadyList+0xc4>)
 80053e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2201      	movs	r2, #1
 80053ee:	409a      	lsls	r2, r3
 80053f0:	4b19      	ldr	r3, [pc, #100]	; (8005458 <prvAddNewTaskToReadyList+0xc8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	4a18      	ldr	r2, [pc, #96]	; (8005458 <prvAddNewTaskToReadyList+0xc8>)
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4a15      	ldr	r2, [pc, #84]	; (800545c <prvAddNewTaskToReadyList+0xcc>)
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f7ff fe19 	bl	8005048 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005416:	f000 fd07 	bl	8005e28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800541a:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <prvAddNewTaskToReadyList+0xc0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00e      	beq.n	8005440 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005422:	4b0a      	ldr	r3, [pc, #40]	; (800544c <prvAddNewTaskToReadyList+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	429a      	cmp	r2, r3
 800542e:	d207      	bcs.n	8005440 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005430:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <prvAddNewTaskToReadyList+0xd0>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200003a8 	.word	0x200003a8
 800544c:	200002a8 	.word	0x200002a8
 8005450:	200003b4 	.word	0x200003b4
 8005454:	200003c4 	.word	0x200003c4
 8005458:	200003b0 	.word	0x200003b0
 800545c:	200002ac 	.word	0x200002ac
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <vTaskDelay+0x60>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <vTaskDelay+0x2e>
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	e7fe      	b.n	8005490 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005492:	f000 f879 	bl	8005588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005496:	2100      	movs	r1, #0
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fb0d 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800549e:	f000 f881 	bl	80055a4 <xTaskResumeAll>
 80054a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <vTaskDelay+0x64>)
 80054ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200003d0 	.word	0x200003d0
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08a      	sub	sp, #40	; 0x28
 80054d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054da:	463a      	mov	r2, r7
 80054dc:	1d39      	adds	r1, r7, #4
 80054de:	f107 0308 	add.w	r3, r7, #8
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fa fff4 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	9202      	str	r2, [sp, #8]
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2300      	movs	r3, #0
 80054f8:	460a      	mov	r2, r1
 80054fa:	491d      	ldr	r1, [pc, #116]	; (8005570 <vTaskStartScheduler+0xa4>)
 80054fc:	481d      	ldr	r0, [pc, #116]	; (8005574 <vTaskStartScheduler+0xa8>)
 80054fe:	f7ff fe2a 	bl	8005156 <xTaskCreateStatic>
 8005502:	4602      	mov	r2, r0
 8005504:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <vTaskStartScheduler+0xac>)
 8005506:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <vTaskStartScheduler+0xac>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e001      	b.n	800551a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d115      	bne.n	800554c <vTaskStartScheduler+0x80>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <vTaskStartScheduler+0xb0>)
 8005534:	f04f 32ff 	mov.w	r2, #4294967295
 8005538:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <vTaskStartScheduler+0xb4>)
 800553c:	2201      	movs	r2, #1
 800553e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <vTaskStartScheduler+0xb8>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005546:	f000 fba3 	bl	8005c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800554a:	e00d      	b.n	8005568 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d109      	bne.n	8005568 <vTaskStartScheduler+0x9c>
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e7fe      	b.n	8005566 <vTaskStartScheduler+0x9a>
}
 8005568:	bf00      	nop
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	08006428 	.word	0x08006428
 8005574:	08005909 	.word	0x08005909
 8005578:	200003cc 	.word	0x200003cc
 800557c:	200003c8 	.word	0x200003c8
 8005580:	200003b4 	.word	0x200003b4
 8005584:	200003ac 	.word	0x200003ac

08005588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <vTaskSuspendAll+0x18>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	4a03      	ldr	r2, [pc, #12]	; (80055a0 <vTaskSuspendAll+0x18>)
 8005594:	6013      	str	r3, [r2, #0]
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	200003d0 	.word	0x200003d0

080055a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055b2:	4b41      	ldr	r3, [pc, #260]	; (80056b8 <xTaskResumeAll+0x114>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <xTaskResumeAll+0x2a>
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	603b      	str	r3, [r7, #0]
 80055cc:	e7fe      	b.n	80055cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055ce:	f000 fbfd 	bl	8005dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055d2:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <xTaskResumeAll+0x114>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	4a37      	ldr	r2, [pc, #220]	; (80056b8 <xTaskResumeAll+0x114>)
 80055da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055dc:	4b36      	ldr	r3, [pc, #216]	; (80056b8 <xTaskResumeAll+0x114>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d161      	bne.n	80056a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055e4:	4b35      	ldr	r3, [pc, #212]	; (80056bc <xTaskResumeAll+0x118>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05d      	beq.n	80056a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ec:	e02e      	b.n	800564c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055ee:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <xTaskResumeAll+0x11c>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3318      	adds	r3, #24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fd81 	bl	8005102 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fd7c 	bl	8005102 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	2201      	movs	r2, #1
 8005610:	409a      	lsls	r2, r3
 8005612:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <xTaskResumeAll+0x120>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <xTaskResumeAll+0x120>)
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4a27      	ldr	r2, [pc, #156]	; (80056c8 <xTaskResumeAll+0x124>)
 800562a:	441a      	add	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7ff fd08 	bl	8005048 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	4b23      	ldr	r3, [pc, #140]	; (80056cc <xTaskResumeAll+0x128>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005646:	4b22      	ldr	r3, [pc, #136]	; (80056d0 <xTaskResumeAll+0x12c>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <xTaskResumeAll+0x11c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1cc      	bne.n	80055ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800565a:	f000 fa07 	bl	8005a6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <xTaskResumeAll+0x130>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d010      	beq.n	800568c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800566a:	f000 f837 	bl	80056dc <xTaskIncrementTick>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005674:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <xTaskResumeAll+0x12c>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3b01      	subs	r3, #1
 800567e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f1      	bne.n	800566a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005686:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <xTaskResumeAll+0x130>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800568c:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <xTaskResumeAll+0x12c>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <xTaskResumeAll+0x134>)
 800569a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056a8:	f000 fbbe 	bl	8005e28 <vPortExitCritical>

	return xAlreadyYielded;
 80056ac:	68bb      	ldr	r3, [r7, #8]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200003d0 	.word	0x200003d0
 80056bc:	200003a8 	.word	0x200003a8
 80056c0:	20000368 	.word	0x20000368
 80056c4:	200003b0 	.word	0x200003b0
 80056c8:	200002ac 	.word	0x200002ac
 80056cc:	200002a8 	.word	0x200002a8
 80056d0:	200003bc 	.word	0x200003bc
 80056d4:	200003b8 	.word	0x200003b8
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e6:	4b50      	ldr	r3, [pc, #320]	; (8005828 <xTaskIncrementTick+0x14c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 808c 	bne.w	8005808 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056f0:	4b4e      	ldr	r3, [pc, #312]	; (800582c <xTaskIncrementTick+0x150>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056f8:	4a4c      	ldr	r2, [pc, #304]	; (800582c <xTaskIncrementTick+0x150>)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11f      	bne.n	8005744 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005704:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <xTaskIncrementTick+0x154>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <xTaskIncrementTick+0x46>
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	e7fe      	b.n	8005720 <xTaskIncrementTick+0x44>
 8005722:	4b43      	ldr	r3, [pc, #268]	; (8005830 <xTaskIncrementTick+0x154>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	4b42      	ldr	r3, [pc, #264]	; (8005834 <xTaskIncrementTick+0x158>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a40      	ldr	r2, [pc, #256]	; (8005830 <xTaskIncrementTick+0x154>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4a40      	ldr	r2, [pc, #256]	; (8005834 <xTaskIncrementTick+0x158>)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	4b40      	ldr	r3, [pc, #256]	; (8005838 <xTaskIncrementTick+0x15c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4a3e      	ldr	r2, [pc, #248]	; (8005838 <xTaskIncrementTick+0x15c>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	f000 f994 	bl	8005a6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005744:	4b3d      	ldr	r3, [pc, #244]	; (800583c <xTaskIncrementTick+0x160>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	429a      	cmp	r2, r3
 800574c:	d34d      	bcc.n	80057ea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800574e:	4b38      	ldr	r3, [pc, #224]	; (8005830 <xTaskIncrementTick+0x154>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <xTaskIncrementTick+0x80>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <xTaskIncrementTick+0x82>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005762:	4b36      	ldr	r3, [pc, #216]	; (800583c <xTaskIncrementTick+0x160>)
 8005764:	f04f 32ff 	mov.w	r2, #4294967295
 8005768:	601a      	str	r2, [r3, #0]
					break;
 800576a:	e03e      	b.n	80057ea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800576c:	4b30      	ldr	r3, [pc, #192]	; (8005830 <xTaskIncrementTick+0x154>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d203      	bcs.n	800578c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005784:	4a2d      	ldr	r2, [pc, #180]	; (800583c <xTaskIncrementTick+0x160>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6013      	str	r3, [r2, #0]
						break;
 800578a:	e02e      	b.n	80057ea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fcb6 	bl	8005102 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	d004      	beq.n	80057a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	3318      	adds	r3, #24
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7ff fcad 	bl	8005102 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	4b23      	ldr	r3, [pc, #140]	; (8005840 <xTaskIncrementTick+0x164>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	4a22      	ldr	r2, [pc, #136]	; (8005840 <xTaskIncrementTick+0x164>)
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <xTaskIncrementTick+0x168>)
 80057c8:	441a      	add	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7ff fc39 	bl	8005048 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <xTaskIncrementTick+0x16c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d3b4      	bcc.n	800574e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e8:	e7b1      	b.n	800574e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057ea:	4b17      	ldr	r3, [pc, #92]	; (8005848 <xTaskIncrementTick+0x16c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	4914      	ldr	r1, [pc, #80]	; (8005844 <xTaskIncrementTick+0x168>)
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d907      	bls.n	8005812 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005802:	2301      	movs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e004      	b.n	8005812 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005808:	4b10      	ldr	r3, [pc, #64]	; (800584c <xTaskIncrementTick+0x170>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	4a0f      	ldr	r2, [pc, #60]	; (800584c <xTaskIncrementTick+0x170>)
 8005810:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <xTaskIncrementTick+0x174>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800581a:	2301      	movs	r3, #1
 800581c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800581e:	697b      	ldr	r3, [r7, #20]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	200003d0 	.word	0x200003d0
 800582c:	200003ac 	.word	0x200003ac
 8005830:	20000360 	.word	0x20000360
 8005834:	20000364 	.word	0x20000364
 8005838:	200003c0 	.word	0x200003c0
 800583c:	200003c8 	.word	0x200003c8
 8005840:	200003b0 	.word	0x200003b0
 8005844:	200002ac 	.word	0x200002ac
 8005848:	200002a8 	.word	0x200002a8
 800584c:	200003b8 	.word	0x200003b8
 8005850:	200003bc 	.word	0x200003bc

08005854 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800585a:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <vTaskSwitchContext+0xa0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005862:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <vTaskSwitchContext+0xa4>)
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005868:	e03e      	b.n	80058e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800586a:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <vTaskSwitchContext+0xa4>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005870:	4b22      	ldr	r3, [pc, #136]	; (80058fc <vTaskSwitchContext+0xa8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	fab3 f383 	clz	r3, r3
 800587c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	f1c3 031f 	rsb	r3, r3, #31
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	491e      	ldr	r1, [pc, #120]	; (8005900 <vTaskSwitchContext+0xac>)
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	e7fe      	b.n	80058ac <vTaskSwitchContext+0x58>
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4a11      	ldr	r2, [pc, #68]	; (8005900 <vTaskSwitchContext+0xac>)
 80058ba:	4413      	add	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3308      	adds	r3, #8
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d104      	bne.n	80058de <vTaskSwitchContext+0x8a>
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a07      	ldr	r2, [pc, #28]	; (8005904 <vTaskSwitchContext+0xb0>)
 80058e6:	6013      	str	r3, [r2, #0]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	200003d0 	.word	0x200003d0
 80058f8:	200003bc 	.word	0x200003bc
 80058fc:	200003b0 	.word	0x200003b0
 8005900:	200002ac 	.word	0x200002ac
 8005904:	200002a8 	.word	0x200002a8

08005908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005910:	f000 f852 	bl	80059b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <prvIdleTask+0x28>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d9f9      	bls.n	8005910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <prvIdleTask+0x2c>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800592c:	e7f0      	b.n	8005910 <prvIdleTask+0x8>
 800592e:	bf00      	nop
 8005930:	200002ac 	.word	0x200002ac
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593e:	2300      	movs	r3, #0
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	e00c      	b.n	800595e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a12      	ldr	r2, [pc, #72]	; (8005998 <prvInitialiseTaskLists+0x60>)
 8005950:	4413      	add	r3, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff fb4b 	bl	8004fee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3301      	adds	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b06      	cmp	r3, #6
 8005962:	d9ef      	bls.n	8005944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005964:	480d      	ldr	r0, [pc, #52]	; (800599c <prvInitialiseTaskLists+0x64>)
 8005966:	f7ff fb42 	bl	8004fee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800596a:	480d      	ldr	r0, [pc, #52]	; (80059a0 <prvInitialiseTaskLists+0x68>)
 800596c:	f7ff fb3f 	bl	8004fee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005970:	480c      	ldr	r0, [pc, #48]	; (80059a4 <prvInitialiseTaskLists+0x6c>)
 8005972:	f7ff fb3c 	bl	8004fee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005976:	480c      	ldr	r0, [pc, #48]	; (80059a8 <prvInitialiseTaskLists+0x70>)
 8005978:	f7ff fb39 	bl	8004fee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800597c:	480b      	ldr	r0, [pc, #44]	; (80059ac <prvInitialiseTaskLists+0x74>)
 800597e:	f7ff fb36 	bl	8004fee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005982:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <prvInitialiseTaskLists+0x78>)
 8005984:	4a05      	ldr	r2, [pc, #20]	; (800599c <prvInitialiseTaskLists+0x64>)
 8005986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvInitialiseTaskLists+0x7c>)
 800598a:	4a05      	ldr	r2, [pc, #20]	; (80059a0 <prvInitialiseTaskLists+0x68>)
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200002ac 	.word	0x200002ac
 800599c:	20000338 	.word	0x20000338
 80059a0:	2000034c 	.word	0x2000034c
 80059a4:	20000368 	.word	0x20000368
 80059a8:	2000037c 	.word	0x2000037c
 80059ac:	20000394 	.word	0x20000394
 80059b0:	20000360 	.word	0x20000360
 80059b4:	20000364 	.word	0x20000364

080059b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059be:	e019      	b.n	80059f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059c0:	f000 fa04 	bl	8005dcc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <prvCheckTasksWaitingTermination+0x4c>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff fb96 	bl	8005102 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvCheckTasksWaitingTermination+0x50>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <prvCheckTasksWaitingTermination+0x50>)
 80059de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ea:	f000 fa1d 	bl	8005e28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f80e 	bl	8005a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e1      	bne.n	80059c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	2000037c 	.word	0x2000037c
 8005a08:	200003a8 	.word	0x200003a8
 8005a0c:	20000390 	.word	0x20000390

08005a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d108      	bne.n	8005a34 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fb6e 	bl	8006108 <vPortFree>
				vPortFree( pxTCB );
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb6b 	bl	8006108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a32:	e017      	b.n	8005a64 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d103      	bne.n	8005a46 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fb62 	bl	8006108 <vPortFree>
	}
 8005a44:	e00e      	b.n	8005a64 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d009      	beq.n	8005a64 <prvDeleteTCB+0x54>
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e7fe      	b.n	8005a62 <prvDeleteTCB+0x52>
	}
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a72:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <prvResetNextTaskUnblockTime+0x44>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <prvResetNextTaskUnblockTime+0x14>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <prvResetNextTaskUnblockTime+0x16>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a86:	4b0b      	ldr	r3, [pc, #44]	; (8005ab4 <prvResetNextTaskUnblockTime+0x48>)
 8005a88:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a8e:	e008      	b.n	8005aa2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <prvResetNextTaskUnblockTime+0x44>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4a05      	ldr	r2, [pc, #20]	; (8005ab4 <prvResetNextTaskUnblockTime+0x48>)
 8005aa0:	6013      	str	r3, [r2, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	20000360 	.word	0x20000360
 8005ab4:	200003c8 	.word	0x200003c8

08005ab8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ac2:	4b29      	ldr	r3, [pc, #164]	; (8005b68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac8:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3304      	adds	r3, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fb17 	bl	8005102 <uxListRemove>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	43da      	mvns	r2, r3
 8005ae8:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4013      	ands	r3, r2
 8005aee:	4a20      	ldr	r2, [pc, #128]	; (8005b70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005af0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d10a      	bne.n	8005b10 <prvAddCurrentTaskToDelayedList+0x58>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	481a      	ldr	r0, [pc, #104]	; (8005b74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005b0a:	f7ff fa9d 	bl	8005048 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b0e:	e026      	b.n	8005b5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4413      	add	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b18:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d209      	bcs.n	8005b3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b28:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f7ff faab 	bl	8005090 <vListInsert>
}
 8005b3a:	e010      	b.n	8005b5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3304      	adds	r3, #4
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f7ff faa1 	bl	8005090 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d202      	bcs.n	8005b5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b58:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6013      	str	r3, [r2, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200003ac 	.word	0x200003ac
 8005b6c:	200002a8 	.word	0x200002a8
 8005b70:	200003b0 	.word	0x200003b0
 8005b74:	20000394 	.word	0x20000394
 8005b78:	20000364 	.word	0x20000364
 8005b7c:	20000360 	.word	0x20000360
 8005b80:	200003c8 	.word	0x200003c8

08005b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3b04      	subs	r3, #4
 8005b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3b04      	subs	r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f023 0201 	bic.w	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3b04      	subs	r3, #4
 8005bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bb4:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <pxPortInitialiseStack+0x64>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3b14      	subs	r3, #20
 8005bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3b04      	subs	r3, #4
 8005bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f06f 0202 	mvn.w	r2, #2
 8005bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3b20      	subs	r3, #32
 8005bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	08005bed 	.word	0x08005bed

08005bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bf6:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <prvTaskExitError+0x50>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfe:	d009      	beq.n	8005c14 <prvTaskExitError+0x28>
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60fb      	str	r3, [r7, #12]
 8005c12:	e7fe      	b.n	8005c12 <prvTaskExitError+0x26>
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c26:	bf00      	nop
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0fc      	beq.n	8005c28 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000000c 	.word	0x2000000c

08005c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <pxCurrentTCBConst2>)
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	6808      	ldr	r0, [r1, #0]
 8005c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	f380 8809 	msr	PSP, r0
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8811 	msr	BASEPRI, r0
 8005c5a:	4770      	bx	lr
 8005c5c:	f3af 8000 	nop.w

08005c60 <pxCurrentTCBConst2>:
 8005c60:	200002a8 	.word	0x200002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop

08005c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c68:	4808      	ldr	r0, [pc, #32]	; (8005c8c <prvPortStartFirstTask+0x24>)
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	6800      	ldr	r0, [r0, #0]
 8005c6e:	f380 8808 	msr	MSP, r0
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f380 8814 	msr	CONTROL, r0
 8005c7a:	b662      	cpsie	i
 8005c7c:	b661      	cpsie	f
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	df00      	svc	0
 8005c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c8a:	bf00      	nop
 8005c8c:	e000ed08 	.word	0xe000ed08

08005c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c96:	4b44      	ldr	r3, [pc, #272]	; (8005da8 <xPortStartScheduler+0x118>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a44      	ldr	r2, [pc, #272]	; (8005dac <xPortStartScheduler+0x11c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d109      	bne.n	8005cb4 <xPortStartScheduler+0x24>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e7fe      	b.n	8005cb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cb4:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <xPortStartScheduler+0x118>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a3d      	ldr	r2, [pc, #244]	; (8005db0 <xPortStartScheduler+0x120>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d109      	bne.n	8005cd2 <xPortStartScheduler+0x42>
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e7fe      	b.n	8005cd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cd2:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <xPortStartScheduler+0x124>)
 8005cd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	22ff      	movs	r2, #255	; 0xff
 8005ce2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	4b30      	ldr	r3, [pc, #192]	; (8005db8 <xPortStartScheduler+0x128>)
 8005cf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cfa:	4b30      	ldr	r3, [pc, #192]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005cfc:	2207      	movs	r2, #7
 8005cfe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d00:	e009      	b.n	8005d16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005d02:	4b2e      	ldr	r3, [pc, #184]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	4a2c      	ldr	r2, [pc, #176]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005d0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1e:	2b80      	cmp	r3, #128	; 0x80
 8005d20:	d0ef      	beq.n	8005d02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d22:	4b26      	ldr	r3, [pc, #152]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f1c3 0307 	rsb	r3, r3, #7
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d009      	beq.n	8005d42 <xPortStartScheduler+0xb2>
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	e7fe      	b.n	8005d40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d42:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005d4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d54:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <xPortStartScheduler+0x12c>)
 8005d56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d60:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <xPortStartScheduler+0x130>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <xPortStartScheduler+0x130>)
 8005d66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d6c:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <xPortStartScheduler+0x130>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <xPortStartScheduler+0x130>)
 8005d72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d78:	f000 f8d6 	bl	8005f28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d7c:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <xPortStartScheduler+0x134>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d82:	f000 f8f5 	bl	8005f70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d86:	4b10      	ldr	r3, [pc, #64]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	; (8005dc8 <xPortStartScheduler+0x138>)
 8005d8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d92:	f7ff ff69 	bl	8005c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d96:	f7ff fd5d 	bl	8005854 <vTaskSwitchContext>
	prvTaskExitError();
 8005d9a:	f7ff ff27 	bl	8005bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	e000ed00 	.word	0xe000ed00
 8005dac:	410fc271 	.word	0x410fc271
 8005db0:	410fc270 	.word	0x410fc270
 8005db4:	e000e400 	.word	0xe000e400
 8005db8:	200003d4 	.word	0x200003d4
 8005dbc:	200003d8 	.word	0x200003d8
 8005dc0:	e000ed20 	.word	0xe000ed20
 8005dc4:	2000000c 	.word	0x2000000c
 8005dc8:	e000ef34 	.word	0xe000ef34

08005dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <vPortEnterCritical+0x54>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	4a0d      	ldr	r2, [pc, #52]	; (8005e20 <vPortEnterCritical+0x54>)
 8005dec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <vPortEnterCritical+0x54>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d10e      	bne.n	8005e14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <vPortEnterCritical+0x58>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <vPortEnterCritical+0x48>
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	e7fe      	b.n	8005e12 <vPortEnterCritical+0x46>
	}
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	2000000c 	.word	0x2000000c
 8005e24:	e000ed04 	.word	0xe000ed04

08005e28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e2e:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <vPortExitCritical+0x4c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <vPortExitCritical+0x22>
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	e7fe      	b.n	8005e48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <vPortExitCritical+0x4c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	4a08      	ldr	r2, [pc, #32]	; (8005e74 <vPortExitCritical+0x4c>)
 8005e52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <vPortExitCritical+0x4c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d104      	bne.n	8005e66 <vPortExitCritical+0x3e>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	2000000c 	.word	0x2000000c
	...

08005e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e80:	f3ef 8009 	mrs	r0, PSP
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <pxCurrentTCBConst>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	f01e 0f10 	tst.w	lr, #16
 8005e90:	bf08      	it	eq
 8005e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9a:	6010      	str	r0, [r2, #0]
 8005e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ea4:	f380 8811 	msr	BASEPRI, r0
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f7ff fcd0 	bl	8005854 <vTaskSwitchContext>
 8005eb4:	f04f 0000 	mov.w	r0, #0
 8005eb8:	f380 8811 	msr	BASEPRI, r0
 8005ebc:	bc09      	pop	{r0, r3}
 8005ebe:	6819      	ldr	r1, [r3, #0]
 8005ec0:	6808      	ldr	r0, [r1, #0]
 8005ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec6:	f01e 0f10 	tst.w	lr, #16
 8005eca:	bf08      	it	eq
 8005ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ed0:	f380 8809 	msr	PSP, r0
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	f3af 8000 	nop.w

08005ee0 <pxCurrentTCBConst>:
 8005ee0:	200002a8 	.word	0x200002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop

08005ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f00:	f7ff fbec 	bl	80056dc <xTaskIncrementTick>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f0a:	4b06      	ldr	r3, [pc, #24]	; (8005f24 <SysTick_Handler+0x3c>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <vPortSetupTimerInterrupt+0x34>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <vPortSetupTimerInterrupt+0x38>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <vPortSetupTimerInterrupt+0x3c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <vPortSetupTimerInterrupt+0x40>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	099b      	lsrs	r3, r3, #6
 8005f44:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <vPortSetupTimerInterrupt+0x44>)
 8005f46:	3b01      	subs	r3, #1
 8005f48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f4a:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <vPortSetupTimerInterrupt+0x34>)
 8005f4c:	2207      	movs	r2, #7
 8005f4e:	601a      	str	r2, [r3, #0]
}
 8005f50:	bf00      	nop
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	e000e010 	.word	0xe000e010
 8005f60:	e000e018 	.word	0xe000e018
 8005f64:	20000000 	.word	0x20000000
 8005f68:	10624dd3 	.word	0x10624dd3
 8005f6c:	e000e014 	.word	0xe000e014

08005f70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f80 <vPortEnableVFP+0x10>
 8005f74:	6801      	ldr	r1, [r0, #0]
 8005f76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f7a:	6001      	str	r1, [r0, #0]
 8005f7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f7e:	bf00      	nop
 8005f80:	e000ed88 	.word	0xe000ed88

08005f84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b08a      	sub	sp, #40	; 0x28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f90:	f7ff fafa 	bl	8005588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f94:	4b57      	ldr	r3, [pc, #348]	; (80060f4 <pvPortMalloc+0x170>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f9c:	f000 f90c 	bl	80061b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fa0:	4b55      	ldr	r3, [pc, #340]	; (80060f8 <pvPortMalloc+0x174>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f040 808c 	bne.w	80060c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d01c      	beq.n	8005fee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d013      	beq.n	8005fee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f023 0307 	bic.w	r3, r3, #7
 8005fcc:	3308      	adds	r3, #8
 8005fce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <pvPortMalloc+0x6a>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e7fe      	b.n	8005fec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d068      	beq.n	80060c6 <pvPortMalloc+0x142>
 8005ff4:	4b41      	ldr	r3, [pc, #260]	; (80060fc <pvPortMalloc+0x178>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d863      	bhi.n	80060c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ffe:	4b40      	ldr	r3, [pc, #256]	; (8006100 <pvPortMalloc+0x17c>)
 8006000:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006002:	4b3f      	ldr	r3, [pc, #252]	; (8006100 <pvPortMalloc+0x17c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006008:	e004      	b.n	8006014 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	429a      	cmp	r2, r3
 800601c:	d903      	bls.n	8006026 <pvPortMalloc+0xa2>
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f1      	bne.n	800600a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006026:	4b33      	ldr	r3, [pc, #204]	; (80060f4 <pvPortMalloc+0x170>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602c:	429a      	cmp	r2, r3
 800602e:	d04a      	beq.n	80060c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2208      	movs	r2, #8
 8006036:	4413      	add	r3, r2
 8006038:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	2308      	movs	r3, #8
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	429a      	cmp	r2, r3
 8006050:	d91e      	bls.n	8006090 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4413      	add	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <pvPortMalloc+0xf4>
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	e7fe      	b.n	8006076 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800608a:	69b8      	ldr	r0, [r7, #24]
 800608c:	f000 f8f6 	bl	800627c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <pvPortMalloc+0x178>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	4a18      	ldr	r2, [pc, #96]	; (80060fc <pvPortMalloc+0x178>)
 800609c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800609e:	4b17      	ldr	r3, [pc, #92]	; (80060fc <pvPortMalloc+0x178>)
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	4b18      	ldr	r3, [pc, #96]	; (8006104 <pvPortMalloc+0x180>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d203      	bcs.n	80060b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060aa:	4b14      	ldr	r3, [pc, #80]	; (80060fc <pvPortMalloc+0x178>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <pvPortMalloc+0x180>)
 80060b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	4b10      	ldr	r3, [pc, #64]	; (80060f8 <pvPortMalloc+0x174>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060c6:	f7ff fa6d 	bl	80055a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <pvPortMalloc+0x164>
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e7fe      	b.n	80060e6 <pvPortMalloc+0x162>
	return pvReturn;
 80060e8:	69fb      	ldr	r3, [r7, #28]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3728      	adds	r7, #40	; 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000f9c 	.word	0x20000f9c
 80060f8:	20000fa8 	.word	0x20000fa8
 80060fc:	20000fa0 	.word	0x20000fa0
 8006100:	20000f94 	.word	0x20000f94
 8006104:	20000fa4 	.word	0x20000fa4

08006108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d046      	beq.n	80061a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800611a:	2308      	movs	r3, #8
 800611c:	425b      	negs	r3, r3
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4413      	add	r3, r2
 8006122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	4b20      	ldr	r3, [pc, #128]	; (80061b0 <vPortFree+0xa8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <vPortFree+0x42>
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e7fe      	b.n	8006148 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <vPortFree+0x5e>
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
 8006164:	e7fe      	b.n	8006164 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <vPortFree+0xa8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4013      	ands	r3, r2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d019      	beq.n	80061a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d115      	bne.n	80061a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <vPortFree+0xa8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	43db      	mvns	r3, r3
 8006186:	401a      	ands	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800618c:	f7ff f9fc 	bl	8005588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <vPortFree+0xac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4413      	add	r3, r2
 800619a:	4a06      	ldr	r2, [pc, #24]	; (80061b4 <vPortFree+0xac>)
 800619c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	f000 f86c 	bl	800627c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061a4:	f7ff f9fe 	bl	80055a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061a8:	bf00      	nop
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000fa8 	.word	0x20000fa8
 80061b4:	20000fa0 	.word	0x20000fa0

080061b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80061c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061c4:	4b27      	ldr	r3, [pc, #156]	; (8006264 <prvHeapInit+0xac>)
 80061c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3307      	adds	r3, #7
 80061d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <prvHeapInit+0xac>)
 80061e8:	4413      	add	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061f0:	4a1d      	ldr	r2, [pc, #116]	; (8006268 <prvHeapInit+0xb0>)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061f6:	4b1c      	ldr	r3, [pc, #112]	; (8006268 <prvHeapInit+0xb0>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4413      	add	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006204:	2208      	movs	r2, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1a9b      	subs	r3, r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0307 	bic.w	r3, r3, #7
 8006212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a15      	ldr	r2, [pc, #84]	; (800626c <prvHeapInit+0xb4>)
 8006218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800621a:	4b14      	ldr	r3, [pc, #80]	; (800626c <prvHeapInit+0xb4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <prvHeapInit+0xb4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <prvHeapInit+0xb4>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <prvHeapInit+0xb8>)
 8006246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a09      	ldr	r2, [pc, #36]	; (8006274 <prvHeapInit+0xbc>)
 800624e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <prvHeapInit+0xc0>)
 8006252:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006256:	601a      	str	r2, [r3, #0]
}
 8006258:	bf00      	nop
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	200003dc 	.word	0x200003dc
 8006268:	20000f94 	.word	0x20000f94
 800626c:	20000f9c 	.word	0x20000f9c
 8006270:	20000fa4 	.word	0x20000fa4
 8006274:	20000fa0 	.word	0x20000fa0
 8006278:	20000fa8 	.word	0x20000fa8

0800627c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006284:	4b28      	ldr	r3, [pc, #160]	; (8006328 <prvInsertBlockIntoFreeList+0xac>)
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e002      	b.n	8006290 <prvInsertBlockIntoFreeList+0x14>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d8f7      	bhi.n	800628a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	4413      	add	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d108      	bne.n	80062be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	441a      	add	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	441a      	add	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d118      	bne.n	8006304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <prvInsertBlockIntoFreeList+0xb0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d00d      	beq.n	80062fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	441a      	add	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e008      	b.n	800630c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062fa:	4b0c      	ldr	r3, [pc, #48]	; (800632c <prvInsertBlockIntoFreeList+0xb0>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e003      	b.n	800630c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	429a      	cmp	r2, r3
 8006312:	d002      	beq.n	800631a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000f94 	.word	0x20000f94
 800632c:	20000f9c 	.word	0x20000f9c

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4e0d      	ldr	r6, [pc, #52]	; (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	; (800636c <__libc_init_array+0x3c>)
 8006336:	1ba4      	subs	r4, r4, r6
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2500      	movs	r5, #0
 800633c:	42a5      	cmp	r5, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4e0b      	ldr	r6, [pc, #44]	; (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	; (8006374 <__libc_init_array+0x44>)
 8006344:	f000 f820 	bl	8006388 <_init>
 8006348:	1ba4      	subs	r4, r4, r6
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2500      	movs	r5, #0
 800634e:	42a5      	cmp	r5, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006358:	4798      	blx	r3
 800635a:	3501      	adds	r5, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006362:	4798      	blx	r3
 8006364:	3501      	adds	r5, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	08006480 	.word	0x08006480
 800636c:	08006480 	.word	0x08006480
 8006370:	08006480 	.word	0x08006480
 8006374:	08006484 	.word	0x08006484

08006378 <memset>:
 8006378:	4402      	add	r2, r0
 800637a:	4603      	mov	r3, r0
 800637c:	4293      	cmp	r3, r2
 800637e:	d100      	bne.n	8006382 <memset+0xa>
 8006380:	4770      	bx	lr
 8006382:	f803 1b01 	strb.w	r1, [r3], #1
 8006386:	e7f9      	b.n	800637c <memset+0x4>

08006388 <_init>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr

08006394 <_fini>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr
