
GIRASOLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a318  0800a318  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a320  0800a320  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002328  20000074  0800a39c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000239c  0800a39c  0002239c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002853f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047ab  00000000  00000000  000485e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024d0  00000000  00000000  0004cd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022b8  00000000  00000000  0004f260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c817  00000000  00000000  00051518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b514  00000000  00000000  0007dd2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001191d2  00000000  00000000  00099243  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b2415  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1e0  00000000  00000000  001b2490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a110 	.word	0x0800a110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a110 	.word	0x0800a110

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <panelDataInit>:
struct panelsData {
	int rightPanelValue, leftPanelValue, threshold, variation;
} pd;

// Function to initialize panel data
void panelDataInit() {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	pd.leftPanelValue = 0;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <panelDataInit+0x28>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
	pd.rightPanelValue = 0;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <panelDataInit+0x28>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	pd.threshold = 10;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <panelDataInit+0x28>)
 80005c6:	220a      	movs	r2, #10
 80005c8:	609a      	str	r2, [r3, #8]
	pd.variation = 10;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <panelDataInit+0x28>)
 80005cc:	220a      	movs	r2, #10
 80005ce:	60da      	str	r2, [r3, #12]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200022e4 	.word	0x200022e4

080005e0 <prec_control_manag_init>:
	int led1_done, led2_done, led3_done;
	int button_wait, button_can_do;
} pcm;

void prec_control_manag_init()
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	pcm.lpw = pcm.rpw = 0;
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <prec_control_manag_init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <prec_control_manag_init+0x64>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <prec_control_manag_init+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]
	pcm.l1w = pcm.l2w = pcm.l3w = 0;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <prec_control_manag_init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <prec_control_manag_init+0x64>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a11      	ldr	r2, [pc, #68]	; (8000644 <prec_control_manag_init+0x64>)
 80005fe:	60d3      	str	r3, [r2, #12]
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <prec_control_manag_init+0x64>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <prec_control_manag_init+0x64>)
 8000606:	6093      	str	r3, [r2, #8]
	pcm.lpanel_done = pcm.rpanel_done = 0;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <prec_control_manag_init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <prec_control_manag_init+0x64>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <prec_control_manag_init+0x64>)
 8000614:	6153      	str	r3, [r2, #20]
	pcm.led1_done = pcm.led2_done = pcm.led3_done = 1;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <prec_control_manag_init+0x64>)
 8000618:	2201      	movs	r2, #1
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <prec_control_manag_init+0x64>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <prec_control_manag_init+0x64>)
 8000622:	6213      	str	r3, [r2, #32]
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <prec_control_manag_init+0x64>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <prec_control_manag_init+0x64>)
 800062a:	61d3      	str	r3, [r2, #28]
	pcm.button_wait = pcm.button_can_do = 0;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <prec_control_manag_init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <prec_control_manag_init+0x64>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	4a03      	ldr	r2, [pc, #12]	; (8000644 <prec_control_manag_init+0x64>)
 8000638:	6293      	str	r3, [r2, #40]	; 0x28
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	20002160 	.word	0x20002160

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b0c2      	sub	sp, #264	; 0x108
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Initialize panels data structure
	panelDataInit();
 800064e:	f7ff ffb1 	bl	80005b4 <panelDataInit>
	// Initialize control data structure
	prec_control_manag_init();
 8000652:	f7ff ffc5 	bl	80005e0 <prec_control_manag_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f001 fd90 	bl	800217a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f93d 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fc29 	bl	8000eb4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000662:	f000 fabf 	bl	8000be4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000666:	f000 faf5 	bl	8000c54 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800066a:	f000 fb31 	bl	8000cd0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800066e:	f000 fb55 	bl	8000d1c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000672:	f000 fb91 	bl	8000d98 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000676:	f000 fbbf 	bl	8000df8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800067a:	f000 fbed 	bl	8000e58 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800067e:	f000 f9d1 	bl	8000a24 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000682:	f000 fa49 	bl	8000b18 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexPD */
  osMutexDef(MutexPD);
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  MutexPDHandle = osMutexCreate(osMutex(MutexPD));
 8000692:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fd3b 	bl	8007112 <osMutexCreate>
 800069c:	4602      	mov	r2, r0
 800069e:	4b78      	ldr	r3, [pc, #480]	; (8000880 <main+0x238>)
 80006a0:	601a      	str	r2, [r3, #0]

  /* definition and creation of panelsMutex */
  osMutexDef(panelsMutex);
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  panelsMutexHandle = osMutexCreate(osMutex(panelsMutex));
 80006ae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80006b2:	4618      	mov	r0, r3
 80006b4:	f006 fd2d 	bl	8007112 <osMutexCreate>
 80006b8:	4602      	mov	r2, r0
 80006ba:	4b72      	ldr	r3, [pc, #456]	; (8000884 <main+0x23c>)
 80006bc:	601a      	str	r2, [r3, #0]
  //osMutexWait(panelsMutexHandle, osWaitForever);
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of rpanel_sem */
  osSemaphoreDef(rpanel_sem);
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  rpanel_semHandle = osSemaphoreCreate(osSemaphore(rpanel_sem), 1);
 80006ca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f006 fdbb 	bl	800724c <osSemaphoreCreate>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b6b      	ldr	r3, [pc, #428]	; (8000888 <main+0x240>)
 80006da:	601a      	str	r2, [r3, #0]

  /* definition and creation of lpanel_sem */
  osSemaphoreDef(lpanel_sem);
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  lpanel_semHandle = osSemaphoreCreate(osSemaphore(lpanel_sem), 1);
 80006e8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80006ec:	2101      	movs	r1, #1
 80006ee:	4618      	mov	r0, r3
 80006f0:	f006 fdac 	bl	800724c <osSemaphoreCreate>
 80006f4:	4602      	mov	r2, r0
 80006f6:	4b65      	ldr	r3, [pc, #404]	; (800088c <main+0x244>)
 80006f8:	601a      	str	r2, [r3, #0]

  /* definition and creation of led1_sem */
  osSemaphoreDef(led1_sem);
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  led1_semHandle = osSemaphoreCreate(osSemaphore(led1_sem), 1);
 8000706:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800070a:	2101      	movs	r1, #1
 800070c:	4618      	mov	r0, r3
 800070e:	f006 fd9d 	bl	800724c <osSemaphoreCreate>
 8000712:	4602      	mov	r2, r0
 8000714:	4b5e      	ldr	r3, [pc, #376]	; (8000890 <main+0x248>)
 8000716:	601a      	str	r2, [r3, #0]

  /* definition and creation of led2_sem */
  osSemaphoreDef(led2_sem);
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  led2_semHandle = osSemaphoreCreate(osSemaphore(led2_sem), 1);
 8000724:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000728:	2101      	movs	r1, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f006 fd8e 	bl	800724c <osSemaphoreCreate>
 8000730:	4602      	mov	r2, r0
 8000732:	4b58      	ldr	r3, [pc, #352]	; (8000894 <main+0x24c>)
 8000734:	601a      	str	r2, [r3, #0]

  /* definition and creation of led3_sem */
  osSemaphoreDef(led3_sem);
 8000736:	2300      	movs	r3, #0
 8000738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800073c:	2300      	movs	r3, #0
 800073e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  led3_semHandle = osSemaphoreCreate(osSemaphore(led3_sem), 1);
 8000742:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f006 fd7f 	bl	800724c <osSemaphoreCreate>
 800074e:	4602      	mov	r2, r0
 8000750:	4b51      	ldr	r3, [pc, #324]	; (8000898 <main+0x250>)
 8000752:	601a      	str	r2, [r3, #0]

  /* definition and creation of button_sem */
  osSemaphoreDef(button_sem);
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  button_semHandle = osSemaphoreCreate(osSemaphore(button_sem), 1);
 8000760:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000764:	2101      	movs	r1, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f006 fd70 	bl	800724c <osSemaphoreCreate>
 800076c:	4602      	mov	r2, r0
 800076e:	4b4b      	ldr	r3, [pc, #300]	; (800089c <main+0x254>)
 8000770:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadLeftPanel */
  osThreadDef(ReadLeftPanel, StartReadLeftPanel, osPriorityNormal, 0, 128);
 8000772:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <main+0x258>)
 8000774:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000778:	461d      	mov	r5, r3
 800077a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800077c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadLeftPanelHandle = osThreadCreate(osThread(ReadLeftPanel), NULL);
 8000786:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f006 fc60 	bl	8007052 <osThreadCreate>
 8000792:	4602      	mov	r2, r0
 8000794:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <main+0x25c>)
 8000796:	601a      	str	r2, [r3, #0]

  /* definition and creation of SerialDebug */
  osThreadDef(SerialDebug, StartSerialDebug, osPriorityNormal, 0, 128);
 8000798:	4b43      	ldr	r3, [pc, #268]	; (80008a8 <main+0x260>)
 800079a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800079e:	461d      	mov	r5, r3
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialDebugHandle = osThreadCreate(osThread(SerialDebug), NULL);
 80007ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f006 fc4d 	bl	8007052 <osThreadCreate>
 80007b8:	4602      	mov	r2, r0
 80007ba:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <main+0x264>)
 80007bc:	601a      	str	r2, [r3, #0]

  /* definition and creation of SyncButtonTask */
  osThreadDef(SyncButtonTask, StartSynkButton, osPriorityAboveNormal, 0, 128);
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <main+0x268>)
 80007c0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80007c4:	461d      	mov	r5, r3
 80007c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SyncButtonTaskHandle = osThreadCreate(osThread(SyncButtonTask), NULL);
 80007d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f006 fc3a 	bl	8007052 <osThreadCreate>
 80007de:	4602      	mov	r2, r0
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <main+0x26c>)
 80007e2:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReadRightPanel */
  osThreadDef(ReadRightPanel, StartReadRightPanel, osPriorityNormal, 0, 128);
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <main+0x270>)
 80007e6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80007ea:	461d      	mov	r5, r3
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRightPanelHandle = osThreadCreate(osThread(ReadRightPanel), NULL);
 80007f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f006 fc27 	bl	8007052 <osThreadCreate>
 8000804:	4602      	mov	r2, r0
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <main+0x274>)
 8000808:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask1 */
  osThreadDef(ledTask1, StartLedTask1, osPriorityNormal, 0, 128);
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <main+0x278>)
 800080c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000810:	461d      	mov	r5, r3
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask1Handle = osThreadCreate(osThread(ledTask1), NULL);
 800081e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f006 fc14 	bl	8007052 <osThreadCreate>
 800082a:	4602      	mov	r2, r0
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <main+0x27c>)
 800082e:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask2 */
  osThreadDef(ledTask2, StartLedTask2, osPriorityNormal, 0, 128);
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <main+0x280>)
 8000832:	f107 0420 	add.w	r4, r7, #32
 8000836:	461d      	mov	r5, r3
 8000838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask2Handle = osThreadCreate(osThread(ledTask2), NULL);
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f006 fc01 	bl	8007052 <osThreadCreate>
 8000850:	4602      	mov	r2, r0
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <main+0x284>)
 8000854:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask3 */
  osThreadDef(ledTask3, StartLedTask3, osPriorityNormal, 0, 128);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4a1d      	ldr	r2, [pc, #116]	; (80008d0 <main+0x288>)
 800085a:	461c      	mov	r4, r3
 800085c:	4615      	mov	r5, r2
 800085e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask3Handle = osThreadCreate(osThread(ledTask3), NULL);
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f006 fbef 	bl	8007052 <osThreadCreate>
 8000874:	4602      	mov	r2, r0
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <main+0x28c>)
 8000878:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800087a:	f006 fbe3 	bl	8007044 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800087e:	e7fe      	b.n	800087e <main+0x236>
 8000880:	2000230c 	.word	0x2000230c
 8000884:	20002260 	.word	0x20002260
 8000888:	200021f4 	.word	0x200021f4
 800088c:	200022fc 	.word	0x200022fc
 8000890:	20001c18 	.word	0x20001c18
 8000894:	20002308 	.word	0x20002308
 8000898:	20002304 	.word	0x20002304
 800089c:	2000215c 	.word	0x2000215c
 80008a0:	0800a138 	.word	0x0800a138
 80008a4:	200022f8 	.word	0x200022f8
 80008a8:	0800a160 	.word	0x0800a160
 80008ac:	20001d04 	.word	0x20001d04
 80008b0:	0800a18c 	.word	0x0800a18c
 80008b4:	20001d00 	.word	0x20001d00
 80008b8:	0800a1b8 	.word	0x0800a1b8
 80008bc:	20002300 	.word	0x20002300
 80008c0:	0800a1e0 	.word	0x0800a1e0
 80008c4:	2000225c 	.word	0x2000225c
 80008c8:	0800a208 	.word	0x0800a208
 80008cc:	20001bdc 	.word	0x20001bdc
 80008d0:	0800a230 	.word	0x0800a230
 80008d4:	200022f4 	.word	0x200022f4

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0b8      	sub	sp, #224	; 0xe0
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e2:	2244      	movs	r2, #68	; 0x44
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f009 f80d 	bl	8009906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2288      	movs	r2, #136	; 0x88
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f008 ffff 	bl	8009906 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000908:	f003 fc22 	bl	8004150 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800090c:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <SystemClock_Config+0x144>)
 800090e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000912:	4a42      	ldr	r2, [pc, #264]	; (8000a1c <SystemClock_Config+0x144>)
 8000914:	f023 0318 	bic.w	r3, r3, #24
 8000918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800091c:	2314      	movs	r3, #20
 800091e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000922:	2301      	movs	r3, #1
 8000924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000934:	2360      	movs	r3, #96	; 0x60
 8000936:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000940:	2301      	movs	r3, #1
 8000942:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800094c:	2328      	movs	r3, #40	; 0x28
 800094e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000952:	2307      	movs	r3, #7
 8000954:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800095e:	2302      	movs	r3, #2
 8000960:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000968:	4618      	mov	r0, r3
 800096a:	f003 fd3d 	bl	80043e8 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000974:	f000 fff0 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2303      	movs	r3, #3
 8000980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000996:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800099a:	2104      	movs	r1, #4
 800099c:	4618      	mov	r0, r3
 800099e:	f004 f909 	bl	8004bb4 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009a8:	f000 ffd6 	bl	8001958 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <SystemClock_Config+0x148>)
 80009ae:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009c0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009ce:	2301      	movs	r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009d6:	2318      	movs	r3, #24
 80009d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009da:	2307      	movs	r3, #7
 80009dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80009e6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80009ea:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 fb16 	bl	8005020 <HAL_RCCEx_PeriphCLKConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x126>
  {
    Error_Handler();
 80009fa:	f000 ffad 	bl	8001958 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a02:	f003 fbc3 	bl	800418c <HAL_PWREx_ControlVoltageScaling>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000a0c:	f000 ffa4 	bl	8001958 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a10:	f004 fdec 	bl	80055ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a14:	bf00      	nop
 8000a16:	37e0      	adds	r7, #224	; 0xe0
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	00016085 	.word	0x00016085

08000a24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a48:	4a31      	ldr	r2, [pc, #196]	; (8000b10 <MX_ADC1_Init+0xec>)
 8000a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a52:	4b2e      	ldr	r3, [pc, #184]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aac:	4817      	ldr	r0, [pc, #92]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000aae:	f001 fd93 	bl	80025d8 <HAL_ADC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ab8:	f000 ff4e 	bl	8001958 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4811      	ldr	r0, [pc, #68]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000ac8:	f002 fc56 	bl	8003378 <HAL_ADCEx_MultiModeConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ad2:	f000 ff41 	bl	8001958 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_ADC1_Init+0xf0>)
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ada:	2306      	movs	r3, #6
 8000adc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ae2:	237f      	movs	r3, #127	; 0x7f
 8000ae4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000af4:	f002 f85c 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000afe:	f000 ff2b 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200021f8 	.word	0x200021f8
 8000b10:	50040000 	.word	0x50040000
 8000b14:	04300002 	.word	0x04300002

08000b18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b1e:	463b      	mov	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b30:	4a2a      	ldr	r2, [pc, #168]	; (8000bdc <MX_ADC2_Init+0xc4>)
 8000b32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b94:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000b96:	f001 fd1f 	bl	80025d8 <HAL_ADC_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000ba0:	f000 feda 	bl	8001958 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_ADC2_Init+0xc8>)
 8000ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba8:	2306      	movs	r3, #6
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bb0:	237f      	movs	r3, #127	; 0x7f
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_ADC2_Init+0xc0>)
 8000bc2:	f001 fff5 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000bcc:	f000 fec4 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20001c9c 	.word	0x20001c9c
 8000bdc:	50040100 	.word	0x50040100
 8000be0:	08600004 	.word	0x08600004

08000be4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <MX_DFSDM1_Init+0x6c>)
 8000bec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c12:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_DFSDM1_Init+0x68>)
 8000c3a:	f002 fd2b 	bl	8003694 <HAL_DFSDM_ChannelInit>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c44:	f000 fe88 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20001be0 	.word	0x20001be0
 8000c50:	40016020 	.word	0x40016020

08000c54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_I2C2_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c60:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c64:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000c92:	f002 ffee 	bl	8003c72 <HAL_I2C_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c9c:	f000 fe5c 	bl	8001958 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000ca4:	f003 f874 	bl	8003d90 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000cae:	f000 fe53 	bl	8001958 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C2_Init+0x74>)
 8000cb6:	f003 f8b6 	bl	8003e26 <HAL_I2CEx_ConfigDigitalFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cc0:	f000 fe4a 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20002110 	.word	0x20002110
 8000ccc:	40005800 	.word	0x40005800

08000cd0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cd6:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <MX_QUADSPI_Init+0x48>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_QUADSPI_Init+0x44>)
 8000d00:	f003 faaa 	bl	8004258 <HAL_QSPI_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000d0a:	f000 fe25 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20002310 	.word	0x20002310
 8000d18:	a0001000 	.word	0xa0001000

08000d1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d22:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <MX_SPI3_Init+0x78>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d36:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d76:	2208      	movs	r2, #8
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_SPI3_Init+0x74>)
 8000d7c:	f004 fe10 	bl	80059a0 <HAL_SPI_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d86:	f000 fde7 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20002190 	.word	0x20002190
 8000d94:	40003c00 	.word	0x40003c00

08000d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <MX_USART1_UART_Init+0x5c>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_USART1_UART_Init+0x58>)
 8000ddc:	f005 f8ca 	bl	8005f74 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000de6:	f000 fdb7 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20002264 	.word	0x20002264
 8000df4:	40013800 	.word	0x40013800

08000df8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_USART3_UART_Init+0x5c>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART3_UART_Init+0x58>)
 8000e3c:	f005 f89a 	bl	8005f74 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e46:	f000 fd87 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20001c1c 	.word	0x20001c1c
 8000e54:	40004800 	.word	0x40004800

08000e58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	2206      	movs	r2, #6
 8000e68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9c:	f003 f80f 	bl	8003ebe <HAL_PCD_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 fd57 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20001d08 	.word	0x20001d08

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	4bb7      	ldr	r3, [pc, #732]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4ab6      	ldr	r2, [pc, #728]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4bb4      	ldr	r3, [pc, #720]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4bb1      	ldr	r3, [pc, #708]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4ab0      	ldr	r2, [pc, #704]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4bae      	ldr	r3, [pc, #696]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4bab      	ldr	r3, [pc, #684]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4aaa      	ldr	r2, [pc, #680]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4ba8      	ldr	r3, [pc, #672]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4ba5      	ldr	r3, [pc, #660]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4aa4      	ldr	r2, [pc, #656]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4ba2      	ldr	r3, [pc, #648]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	4b9f      	ldr	r3, [pc, #636]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	4a9e      	ldr	r2, [pc, #632]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f36:	4b9c      	ldr	r3, [pc, #624]	; (80011a8 <MX_GPIO_Init+0x2f4>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f48:	4898      	ldr	r0, [pc, #608]	; (80011ac <MX_GPIO_Init+0x2f8>)
 8000f4a:	f002 fe57 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f002 fe50 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f62:	4893      	ldr	r0, [pc, #588]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 8000f64:	f002 fe4a 	bl	8003bfc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f6e:	4891      	ldr	r0, [pc, #580]	; (80011b4 <MX_GPIO_Init+0x300>)
 8000f70:	f002 fe44 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	488e      	ldr	r0, [pc, #568]	; (80011b4 <MX_GPIO_Init+0x300>)
 8000f7c:	f002 fe3e 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f86:	488c      	ldr	r0, [pc, #560]	; (80011b8 <MX_GPIO_Init+0x304>)
 8000f88:	f002 fe38 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4887      	ldr	r0, [pc, #540]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 8000f92:	f002 fe33 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4884      	ldr	r0, [pc, #528]	; (80011ac <MX_GPIO_Init+0x2f8>)
 8000f9c:	f002 fe2e 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fa0:	f240 1315 	movw	r3, #277	; 0x115
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	487c      	ldr	r0, [pc, #496]	; (80011ac <MX_GPIO_Init+0x2f8>)
 8000fba:	f002 fc77 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fbe:	236a      	movs	r3, #106	; 0x6a
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	4b7e      	ldr	r3, [pc, #504]	; (80011bc <MX_GPIO_Init+0x308>)
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4876      	ldr	r0, [pc, #472]	; (80011ac <MX_GPIO_Init+0x2f8>)
 8000fd2:	f002 fc6b 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTBLUE_Pin */
  GPIO_InitStruct.Pin = BUTBLUE_Pin;
 8000fd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fdc:	4b78      	ldr	r3, [pc, #480]	; (80011c0 <MX_GPIO_Init+0x30c>)
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTBLUE_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4873      	ldr	r0, [pc, #460]	; (80011b8 <MX_GPIO_Init+0x304>)
 8000fec:	f002 fc5e 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001000:	2308      	movs	r3, #8
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100e:	f002 fc4d 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001012:	f248 1304 	movw	r3, #33028	; 0x8104
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102e:	f002 fc3d 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001032:	2308      	movs	r3, #8
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001042:	2301      	movs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f002 fc2c 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001054:	23e0      	movs	r3, #224	; 0xe0
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001064:	2305      	movs	r3, #5
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f002 fc1b 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <MX_GPIO_Init+0x308>)
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4849      	ldr	r0, [pc, #292]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 800108a:	f002 fc0f 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800108e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001092:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4842      	ldr	r0, [pc, #264]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 80010a8:	f002 fc00 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 80010ac:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80010b0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b2:	4b42      	ldr	r3, [pc, #264]	; (80011bc <MX_GPIO_Init+0x308>)
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	483c      	ldr	r0, [pc, #240]	; (80011b4 <MX_GPIO_Init+0x300>)
 80010c2:	f002 fbf3 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80010c6:	f243 0381 	movw	r3, #12417	; 0x3081
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4835      	ldr	r0, [pc, #212]	; (80011b4 <MX_GPIO_Init+0x300>)
 80010e0:	f002 fbe4 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80010e4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	482e      	ldr	r0, [pc, #184]	; (80011b8 <MX_GPIO_Init+0x304>)
 80010fe:	f002 fbd5 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001102:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <MX_GPIO_Init+0x308>)
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4828      	ldr	r0, [pc, #160]	; (80011b8 <MX_GPIO_Init+0x304>)
 8001118:	f002 fbc8 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800111c:	2302      	movs	r3, #2
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112c:	2305      	movs	r3, #5
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	481f      	ldr	r0, [pc, #124]	; (80011b4 <MX_GPIO_Init+0x300>)
 8001138:	f002 fbb8 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800113c:	2378      	movs	r3, #120	; 0x78
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114c:	2307      	movs	r3, #7
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4817      	ldr	r0, [pc, #92]	; (80011b4 <MX_GPIO_Init+0x300>)
 8001158:	f002 fba8 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800115c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116e:	2304      	movs	r3, #4
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_GPIO_Init+0x2fc>)
 800117a:	f002 fb97 	bl	80038ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2105      	movs	r1, #5
 8001182:	2017      	movs	r0, #23
 8001184:	f002 fa5c 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001188:	2017      	movs	r0, #23
 800118a:	f002 fa75 	bl	8003678 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	2028      	movs	r0, #40	; 0x28
 8001194:	f002 fa54 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001198:	2028      	movs	r0, #40	; 0x28
 800119a:	f002 fa6d 	bl	8003678 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48000400 	.word	0x48000400
 80011b4:	48000c00 	.word	0x48000c00
 80011b8:	48000800 	.word	0x48000800
 80011bc:	10110000 	.word	0x10110000
 80011c0:	10210000 	.word	0x10210000

080011c4 <PostLedTasks>:

/* USER CODE BEGIN 4 */
void PostLedTasks()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
    if (pcm.l1w)
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <PostLedTasks+0x5c>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <PostLedTasks+0x20>
    {
        pcm.l1w--;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <PostLedTasks+0x5c>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <PostLedTasks+0x5c>)
 80011d8:	6093      	str	r3, [r2, #8]
        osSemaphoreRelease(led1_semHandle);
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <PostLedTasks+0x60>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 f8b6 	bl	8007350 <osSemaphoreRelease>
    }

    if (pcm.l2w)
 80011e4:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <PostLedTasks+0x5c>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d009      	beq.n	8001200 <PostLedTasks+0x3c>
    {
        pcm.l2w--;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <PostLedTasks+0x5c>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <PostLedTasks+0x5c>)
 80011f4:	60d3      	str	r3, [r2, #12]
        osSemaphoreRelease(led2_semHandle);
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <PostLedTasks+0x64>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f006 f8a8 	bl	8007350 <osSemaphoreRelease>
    }

    if (pcm.l3w)
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <PostLedTasks+0x5c>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <PostLedTasks+0x58>
    {
        pcm.l3w--;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <PostLedTasks+0x5c>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	3b01      	subs	r3, #1
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <PostLedTasks+0x5c>)
 8001210:	6113      	str	r3, [r2, #16]
        osSemaphoreRelease(led3_semHandle);
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <PostLedTasks+0x68>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f006 f89a 	bl	8007350 <osSemaphoreRelease>
    }
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20002160 	.word	0x20002160
 8001224:	20001c18 	.word	0x20001c18
 8001228:	20002308 	.word	0x20002308
 800122c:	20002304 	.word	0x20002304

08001230 <PostPanelTasks>:

void PostPanelTasks()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    if (pcm.lpw)
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <PostPanelTasks+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d009      	beq.n	8001250 <PostPanelTasks+0x20>
    {
        pcm.lpw--;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <PostPanelTasks+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3b01      	subs	r3, #1
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <PostPanelTasks+0x40>)
 8001244:	6013      	str	r3, [r2, #0]
        osSemaphoreRelease(lpanel_semHandle);
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <PostPanelTasks+0x44>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f006 f880 	bl	8007350 <osSemaphoreRelease>
    }

    if (pcm.rpw)
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <PostPanelTasks+0x40>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d009      	beq.n	800126c <PostPanelTasks+0x3c>
    {
        pcm.rpw--;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <PostPanelTasks+0x40>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	3b01      	subs	r3, #1
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <PostPanelTasks+0x40>)
 8001260:	6053      	str	r3, [r2, #4]
        osSemaphoreRelease(rpanel_semHandle);
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <PostPanelTasks+0x48>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f006 f872 	bl	8007350 <osSemaphoreRelease>
    }
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20002160 	.word	0x20002160
 8001274:	200022fc 	.word	0x200022fc
 8001278:	200021f4 	.word	0x200021f4

0800127c <ReadLPStart>:

void ReadLPStart()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <ReadLPStart+0x4c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	4618      	mov	r0, r3
 800128a:	f005 ff5b 	bl	8007144 <osMutexWait>
	if (pcm.lpanel_done)
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <ReadLPStart+0x50>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <ReadLPStart+0x26>
		pcm.lpw++;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <ReadLPStart+0x50>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <ReadLPStart+0x50>)
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e004      	b.n	80012ac <ReadLPStart+0x30>
	else
		osSemaphoreRelease(lpanel_semHandle);
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <ReadLPStart+0x54>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f006 f852 	bl	8007350 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <ReadLPStart+0x4c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 ff95 	bl	80071e0 <osMutexRelease>
	osSemaphoreWait(lpanel_semHandle, osWaitForever);
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <ReadLPStart+0x54>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f04f 31ff 	mov.w	r1, #4294967295
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 fff8 	bl	80072b4 <osSemaphoreWait>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000230c 	.word	0x2000230c
 80012cc:	20002160 	.word	0x20002160
 80012d0:	200022fc 	.word	0x200022fc

080012d4 <ReadLPEnd>:

void ReadLPEnd()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <ReadLPEnd+0x58>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	4618      	mov	r0, r3
 80012e2:	f005 ff2f 	bl	8007144 <osMutexWait>
	pcm.lpanel_done = 1;
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <ReadLPEnd+0x5c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	615a      	str	r2, [r3, #20]
	if (pcm.lpanel_done && pcm.rpanel_done)
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <ReadLPEnd+0x5c>)
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d014      	beq.n	800131e <ReadLPEnd+0x4a>
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <ReadLPEnd+0x5c>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d010      	beq.n	800131e <ReadLPEnd+0x4a>
    {
		//pcm.led1_done = pcm.led2_done = pcm.led3_done = 0; //indico che devono eseguire i led
	    //PostLedTasks();
		pcm.button_can_do = 1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <ReadLPEnd+0x5c>)
 80012fe:	2201      	movs	r2, #1
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
		if (pcm.button_wait)
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <ReadLPEnd+0x5c>)
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	2b00      	cmp	r3, #0
 8001308:	d009      	beq.n	800131e <ReadLPEnd+0x4a>
		{
			pcm.button_wait--;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <ReadLPEnd+0x5c>)
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	3b01      	subs	r3, #1
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <ReadLPEnd+0x5c>)
 8001312:	6293      	str	r3, [r2, #40]	; 0x28
			osSemaphoreRelease(button_semHandle);
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <ReadLPEnd+0x60>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f006 f819 	bl	8007350 <osSemaphoreRelease>
		}
	 }
	osMutexRelease(MutexPDHandle);
 800131e:	4b03      	ldr	r3, [pc, #12]	; (800132c <ReadLPEnd+0x58>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f005 ff5c 	bl	80071e0 <osMutexRelease>
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000230c 	.word	0x2000230c
 8001330:	20002160 	.word	0x20002160
 8001334:	2000215c 	.word	0x2000215c

08001338 <ReadRPStart>:

void ReadRPStart()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <ReadRPStart+0x4c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	4618      	mov	r0, r3
 8001346:	f005 fefd 	bl	8007144 <osMutexWait>
	if (pcm.rpanel_done)
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <ReadRPStart+0x50>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <ReadRPStart+0x26>
		pcm.rpw++;
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <ReadRPStart+0x50>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	3301      	adds	r3, #1
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <ReadRPStart+0x50>)
 800135a:	6053      	str	r3, [r2, #4]
 800135c:	e004      	b.n	8001368 <ReadRPStart+0x30>
	else
		osSemaphoreRelease(rpanel_semHandle);
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <ReadRPStart+0x54>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fff4 	bl	8007350 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <ReadRPStart+0x4c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f005 ff37 	bl	80071e0 <osMutexRelease>
	osSemaphoreWait(rpanel_semHandle, osWaitForever);
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <ReadRPStart+0x54>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f04f 31ff 	mov.w	r1, #4294967295
 800137a:	4618      	mov	r0, r3
 800137c:	f005 ff9a 	bl	80072b4 <osSemaphoreWait>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000230c 	.word	0x2000230c
 8001388:	20002160 	.word	0x20002160
 800138c:	200021f4 	.word	0x200021f4

08001390 <ReadRPEnd>:

void ReadRPEnd()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <ReadRPEnd+0x58>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	4618      	mov	r0, r3
 800139e:	f005 fed1 	bl	8007144 <osMutexWait>
	pcm.rpanel_done = 1;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <ReadRPEnd+0x5c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	619a      	str	r2, [r3, #24]
	if (pcm.lpanel_done && pcm.rpanel_done)
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <ReadRPEnd+0x5c>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d014      	beq.n	80013da <ReadRPEnd+0x4a>
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <ReadRPEnd+0x5c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d010      	beq.n	80013da <ReadRPEnd+0x4a>
	{
		//pcm.led1_done = pcm.led2_done = pcm.led3_done = 0; //indico che devono eseguire i led
		//PostLedTasks();
		pcm.button_can_do = 1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <ReadRPEnd+0x5c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (pcm.button_wait)
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <ReadRPEnd+0x5c>)
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <ReadRPEnd+0x4a>
		{
			pcm.button_wait--;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <ReadRPEnd+0x5c>)
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	3b01      	subs	r3, #1
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <ReadRPEnd+0x5c>)
 80013ce:	6293      	str	r3, [r2, #40]	; 0x28
			osSemaphoreRelease(button_semHandle);
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <ReadRPEnd+0x60>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 ffbb 	bl	8007350 <osSemaphoreRelease>
		}
	}
	osMutexRelease(MutexPDHandle);
 80013da:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <ReadRPEnd+0x58>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fefe 	bl	80071e0 <osMutexRelease>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	2000230c 	.word	0x2000230c
 80013ec:	20002160 	.word	0x20002160
 80013f0:	2000215c 	.word	0x2000215c

080013f4 <WriteL1Start>:

void WriteL1Start()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <WriteL1Start+0x4c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	4618      	mov	r0, r3
 8001402:	f005 fe9f 	bl	8007144 <osMutexWait>
	if (pcm.led1_done)
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <WriteL1Start+0x50>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <WriteL1Start+0x26>
		pcm.l1w++;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <WriteL1Start+0x50>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	3301      	adds	r3, #1
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <WriteL1Start+0x50>)
 8001416:	6093      	str	r3, [r2, #8]
 8001418:	e004      	b.n	8001424 <WriteL1Start+0x30>
	else
		osSemaphoreRelease(led1_semHandle);
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <WriteL1Start+0x54>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f005 ff96 	bl	8007350 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <WriteL1Start+0x4c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fed9 	bl	80071e0 <osMutexRelease>
	osSemaphoreWait(led1_semHandle, osWaitForever);
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <WriteL1Start+0x54>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f04f 31ff 	mov.w	r1, #4294967295
 8001436:	4618      	mov	r0, r3
 8001438:	f005 ff3c 	bl	80072b4 <osSemaphoreWait>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000230c 	.word	0x2000230c
 8001444:	20002160 	.word	0x20002160
 8001448:	20001c18 	.word	0x20001c18

0800144c <WriteL2Start>:

void WriteL2Start()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <WriteL2Start+0x4c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	4618      	mov	r0, r3
 800145a:	f005 fe73 	bl	8007144 <osMutexWait>
	if (pcm.led2_done)
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <WriteL2Start+0x50>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <WriteL2Start+0x26>
		pcm.l2w++;
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <WriteL2Start+0x50>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <WriteL2Start+0x50>)
 800146e:	60d3      	str	r3, [r2, #12]
 8001470:	e004      	b.n	800147c <WriteL2Start+0x30>
	else
		osSemaphoreRelease(led2_semHandle);
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <WriteL2Start+0x54>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f005 ff6a 	bl	8007350 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <WriteL2Start+0x4c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f005 fead 	bl	80071e0 <osMutexRelease>
	osSemaphoreWait(led2_semHandle, osWaitForever);
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <WriteL2Start+0x54>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f04f 31ff 	mov.w	r1, #4294967295
 800148e:	4618      	mov	r0, r3
 8001490:	f005 ff10 	bl	80072b4 <osSemaphoreWait>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000230c 	.word	0x2000230c
 800149c:	20002160 	.word	0x20002160
 80014a0:	20002308 	.word	0x20002308

080014a4 <WriteL3Start>:

void WriteL3Start()
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <WriteL3Start+0x4c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fe47 	bl	8007144 <osMutexWait>
	if (pcm.led3_done)
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <WriteL3Start+0x50>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <WriteL3Start+0x26>
		pcm.l3w++;
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <WriteL3Start+0x50>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <WriteL3Start+0x50>)
 80014c6:	6113      	str	r3, [r2, #16]
 80014c8:	e004      	b.n	80014d4 <WriteL3Start+0x30>
	else
		osSemaphoreRelease(led3_semHandle);
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <WriteL3Start+0x54>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 ff3e 	bl	8007350 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <WriteL3Start+0x4c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 fe81 	bl	80071e0 <osMutexRelease>
	osSemaphoreWait(led3_semHandle, osWaitForever);
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <WriteL3Start+0x54>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f04f 31ff 	mov.w	r1, #4294967295
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 fee4 	bl	80072b4 <osSemaphoreWait>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000230c 	.word	0x2000230c
 80014f4:	20002160 	.word	0x20002160
 80014f8:	20002304 	.word	0x20002304

080014fc <WriteL1End>:

void WriteL1End()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <WriteL1End+0x50>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fe1b 	bl	8007144 <osMutexWait>
	pcm.led1_done = 1;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <WriteL1End+0x54>)
 8001510:	2201      	movs	r2, #1
 8001512:	61da      	str	r2, [r3, #28]
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <WriteL1End+0x54>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d010      	beq.n	800153e <WriteL1End+0x42>
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <WriteL1End+0x54>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <WriteL1End+0x42>
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <WriteL1End+0x54>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <WriteL1End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <WriteL1End+0x54>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <WriteL1End+0x54>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <WriteL1End+0x54>)
 8001538:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 800153a:	f7ff fe79 	bl	8001230 <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 800153e:	4b03      	ldr	r3, [pc, #12]	; (800154c <WriteL1End+0x50>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f005 fe4c 	bl	80071e0 <osMutexRelease>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000230c 	.word	0x2000230c
 8001550:	20002160 	.word	0x20002160

08001554 <WriteL2End>:

void WriteL2End()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <WriteL2End+0x50>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	4618      	mov	r0, r3
 8001562:	f005 fdef 	bl	8007144 <osMutexWait>
	pcm.led2_done = 1;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <WriteL2End+0x54>)
 8001568:	2201      	movs	r2, #1
 800156a:	621a      	str	r2, [r3, #32]
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <WriteL2End+0x54>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d010      	beq.n	8001596 <WriteL2End+0x42>
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <WriteL2End+0x54>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00c      	beq.n	8001596 <WriteL2End+0x42>
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <WriteL2End+0x54>)
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <WriteL2End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <WriteL2End+0x54>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <WriteL2End+0x54>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <WriteL2End+0x54>)
 8001590:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 8001592:	f7ff fe4d 	bl	8001230 <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 8001596:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <WriteL2End+0x50>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f005 fe20 	bl	80071e0 <osMutexRelease>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000230c 	.word	0x2000230c
 80015a8:	20002160 	.word	0x20002160

080015ac <WriteL3End>:

void WriteL3End()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <WriteL3End+0x50>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	4618      	mov	r0, r3
 80015ba:	f005 fdc3 	bl	8007144 <osMutexWait>
	pcm.led3_done = 1;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <WriteL3End+0x54>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <WriteL3End+0x54>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d010      	beq.n	80015ee <WriteL3End+0x42>
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <WriteL3End+0x54>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00c      	beq.n	80015ee <WriteL3End+0x42>
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <WriteL3End+0x54>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <WriteL3End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <WriteL3End+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <WriteL3End+0x54>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	4a06      	ldr	r2, [pc, #24]	; (8001600 <WriteL3End+0x54>)
 80015e8:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 80015ea:	f7ff fe21 	bl	8001230 <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 80015ee:	4b03      	ldr	r3, [pc, #12]	; (80015fc <WriteL3End+0x50>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 fdf4 	bl	80071e0 <osMutexRelease>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000230c 	.word	0x2000230c
 8001600:	20002160 	.word	0x20002160

08001604 <StartReadButton>:

void StartReadButton()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <StartReadButton+0x4c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	4618      	mov	r0, r3
 8001612:	f005 fd97 	bl	8007144 <osMutexWait>
	if (pcm.button_can_do)
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <StartReadButton+0x50>)
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <StartReadButton+0x26>
		osSemaphoreRelease(button_semHandle);
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <StartReadButton+0x54>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f005 fe94 	bl	8007350 <osSemaphoreRelease>
 8001628:	e004      	b.n	8001634 <StartReadButton+0x30>
	else
		pcm.button_wait++;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <StartReadButton+0x50>)
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	3301      	adds	r3, #1
 8001630:	4a08      	ldr	r2, [pc, #32]	; (8001654 <StartReadButton+0x50>)
 8001632:	6293      	str	r3, [r2, #40]	; 0x28
	osMutexRelease(MutexPDHandle);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <StartReadButton+0x4c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f005 fdd1 	bl	80071e0 <osMutexRelease>
	osSemaphoreWait(button_semHandle, osWaitForever);
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <StartReadButton+0x54>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f04f 31ff 	mov.w	r1, #4294967295
 8001646:	4618      	mov	r0, r3
 8001648:	f005 fe34 	bl	80072b4 <osSemaphoreWait>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	2000230c 	.word	0x2000230c
 8001654:	20002160 	.word	0x20002160
 8001658:	2000215c 	.word	0x2000215c

0800165c <EndReadButton>:

void EndReadButton()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <EndReadButton+0x48>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fd6b 	bl	8007144 <osMutexWait>
	pcm.button_can_do = 0; //non può andare
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <EndReadButton+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
	pcm.button_wait = 0; //non è più in attesa
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <EndReadButton+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
	//PostPanelTasks();
	pcm.led1_done = pcm.led2_done = pcm.led3_done = 0; //indico che devono eseguire i led
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <EndReadButton+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <EndReadButton+0x4c>)
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <EndReadButton+0x4c>)
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <EndReadButton+0x4c>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <EndReadButton+0x4c>)
 800168e:	61d3      	str	r3, [r2, #28]
	PostLedTasks();
 8001690:	f7ff fd98 	bl	80011c4 <PostLedTasks>
	osMutexRelease(MutexPDHandle);
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <EndReadButton+0x48>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f005 fda1 	bl	80071e0 <osMutexRelease>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000230c 	.word	0x2000230c
 80016a8:	20002160 	.word	0x20002160

080016ac <StartReadLeftPanel>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartReadLeftPanel */
void StartReadLeftPanel(void const * argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;)
	{
		ReadLPStart();
 80016b4:	f7ff fde2 	bl	800127c <ReadLPStart>

		 // Get left panel value
		HAL_ADC_Start(&hadc2);
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <StartReadLeftPanel+0x44>)
 80016ba:	f001 f8e1 	bl	8002880 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80016be:	f04f 31ff 	mov.w	r1, #4294967295
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <StartReadLeftPanel+0x44>)
 80016c4:	f001 f996 	bl	80029f4 <HAL_ADC_PollForConversion>
		pd.leftPanelValue = HAL_ADC_GetValue(&hadc2)*100/2400;
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <StartReadLeftPanel+0x44>)
 80016ca:	f001 fa63 	bl	8002b94 <HAL_ADC_GetValue>
 80016ce:	4602      	mov	r2, r0
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	fb03 f302 	mul.w	r3, r3, r2
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <StartReadLeftPanel+0x48>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	461a      	mov	r2, r3
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <StartReadLeftPanel+0x4c>)
 80016e2:	605a      	str	r2, [r3, #4]

		ReadLPEnd();
 80016e4:	f7ff fdf6 	bl	80012d4 <ReadLPEnd>

		// Delay time (msec)
		osDelay(100);
 80016e8:	2064      	movs	r0, #100	; 0x64
 80016ea:	f005 fcfe 	bl	80070ea <osDelay>
		ReadLPStart();
 80016ee:	e7e1      	b.n	80016b4 <StartReadLeftPanel+0x8>
 80016f0:	20001c9c 	.word	0x20001c9c
 80016f4:	1b4e81b5 	.word	0x1b4e81b5
 80016f8:	200022e4 	.word	0x200022e4

080016fc <StartSerialDebug>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialDebug */
void StartSerialDebug(void const * argument)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b093      	sub	sp, #76	; 0x4c
 8001700:	af02      	add	r7, sp, #8
 8001702:	6078      	str	r0, [r7, #4]
	/** Update panel data structure values **/
	// Lock data reads semaphore
  	//startReadPD(); DISABILITATO TEMPORANEAMENTE

  	// Get data
	sprintf(msg, "Light Panel Right = %hu\r\nLight Panel Left = %hu\r\nThr = %hu\r\nVar = %hu\r\n", pd.rightPanelValue, pd.leftPanelValue, pd.threshold, pd.variation);
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <StartSerialDebug+0x50>)
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <StartSerialDebug+0x50>)
 800170a:	685c      	ldr	r4, [r3, #4]
 800170c:	4b0f      	ldr	r3, [pc, #60]	; (800174c <StartSerialDebug+0x50>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4a0e      	ldr	r2, [pc, #56]	; (800174c <StartSerialDebug+0x50>)
 8001712:	68d2      	ldr	r2, [r2, #12]
 8001714:	f107 000c 	add.w	r0, r7, #12
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4623      	mov	r3, r4
 800171e:	460a      	mov	r2, r1
 8001720:	490b      	ldr	r1, [pc, #44]	; (8001750 <StartSerialDebug+0x54>)
 8001722:	f008 f8f9 	bl	8009918 <siprintf>

	// Unlock data reads semaphore
	//endReadPD();

	// Print data
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fd50 	bl	80001d0 <strlen>
 8001730:	4603      	mov	r3, r0
 8001732:	b29a      	uxth	r2, r3
 8001734:	f107 010c 	add.w	r1, r7, #12
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <StartSerialDebug+0x58>)
 800173e:	f004 fc67 	bl	8006010 <HAL_UART_Transmit>

	// Delay time (msec)
	osDelay(3000);
 8001742:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001746:	f005 fcd0 	bl	80070ea <osDelay>
  {
 800174a:	e7db      	b.n	8001704 <StartSerialDebug+0x8>
 800174c:	200022e4 	.word	0x200022e4
 8001750:	0800a24c 	.word	0x0800a24c
 8001754:	20002264 	.word	0x20002264

08001758 <StartSynkButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSynkButton */
void StartSynkButton(void const * argument)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSynkButton */
  /* Infinite loop */
  for(;;)
  {
	  StartReadButton();
 8001760:	f7ff ff50 	bl	8001604 <StartReadButton>
	  if (blue_button_pressed) {
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <StartSynkButton+0x4c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d015      	beq.n	8001798 <StartSynkButton+0x40>
		  // Reset button pressed variable
		  blue_button_pressed = 0;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <StartSynkButton+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
		  // Start semaphore
		  //startWritePD();
		  // Set threshold
		  pd.threshold = pd.leftPanelValue<pd.rightPanelValue?pd.leftPanelValue:pd.rightPanelValue;
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <StartSynkButton+0x50>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <StartSynkButton+0x50>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4293      	cmp	r3, r2
 800177c:	bfa8      	it	ge
 800177e:	4613      	movge	r3, r2
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <StartSynkButton+0x50>)
 8001782:	6093      	str	r3, [r2, #8]
		  // Set variation
		  pd.variation = abs(pd.leftPanelValue - pd.rightPanelValue);
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <StartSynkButton+0x50>)
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <StartSynkButton+0x50>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	bfb8      	it	lt
 8001792:	425b      	neglt	r3, r3
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <StartSynkButton+0x50>)
 8001796:	60d3      	str	r3, [r2, #12]
		  // Release semaphore
		  //endWritePD();
	  }
	  EndReadButton();
 8001798:	f7ff ff60 	bl	800165c <EndReadButton>
	  // Delay time (msec)
	  osDelay(100);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f005 fca4 	bl	80070ea <osDelay>
	  StartReadButton();
 80017a2:	e7dd      	b.n	8001760 <StartSynkButton+0x8>
 80017a4:	200002ec 	.word	0x200002ec
 80017a8:	200022e4 	.word	0x200022e4

080017ac <StartReadRightPanel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadRightPanel */
void StartReadRightPanel(void const * argument)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadRightPanel */
  /* Infinite loop */
  for(;;)
  {
	ReadRPStart();
 80017b4:	f7ff fdc0 	bl	8001338 <ReadRPStart>
	 // Get right panel value
	HAL_ADC_Start(&hadc1);
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <StartReadRightPanel+0x44>)
 80017ba:	f001 f861 	bl	8002880 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017be:	f04f 31ff 	mov.w	r1, #4294967295
 80017c2:	480b      	ldr	r0, [pc, #44]	; (80017f0 <StartReadRightPanel+0x44>)
 80017c4:	f001 f916 	bl	80029f4 <HAL_ADC_PollForConversion>
	pd.rightPanelValue = HAL_ADC_GetValue(&hadc1)*100/2400;
 80017c8:	4809      	ldr	r0, [pc, #36]	; (80017f0 <StartReadRightPanel+0x44>)
 80017ca:	f001 f9e3 	bl	8002b94 <HAL_ADC_GetValue>
 80017ce:	4602      	mov	r2, r0
 80017d0:	2364      	movs	r3, #100	; 0x64
 80017d2:	fb03 f302 	mul.w	r3, r3, r2
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <StartReadRightPanel+0x48>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	461a      	mov	r2, r3
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <StartReadRightPanel+0x4c>)
 80017e2:	601a      	str	r2, [r3, #0]

	ReadRPEnd();
 80017e4:	f7ff fdd4 	bl	8001390 <ReadRPEnd>

    osDelay(100);
 80017e8:	2064      	movs	r0, #100	; 0x64
 80017ea:	f005 fc7e 	bl	80070ea <osDelay>
	ReadRPStart();
 80017ee:	e7e1      	b.n	80017b4 <StartReadRightPanel+0x8>
 80017f0:	200021f8 	.word	0x200021f8
 80017f4:	1b4e81b5 	.word	0x1b4e81b5
 80017f8:	200022e4 	.word	0x200022e4

080017fc <StartLedTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask1 */
void StartLedTask1(void const * argument)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask1 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL1Start();
 8001804:	f7ff fdf6 	bl	80013f4 <WriteL1Start>
	  int lpv = pd.leftPanelValue;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <StartLedTask1+0x50>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <StartLedTask1+0x50>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <StartLedTask1+0x50>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <StartLedTask1+0x50>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)<var)//(rpv>th && lpv>th))
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	bfb8      	it	lt
 800182a:	425b      	neglt	r3, r3
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	429a      	cmp	r2, r3
 8001830:	dd05      	ble.n	800183e <StartLedTask1+0x42>
	  {
		  //HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <StartLedTask1+0x54>)
 800183a:	f002 f9df 	bl	8003bfc <HAL_GPIO_WritePin>
	  }
	  WriteL1End();
 800183e:	f7ff fe5d 	bl	80014fc <WriteL1End>
	  osDelay(100);
 8001842:	2064      	movs	r0, #100	; 0x64
 8001844:	f005 fc51 	bl	80070ea <osDelay>
  {
 8001848:	e7dc      	b.n	8001804 <StartLedTask1+0x8>
 800184a:	bf00      	nop
 800184c:	200022e4 	.word	0x200022e4
 8001850:	48000400 	.word	0x48000400

08001854 <StartLedTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask2 */
void StartLedTask2(void const * argument)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask2 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL2Start();
 800185c:	f7ff fdf6 	bl	800144c <WriteL2Start>
	  int lpv = pd.leftPanelValue;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <StartLedTask2+0x64>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <StartLedTask2+0x64>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <StartLedTask2+0x64>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <StartLedTask2+0x64>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)>var && (rpv>=lpv))
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	bfb8      	it	lt
 8001882:	425b      	neglt	r3, r3
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	429a      	cmp	r2, r3
 8001888:	da0f      	bge.n	80018aa <StartLedTask2+0x56>
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	429a      	cmp	r2, r3
 8001890:	db0b      	blt.n	80018aa <StartLedTask2+0x56>
	  {
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <StartLedTask2+0x68>)
 800189a:	f002 f9af 	bl	8003bfc <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <StartLedTask2+0x6c>)
 80018a6:	f002 f9a9 	bl	8003bfc <HAL_GPIO_WritePin>
	  }
	  WriteL2End();
 80018aa:	f7ff fe53 	bl	8001554 <WriteL2End>
	  osDelay(100);
 80018ae:	2064      	movs	r0, #100	; 0x64
 80018b0:	f005 fc1b 	bl	80070ea <osDelay>
  {
 80018b4:	e7d2      	b.n	800185c <StartLedTask2+0x8>
 80018b6:	bf00      	nop
 80018b8:	200022e4 	.word	0x200022e4
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000800 	.word	0x48000800

080018c4 <StartLedTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask3 */
void StartLedTask3(void const * argument)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask3 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL3Start();
 80018cc:	f7ff fdea 	bl	80014a4 <WriteL3Start>
	  int lpv = pd.leftPanelValue;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <StartLedTask3+0x64>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <StartLedTask3+0x64>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <StartLedTask3+0x64>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <StartLedTask3+0x64>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)>var && rpv<lpv)
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bfb8      	it	lt
 80018f2:	425b      	neglt	r3, r3
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	da0f      	bge.n	800191a <StartLedTask3+0x56>
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	429a      	cmp	r2, r3
 8001900:	da0b      	bge.n	800191a <StartLedTask3+0x56>
	  {
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <StartLedTask3+0x68>)
 800190a:	f002 f977 	bl	8003bfc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001914:	4806      	ldr	r0, [pc, #24]	; (8001930 <StartLedTask3+0x6c>)
 8001916:	f002 f971 	bl	8003bfc <HAL_GPIO_WritePin>
	  }
	  WriteL3End();
 800191a:	f7ff fe47 	bl	80015ac <WriteL3End>
	  osDelay(100);
 800191e:	2064      	movs	r0, #100	; 0x64
 8001920:	f005 fbe3 	bl	80070ea <osDelay>
  {
 8001924:	e7d2      	b.n	80018cc <StartLedTask3+0x8>
 8001926:	bf00      	nop
 8001928:	200022e4 	.word	0x200022e4
 800192c:	48000400 	.word	0x48000400
 8001930:	48000800 	.word	0x48000800

08001934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001946:	f000 fc31 	bl	80021ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012c00 	.word	0x40012c00

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_MspInit+0x4c>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <HAL_MspInit+0x4c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6613      	str	r3, [r2, #96]	; 0x60
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_MspInit+0x4c>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_MspInit+0x4c>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_MspInit+0x4c>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6593      	str	r3, [r2, #88]	; 0x58
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_MspInit+0x4c>)
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	210f      	movs	r1, #15
 80019a2:	f06f 0001 	mvn.w	r0, #1
 80019a6:	f001 fe4b 	bl	8003640 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000

080019b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08e      	sub	sp, #56	; 0x38
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a4b      	ldr	r2, [pc, #300]	; (8001b04 <HAL_ADC_MspInit+0x14c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d15e      	bne.n	8001a98 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_ADC_MspInit+0x150>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	4a49      	ldr	r2, [pc, #292]	; (8001b08 <HAL_ADC_MspInit+0x150>)
 80019e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80019e4:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <HAL_ADC_MspInit+0x150>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d10b      	bne.n	8001a04 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80019ec:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a46      	ldr	r2, [pc, #280]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 80019f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a00:	623b      	str	r3, [r7, #32]
 8001a02:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	4a40      	ldr	r2, [pc, #256]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a10:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	4a3a      	ldr	r2, [pc, #232]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a3a:	f043 0302 	orr.w	r3, r3, #2
 8001a3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1|ARD_A3_Pin|ARD_A2_Pin 
 8001a4c:	233f      	movs	r3, #63	; 0x3f
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a50:	230b      	movs	r3, #11
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	482c      	ldr	r0, [pc, #176]	; (8001b10 <HAL_ADC_MspInit+0x158>)
 8001a60:	f001 ff24 	bl	80038ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001a64:	2310      	movs	r3, #16
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a68:	230b      	movs	r3, #11
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f001 ff17 	bl	80038ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a82:	230b      	movs	r3, #11
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4820      	ldr	r0, [pc, #128]	; (8001b14 <HAL_ADC_MspInit+0x15c>)
 8001a92:	f001 ff0b 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a96:	e031      	b.n	8001afc <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_ADC_MspInit+0x160>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12c      	bne.n	8001afc <HAL_ADC_MspInit+0x144>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001aa2:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_ADC_MspInit+0x150>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_ADC_MspInit+0x150>)
 8001aaa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_ADC_MspInit+0x150>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10b      	bne.n	8001acc <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001ab4:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001aba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ac0:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_ADC_MspInit+0x154>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ae8:	230b      	movs	r3, #11
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	4806      	ldr	r0, [pc, #24]	; (8001b10 <HAL_ADC_MspInit+0x158>)
 8001af8:	f001 fed8 	bl	80038ac <HAL_GPIO_Init>
}
 8001afc:	bf00      	nop
 8001afe:	3738      	adds	r7, #56	; 0x38
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	50040000 	.word	0x50040000
 8001b08:	200002e4 	.word	0x200002e4
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000800 	.word	0x48000800
 8001b14:	48000400 	.word	0x48000400
 8001b18:	50040100 	.word	0x50040100

08001b1c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d128      	bne.n	8001b8e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b40:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6613      	str	r3, [r2, #96]	; 0x60
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b58:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b6c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b7e:	2306      	movs	r3, #6
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001b8a:	f001 fe8f 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	; 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200002e8 	.word	0x200002e8
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	48001000 	.word	0x48001000

08001ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_I2C_MspInit+0x7c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d128      	bne.n	8001c18 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_I2C_MspInit+0x80>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_I2C_MspInit+0x80>)
 8001bcc:	f043 0302 	orr.w	r3, r3, #2
 8001bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_I2C_MspInit+0x80>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001bde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be4:	2312      	movs	r3, #18
 8001be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	480b      	ldr	r0, [pc, #44]	; (8001c28 <HAL_I2C_MspInit+0x84>)
 8001bfc:	f001 fe56 	bl	80038ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_I2C_MspInit+0x80>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_I2C_MspInit+0x80>)
 8001c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_I2C_MspInit+0x80>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40005800 	.word	0x40005800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	48000400 	.word	0x48000400

08001c2c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <HAL_QSPI_MspInit+0x7c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d128      	bne.n	8001ca0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_QSPI_MspInit+0x80>)
 8001c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c52:	4a16      	ldr	r2, [pc, #88]	; (8001cac <HAL_QSPI_MspInit+0x80>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6513      	str	r3, [r2, #80]	; 0x50
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_QSPI_MspInit+0x80>)
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_QSPI_MspInit+0x80>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_QSPI_MspInit+0x80>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_QSPI_MspInit+0x80>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001c7e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001c82:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c90:	230a      	movs	r3, #10
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_QSPI_MspInit+0x84>)
 8001c9c:	f001 fe06 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	a0001000 	.word	0xa0001000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48001000 	.word	0x48001000

08001cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_SPI_MspInit+0x7c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d128      	bne.n	8001d28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001d06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_SPI_MspInit+0x84>)
 8001d24:	f001 fdc2 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40003c00 	.word	0x40003c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	48000800 	.word	0x48000800

08001d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <HAL_UART_MspInit+0xd8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d128      	bne.n	8001db0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d62:	4a2d      	ldr	r2, [pc, #180]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6613      	str	r3, [r2, #96]	; 0x60
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d8e:	23c0      	movs	r3, #192	; 0xc0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	4619      	mov	r1, r3
 8001da8:	481c      	ldr	r0, [pc, #112]	; (8001e1c <HAL_UART_MspInit+0xe0>)
 8001daa:	f001 fd7f 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dae:	e02d      	b.n	8001e0c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_UART_MspInit+0xe4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d128      	bne.n	8001e0c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc6:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <HAL_UART_MspInit+0xdc>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4807      	ldr	r0, [pc, #28]	; (8001e24 <HAL_UART_MspInit+0xe8>)
 8001e08:	f001 fd50 	bl	80038ac <HAL_GPIO_Init>
}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	40004800 	.word	0x40004800
 8001e24:	48000c00 	.word	0x48000c00

08001e28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e48:	d154      	bne.n	8001ef4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e7a:	f001 fd17 	bl	80038ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e90:	230a      	movs	r3, #10
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9e:	f001 fd05 	bl	80038ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a15      	ldr	r2, [pc, #84]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d114      	bne.n	8001ef0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001ede:	f002 f9ab 	bl	8004238 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	4a05      	ldr	r2, [pc, #20]	; (8001efc <HAL_PCD_MspInit+0xd4>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eec:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001eee:	e001      	b.n	8001ef4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001ef0:	f002 f9a2 	bl	8004238 <HAL_PWREx_EnableVddUSB>
}
 8001ef4:	bf00      	nop
 8001ef6:	3728      	adds	r7, #40	; 0x28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001f10:	2200      	movs	r2, #0
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	2019      	movs	r0, #25
 8001f16:	f001 fb93 	bl	8003640 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001f1a:	2019      	movs	r0, #25
 8001f1c:	f001 fbac 	bl	8003678 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_InitTick+0x9c>)
 8001f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_InitTick+0x9c>)
 8001f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_InitTick+0x9c>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f38:	f107 0210 	add.w	r2, r7, #16
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 ffda 	bl	8004efc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f48:	f002 ffc2 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 8001f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <HAL_InitTick+0xa0>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0c9b      	lsrs	r3, r3, #18
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <HAL_InitTick+0xa8>)
 8001f60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f7c:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f7e:	f003 fd99 	bl	8005ab4 <HAL_TIM_Base_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d104      	bne.n	8001f92 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f88:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f8a:	f003 fdc9 	bl	8005b20 <HAL_TIM_Base_Start_IT>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	e000      	b.n	8001f94 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	431bde83 	.word	0x431bde83
 8001fa4:	20002354 	.word	0x20002354
 8001fa8:	40012c00 	.word	0x40012c00

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001fe4:	2020      	movs	r0, #32
 8001fe6:	f001 fe21 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fea:	2040      	movs	r0, #64	; 0x40
 8001fec:	f001 fe1e 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ff0:	2080      	movs	r0, #128	; 0x80
 8001ff2:	f001 fe1b 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ff6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ffa:	f001 fe17 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800200a:	f003 fdb3 	bl	8005b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20002354 	.word	0x20002354

08002018 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <EXTI15_10_IRQHandler+0x44>)
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <EXTI15_10_IRQHandler+0x16>
	  blue_button_pressed = 1; // toggle blue button pressed
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <EXTI15_10_IRQHandler+0x48>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800202e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002032:	f001 fdfb 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002036:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800203a:	f001 fdf7 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800203e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002042:	f001 fdf3 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002046:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800204a:	f001 fdef 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800204e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002052:	f001 fdeb 	bl	8003c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40010400 	.word	0x40010400
 8002060:	200002ec 	.word	0x200002ec

08002064 <_sbrk>:
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <_sbrk+0x50>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x16>
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <_sbrk+0x50>)
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <_sbrk+0x54>)
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <_sbrk+0x50>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <_sbrk+0x50>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	466a      	mov	r2, sp
 800208a:	4293      	cmp	r3, r2
 800208c:	d907      	bls.n	800209e <_sbrk+0x3a>
 800208e:	f007 fc05 	bl	800989c <__errno>
 8002092:	4602      	mov	r2, r0
 8002094:	230c      	movs	r3, #12
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	e006      	b.n	80020ac <_sbrk+0x48>
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <_sbrk+0x50>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a03      	ldr	r2, [pc, #12]	; (80020b4 <_sbrk+0x50>)
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200002f0 	.word	0x200002f0
 80020b8:	200023a0 	.word	0x200023a0

080020bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <SystemInit+0x64>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	4a16      	ldr	r2, [pc, #88]	; (8002120 <SystemInit+0x64>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <SystemInit+0x68>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a13      	ldr	r2, [pc, #76]	; (8002124 <SystemInit+0x68>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <SystemInit+0x68>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <SystemInit+0x68>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <SystemInit+0x68>)
 80020e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <SystemInit+0x68>)
 80020f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <SystemInit+0x68>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <SystemInit+0x68>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <SystemInit+0x68>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SystemInit+0x64>)
 800210e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002112:	609a      	str	r2, [r3, #8]
#endif
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00
 8002124:	40021000 	.word	0x40021000

08002128 <Reset_Handler>:
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopForever+0x2>
 800212c:	2100      	movs	r1, #0
 800212e:	e003      	b.n	8002138 <LoopCopyDataInit>

08002130 <CopyDataInit>:
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <LoopForever+0x6>)
 8002132:	585b      	ldr	r3, [r3, r1]
 8002134:	5043      	str	r3, [r0, r1]
 8002136:	3104      	adds	r1, #4

08002138 <LoopCopyDataInit>:
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <LoopForever+0xa>)
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <LoopForever+0xe>)
 800213c:	1842      	adds	r2, r0, r1
 800213e:	429a      	cmp	r2, r3
 8002140:	d3f6      	bcc.n	8002130 <CopyDataInit>
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <LoopForever+0x12>)
 8002144:	e002      	b.n	800214c <LoopFillZerobss>

08002146 <FillZerobss>:
 8002146:	2300      	movs	r3, #0
 8002148:	f842 3b04 	str.w	r3, [r2], #4

0800214c <LoopFillZerobss>:
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <LoopForever+0x16>)
 800214e:	429a      	cmp	r2, r3
 8002150:	d3f9      	bcc.n	8002146 <FillZerobss>
 8002152:	f7ff ffb3 	bl	80020bc <SystemInit>
 8002156:	f007 fba7 	bl	80098a8 <__libc_init_array>
 800215a:	f7fe fa75 	bl	8000648 <main>

0800215e <LoopForever>:
 800215e:	e7fe      	b.n	800215e <LoopForever>
 8002160:	20018000 	.word	0x20018000
 8002164:	0800a328 	.word	0x0800a328
 8002168:	20000000 	.word	0x20000000
 800216c:	20000074 	.word	0x20000074
 8002170:	20000074 	.word	0x20000074
 8002174:	2000239c 	.word	0x2000239c

08002178 <ADC1_2_IRQHandler>:
 8002178:	e7fe      	b.n	8002178 <ADC1_2_IRQHandler>

0800217a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002184:	2003      	movs	r0, #3
 8002186:	f001 fa50 	bl	800362a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800218a:	2000      	movs	r0, #0
 800218c:	f7ff feb8 	bl	8001f00 <HAL_InitTick>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	e001      	b.n	80021a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800219c:	f7ff fbe4 	bl	8001968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021a0:	79fb      	ldrb	r3, [r7, #7]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_IncTick+0x1c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_IncTick+0x20>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a03      	ldr	r2, [pc, #12]	; (80021c8 <HAL_IncTick+0x1c>)
 80021bc:	6013      	str	r3, [r2, #0]
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	20002394 	.word	0x20002394
 80021cc:	20000008 	.word	0x20000008

080021d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return uwTick;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <HAL_GetTick+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20002394 	.word	0x20002394

080021e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff ffee 	bl	80021d0 <HAL_GetTick>
 80021f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d004      	beq.n	800220c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_Delay+0x40>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220c:	bf00      	nop
 800220e:	f7ff ffdf 	bl	80021d0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	429a      	cmp	r2, r3
 800221c:	d8f7      	bhi.n	800220e <HAL_Delay+0x26>
  {
  }
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000008 	.word	0x20000008

0800222c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	609a      	str	r2, [r3, #8]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002294:	b490      	push	{r4, r7}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3360      	adds	r3, #96	; 0x60
 80022a6:	461a      	mov	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022b0:	6822      	ldr	r2, [r4, #0]
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <LL_ADC_SetOffset+0x40>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022c6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc90      	pop	{r4, r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	03fff000 	.word	0x03fff000

080022d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022d8:	b490      	push	{r4, r7}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3360      	adds	r3, #96	; 0x60
 80022e6:	461a      	mov	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc90      	pop	{r4, r7}
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002300:	b490      	push	{r4, r7}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3360      	adds	r3, #96	; 0x60
 8002310:	461a      	mov	r2, r3
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bc90      	pop	{r4, r7}
 800232e:	4770      	bx	lr

08002330 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002356:	b490      	push	{r4, r7}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3330      	adds	r3, #48	; 0x30
 8002366:	461a      	mov	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	4413      	add	r3, r2
 8002374:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002376:	6822      	ldr	r2, [r4, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	211f      	movs	r1, #31
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	f003 011f 	and.w	r1, r3, #31
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc90      	pop	{r4, r7}
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023a8:	b490      	push	{r4, r7}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3314      	adds	r3, #20
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	0e5b      	lsrs	r3, r3, #25
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	4413      	add	r3, r2
 80023c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	0d1b      	lsrs	r3, r3, #20
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2107      	movs	r1, #7
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	401a      	ands	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	0d1b      	lsrs	r3, r3, #20
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	4313      	orrs	r3, r2
 80023ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc90      	pop	{r4, r7}
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0318 	and.w	r3, r3, #24
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <LL_ADC_SetChannelSingleDiff+0x44>)
 800241c:	40d9      	lsrs	r1, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	400b      	ands	r3, r1
 8002422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	0007ffff 	.word	0x0007ffff

08002440 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 031f 	and.w	r3, r3, #31
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002488:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6093      	str	r3, [r2, #8]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b0:	d101      	bne.n	80024b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002500:	d101      	bne.n	8002506 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002524:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002528:	f043 0201 	orr.w	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <LL_ADC_IsEnabled+0x18>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_ADC_IsEnabled+0x1a>
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002576:	f043 0204 	orr.w	r2, r3, #4
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d101      	bne.n	80025a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d101      	bne.n	80025c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e134      	b.n	800285c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff f9d9 	bl	80019b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff3f 	bl	800249c <LL_ADC_IsDeepPowerDownEnabled>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff25 	bl	8002478 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff5a 	bl	80024ec <LL_ADC_IsInternalRegulatorEnabled>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d113      	bne.n	8002666 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff3e 	bl	80024c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002648:	4b86      	ldr	r3, [pc, #536]	; (8002864 <HAL_ADC_Init+0x28c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	4a86      	ldr	r2, [pc, #536]	; (8002868 <HAL_ADC_Init+0x290>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002658:	e002      	b.n	8002660 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3b01      	subs	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f9      	bne.n	800265a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff ff3e 	bl	80024ec <LL_ADC_IsInternalRegulatorEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	f043 0210 	orr.w	r2, r3, #16
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ff77 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 800269c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 80cf 	bne.w	800284a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 80cb 	bne.w	800284a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff ff37 	bl	800253c <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d115      	bne.n	8002700 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d4:	4865      	ldr	r0, [pc, #404]	; (800286c <HAL_ADC_Init+0x294>)
 80026d6:	f7ff ff31 	bl	800253c <LL_ADC_IsEnabled>
 80026da:	4604      	mov	r4, r0
 80026dc:	4864      	ldr	r0, [pc, #400]	; (8002870 <HAL_ADC_Init+0x298>)
 80026de:	f7ff ff2d 	bl	800253c <LL_ADC_IsEnabled>
 80026e2:	4603      	mov	r3, r0
 80026e4:	431c      	orrs	r4, r3
 80026e6:	4863      	ldr	r0, [pc, #396]	; (8002874 <HAL_ADC_Init+0x29c>)
 80026e8:	f7ff ff28 	bl	800253c <LL_ADC_IsEnabled>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4323      	orrs	r3, r4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4619      	mov	r1, r3
 80026fa:	485f      	ldr	r0, [pc, #380]	; (8002878 <HAL_ADC_Init+0x2a0>)
 80026fc:	f7ff fd96 	bl	800222c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e5b      	ldrb	r3, [r3, #25]
 8002704:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800270a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002710:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002716:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d106      	bne.n	800273c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	3b01      	subs	r3, #1
 8002734:	045b      	lsls	r3, r3, #17
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	d009      	beq.n	8002758 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_ADC_Init+0x2a4>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	69b9      	ldr	r1, [r7, #24]
 8002768:	430b      	orrs	r3, r1
 800276a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff0a 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 8002776:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff17 	bl	80025b0 <LL_ADC_INJ_IsConversionOngoing>
 8002782:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d13d      	bne.n	8002806 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d13a      	bne.n	8002806 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002794:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800279c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ac:	f023 0302 	bic.w	r3, r3, #2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	69b9      	ldr	r1, [r7, #24]
 80027b6:	430b      	orrs	r3, r1
 80027b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d118      	bne.n	80027f6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027da:	4311      	orrs	r1, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027e0:	4311      	orrs	r1, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027e6:	430a      	orrs	r2, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	611a      	str	r2, [r3, #16]
 80027f4:	e007      	b.n	8002806 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10c      	bne.n	8002828 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	f023 010f 	bic.w	r1, r3, #15
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	1e5a      	subs	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
 8002826:	e007      	b.n	8002838 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 020f 	bic.w	r2, r2, #15
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f023 0303 	bic.w	r3, r3, #3
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
 8002848:	e007      	b.n	800285a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f043 0210 	orr.w	r2, r3, #16
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800285a:	7ffb      	ldrb	r3, [r7, #31]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3724      	adds	r7, #36	; 0x24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	20000000 	.word	0x20000000
 8002868:	053e2d63 	.word	0x053e2d63
 800286c:	50040000 	.word	0x50040000
 8002870:	50040100 	.word	0x50040100
 8002874:	50040200 	.word	0x50040200
 8002878:	50040300 	.word	0x50040300
 800287c:	fff0c007 	.word	0xfff0c007

08002880 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002888:	4857      	ldr	r0, [pc, #348]	; (80029e8 <HAL_ADC_Start+0x168>)
 800288a:	f7ff fdd9 	bl	8002440 <LL_ADC_GetMultimode>
 800288e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fe78 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	f040 809c 	bne.w	80029da <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_Start+0x30>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e097      	b.n	80029e0 <HAL_ADC_Start+0x160>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fcdd 	bl	8003278 <ADC_Enable>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 8083 	bne.w	80029d0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_ADC_Start+0x16c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d002      	beq.n	80028ee <HAL_ADC_Start+0x6e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	e000      	b.n	80028f0 <HAL_ADC_Start+0x70>
 80028ee:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <HAL_ADC_Start+0x170>)
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d002      	beq.n	80028fe <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d106      	bne.n	8002926 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291c:	f023 0206 	bic.w	r2, r3, #6
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	659a      	str	r2, [r3, #88]	; 0x58
 8002924:	e002      	b.n	800292c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	221c      	movs	r2, #28
 8002932:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <HAL_ADC_Start+0x16c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d002      	beq.n	800294c <HAL_ADC_Start+0xcc>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	e000      	b.n	800294e <HAL_ADC_Start+0xce>
 800294c:	4b28      	ldr	r3, [pc, #160]	; (80029f0 <HAL_ADC_Start+0x170>)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	4293      	cmp	r3, r2
 8002954:	d008      	beq.n	8002968 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d002      	beq.n	8002968 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b09      	cmp	r3, #9
 8002966:	d114      	bne.n	8002992 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800297e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fde9 	bl	8002562 <LL_ADC_REG_StartConversion>
 8002990:	e025      	b.n	80029de <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <HAL_ADC_Start+0x16c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_Start+0x12e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	e000      	b.n	80029b0 <HAL_ADC_Start+0x130>
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_ADC_Start+0x170>)
 80029b0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00f      	beq.n	80029de <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
 80029ce:	e006      	b.n	80029de <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029d8:	e001      	b.n	80029de <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029da:	2302      	movs	r3, #2
 80029dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	50040300 	.word	0x50040300
 80029ec:	50040100 	.word	0x50040100
 80029f0:	50040000 	.word	0x50040000

080029f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029fe:	4862      	ldr	r0, [pc, #392]	; (8002b88 <HAL_ADC_PollForConversion+0x194>)
 8002a00:	f7ff fd1e 	bl	8002440 <LL_ADC_GetMultimode>
 8002a04:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d102      	bne.n	8002a14 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e02a      	b.n	8002a6a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d002      	beq.n	8002a26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	d111      	bne.n	8002a4a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	f043 0220 	orr.w	r2, r3, #32
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e09d      	b.n	8002b80 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a44:	2304      	movs	r3, #4
 8002a46:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a48:	e00f      	b.n	8002a6a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a4a:	484f      	ldr	r0, [pc, #316]	; (8002b88 <HAL_ADC_PollForConversion+0x194>)
 8002a4c:	f7ff fd06 	bl	800245c <LL_ADC_GetMultiDMATransfer>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e08c      	b.n	8002b80 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a66:	2304      	movs	r3, #4
 8002a68:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a6a:	f7ff fbb1 	bl	80021d0 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a70:	e01a      	b.n	8002aa8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a78:	d016      	beq.n	8002aa8 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a7a:	f7ff fba9 	bl	80021d0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <HAL_ADC_PollForConversion+0x9c>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f043 0204 	orr.w	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e06b      	b.n	8002b80 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0dd      	beq.n	8002a72 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc32 	bl	8002330 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01c      	beq.n	8002b0c <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7e5b      	ldrb	r3, [r3, #25]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d118      	bne.n	8002b0c <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d111      	bne.n	8002b0c <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0201 	orr.w	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_ADC_PollForConversion+0x198>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d002      	beq.n	8002b1c <HAL_ADC_PollForConversion+0x128>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e000      	b.n	8002b1e <HAL_ADC_PollForConversion+0x12a>
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <HAL_ADC_PollForConversion+0x19c>)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d008      	beq.n	8002b38 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d002      	beq.n	8002b38 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d104      	bne.n	8002b42 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e00c      	b.n	8002b5c <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_ADC_PollForConversion+0x198>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_PollForConversion+0x15e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e000      	b.n	8002b54 <HAL_ADC_PollForConversion+0x160>
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_ADC_PollForConversion+0x19c>)
 8002b54:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d104      	bne.n	8002b6c <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2208      	movs	r2, #8
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e008      	b.n	8002b7e <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	50040300 	.word	0x50040300
 8002b8c:	50040100 	.word	0x50040100
 8002b90:	50040000 	.word	0x50040000

08002b94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0a6      	sub	sp, #152	; 0x98
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x22>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e348      	b.n	8003264 <HAL_ADC_ConfigChannel+0x6b4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fcd3 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 8329 	bne.w	800323e <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d824      	bhi.n	8002c3e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	3b02      	subs	r3, #2
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d81b      	bhi.n	8002c36 <HAL_ADC_ConfigChannel+0x86>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <HAL_ADC_ConfigChannel+0x54>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c15 	.word	0x08002c15
 8002c08:	08002c1d 	.word	0x08002c1d
 8002c0c:	08002c25 	.word	0x08002c25
 8002c10:	08002c2d 	.word	0x08002c2d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	220c      	movs	r2, #12
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	e011      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2212      	movs	r2, #18
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	e00d      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2218      	movs	r2, #24
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	e009      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	e004      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2206      	movs	r2, #6
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	e000      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c3e:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f7ff fb82 	bl	8002356 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fc97 	bl	800258a <LL_ADC_REG_IsConversionOngoing>
 8002c5c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fca3 	bl	80025b0 <LL_ADC_INJ_IsConversionOngoing>
 8002c6a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 8148 	bne.w	8002f08 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 8143 	bne.w	8002f08 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7ff fb8a 	bl	80023a8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	08db      	lsrs	r3, r3, #3
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00a      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6919      	ldr	r1, [r3, #16]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc6:	f7ff fae5 	bl	8002294 <LL_ADC_SetOffset>
 8002cca:	e11d      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fb00 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x148>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff faf5 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	f003 021f 	and.w	r2, r3, #31
 8002cf6:	e012      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x16e>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff faea 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x186>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	e00a      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x19c>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d106      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fad1 	bl	8002300 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fab7 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x1da>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff faac 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002d80:	4603      	mov	r3, r0
 8002d82:	0e9b      	lsrs	r3, r3, #26
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	e010      	b.n	8002dac <HAL_ADC_ConfigChannel+0x1fc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff faa1 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x214>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	e00a      	b.n	8002dda <HAL_ADC_ConfigChannel+0x22a>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d106      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	2101      	movs	r1, #1
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fa8a 	bl	8002300 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fa70 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x268>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2102      	movs	r1, #2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fa65 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	e010      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x28a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fa5a 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d105      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x2a2>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	0e9b      	lsrs	r3, r3, #26
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	e00a      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x2b8>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d106      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2102      	movs	r1, #2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fa43 	bl	8002300 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2103      	movs	r1, #3
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fa29 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x2f6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2103      	movs	r1, #3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fa1e 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	0e9b      	lsrs	r3, r3, #26
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	e010      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x318>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2103      	movs	r1, #3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fa13 	bl	80022d8 <LL_ADC_GetOffsetChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x330>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	e00a      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x346>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d106      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2103      	movs	r1, #3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff f9fc 	bl	8002300 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fb15 	bl	800253c <LL_ADC_IsEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 810c 	bne.w	8003132 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	461a      	mov	r2, r3
 8002f28:	f7ff fa66 	bl	80023f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4aad      	ldr	r2, [pc, #692]	; (80031e8 <HAL_ADC_ConfigChannel+0x638>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	f040 80fd 	bne.w	8003132 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x3b0>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2b09      	cmp	r3, #9
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	e012      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x3d6>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f68:	fa93 f3a3 	rbit	r3, r3
 8002f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d064      	beq.n	8003054 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x3f6>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa4:	e00e      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x414>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x434>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	e010      	b.n	8003006 <HAL_ADC_ConfigChannel+0x456>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x47c>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	3301      	adds	r3, #1
 800301e:	f003 021f 	and.w	r2, r3, #31
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	051b      	lsls	r3, r3, #20
 800302a:	e011      	b.n	8003050 <HAL_ADC_ConfigChannel+0x4a0>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003050:	430b      	orrs	r3, r1
 8003052:	e069      	b.n	8003128 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x4c0>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0e9b      	lsrs	r3, r3, #26
 8003066:	3301      	adds	r3, #1
 8003068:	069b      	lsls	r3, r3, #26
 800306a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800306e:	e00e      	b.n	800308e <HAL_ADC_ConfigChannel+0x4de>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	61fb      	str	r3, [r7, #28]
  return result;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	3301      	adds	r3, #1
 8003088:	069b      	lsls	r3, r3, #26
 800308a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x4fe>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	3301      	adds	r3, #1
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2101      	movs	r1, #1
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	e010      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x520>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	617b      	str	r3, [r7, #20]
  return result;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fab3 f383 	clz	r3, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	2101      	movs	r1, #1
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	ea42 0103 	orr.w	r1, r2, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x54c>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0e9b      	lsrs	r3, r3, #26
 80030e6:	3301      	adds	r3, #1
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	3b1e      	subs	r3, #30
 80030f4:	051b      	lsls	r3, r3, #20
 80030f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030fa:	e014      	b.n	8003126 <HAL_ADC_ConfigChannel+0x576>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	60fb      	str	r3, [r7, #12]
  return result;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	3b1e      	subs	r3, #30
 8003120:	051b      	lsls	r3, r3, #20
 8003122:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003126:	430b      	orrs	r3, r1
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	6892      	ldr	r2, [r2, #8]
 800312c:	4619      	mov	r1, r3
 800312e:	f7ff f93b 	bl	80023a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_ADC_ConfigChannel+0x63c>)
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 808c 	beq.w	8003258 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003140:	482b      	ldr	r0, [pc, #172]	; (80031f0 <HAL_ADC_ConfigChannel+0x640>)
 8003142:	f7ff f899 	bl	8002278 <LL_ADC_GetCommonPathInternalCh>
 8003146:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <HAL_ADC_ConfigChannel+0x644>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d12b      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5fc>
 8003154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d125      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <HAL_ADC_ConfigChannel+0x648>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x5c4>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a23      	ldr	r2, [pc, #140]	; (80031fc <HAL_ADC_ConfigChannel+0x64c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d16e      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800317c:	4619      	mov	r1, r3
 800317e:	481c      	ldr	r0, [pc, #112]	; (80031f0 <HAL_ADC_ConfigChannel+0x640>)
 8003180:	f7ff f867 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_ADC_ConfigChannel+0x650>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <HAL_ADC_ConfigChannel+0x654>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	099a      	lsrs	r2, r3, #6
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800319c:	e002      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f9      	bne.n	800319e <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031aa:	e052      	b.n	8003252 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <HAL_ADC_ConfigChannel+0x658>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d12a      	bne.n	800320c <HAL_ADC_ConfigChannel+0x65c>
 80031b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d124      	bne.n	800320c <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a0c      	ldr	r2, [pc, #48]	; (80031f8 <HAL_ADC_ConfigChannel+0x648>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x626>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_ADC_ConfigChannel+0x64c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d13f      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031de:	4619      	mov	r1, r3
 80031e0:	4803      	ldr	r0, [pc, #12]	; (80031f0 <HAL_ADC_ConfigChannel+0x640>)
 80031e2:	f7ff f836 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e6:	e036      	b.n	8003256 <HAL_ADC_ConfigChannel+0x6a6>
 80031e8:	407f0000 	.word	0x407f0000
 80031ec:	80080000 	.word	0x80080000
 80031f0:	50040300 	.word	0x50040300
 80031f4:	c7520000 	.word	0xc7520000
 80031f8:	50040000 	.word	0x50040000
 80031fc:	50040200 	.word	0x50040200
 8003200:	20000000 	.word	0x20000000
 8003204:	053e2d63 	.word	0x053e2d63
 8003208:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a16      	ldr	r2, [pc, #88]	; (800326c <HAL_ADC_ConfigChannel+0x6bc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d120      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11a      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <HAL_ADC_ConfigChannel+0x6c0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d115      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003234:	4619      	mov	r1, r3
 8003236:	480f      	ldr	r0, [pc, #60]	; (8003274 <HAL_ADC_ConfigChannel+0x6c4>)
 8003238:	f7ff f80b 	bl	8002252 <LL_ADC_SetCommonPathInternalCh>
 800323c:	e00c      	b.n	8003258 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003250:	e002      	b.n	8003258 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003256:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003260:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003264:	4618      	mov	r0, r3
 8003266:	3798      	adds	r7, #152	; 0x98
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	80000001 	.word	0x80000001
 8003270:	50040000 	.word	0x50040000
 8003274:	50040300 	.word	0x50040300

08003278 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff f959 	bl	800253c <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d146      	bne.n	800331e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <ADC_Enable+0xb0>)
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00d      	beq.n	80032ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e032      	b.n	8003320 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff f928 	bl	8002514 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032c4:	f7fe ff84 	bl	80021d0 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ca:	e021      	b.n	8003310 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f933 	bl	800253c <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f917 	bl	8002514 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032e6:	f7fe ff73 	bl	80021d0 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d90d      	bls.n	8003310 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	f043 0210 	orr.w	r2, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d1d6      	bne.n	80032cc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	8000003f 	.word	0x8000003f

0800332c <LL_ADC_IsEnabled>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <LL_ADC_IsEnabled+0x18>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <LL_ADC_IsEnabled+0x1a>
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_REG_IsConversionOngoing>:
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	2b04      	cmp	r3, #4
 8003364:	d101      	bne.n	800336a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b09f      	sub	sp, #124	; 0x7c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003392:	2302      	movs	r3, #2
 8003394:	e08f      	b.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a47      	ldr	r2, [pc, #284]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d102      	bne.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	e001      	b.n	80033b2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e072      	b.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ffbd 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 80033d8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ffb7 	bl	8003352 <LL_ADC_REG_IsConversionOngoing>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d154      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d151      	bne.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033f2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02c      	beq.n	8003456 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800340e:	035b      	lsls	r3, r3, #13
 8003410:	430b      	orrs	r3, r1
 8003412:	431a      	orrs	r2, r3
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003418:	4829      	ldr	r0, [pc, #164]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800341a:	f7ff ff87 	bl	800332c <LL_ADC_IsEnabled>
 800341e:	4604      	mov	r4, r0
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003422:	f7ff ff83 	bl	800332c <LL_ADC_IsEnabled>
 8003426:	4603      	mov	r3, r0
 8003428:	431c      	orrs	r4, r3
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800342c:	f7ff ff7e 	bl	800332c <LL_ADC_IsEnabled>
 8003430:	4603      	mov	r3, r0
 8003432:	4323      	orrs	r3, r4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d137      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003440:	f023 030f 	bic.w	r3, r3, #15
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	6811      	ldr	r1, [r2, #0]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	6892      	ldr	r2, [r2, #8]
 800344c:	430a      	orrs	r2, r1
 800344e:	431a      	orrs	r2, r3
 8003450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003452:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003454:	e028      	b.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003462:	4817      	ldr	r0, [pc, #92]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003464:	f7ff ff62 	bl	800332c <LL_ADC_IsEnabled>
 8003468:	4604      	mov	r4, r0
 800346a:	4816      	ldr	r0, [pc, #88]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800346c:	f7ff ff5e 	bl	800332c <LL_ADC_IsEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	431c      	orrs	r4, r3
 8003474:	4815      	ldr	r0, [pc, #84]	; (80034cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003476:	f7ff ff59 	bl	800332c <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	4323      	orrs	r3, r4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d112      	bne.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800348a:	f023 030f 	bic.w	r3, r3, #15
 800348e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003490:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003492:	e009      	b.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034a6:	e000      	b.n	80034aa <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	377c      	adds	r7, #124	; 0x7c
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd90      	pop	{r4, r7, pc}
 80034be:	bf00      	nop
 80034c0:	50040000 	.word	0x50040000
 80034c4:	50040100 	.word	0x50040100
 80034c8:	50040300 	.word	0x50040300
 80034cc:	50040200 	.word	0x50040200

080034d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003502:	4a04      	ldr	r2, [pc, #16]	; (8003514 <__NVIC_SetPriorityGrouping+0x44>)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	60d3      	str	r3, [r2, #12]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <__NVIC_GetPriorityGrouping+0x18>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 0307 	and.w	r3, r3, #7
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	2b00      	cmp	r3, #0
 8003544:	db0b      	blt.n	800355e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4907      	ldr	r1, [pc, #28]	; (800356c <__NVIC_EnableIRQ+0x38>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2001      	movs	r0, #1
 8003556:	fa00 f202 	lsl.w	r2, r0, r2
 800355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	2b00      	cmp	r3, #0
 8003582:	db0a      	blt.n	800359a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	490c      	ldr	r1, [pc, #48]	; (80035bc <__NVIC_SetPriority+0x4c>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	440b      	add	r3, r1
 8003594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003598:	e00a      	b.n	80035b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	4908      	ldr	r1, [pc, #32]	; (80035c0 <__NVIC_SetPriority+0x50>)
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	3b04      	subs	r3, #4
 80035a8:	0112      	lsls	r2, r2, #4
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	440b      	add	r3, r1
 80035ae:	761a      	strb	r2, [r3, #24]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000e100 	.word	0xe000e100
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b089      	sub	sp, #36	; 0x24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f1c3 0307 	rsb	r3, r3, #7
 80035de:	2b04      	cmp	r3, #4
 80035e0:	bf28      	it	cs
 80035e2:	2304      	movcs	r3, #4
 80035e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3304      	adds	r3, #4
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d902      	bls.n	80035f4 <NVIC_EncodePriority+0x30>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3b03      	subs	r3, #3
 80035f2:	e000      	b.n	80035f6 <NVIC_EncodePriority+0x32>
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	f04f 32ff 	mov.w	r2, #4294967295
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800360c:	f04f 31ff 	mov.w	r1, #4294967295
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	43d9      	mvns	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	4313      	orrs	r3, r2
         );
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	; 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ff4c 	bl	80034d0 <__NVIC_SetPriorityGrouping>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003652:	f7ff ff61 	bl	8003518 <__NVIC_GetPriorityGrouping>
 8003656:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	6978      	ldr	r0, [r7, #20]
 800365e:	f7ff ffb1 	bl	80035c4 <NVIC_EncodePriority>
 8003662:	4602      	mov	r2, r0
 8003664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff80 	bl	8003570 <__NVIC_SetPriority>
}
 8003670:	bf00      	nop
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff ff54 	bl	8003534 <__NVIC_EnableIRQ>
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0ac      	b.n	8003800 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f8b2 	bl	8003814 <DFSDM_GetChannelFromInstance>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b55      	ldr	r3, [pc, #340]	; (8003808 <HAL_DFSDM_ChannelInit+0x174>)
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e09f      	b.n	8003800 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7fe fa2b 	bl	8001b1c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a4f      	ldr	r2, [pc, #316]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036ce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80036d0:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_DFSDM_ChannelInit+0x178>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d125      	bne.n	8003724 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80036d8:	4b4d      	ldr	r3, [pc, #308]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4c      	ldr	r2, [pc, #304]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036e2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4948      	ldr	r1, [pc, #288]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a46      	ldr	r2, [pc, #280]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80036fc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	791b      	ldrb	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d108      	bne.n	8003718 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003706:	4b42      	ldr	r3, [pc, #264]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	493f      	ldr	r1, [pc, #252]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003718:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <HAL_DFSDM_ChannelInit+0x17c>)
 800371e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003722:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003732:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003742:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003748:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 020f 	bic.w	r2, r2, #15
 8003760:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003788:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6899      	ldr	r1, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 0207 	and.w	r2, r2, #7
 80037b4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f810 	bl	8003814 <DFSDM_GetChannelFromInstance>
 80037f4:	4601      	mov	r1, r0
 80037f6:	4a04      	ldr	r2, [pc, #16]	; (8003808 <HAL_DFSDM_ChannelInit+0x174>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200002f8 	.word	0x200002f8
 800380c:	200002f4 	.word	0x200002f4
 8003810:	40016000 	.word	0x40016000

08003814 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <DFSDM_GetChannelFromInstance+0x7c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d102      	bne.n	800382a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e02b      	b.n	8003882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <DFSDM_GetChannelFromInstance+0x80>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d102      	bne.n	8003838 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003832:	2301      	movs	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e024      	b.n	8003882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a17      	ldr	r2, [pc, #92]	; (8003898 <DFSDM_GetChannelFromInstance+0x84>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d102      	bne.n	8003846 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003840:	2302      	movs	r3, #2
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e01d      	b.n	8003882 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <DFSDM_GetChannelFromInstance+0x88>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d102      	bne.n	8003854 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800384e:	2304      	movs	r3, #4
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e016      	b.n	8003882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d102      	bne.n	8003862 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800385c:	2305      	movs	r3, #5
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e00f      	b.n	8003882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <DFSDM_GetChannelFromInstance+0x90>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d102      	bne.n	8003870 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800386a:	2306      	movs	r3, #6
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e008      	b.n	8003882 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <DFSDM_GetChannelFromInstance+0x94>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d102      	bne.n	800387e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003878:	2307      	movs	r3, #7
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e001      	b.n	8003882 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800387e:	2303      	movs	r3, #3
 8003880:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40016000 	.word	0x40016000
 8003894:	40016020 	.word	0x40016020
 8003898:	40016040 	.word	0x40016040
 800389c:	40016080 	.word	0x40016080
 80038a0:	400160a0 	.word	0x400160a0
 80038a4:	400160c0 	.word	0x400160c0
 80038a8:	400160e0 	.word	0x400160e0

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ba:	e17f      	b.n	8003bbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	4013      	ands	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8171 	beq.w	8003bb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d00b      	beq.n	80038f4 <HAL_GPIO_Init+0x48>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d007      	beq.n	80038f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e8:	2b11      	cmp	r3, #17
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b12      	cmp	r3, #18
 80038f2:	d130      	bne.n	8003956 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800392a:	2201      	movs	r2, #1
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0201 	and.w	r2, r3, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b03      	cmp	r3, #3
 8003960:	d118      	bne.n	8003994 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003968:	2201      	movs	r2, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	f003 0201 	and.w	r2, r3, #1
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x128>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b12      	cmp	r3, #18
 80039d2:	d123      	bne.n	8003a1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	08da      	lsrs	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3208      	adds	r2, #8
 80039dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	220f      	movs	r2, #15
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3208      	adds	r2, #8
 8003a16:	6939      	ldr	r1, [r7, #16]
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0203 	and.w	r2, r3, #3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80ac 	beq.w	8003bb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	4b5e      	ldr	r3, [pc, #376]	; (8003bd8 <HAL_GPIO_Init+0x32c>)
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	4a5d      	ldr	r2, [pc, #372]	; (8003bd8 <HAL_GPIO_Init+0x32c>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	6613      	str	r3, [r2, #96]	; 0x60
 8003a6a:	4b5b      	ldr	r3, [pc, #364]	; (8003bd8 <HAL_GPIO_Init+0x32c>)
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a76:	4a59      	ldr	r2, [pc, #356]	; (8003bdc <HAL_GPIO_Init+0x330>)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	220f      	movs	r2, #15
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43db      	mvns	r3, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4013      	ands	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aa0:	d025      	beq.n	8003aee <HAL_GPIO_Init+0x242>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a4e      	ldr	r2, [pc, #312]	; (8003be0 <HAL_GPIO_Init+0x334>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <HAL_GPIO_Init+0x23e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a4d      	ldr	r2, [pc, #308]	; (8003be4 <HAL_GPIO_Init+0x338>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d019      	beq.n	8003ae6 <HAL_GPIO_Init+0x23a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a4c      	ldr	r2, [pc, #304]	; (8003be8 <HAL_GPIO_Init+0x33c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_Init+0x236>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a4b      	ldr	r2, [pc, #300]	; (8003bec <HAL_GPIO_Init+0x340>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00d      	beq.n	8003ade <HAL_GPIO_Init+0x232>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4a      	ldr	r2, [pc, #296]	; (8003bf0 <HAL_GPIO_Init+0x344>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <HAL_GPIO_Init+0x22e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a49      	ldr	r2, [pc, #292]	; (8003bf4 <HAL_GPIO_Init+0x348>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_GPIO_Init+0x22a>
 8003ad2:	2306      	movs	r3, #6
 8003ad4:	e00c      	b.n	8003af0 <HAL_GPIO_Init+0x244>
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	e00a      	b.n	8003af0 <HAL_GPIO_Init+0x244>
 8003ada:	2305      	movs	r3, #5
 8003adc:	e008      	b.n	8003af0 <HAL_GPIO_Init+0x244>
 8003ade:	2304      	movs	r3, #4
 8003ae0:	e006      	b.n	8003af0 <HAL_GPIO_Init+0x244>
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e004      	b.n	8003af0 <HAL_GPIO_Init+0x244>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e002      	b.n	8003af0 <HAL_GPIO_Init+0x244>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_GPIO_Init+0x244>
 8003aee:	2300      	movs	r3, #0
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	f002 0203 	and.w	r2, r2, #3
 8003af6:	0092      	lsls	r2, r2, #2
 8003af8:	4093      	lsls	r3, r2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b00:	4936      	ldr	r1, [pc, #216]	; (8003bdc <HAL_GPIO_Init+0x330>)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	3302      	adds	r3, #2
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b0e:	4b3a      	ldr	r3, [pc, #232]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b32:	4a31      	ldr	r2, [pc, #196]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b5c:	4a26      	ldr	r2, [pc, #152]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b62:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <HAL_GPIO_Init+0x34c>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f47f ae78 	bne.w	80038bc <HAL_GPIO_Init+0x10>
  }
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40010000 	.word	0x40010000
 8003be0:	48000400 	.word	0x48000400
 8003be4:	48000800 	.word	0x48000800
 8003be8:	48000c00 	.word	0x48000c00
 8003bec:	48001000 	.word	0x48001000
 8003bf0:	48001400 	.word	0x48001400
 8003bf4:	48001800 	.word	0x48001800
 8003bf8:	40010400 	.word	0x40010400

08003bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c0c:	787b      	ldrb	r3, [r7, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c18:	e002      	b.n	8003c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	88fb      	ldrh	r3, [r7, #6]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f806 	bl	8003c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e081      	b.n	8003d88 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fd ff83 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2224      	movs	r2, #36	; 0x24
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	e006      	b.n	8003cfa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cf8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d104      	bne.n	8003d0c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	ea42 0103 	orr.w	r1, r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	021a      	lsls	r2, r3, #8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69d9      	ldr	r1, [r3, #28]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d138      	bne.n	8003e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e032      	b.n	8003e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e000      	b.n	8003e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
  }
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d139      	bne.n	8003eb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e033      	b.n	8003eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2224      	movs	r2, #36	; 0x24
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0201 	bic.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec0:	b08f      	sub	sp, #60	; 0x3c
 8003ec2:	af0a      	add	r7, sp, #40	; 0x28
 8003ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e116      	b.n	80040fe <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd ff9c 	bl	8001e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 fe38 	bl	8006b84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	687e      	ldr	r6, [r7, #4]
 8003f1c:	466d      	mov	r5, sp
 8003f1e:	f106 0410 	add.w	r4, r6, #16
 8003f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f32:	1d33      	adds	r3, r6, #4
 8003f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	f002 fdd2 	bl	8006ae0 <USB_CoreInit>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0d7      	b.n	80040fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 fe26 	bl	8006ba6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	e04a      	b.n	8003ff6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	333d      	adds	r3, #61	; 0x3d
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	333c      	adds	r3, #60	; 0x3c
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	b298      	uxth	r0, r3
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3342      	adds	r3, #66	; 0x42
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	333f      	adds	r3, #63	; 0x3f
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3344      	adds	r3, #68	; 0x44
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fc8:	7bfa      	ldrb	r2, [r7, #15]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3348      	adds	r3, #72	; 0x48
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	3350      	adds	r3, #80	; 0x50
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d3af      	bcc.n	8003f60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]
 8004004:	e044      	b.n	8004090 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004044:	2200      	movs	r2, #0
 8004046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3301      	adds	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d3b5      	bcc.n	8004006 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	687e      	ldr	r6, [r7, #4]
 80040a2:	466d      	mov	r5, sp
 80040a4:	f106 0410 	add.w	r4, r6, #16
 80040a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80040b8:	1d33      	adds	r3, r6, #4
 80040ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f002 fd9d 	bl	8006bfc <USB_DevInit>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e014      	b.n	80040fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d102      	bne.n	80040f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f80a 	bl	8004106 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f002 ff2d 	bl	8006f56 <USB_DevDisconnect>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004106 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004106:	b480      	push	{r7}
 8004108:	b085      	sub	sp, #20
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	f043 0303 	orr.w	r3, r3, #3
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a04      	ldr	r2, [pc, #16]	; (800416c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40007000 	.word	0x40007000

08004170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_PWREx_GetVoltageRange+0x18>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40007000 	.word	0x40007000

0800418c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419a:	d130      	bne.n	80041fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a8:	d038      	beq.n	800421c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041aa:	4b20      	ldr	r3, [pc, #128]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2232      	movs	r2, #50	; 0x32
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	0c9b      	lsrs	r3, r3, #18
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d0:	e002      	b.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e4:	d102      	bne.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f2      	bne.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f8:	d110      	bne.n	800421c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e00f      	b.n	800421e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420a:	d007      	beq.n	800421c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800420c:	4b07      	ldr	r3, [pc, #28]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004214:	4a05      	ldr	r2, [pc, #20]	; (800422c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40007000 	.word	0x40007000
 8004230:	20000000 	.word	0x20000000
 8004234:	431bde83 	.word	0x431bde83

08004238 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_PWREx_EnableVddUSB+0x1c>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004246:	6053      	str	r3, [r2, #4]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40007000 	.word	0x40007000

08004258 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004260:	f7fd ffb6 	bl	80021d0 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e06f      	b.n	8004350 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_QSPI_Init+0x28>
 800427c:	2302      	movs	r3, #2
 800427e:	e067      	b.n	8004350 <HAL_QSPI_Init+0xf8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fd fcc5 	bl	8001c2c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80042a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f858 	bl	800435c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	021a      	lsls	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2120      	movs	r1, #32
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f850 	bl	8004378 <QSPI_WaitFlagStateUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d131      	bne.n	8004346 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042ec:	f023 0310 	bic.w	r3, r3, #16
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6852      	ldr	r2, [r2, #4]
 80042f4:	0611      	lsls	r1, r2, #24
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_QSPI_Init+0x100>)
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6912      	ldr	r2, [r2, #16]
 8004312:	0411      	lsls	r1, r2, #16
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6952      	ldr	r2, [r2, #20]
 8004318:	4311      	orrs	r1, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6992      	ldr	r2, [r2, #24]
 800431e:	4311      	orrs	r1, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	430b      	orrs	r3, r1
 8004326:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800434e:	7afb      	ldrb	r3, [r7, #11]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	ffe0f8fe 	.word	0xffe0f8fe

0800435c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004388:	e01a      	b.n	80043c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d016      	beq.n	80043c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fd ff1d 	bl	80021d0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2204      	movs	r2, #4
 80043ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e00e      	b.n	80043de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d1d6      	bne.n	800438a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e3d4      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043fa:	4ba1      	ldr	r3, [pc, #644]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004404:	4b9e      	ldr	r3, [pc, #632]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80e4 	beq.w	80045e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <HAL_RCC_OscConfig+0x4a>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b0c      	cmp	r3, #12
 8004426:	f040 808b 	bne.w	8004540 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b01      	cmp	r3, #1
 800442e:	f040 8087 	bne.w	8004540 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004432:	4b93      	ldr	r3, [pc, #588]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_RCC_OscConfig+0x62>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e3ac      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	4b8c      	ldr	r3, [pc, #560]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_RCC_OscConfig+0x7c>
 800445a:	4b89      	ldr	r3, [pc, #548]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004462:	e005      	b.n	8004470 <HAL_RCC_OscConfig+0x88>
 8004464:	4b86      	ldr	r3, [pc, #536]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004470:	4293      	cmp	r3, r2
 8004472:	d223      	bcs.n	80044bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd71 	bl	8004f60 <RCC_SetFlashLatencyFromMSIRange>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e38d      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004488:	4b7d      	ldr	r3, [pc, #500]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a7c      	ldr	r2, [pc, #496]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800448e:	f043 0308 	orr.w	r3, r3, #8
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b7a      	ldr	r3, [pc, #488]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	4977      	ldr	r1, [pc, #476]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a6:	4b76      	ldr	r3, [pc, #472]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	4972      	ldr	r1, [pc, #456]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	604b      	str	r3, [r1, #4]
 80044ba:	e025      	b.n	8004508 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6f      	ldr	r2, [pc, #444]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044c2:	f043 0308 	orr.w	r3, r3, #8
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b6d      	ldr	r3, [pc, #436]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	496a      	ldr	r1, [pc, #424]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044da:	4b69      	ldr	r3, [pc, #420]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	4965      	ldr	r1, [pc, #404]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fd31 	bl	8004f60 <RCC_SetFlashLatencyFromMSIRange>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e34d      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004508:	f000 fc36 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 800450c:	4601      	mov	r1, r0
 800450e:	4b5c      	ldr	r3, [pc, #368]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	4a5a      	ldr	r2, [pc, #360]	; (8004684 <HAL_RCC_OscConfig+0x29c>)
 800451a:	5cd3      	ldrb	r3, [r2, r3]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa21 f303 	lsr.w	r3, r1, r3
 8004524:	4a58      	ldr	r2, [pc, #352]	; (8004688 <HAL_RCC_OscConfig+0x2a0>)
 8004526:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004528:	4b58      	ldr	r3, [pc, #352]	; (800468c <HAL_RCC_OscConfig+0x2a4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fd fce7 	bl	8001f00 <HAL_InitTick>
 8004532:	4603      	mov	r3, r0
 8004534:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d052      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	e331      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d032      	beq.n	80045ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004548:	4b4d      	ldr	r3, [pc, #308]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a4c      	ldr	r2, [pc, #304]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004554:	f7fd fe3c 	bl	80021d0 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800455c:	f7fd fe38 	bl	80021d0 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e31a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800456e:	4b44      	ldr	r3, [pc, #272]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800457a:	4b41      	ldr	r3, [pc, #260]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a40      	ldr	r2, [pc, #256]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	493b      	ldr	r1, [pc, #236]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004594:	4313      	orrs	r3, r2
 8004596:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004598:	4b39      	ldr	r3, [pc, #228]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	4936      	ldr	r1, [pc, #216]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
 80045ac:	e01a      	b.n	80045e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045ae:	4b34      	ldr	r3, [pc, #208]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a33      	ldr	r2, [pc, #204]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ba:	f7fd fe09 	bl	80021d0 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045c2:	f7fd fe05 	bl	80021d0 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e2e7      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x1da>
 80045e0:	e000      	b.n	80045e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d074      	beq.n	80046da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d005      	beq.n	8004602 <HAL_RCC_OscConfig+0x21a>
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b0c      	cmp	r3, #12
 80045fa:	d10e      	bne.n	800461a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d10b      	bne.n	800461a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004602:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d064      	beq.n	80046d8 <HAL_RCC_OscConfig+0x2f0>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d160      	bne.n	80046d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e2c4      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x24a>
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800462a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e01d      	b.n	800466e <HAL_RCC_OscConfig+0x286>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x26e>
 800463c:	4b10      	ldr	r3, [pc, #64]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0f      	ldr	r2, [pc, #60]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800464e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	e00b      	b.n	800466e <HAL_RCC_OscConfig+0x286>
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 800465c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a06      	ldr	r2, [pc, #24]	; (8004680 <HAL_RCC_OscConfig+0x298>)
 8004668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01c      	beq.n	80046b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd fdab 	bl	80021d0 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467c:	e011      	b.n	80046a2 <HAL_RCC_OscConfig+0x2ba>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	0800a29c 	.word	0x0800a29c
 8004688:	20000000 	.word	0x20000000
 800468c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fd fd9e 	bl	80021d0 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e280      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046a2:	4baf      	ldr	r3, [pc, #700]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x2a8>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fd fd8e 	bl	80021d0 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd fd8a 	bl	80021d0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e26c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ca:	4ba5      	ldr	r3, [pc, #660]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2d0>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d060      	beq.n	80047a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_OscConfig+0x310>
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d119      	bne.n	8004726 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d116      	bne.n	8004726 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f8:	4b99      	ldr	r3, [pc, #612]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_OscConfig+0x328>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e249      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b93      	ldr	r3, [pc, #588]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	061b      	lsls	r3, r3, #24
 800471e:	4990      	ldr	r1, [pc, #576]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004720:	4313      	orrs	r3, r2
 8004722:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004724:	e040      	b.n	80047a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d023      	beq.n	8004776 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800472e:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a8b      	ldr	r2, [pc, #556]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd fd49 	bl	80021d0 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004742:	f7fd fd45 	bl	80021d0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e227      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004754:	4b82      	ldr	r3, [pc, #520]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004760:	4b7f      	ldr	r3, [pc, #508]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	497c      	ldr	r1, [pc, #496]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
 8004774:	e018      	b.n	80047a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004776:	4b7a      	ldr	r3, [pc, #488]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a79      	ldr	r2, [pc, #484]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800477c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004782:	f7fd fd25 	bl	80021d0 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800478a:	f7fd fd21 	bl	80021d0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e203      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800479c:	4b70      	ldr	r3, [pc, #448]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d03c      	beq.n	800482e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047bc:	4b68      	ldr	r3, [pc, #416]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c2:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fd fd00 	bl	80021d0 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fd fcfc 	bl	80021d0 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1de      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047e6:	4b5e      	ldr	r3, [pc, #376]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ef      	beq.n	80047d4 <HAL_RCC_OscConfig+0x3ec>
 80047f4:	e01b      	b.n	800482e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f6:	4b5a      	ldr	r3, [pc, #360]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fc:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fd fce3 	bl	80021d0 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800480e:	f7fd fcdf 	bl	80021d0 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e1c1      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004820:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1ef      	bne.n	800480e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 80a6 	beq.w	8004988 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483c:	2300      	movs	r3, #0
 800483e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004840:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484c:	4b44      	ldr	r3, [pc, #272]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	4a43      	ldr	r2, [pc, #268]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004856:	6593      	str	r3, [r2, #88]	; 0x58
 8004858:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004864:	2301      	movs	r3, #1
 8004866:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d118      	bne.n	80048a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004874:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3a      	ldr	r2, [pc, #232]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004880:	f7fd fca6 	bl	80021d0 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fd fca2 	bl	80021d0 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e184      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800489a:	4b32      	ldr	r3, [pc, #200]	; (8004964 <HAL_RCC_OscConfig+0x57c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d108      	bne.n	80048c0 <HAL_RCC_OscConfig+0x4d8>
 80048ae:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b4:	4a2a      	ldr	r2, [pc, #168]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048be:	e024      	b.n	800490a <HAL_RCC_OscConfig+0x522>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d110      	bne.n	80048ea <HAL_RCC_OscConfig+0x502>
 80048c8:	4b25      	ldr	r3, [pc, #148]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	4a24      	ldr	r2, [pc, #144]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048d8:	4b21      	ldr	r3, [pc, #132]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e8:	e00f      	b.n	800490a <HAL_RCC_OscConfig+0x522>
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f0:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048fa:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004902:	f023 0304 	bic.w	r3, r3, #4
 8004906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004912:	f7fd fc5d 	bl	80021d0 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fd fc59 	bl	80021d0 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e139      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_OscConfig+0x578>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ed      	beq.n	800491a <HAL_RCC_OscConfig+0x532>
 800493e:	e01a      	b.n	8004976 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fd fc46 	bl	80021d0 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004946:	e00f      	b.n	8004968 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fd fc42 	bl	80021d0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d906      	bls.n	8004968 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e122      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004968:	4b90      	ldr	r3, [pc, #576]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e8      	bne.n	8004948 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497c:	4b8b      	ldr	r3, [pc, #556]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	4a8a      	ldr	r2, [pc, #552]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004986:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8108 	beq.w	8004ba2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	2b02      	cmp	r3, #2
 8004998:	f040 80d0 	bne.w	8004b3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800499c:	4b83      	ldr	r3, [pc, #524]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f003 0203 	and.w	r2, r3, #3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d130      	bne.n	8004a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	3b01      	subs	r3, #1
 80049bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	429a      	cmp	r2, r3
 80049c0:	d127      	bne.n	8004a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d11f      	bne.n	8004a12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049dc:	2a07      	cmp	r2, #7
 80049de:	bf14      	ite	ne
 80049e0:	2201      	movne	r2, #1
 80049e2:	2200      	moveq	r2, #0
 80049e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d113      	bne.n	8004a12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d109      	bne.n	8004a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	085b      	lsrs	r3, r3, #1
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d06e      	beq.n	8004af0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	d069      	beq.n	8004aec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a18:	4b64      	ldr	r3, [pc, #400]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a24:	4b61      	ldr	r3, [pc, #388]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b7      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a34:	4b5d      	ldr	r3, [pc, #372]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a5c      	ldr	r2, [pc, #368]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a40:	f7fd fbc6 	bl	80021d0 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a48:	f7fd fbc2 	bl	80021d0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e0a4      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5a:	4b54      	ldr	r3, [pc, #336]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a66:	4b51      	ldr	r3, [pc, #324]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <HAL_RCC_OscConfig+0x7c8>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a76:	3a01      	subs	r2, #1
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a80:	0212      	lsls	r2, r2, #8
 8004a82:	4311      	orrs	r1, r2
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a88:	0852      	lsrs	r2, r2, #1
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	0552      	lsls	r2, r2, #21
 8004a8e:	4311      	orrs	r1, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a94:	0852      	lsrs	r2, r2, #1
 8004a96:	3a01      	subs	r2, #1
 8004a98:	0652      	lsls	r2, r2, #25
 8004a9a:	4311      	orrs	r1, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa0:	0912      	lsrs	r2, r2, #4
 8004aa2:	0452      	lsls	r2, r2, #17
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	4941      	ldr	r1, [pc, #260]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004aac:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3e      	ldr	r2, [pc, #248]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ab8:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a3b      	ldr	r2, [pc, #236]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ac4:	f7fd fb84 	bl	80021d0 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004acc:	f7fd fb80 	bl	80021d0 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e062      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	4b33      	ldr	r3, [pc, #204]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aea:	e05a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e059      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af0:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d152      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b08:	4b28      	ldr	r3, [pc, #160]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a27      	ldr	r2, [pc, #156]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b14:	f7fd fb5c 	bl	80021d0 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fd fb58 	bl	80021d0 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e03a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x734>
 8004b3a:	e032      	b.n	8004ba2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d02d      	beq.n	8004b9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a19      	ldr	r2, [pc, #100]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b4e:	4b17      	ldr	r3, [pc, #92]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b5a:	4b14      	ldr	r3, [pc, #80]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4a13      	ldr	r2, [pc, #76]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b60:	f023 0303 	bic.w	r3, r3, #3
 8004b64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b66:	4b11      	ldr	r3, [pc, #68]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4a10      	ldr	r2, [pc, #64]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fb2b 	bl	80021d0 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7fd fb27 	bl	80021d0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCC_OscConfig+0x7c4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <HAL_RCC_OscConfig+0x796>
 8004b9c:	e001      	b.n	8004ba2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	f99d808c 	.word	0xf99d808c

08004bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0c8      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d910      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	4961      	ldr	r1, [pc, #388]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b5f      	ldr	r3, [pc, #380]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e0b0      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d04c      	beq.n	8004c9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d107      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0c:	4b56      	ldr	r3, [pc, #344]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d121      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e09e      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d107      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c24:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d115      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e092      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c3c:	4b4a      	ldr	r3, [pc, #296]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e086      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e07e      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c5c:	4b42      	ldr	r3, [pc, #264]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 0203 	bic.w	r2, r3, #3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	493f      	ldr	r1, [pc, #252]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6e:	f7fd faaf 	bl	80021d0 <HAL_GetTick>
 8004c72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c76:	f7fd faab 	bl	80021d0 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e066      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8c:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 020c 	and.w	r2, r3, #12
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d1eb      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	492c      	ldr	r1, [pc, #176]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d210      	bcs.n	8004cec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 0207 	bic.w	r2, r3, #7
 8004cd2:	4924      	ldr	r1, [pc, #144]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <HAL_RCC_ClockConfig+0x1b0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e036      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	4918      	ldr	r1, [pc, #96]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4910      	ldr	r1, [pc, #64]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d2a:	f000 f825 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 8004d2e:	4601      	mov	r1, r0
 8004d30:	4b0d      	ldr	r3, [pc, #52]	; (8004d68 <HAL_RCC_ClockConfig+0x1b4>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	4a0c      	ldr	r2, [pc, #48]	; (8004d6c <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	5cd3      	ldrb	r3, [r2, r3]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	fa21 f303 	lsr.w	r3, r1, r3
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_RCC_ClockConfig+0x1c0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fd f8d6 	bl	8001f00 <HAL_InitTick>
 8004d54:	4603      	mov	r3, r0
 8004d56:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d58:	7afb      	ldrb	r3, [r7, #11]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40022000 	.word	0x40022000
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	0800a29c 	.word	0x0800a29c
 8004d70:	20000000 	.word	0x20000000
 8004d74:	20000004 	.word	0x20000004

08004d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d86:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d90:	4b3a      	ldr	r3, [pc, #232]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x34>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b0c      	cmp	r3, #12
 8004da4:	d121      	bne.n	8004dea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d11e      	bne.n	8004dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dac:	4b33      	ldr	r3, [pc, #204]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004db8:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dc8:	4b2c      	ldr	r3, [pc, #176]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ddc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004de8:	e00a      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d102      	bne.n	8004df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004df0:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004df2:	61bb      	str	r3, [r7, #24]
 8004df4:	e004      	b.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dfc:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d133      	bne.n	8004e6e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d002      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0xa4>
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d003      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0xaa>
 8004e1a:	e005      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e1c:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e1e:	617b      	str	r3, [r7, #20]
      break;
 8004e20:	e005      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e24:	617b      	str	r3, [r7, #20]
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	617b      	str	r3, [r7, #20]
      break;
 8004e2c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	3301      	adds	r3, #1
 8004e3a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	fb02 f203 	mul.w	r2, r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x104>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	0e5b      	lsrs	r3, r3, #25
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3724      	adds	r7, #36	; 0x24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	0800a2b4 	.word	0x0800a2b4
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	007a1200 	.word	0x007a1200

08004e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000000 	.word	0x20000000

08004ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ea8:	f7ff fff0 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004eac:	4601      	mov	r1, r0
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4a04      	ldr	r2, [pc, #16]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eba:	5cd3      	ldrb	r3, [r2, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	0800a2ac 	.word	0x0800a2ac

08004ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ed4:	f7ff ffda 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004ed8:	4601      	mov	r1, r0
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0adb      	lsrs	r3, r3, #11
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	0800a2ac 	.word	0x0800a2ac

08004efc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	220f      	movs	r2, #15
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f0c:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0203 	and.w	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	08db      	lsrs	r3, r3, #3
 8004f36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <HAL_RCC_GetClockConfig+0x60>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0207 	and.w	r2, r3, #7
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40022000 	.word	0x40022000

08004f60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f6c:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f78:	f7ff f8fa 	bl	8004170 <HAL_PWREx_GetVoltageRange>
 8004f7c:	6178      	str	r0, [r7, #20]
 8004f7e:	e014      	b.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	4a24      	ldr	r2, [pc, #144]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8c:	4b22      	ldr	r3, [pc, #136]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f98:	f7ff f8ea 	bl	8004170 <HAL_PWREx_GetVoltageRange>
 8004f9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb0:	d10b      	bne.n	8004fca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b80      	cmp	r3, #128	; 0x80
 8004fb6:	d919      	bls.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2ba0      	cmp	r3, #160	; 0xa0
 8004fbc:	d902      	bls.n	8004fc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	e013      	b.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	e010      	b.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d902      	bls.n	8004fd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e00a      	b.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d102      	bne.n	8004fe2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fdc:	2302      	movs	r3, #2
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e004      	b.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d101      	bne.n	8004fec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe8:	2301      	movs	r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f023 0207 	bic.w	r2, r3, #7
 8004ff4:	4909      	ldr	r1, [pc, #36]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d001      	beq.n	800500e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	40022000 	.word	0x40022000

08005020 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005028:	2300      	movs	r3, #0
 800502a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800502c:	2300      	movs	r3, #0
 800502e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005038:	2b00      	cmp	r3, #0
 800503a:	d03f      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005044:	d01c      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504a:	d802      	bhi.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005050:	e01f      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005056:	d003      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005058:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800505c:	d01c      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800505e:	e018      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005060:	4b85      	ldr	r3, [pc, #532]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a84      	ldr	r2, [pc, #528]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800506c:	e015      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3304      	adds	r3, #4
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fac9 	bl	800560c <RCCEx_PLLSAI1_Config>
 800507a:	4603      	mov	r3, r0
 800507c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800507e:	e00c      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3320      	adds	r3, #32
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fbb0 	bl	80057ec <RCCEx_PLLSAI2_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005090:	e003      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	74fb      	strb	r3, [r7, #19]
      break;
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509a:	7cfb      	ldrb	r3, [r7, #19]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a0:	4b75      	ldr	r3, [pc, #468]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ae:	4972      	ldr	r1, [pc, #456]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050b6:	e001      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	7cfb      	ldrb	r3, [r7, #19]
 80050ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d03f      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d0:	d01c      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80050d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d6:	d802      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xda>
 80050dc:	e01f      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e2:	d003      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80050e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050e8:	d01c      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80050ea:	e018      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050ec:	4b62      	ldr	r3, [pc, #392]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a61      	ldr	r2, [pc, #388]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050f8:	e015      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	2100      	movs	r1, #0
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fa83 	bl	800560c <RCCEx_PLLSAI1_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800510a:	e00c      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3320      	adds	r3, #32
 8005110:	2100      	movs	r1, #0
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb6a 	bl	80057ec <RCCEx_PLLSAI2_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800511c:	e003      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	74fb      	strb	r3, [r7, #19]
      break;
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005126:	7cfb      	ldrb	r3, [r7, #19]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10b      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800512c:	4b52      	ldr	r3, [pc, #328]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800513a:	494f      	ldr	r1, [pc, #316]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005142:	e001      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80a0 	beq.w	8005296 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005156:	2300      	movs	r3, #0
 8005158:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800515a:	4b47      	ldr	r3, [pc, #284]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005170:	4b41      	ldr	r3, [pc, #260]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	4a40      	ldr	r2, [pc, #256]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800517a:	6593      	str	r3, [r2, #88]	; 0x58
 800517c:	4b3e      	ldr	r3, [pc, #248]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005188:	2301      	movs	r3, #1
 800518a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800518c:	4b3b      	ldr	r3, [pc, #236]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3a      	ldr	r2, [pc, #232]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005196:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005198:	f7fd f81a 	bl	80021d0 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800519e:	e009      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a0:	f7fd f816 	bl	80021d0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d902      	bls.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	74fb      	strb	r3, [r7, #19]
        break;
 80051b2:	e005      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051b4:	4b31      	ldr	r3, [pc, #196]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ef      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80051c0:	7cfb      	ldrb	r3, [r7, #19]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d15c      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051c6:	4b2c      	ldr	r3, [pc, #176]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01f      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d019      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051e4:	4b24      	ldr	r3, [pc, #144]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f6:	4a20      	ldr	r2, [pc, #128]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005200:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800520c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005210:	4a19      	ldr	r2, [pc, #100]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005222:	f7fc ffd5 	bl	80021d0 <HAL_GetTick>
 8005226:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005228:	e00b      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522a:	f7fc ffd1 	bl	80021d0 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	f241 3288 	movw	r2, #5000	; 0x1388
 8005238:	4293      	cmp	r3, r2
 800523a:	d902      	bls.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	74fb      	strb	r3, [r7, #19]
            break;
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ec      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10c      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005256:	4b08      	ldr	r3, [pc, #32]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005266:	4904      	ldr	r1, [pc, #16]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800526e:	e009      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005270:	7cfb      	ldrb	r3, [r7, #19]
 8005272:	74bb      	strb	r3, [r7, #18]
 8005274:	e006      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005276:	bf00      	nop
 8005278:	40021000 	.word	0x40021000
 800527c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005284:	7c7b      	ldrb	r3, [r7, #17]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528a:	4b9e      	ldr	r3, [pc, #632]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	4a9d      	ldr	r2, [pc, #628]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052a2:	4b98      	ldr	r3, [pc, #608]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f023 0203 	bic.w	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	4994      	ldr	r1, [pc, #592]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052c4:	4b8f      	ldr	r3, [pc, #572]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f023 020c 	bic.w	r2, r3, #12
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	498c      	ldr	r1, [pc, #560]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052e6:	4b87      	ldr	r3, [pc, #540]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	4983      	ldr	r1, [pc, #524]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005308:	4b7e      	ldr	r3, [pc, #504]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	497b      	ldr	r1, [pc, #492]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800532a:	4b76      	ldr	r3, [pc, #472]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	4972      	ldr	r1, [pc, #456]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800534c:	4b6d      	ldr	r3, [pc, #436]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535a:	496a      	ldr	r1, [pc, #424]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800536e:	4b65      	ldr	r3, [pc, #404]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	4961      	ldr	r1, [pc, #388]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005390:	4b5c      	ldr	r3, [pc, #368]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539e:	4959      	ldr	r1, [pc, #356]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053b2:	4b54      	ldr	r3, [pc, #336]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	4950      	ldr	r1, [pc, #320]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053d4:	4b4b      	ldr	r3, [pc, #300]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	4948      	ldr	r1, [pc, #288]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053f6:	4b43      	ldr	r3, [pc, #268]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	493f      	ldr	r1, [pc, #252]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d028      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005418:	4b3a      	ldr	r3, [pc, #232]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005426:	4937      	ldr	r1, [pc, #220]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005436:	d106      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005438:	4b32      	ldr	r3, [pc, #200]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a31      	ldr	r2, [pc, #196]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800543e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005442:	60d3      	str	r3, [r2, #12]
 8005444:	e011      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800544e:	d10c      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3304      	adds	r3, #4
 8005454:	2101      	movs	r1, #1
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f8d8 	bl	800560c <RCCEx_PLLSAI1_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005466:	7cfb      	ldrb	r3, [r7, #19]
 8005468:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d028      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005476:	4b23      	ldr	r3, [pc, #140]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	491f      	ldr	r1, [pc, #124]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005494:	d106      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800549c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a0:	60d3      	str	r3, [r2, #12]
 80054a2:	e011      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3304      	adds	r3, #4
 80054b2:	2101      	movs	r1, #1
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f8a9 	bl	800560c <RCCEx_PLLSAI1_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054be:	7cfb      	ldrb	r3, [r7, #19]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d02b      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	4908      	ldr	r1, [pc, #32]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f2:	d109      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a02      	ldr	r2, [pc, #8]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054fe:	60d3      	str	r3, [r2, #12]
 8005500:	e014      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3304      	adds	r3, #4
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f877 	bl	800560c <RCCEx_PLLSAI1_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d02f      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005538:	4b2b      	ldr	r3, [pc, #172]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005546:	4928      	ldr	r1, [pc, #160]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005556:	d10d      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 f854 	bl	800560c <RCCEx_PLLSAI1_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d014      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	74bb      	strb	r3, [r7, #18]
 8005572:	e011      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557c:	d10c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3320      	adds	r3, #32
 8005582:	2102      	movs	r1, #2
 8005584:	4618      	mov	r0, r3
 8005586:	f000 f931 	bl	80057ec <RCCEx_PLLSAI2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558e:	7cfb      	ldrb	r3, [r7, #19]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055a4:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b2:	490d      	ldr	r1, [pc, #52]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d6:	4904      	ldr	r1, [pc, #16]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055de:	7cbb      	ldrb	r3, [r7, #18]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000

080055ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a04      	ldr	r2, [pc, #16]	; (8005608 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	6013      	str	r3, [r2, #0]
}
 80055fc:	bf00      	nop
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000

0800560c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800561a:	4b73      	ldr	r3, [pc, #460]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005626:	4b70      	ldr	r3, [pc, #448]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0203 	and.w	r2, r3, #3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d10d      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
       ||
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800563e:	4b6a      	ldr	r3, [pc, #424]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	091b      	lsrs	r3, r3, #4
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
       ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d044      	beq.n	80056dc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
 8005656:	e041      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d00c      	beq.n	800567a <RCCEx_PLLSAI1_Config+0x6e>
 8005660:	2b03      	cmp	r3, #3
 8005662:	d013      	beq.n	800568c <RCCEx_PLLSAI1_Config+0x80>
 8005664:	2b01      	cmp	r3, #1
 8005666:	d120      	bne.n	80056aa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005668:	4b5f      	ldr	r3, [pc, #380]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11d      	bne.n	80056b0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005678:	e01a      	b.n	80056b0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800567a:	4b5b      	ldr	r3, [pc, #364]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005682:	2b00      	cmp	r3, #0
 8005684:	d116      	bne.n	80056b4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800568a:	e013      	b.n	80056b4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800568c:	4b56      	ldr	r3, [pc, #344]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10f      	bne.n	80056b8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005698:	4b53      	ldr	r3, [pc, #332]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d109      	bne.n	80056b8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056a8:	e006      	b.n	80056b8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
      break;
 80056ae:	e004      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056b0:	bf00      	nop
 80056b2:	e002      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056b4:	bf00      	nop
 80056b6:	e000      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056b8:	bf00      	nop
    }

    if(status == HAL_OK)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056c0:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	430b      	orrs	r3, r1
 80056d6:	4944      	ldr	r1, [pc, #272]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d17d      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056e2:	4b41      	ldr	r3, [pc, #260]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ee:	f7fc fd6f 	bl	80021d0 <HAL_GetTick>
 80056f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056f4:	e009      	b.n	800570a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056f6:	f7fc fd6b 	bl	80021d0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d902      	bls.n	800570a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	73fb      	strb	r3, [r7, #15]
        break;
 8005708:	e005      	b.n	8005716 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800570a:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ef      	bne.n	80056f6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d160      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d111      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005722:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800572a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6892      	ldr	r2, [r2, #8]
 8005732:	0211      	lsls	r1, r2, #8
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68d2      	ldr	r2, [r2, #12]
 8005738:	0912      	lsrs	r2, r2, #4
 800573a:	0452      	lsls	r2, r2, #17
 800573c:	430a      	orrs	r2, r1
 800573e:	492a      	ldr	r1, [pc, #168]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
 8005744:	e027      	b.n	8005796 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d112      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800574c:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005754:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6892      	ldr	r2, [r2, #8]
 800575c:	0211      	lsls	r1, r2, #8
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6912      	ldr	r2, [r2, #16]
 8005762:	0852      	lsrs	r2, r2, #1
 8005764:	3a01      	subs	r2, #1
 8005766:	0552      	lsls	r2, r2, #21
 8005768:	430a      	orrs	r2, r1
 800576a:	491f      	ldr	r1, [pc, #124]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800576c:	4313      	orrs	r3, r2
 800576e:	610b      	str	r3, [r1, #16]
 8005770:	e011      	b.n	8005796 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005772:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800577a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6892      	ldr	r2, [r2, #8]
 8005782:	0211      	lsls	r1, r2, #8
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6952      	ldr	r2, [r2, #20]
 8005788:	0852      	lsrs	r2, r2, #1
 800578a:	3a01      	subs	r2, #1
 800578c:	0652      	lsls	r2, r2, #25
 800578e:	430a      	orrs	r2, r1
 8005790:	4915      	ldr	r1, [pc, #84]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005792:	4313      	orrs	r3, r2
 8005794:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800579c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fc fd15 	bl	80021d0 <HAL_GetTick>
 80057a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057a8:	e009      	b.n	80057be <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057aa:	f7fc fd11 	bl	80021d0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d902      	bls.n	80057be <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	73fb      	strb	r3, [r7, #15]
          break;
 80057bc:	e005      	b.n	80057ca <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ef      	beq.n	80057aa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	4903      	ldr	r1, [pc, #12]	; (80057e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40021000 	.word	0x40021000

080057ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057fa:	4b68      	ldr	r3, [pc, #416]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005806:	4b65      	ldr	r3, [pc, #404]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0203 	and.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d10d      	bne.n	8005832 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
       ||
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800581e:	4b5f      	ldr	r3, [pc, #380]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
       ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d044      	beq.n	80058bc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e041      	b.n	80058bc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b02      	cmp	r3, #2
 800583e:	d00c      	beq.n	800585a <RCCEx_PLLSAI2_Config+0x6e>
 8005840:	2b03      	cmp	r3, #3
 8005842:	d013      	beq.n	800586c <RCCEx_PLLSAI2_Config+0x80>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d120      	bne.n	800588a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005848:	4b54      	ldr	r3, [pc, #336]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11d      	bne.n	8005890 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005858:	e01a      	b.n	8005890 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800585a:	4b50      	ldr	r3, [pc, #320]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005862:	2b00      	cmp	r3, #0
 8005864:	d116      	bne.n	8005894 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586a:	e013      	b.n	8005894 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800586c:	4b4b      	ldr	r3, [pc, #300]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10f      	bne.n	8005898 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005878:	4b48      	ldr	r3, [pc, #288]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d109      	bne.n	8005898 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005888:	e006      	b.n	8005898 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
      break;
 800588e:	e004      	b.n	800589a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005890:	bf00      	nop
 8005892:	e002      	b.n	800589a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005894:	bf00      	nop
 8005896:	e000      	b.n	800589a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005898:	bf00      	nop
    }

    if(status == HAL_OK)
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058a0:	4b3e      	ldr	r3, [pc, #248]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6819      	ldr	r1, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	430b      	orrs	r3, r1
 80058b6:	4939      	ldr	r1, [pc, #228]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d167      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058c2:	4b36      	ldr	r3, [pc, #216]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a35      	ldr	r2, [pc, #212]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 80058c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ce:	f7fc fc7f 	bl	80021d0 <HAL_GetTick>
 80058d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058d4:	e009      	b.n	80058ea <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058d6:	f7fc fc7b 	bl	80021d0 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d902      	bls.n	80058ea <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	73fb      	strb	r3, [r7, #15]
        break;
 80058e8:	e005      	b.n	80058f6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058ea:	4b2c      	ldr	r3, [pc, #176]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ef      	bne.n	80058d6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d14a      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d111      	bne.n	8005926 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005902:	4b26      	ldr	r3, [pc, #152]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800590a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6892      	ldr	r2, [r2, #8]
 8005912:	0211      	lsls	r1, r2, #8
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	68d2      	ldr	r2, [r2, #12]
 8005918:	0912      	lsrs	r2, r2, #4
 800591a:	0452      	lsls	r2, r2, #17
 800591c:	430a      	orrs	r2, r1
 800591e:	491f      	ldr	r1, [pc, #124]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005920:	4313      	orrs	r3, r2
 8005922:	614b      	str	r3, [r1, #20]
 8005924:	e011      	b.n	800594a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005926:	4b1d      	ldr	r3, [pc, #116]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800592e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6892      	ldr	r2, [r2, #8]
 8005936:	0211      	lsls	r1, r2, #8
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6912      	ldr	r2, [r2, #16]
 800593c:	0852      	lsrs	r2, r2, #1
 800593e:	3a01      	subs	r2, #1
 8005940:	0652      	lsls	r2, r2, #25
 8005942:	430a      	orrs	r2, r1
 8005944:	4915      	ldr	r1, [pc, #84]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005946:	4313      	orrs	r3, r2
 8005948:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005956:	f7fc fc3b 	bl	80021d0 <HAL_GetTick>
 800595a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800595c:	e009      	b.n	8005972 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800595e:	f7fc fc37 	bl	80021d0 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d902      	bls.n	8005972 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	73fb      	strb	r3, [r7, #15]
          break;
 8005970:	e005      	b.n	800597e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005972:	4b0a      	ldr	r3, [pc, #40]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0ef      	beq.n	800595e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	4903      	ldr	r1, [pc, #12]	; (800599c <RCCEx_PLLSAI2_Config+0x1b0>)
 800598e:	4313      	orrs	r3, r2
 8005990:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40021000 	.word	0x40021000

080059a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e07c      	b.n	8005aac <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fc f971 	bl	8001cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059f2:	d902      	bls.n	80059fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e002      	b.n	8005a00 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a08:	d007      	beq.n	8005a1a <HAL_SPI_Init+0x7a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a12:	d002      	beq.n	8005a1a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10b      	bne.n	8005a3a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a2a:	d903      	bls.n	8005a34 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
 8005a32:	e002      	b.n	8005a3a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	ea42 0103 	orr.w	r1, r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f003 0204 	and.w	r2, r3, #4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	ea42 0103 	orr.w	r1, r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e01d      	b.n	8005b02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d106      	bne.n	8005ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f815 	bl	8005b0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f000 f986 	bl	8005e04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b12:	bf00      	nop
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <HAL_TIM_Base_Start_IT+0x50>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b06      	cmp	r3, #6
 8005b48:	d00b      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x42>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b50:	d007      	beq.n	8005b62 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0201 	orr.w	r2, r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3714      	adds	r7, #20
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	00010007 	.word	0x00010007

08005b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d122      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d11b      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0202 	mvn.w	r2, #2
 8005ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f905 	bl	8005dc6 <HAL_TIM_IC_CaptureCallback>
 8005bbc:	e005      	b.n	8005bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8f7 	bl	8005db2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f908 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d122      	bne.n	8005c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d11b      	bne.n	8005c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0204 	mvn.w	r2, #4
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8db 	bl	8005dc6 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f8cd 	bl	8005db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f8de 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d122      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d11b      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0208 	mvn.w	r2, #8
 8005c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8b1 	bl	8005dc6 <HAL_TIM_IC_CaptureCallback>
 8005c64:	e005      	b.n	8005c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f8a3 	bl	8005db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f8b4 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d122      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d11b      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0210 	mvn.w	r2, #16
 8005c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f887 	bl	8005dc6 <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f879 	bl	8005db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f88a 	bl	8005dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d10e      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d107      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0201 	mvn.w	r2, #1
 8005cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fb fe1e 	bl	8001934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b80      	cmp	r3, #128	; 0x80
 8005d04:	d10e      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d107      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f914 	bl	8005f4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d32:	d10e      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d107      	bne.n	8005d52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f907 	bl	8005f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	d10e      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d107      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f838 	bl	8005dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d10e      	bne.n	8005daa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d107      	bne.n	8005daa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0220 	mvn.w	r2, #32
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f8c7 	bl	8005f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dce:	bf00      	nop
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a40      	ldr	r2, [pc, #256]	; (8005f18 <TIM_Base_SetConfig+0x114>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d013      	beq.n	8005e44 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e22:	d00f      	beq.n	8005e44 <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a3d      	ldr	r2, [pc, #244]	; (8005f1c <TIM_Base_SetConfig+0x118>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00b      	beq.n	8005e44 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3c      	ldr	r2, [pc, #240]	; (8005f20 <TIM_Base_SetConfig+0x11c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d007      	beq.n	8005e44 <TIM_Base_SetConfig+0x40>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a3b      	ldr	r2, [pc, #236]	; (8005f24 <TIM_Base_SetConfig+0x120>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_Base_SetConfig+0x40>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a3a      	ldr	r2, [pc, #232]	; (8005f28 <TIM_Base_SetConfig+0x124>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d108      	bne.n	8005e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2f      	ldr	r2, [pc, #188]	; (8005f18 <TIM_Base_SetConfig+0x114>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01f      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e64:	d01b      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <TIM_Base_SetConfig+0x118>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d017      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2b      	ldr	r2, [pc, #172]	; (8005f20 <TIM_Base_SetConfig+0x11c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <TIM_Base_SetConfig+0x120>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00f      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <TIM_Base_SetConfig+0x124>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a28      	ldr	r2, [pc, #160]	; (8005f2c <TIM_Base_SetConfig+0x128>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a27      	ldr	r2, [pc, #156]	; (8005f30 <TIM_Base_SetConfig+0x12c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_Base_SetConfig+0x9a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a26      	ldr	r2, [pc, #152]	; (8005f34 <TIM_Base_SetConfig+0x130>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d108      	bne.n	8005eb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <TIM_Base_SetConfig+0x114>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d00f      	beq.n	8005efc <TIM_Base_SetConfig+0xf8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <TIM_Base_SetConfig+0x124>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <TIM_Base_SetConfig+0xf8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <TIM_Base_SetConfig+0x128>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_Base_SetConfig+0xf8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a10      	ldr	r2, [pc, #64]	; (8005f30 <TIM_Base_SetConfig+0x12c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_Base_SetConfig+0xf8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a0f      	ldr	r2, [pc, #60]	; (8005f34 <TIM_Base_SetConfig+0x130>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d103      	bne.n	8005f04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	615a      	str	r2, [r3, #20]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40013400 	.word	0x40013400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800

08005f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e040      	b.n	8006008 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7fb fed0 	bl	8001d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2224      	movs	r2, #36	; 0x24
 8005fa0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8c0 	bl	8006138 <UART_SetConfig>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e022      	b.n	8006008 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fc26 	bl	800681c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fcad 	bl	8006960 <UART_CheckIdleState>
 8006006:	4603      	mov	r3, r0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	; 0x28
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	603b      	str	r3, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006024:	2b20      	cmp	r3, #32
 8006026:	f040 8081 	bne.w	800612c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_UART_Transmit+0x26>
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e079      	b.n	800612e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_UART_Transmit+0x38>
 8006044:	2302      	movs	r3, #2
 8006046:	e072      	b.n	800612e <HAL_UART_Transmit+0x11e>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2221      	movs	r2, #33	; 0x21
 800605a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800605c:	f7fc f8b8 	bl	80021d0 <HAL_GetTick>
 8006060:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	88fa      	ldrh	r2, [r7, #6]
 800606e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d108      	bne.n	800608e <HAL_UART_Transmit+0x7e>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	e003      	b.n	8006096 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800609e:	e02d      	b.n	80060fc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fc9d 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e039      	b.n	800612e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	881a      	ldrh	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060cc:	b292      	uxth	r2, r2
 80060ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	3302      	adds	r3, #2
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	e008      	b.n	80060ea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	781a      	ldrb	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	b292      	uxth	r2, r2
 80060e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	3301      	adds	r3, #1
 80060e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1cb      	bne.n	80060a0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2200      	movs	r2, #0
 8006110:	2140      	movs	r1, #64	; 0x40
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fc69 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e005      	b.n	800612e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	e000      	b.n	800612e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800612c:	2302      	movs	r3, #2
  }
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800613c:	b08a      	sub	sp, #40	; 0x28
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	4313      	orrs	r3, r2
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4bb8      	ldr	r3, [pc, #736]	; (8006450 <UART_SetConfig+0x318>)
 800616e:	4013      	ands	r3, r2
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006176:	430b      	orrs	r3, r1
 8006178:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4aae      	ldr	r2, [pc, #696]	; (8006454 <UART_SetConfig+0x31c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a6:	4313      	orrs	r3, r2
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	430a      	orrs	r2, r1
 80061bc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4aa5      	ldr	r2, [pc, #660]	; (8006458 <UART_SetConfig+0x320>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d126      	bne.n	8006216 <UART_SetConfig+0xde>
 80061c8:	4ba4      	ldr	r3, [pc, #656]	; (800645c <UART_SetConfig+0x324>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d81a      	bhi.n	800620c <UART_SetConfig+0xd4>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0xa4>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	080061fd 	.word	0x080061fd
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	08006205 	.word	0x08006205
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e105      	b.n	8006400 <UART_SetConfig+0x2c8>
 80061f4:	2302      	movs	r3, #2
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e101      	b.n	8006400 <UART_SetConfig+0x2c8>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e0fd      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620a:	e0f9      	b.n	8006400 <UART_SetConfig+0x2c8>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006212:	bf00      	nop
 8006214:	e0f4      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a91      	ldr	r2, [pc, #580]	; (8006460 <UART_SetConfig+0x328>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d138      	bne.n	8006292 <UART_SetConfig+0x15a>
 8006220:	4b8e      	ldr	r3, [pc, #568]	; (800645c <UART_SetConfig+0x324>)
 8006222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	2b0c      	cmp	r3, #12
 800622c:	d82c      	bhi.n	8006288 <UART_SetConfig+0x150>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <UART_SetConfig+0xfc>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006269 	.word	0x08006269
 8006238:	08006289 	.word	0x08006289
 800623c:	08006289 	.word	0x08006289
 8006240:	08006289 	.word	0x08006289
 8006244:	08006279 	.word	0x08006279
 8006248:	08006289 	.word	0x08006289
 800624c:	08006289 	.word	0x08006289
 8006250:	08006289 	.word	0x08006289
 8006254:	08006271 	.word	0x08006271
 8006258:	08006289 	.word	0x08006289
 800625c:	08006289 	.word	0x08006289
 8006260:	08006289 	.word	0x08006289
 8006264:	08006281 	.word	0x08006281
 8006268:	2300      	movs	r3, #0
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e0c7      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e0c3      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627e:	e0bf      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006286:	e0bb      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628e:	bf00      	nop
 8006290:	e0b6      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a73      	ldr	r2, [pc, #460]	; (8006464 <UART_SetConfig+0x32c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d125      	bne.n	80062e8 <UART_SetConfig+0x1b0>
 800629c:	4b6f      	ldr	r3, [pc, #444]	; (800645c <UART_SetConfig+0x324>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062a6:	2b10      	cmp	r3, #16
 80062a8:	d011      	beq.n	80062ce <UART_SetConfig+0x196>
 80062aa:	2b10      	cmp	r3, #16
 80062ac:	d802      	bhi.n	80062b4 <UART_SetConfig+0x17c>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <UART_SetConfig+0x186>
 80062b2:	e014      	b.n	80062de <UART_SetConfig+0x1a6>
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d006      	beq.n	80062c6 <UART_SetConfig+0x18e>
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d00c      	beq.n	80062d6 <UART_SetConfig+0x19e>
 80062bc:	e00f      	b.n	80062de <UART_SetConfig+0x1a6>
 80062be:	2300      	movs	r3, #0
 80062c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c4:	e09c      	b.n	8006400 <UART_SetConfig+0x2c8>
 80062c6:	2302      	movs	r3, #2
 80062c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062cc:	e098      	b.n	8006400 <UART_SetConfig+0x2c8>
 80062ce:	2304      	movs	r3, #4
 80062d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d4:	e094      	b.n	8006400 <UART_SetConfig+0x2c8>
 80062d6:	2308      	movs	r3, #8
 80062d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062dc:	e090      	b.n	8006400 <UART_SetConfig+0x2c8>
 80062de:	2310      	movs	r3, #16
 80062e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e4:	bf00      	nop
 80062e6:	e08b      	b.n	8006400 <UART_SetConfig+0x2c8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a5e      	ldr	r2, [pc, #376]	; (8006468 <UART_SetConfig+0x330>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d125      	bne.n	800633e <UART_SetConfig+0x206>
 80062f2:	4b5a      	ldr	r3, [pc, #360]	; (800645c <UART_SetConfig+0x324>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d011      	beq.n	8006324 <UART_SetConfig+0x1ec>
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d802      	bhi.n	800630a <UART_SetConfig+0x1d2>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <UART_SetConfig+0x1dc>
 8006308:	e014      	b.n	8006334 <UART_SetConfig+0x1fc>
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d006      	beq.n	800631c <UART_SetConfig+0x1e4>
 800630e:	2bc0      	cmp	r3, #192	; 0xc0
 8006310:	d00c      	beq.n	800632c <UART_SetConfig+0x1f4>
 8006312:	e00f      	b.n	8006334 <UART_SetConfig+0x1fc>
 8006314:	2300      	movs	r3, #0
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631a:	e071      	b.n	8006400 <UART_SetConfig+0x2c8>
 800631c:	2302      	movs	r3, #2
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006322:	e06d      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632a:	e069      	b.n	8006400 <UART_SetConfig+0x2c8>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006332:	e065      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633a:	bf00      	nop
 800633c:	e060      	b.n	8006400 <UART_SetConfig+0x2c8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a4a      	ldr	r2, [pc, #296]	; (800646c <UART_SetConfig+0x334>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d129      	bne.n	800639c <UART_SetConfig+0x264>
 8006348:	4b44      	ldr	r3, [pc, #272]	; (800645c <UART_SetConfig+0x324>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006356:	d014      	beq.n	8006382 <UART_SetConfig+0x24a>
 8006358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635c:	d802      	bhi.n	8006364 <UART_SetConfig+0x22c>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d007      	beq.n	8006372 <UART_SetConfig+0x23a>
 8006362:	e016      	b.n	8006392 <UART_SetConfig+0x25a>
 8006364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006368:	d007      	beq.n	800637a <UART_SetConfig+0x242>
 800636a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636e:	d00c      	beq.n	800638a <UART_SetConfig+0x252>
 8006370:	e00f      	b.n	8006392 <UART_SetConfig+0x25a>
 8006372:	2300      	movs	r3, #0
 8006374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006378:	e042      	b.n	8006400 <UART_SetConfig+0x2c8>
 800637a:	2302      	movs	r3, #2
 800637c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006380:	e03e      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006382:	2304      	movs	r3, #4
 8006384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006388:	e03a      	b.n	8006400 <UART_SetConfig+0x2c8>
 800638a:	2308      	movs	r3, #8
 800638c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006390:	e036      	b.n	8006400 <UART_SetConfig+0x2c8>
 8006392:	2310      	movs	r3, #16
 8006394:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006398:	bf00      	nop
 800639a:	e031      	b.n	8006400 <UART_SetConfig+0x2c8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2c      	ldr	r2, [pc, #176]	; (8006454 <UART_SetConfig+0x31c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d129      	bne.n	80063fa <UART_SetConfig+0x2c2>
 80063a6:	4b2d      	ldr	r3, [pc, #180]	; (800645c <UART_SetConfig+0x324>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b4:	d014      	beq.n	80063e0 <UART_SetConfig+0x2a8>
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ba:	d802      	bhi.n	80063c2 <UART_SetConfig+0x28a>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <UART_SetConfig+0x298>
 80063c0:	e016      	b.n	80063f0 <UART_SetConfig+0x2b8>
 80063c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c6:	d007      	beq.n	80063d8 <UART_SetConfig+0x2a0>
 80063c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063cc:	d00c      	beq.n	80063e8 <UART_SetConfig+0x2b0>
 80063ce:	e00f      	b.n	80063f0 <UART_SetConfig+0x2b8>
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d6:	e013      	b.n	8006400 <UART_SetConfig+0x2c8>
 80063d8:	2302      	movs	r3, #2
 80063da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063de:	e00f      	b.n	8006400 <UART_SetConfig+0x2c8>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e6:	e00b      	b.n	8006400 <UART_SetConfig+0x2c8>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ee:	e007      	b.n	8006400 <UART_SetConfig+0x2c8>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f6:	bf00      	nop
 80063f8:	e002      	b.n	8006400 <UART_SetConfig+0x2c8>
 80063fa:	2310      	movs	r3, #16
 80063fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a13      	ldr	r2, [pc, #76]	; (8006454 <UART_SetConfig+0x31c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f040 80fe 	bne.w	8006608 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800640c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006410:	2b08      	cmp	r3, #8
 8006412:	d837      	bhi.n	8006484 <UART_SetConfig+0x34c>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x2e4>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006441 	.word	0x08006441
 8006420:	08006485 	.word	0x08006485
 8006424:	08006449 	.word	0x08006449
 8006428:	08006485 	.word	0x08006485
 800642c:	08006475 	.word	0x08006475
 8006430:	08006485 	.word	0x08006485
 8006434:	08006485 	.word	0x08006485
 8006438:	08006485 	.word	0x08006485
 800643c:	0800647d 	.word	0x0800647d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fe fd30 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8006444:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006446:	e020      	b.n	800648a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <UART_SetConfig+0x338>)
 800644a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800644c:	e01d      	b.n	800648a <UART_SetConfig+0x352>
 800644e:	bf00      	nop
 8006450:	efff69f3 	.word	0xefff69f3
 8006454:	40008000 	.word	0x40008000
 8006458:	40013800 	.word	0x40013800
 800645c:	40021000 	.word	0x40021000
 8006460:	40004400 	.word	0x40004400
 8006464:	40004800 	.word	0x40004800
 8006468:	40004c00 	.word	0x40004c00
 800646c:	40005000 	.word	0x40005000
 8006470:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006474:	f7fe fc80 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 8006478:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800647a:	e006      	b.n	800648a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800647c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006480:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006482:	e002      	b.n	800648a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	76fb      	strb	r3, [r7, #27]
        break;
 8006488:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 81b9 	beq.w	8006804 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d305      	bcc.n	80064ae <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d902      	bls.n	80064b4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	76fb      	strb	r3, [r7, #27]
 80064b2:	e1a7      	b.n	8006804 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80064b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	f200 8092 	bhi.w	80065e2 <UART_SetConfig+0x4aa>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x38c>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080065e3 	.word	0x080065e3
 80064cc:	08006537 	.word	0x08006537
 80064d0:	080065e3 	.word	0x080065e3
 80064d4:	0800656b 	.word	0x0800656b
 80064d8:	080065e3 	.word	0x080065e3
 80064dc:	080065e3 	.word	0x080065e3
 80064e0:	080065e3 	.word	0x080065e3
 80064e4:	080065b9 	.word	0x080065b9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fe fcdc 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 80064ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4619      	mov	r1, r3
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	f04f 0400 	mov.w	r4, #0
 80064fe:	0214      	lsls	r4, r2, #8
 8006500:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006504:	020b      	lsls	r3, r1, #8
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6852      	ldr	r2, [r2, #4]
 800650a:	0852      	lsrs	r2, r2, #1
 800650c:	4611      	mov	r1, r2
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	eb13 0b01 	adds.w	fp, r3, r1
 8006516:	eb44 0c02 	adc.w	ip, r4, r2
 800651a:	4658      	mov	r0, fp
 800651c:	4661      	mov	r1, ip
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f04f 0400 	mov.w	r4, #0
 8006526:	461a      	mov	r2, r3
 8006528:	4623      	mov	r3, r4
 800652a:	f7f9 fea9 	bl	8000280 <__aeabi_uldivmod>
 800652e:	4603      	mov	r3, r0
 8006530:	460c      	mov	r4, r1
 8006532:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006534:	e058      	b.n	80065e8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	f04f 0400 	mov.w	r4, #0
 8006540:	49ae      	ldr	r1, [pc, #696]	; (80067fc <UART_SetConfig+0x6c4>)
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	eb13 0b01 	adds.w	fp, r3, r1
 800654a:	eb44 0c02 	adc.w	ip, r4, r2
 800654e:	4658      	mov	r0, fp
 8006550:	4661      	mov	r1, ip
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f04f 0400 	mov.w	r4, #0
 800655a:	461a      	mov	r2, r3
 800655c:	4623      	mov	r3, r4
 800655e:	f7f9 fe8f 	bl	8000280 <__aeabi_uldivmod>
 8006562:	4603      	mov	r3, r0
 8006564:	460c      	mov	r4, r1
 8006566:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006568:	e03e      	b.n	80065e8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800656a:	f7fe fc05 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 800656e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4619      	mov	r1, r3
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	f04f 0400 	mov.w	r4, #0
 8006580:	0214      	lsls	r4, r2, #8
 8006582:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006586:	020b      	lsls	r3, r1, #8
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6852      	ldr	r2, [r2, #4]
 800658c:	0852      	lsrs	r2, r2, #1
 800658e:	4611      	mov	r1, r2
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	eb13 0b01 	adds.w	fp, r3, r1
 8006598:	eb44 0c02 	adc.w	ip, r4, r2
 800659c:	4658      	mov	r0, fp
 800659e:	4661      	mov	r1, ip
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f04f 0400 	mov.w	r4, #0
 80065a8:	461a      	mov	r2, r3
 80065aa:	4623      	mov	r3, r4
 80065ac:	f7f9 fe68 	bl	8000280 <__aeabi_uldivmod>
 80065b0:	4603      	mov	r3, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80065b6:	e017      	b.n	80065e8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	f04f 0400 	mov.w	r4, #0
 80065c2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80065c6:	f144 0100 	adc.w	r1, r4, #0
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f04f 0400 	mov.w	r4, #0
 80065d2:	461a      	mov	r2, r3
 80065d4:	4623      	mov	r3, r4
 80065d6:	f7f9 fe53 	bl	8000280 <__aeabi_uldivmod>
 80065da:	4603      	mov	r3, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80065e0:	e002      	b.n	80065e8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	76fb      	strb	r3, [r7, #27]
            break;
 80065e6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ee:	d308      	bcc.n	8006602 <UART_SetConfig+0x4ca>
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f6:	d204      	bcs.n	8006602 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	60da      	str	r2, [r3, #12]
 8006600:	e100      	b.n	8006804 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	76fb      	strb	r3, [r7, #27]
 8006606:	e0fd      	b.n	8006804 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006610:	f040 8084 	bne.w	800671c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006614:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006618:	2b08      	cmp	r3, #8
 800661a:	d85f      	bhi.n	80066dc <UART_SetConfig+0x5a4>
 800661c:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <UART_SetConfig+0x4ec>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	08006649 	.word	0x08006649
 8006628:	08006669 	.word	0x08006669
 800662c:	08006689 	.word	0x08006689
 8006630:	080066dd 	.word	0x080066dd
 8006634:	080066a5 	.word	0x080066a5
 8006638:	080066dd 	.word	0x080066dd
 800663c:	080066dd 	.word	0x080066dd
 8006640:	080066dd 	.word	0x080066dd
 8006644:	080066c5 	.word	0x080066c5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006648:	f7fe fc2c 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 800664c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	005a      	lsls	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	441a      	add	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006662:	b29b      	uxth	r3, r3
 8006664:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006666:	e03c      	b.n	80066e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006668:	f7fe fc32 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 800666c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	005a      	lsls	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	441a      	add	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	b29b      	uxth	r3, r3
 8006684:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006686:	e02c      	b.n	80066e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006692:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6852      	ldr	r2, [r2, #4]
 800669a:	fbb3 f3f2 	udiv	r3, r3, r2
 800669e:	b29b      	uxth	r3, r3
 80066a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066a2:	e01e      	b.n	80066e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a4:	f7fe fb68 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 80066a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	005a      	lsls	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	441a      	add	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	b29b      	uxth	r3, r3
 80066c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066c2:	e00e      	b.n	80066e2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066da:	e002      	b.n	80066e2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	76fb      	strb	r3, [r7, #27]
        break;
 80066e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b0f      	cmp	r3, #15
 80066e6:	d916      	bls.n	8006716 <UART_SetConfig+0x5de>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ee:	d212      	bcs.n	8006716 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f023 030f 	bic.w	r3, r3, #15
 80066f8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	085b      	lsrs	r3, r3, #1
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	b29a      	uxth	r2, r3
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	4313      	orrs	r3, r2
 800670a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	89fa      	ldrh	r2, [r7, #14]
 8006712:	60da      	str	r2, [r3, #12]
 8006714:	e076      	b.n	8006804 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	76fb      	strb	r3, [r7, #27]
 800671a:	e073      	b.n	8006804 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800671c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006720:	2b08      	cmp	r3, #8
 8006722:	d85c      	bhi.n	80067de <UART_SetConfig+0x6a6>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <UART_SetConfig+0x5f4>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006751 	.word	0x08006751
 8006730:	0800676f 	.word	0x0800676f
 8006734:	0800678d 	.word	0x0800678d
 8006738:	080067df 	.word	0x080067df
 800673c:	080067a9 	.word	0x080067a9
 8006740:	080067df 	.word	0x080067df
 8006744:	080067df 	.word	0x080067df
 8006748:	080067df 	.word	0x080067df
 800674c:	080067c7 	.word	0x080067c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006750:	f7fe fba8 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8006754:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	085a      	lsrs	r2, r3, #1
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	441a      	add	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	b29b      	uxth	r3, r3
 800676a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800676c:	e03a      	b.n	80067e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676e:	f7fe fbaf 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 8006772:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	085a      	lsrs	r2, r3, #1
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	441a      	add	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800678a:	e02b      	b.n	80067e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	085b      	lsrs	r3, r3, #1
 8006792:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006796:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6852      	ldr	r2, [r2, #4]
 800679e:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067a6:	e01d      	b.n	80067e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a8:	f7fe fae6 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 80067ac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	085a      	lsrs	r2, r3, #1
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	441a      	add	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067c4:	e00e      	b.n	80067e4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	085b      	lsrs	r3, r3, #1
 80067cc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	b29b      	uxth	r3, r3
 80067da:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067dc:	e002      	b.n	80067e4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	76fb      	strb	r3, [r7, #27]
        break;
 80067e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	2b0f      	cmp	r3, #15
 80067e8:	d90a      	bls.n	8006800 <UART_SetConfig+0x6c8>
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f0:	d206      	bcs.n	8006800 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	e003      	b.n	8006804 <UART_SetConfig+0x6cc>
 80067fc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006810:	7efb      	ldrb	r3, [r7, #27]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3728      	adds	r7, #40	; 0x28
 8006816:	46bd      	mov	sp, r7
 8006818:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800681c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01a      	beq.n	8006932 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800691a:	d10a      	bne.n	8006932 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	605a      	str	r2, [r3, #4]
  }
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af02      	add	r7, sp, #8
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800696e:	f7fb fc2f 	bl	80021d0 <HAL_GetTick>
 8006972:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b08      	cmp	r3, #8
 8006980:	d10e      	bne.n	80069a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006982:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f82a 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e020      	b.n	80069e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d10e      	bne.n	80069cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f814 	bl	80069ea <UART_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e00a      	b.n	80069e2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2220      	movs	r2, #32
 80069d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	60f8      	str	r0, [r7, #12]
 80069f2:	60b9      	str	r1, [r7, #8]
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	4613      	mov	r3, r2
 80069f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069fa:	e05d      	b.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d059      	beq.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a04:	f7fb fbe4 	bl	80021d0 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d11b      	bne.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a28:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e042      	b.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d02b      	beq.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a6e:	d123      	bne.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a78:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a88:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e00f      	b.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69da      	ldr	r2, [r3, #28]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	bf0c      	ite	eq
 8006ac8:	2301      	moveq	r3, #1
 8006aca:	2300      	movne	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d092      	beq.n	80069fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	f107 001c 	add.w	r0, r7, #28
 8006aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d122      	bne.n	8006b3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d105      	bne.n	8006b32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa28 	bl	8006f88 <USB_CoreReset>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
 8006b3c:	e01a      	b.n	8006b74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa1c 	bl	8006f88 <USB_CoreReset>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
 8006b66:	e005      	b.n	8006b74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b80:	b004      	add	sp, #16
 8006b82:	4770      	bx	lr

08006b84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f023 0201 	bic.w	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d106      	bne.n	8006bd2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	60da      	str	r2, [r3, #12]
 8006bd0:	e00b      	b.n	8006bea <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]
 8006be4:	e001      	b.n	8006bea <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e003      	b.n	8006bf2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006bea:	2032      	movs	r0, #50	; 0x32
 8006bec:	f7fb fafc 	bl	80021e8 <HAL_Delay>

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	e009      	b.n	8006c30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	3340      	adds	r3, #64	; 0x40
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	2200      	movs	r2, #0
 8006c28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b0e      	cmp	r3, #14
 8006c34:	d9f2      	bls.n	8006c1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11c      	bne.n	8006c76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c4a:	f043 0302 	orr.w	r3, r3, #2
 8006c4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e005      	b.n	8006c82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c94:	4619      	mov	r1, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	680b      	ldr	r3, [r1, #0]
 8006ca0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ca2:	2103      	movs	r1, #3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f93d 	bl	8006f24 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006caa:	2110      	movs	r1, #16
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8f1 	bl	8006e94 <USB_FlushTxFifo>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f90f 	bl	8006ee0 <USB_FlushRxFifo>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cde:	461a      	mov	r2, r3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cea:	461a      	mov	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	e043      	b.n	8006d7e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0c:	d118      	bne.n	8006d40 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	461a      	mov	r2, r3
 8006d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d26:	6013      	str	r3, [r2, #0]
 8006d28:	e013      	b.n	8006d52 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d36:	461a      	mov	r2, r3
 8006d38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e008      	b.n	8006d52 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	461a      	mov	r2, r3
 8006d60:	2300      	movs	r3, #0
 8006d62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	461a      	mov	r2, r3
 8006d72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d3b7      	bcc.n	8006cf6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
 8006d8a:	e043      	b.n	8006e14 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006da2:	d118      	bne.n	8006dd6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	461a      	mov	r2, r3
 8006db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e013      	b.n	8006de8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	e008      	b.n	8006de8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	461a      	mov	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df4:	461a      	mov	r2, r3
 8006df6:	2300      	movs	r3, #0
 8006df8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e06:	461a      	mov	r2, r3
 8006e08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3301      	adds	r3, #1
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d3b7      	bcc.n	8006d8c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f043 0210 	orr.w	r2, r3, #16
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <USB_DevInit+0x294>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	f043 0208 	orr.w	r2, r3, #8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e76:	f043 0304 	orr.w	r3, r3, #4
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e8a:	b004      	add	sp, #16
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	803c3800 	.word	0x803c3800

08006e94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	019b      	lsls	r3, r3, #6
 8006ea6:	f043 0220 	orr.w	r2, r3, #32
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4a09      	ldr	r2, [pc, #36]	; (8006edc <USB_FlushTxFifo+0x48>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d901      	bls.n	8006ec0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e006      	b.n	8006ece <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d0f0      	beq.n	8006eae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	00030d40 	.word	0x00030d40

08006ee0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2210      	movs	r2, #16
 8006ef0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <USB_FlushRxFifo+0x40>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d901      	bls.n	8006f04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e006      	b.n	8006f12 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b10      	cmp	r3, #16
 8006f0e:	d0f0      	beq.n	8006ef2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	00030d40 	.word	0x00030d40

08006f24 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f44:	4313      	orrs	r3, r2
 8006f46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f70:	f043 0302 	orr.w	r3, r3, #2
 8006f74:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006f76:	2003      	movs	r0, #3
 8006f78:	f7fb f936 	bl	80021e8 <HAL_Delay>

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4a13      	ldr	r2, [pc, #76]	; (8006fec <USB_CoreReset+0x64>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e01b      	b.n	8006fde <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	daf2      	bge.n	8006f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f043 0201 	orr.w	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <USB_CoreReset+0x64>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d901      	bls.n	8006fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e006      	b.n	8006fde <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d0f0      	beq.n	8006fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	00030d40 	.word	0x00030d40

08006ff0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007002:	2b84      	cmp	r3, #132	; 0x84
 8007004:	d005      	beq.n	8007012 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007006:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	3303      	adds	r3, #3
 8007010:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007026:	f3ef 8305 	mrs	r3, IPSR
 800702a:	607b      	str	r3, [r7, #4]
  return(result);
 800702c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800702e:	2b00      	cmp	r3, #0
 8007030:	bf14      	ite	ne
 8007032:	2301      	movne	r3, #1
 8007034:	2300      	moveq	r3, #0
 8007036:	b2db      	uxtb	r3, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007048:	f001 f9e6 	bl	8008418 <vTaskStartScheduler>
  
  return osOK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	bd80      	pop	{r7, pc}

08007052 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007054:	b089      	sub	sp, #36	; 0x24
 8007056:	af04      	add	r7, sp, #16
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d020      	beq.n	80070a6 <osThreadCreate+0x54>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01c      	beq.n	80070a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685c      	ldr	r4, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681d      	ldr	r5, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691e      	ldr	r6, [r3, #16]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ffb6 	bl	8006ff0 <makeFreeRtosPriority>
 8007084:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800708e:	9202      	str	r2, [sp, #8]
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	9100      	str	r1, [sp, #0]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	4632      	mov	r2, r6
 8007098:	4629      	mov	r1, r5
 800709a:	4620      	mov	r0, r4
 800709c:	f000 fff9 	bl	8008092 <xTaskCreateStatic>
 80070a0:	4603      	mov	r3, r0
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e01c      	b.n	80070e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685c      	ldr	r4, [r3, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070b2:	b29e      	uxth	r6, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff ff98 	bl	8006ff0 <makeFreeRtosPriority>
 80070c0:	4602      	mov	r2, r0
 80070c2:	f107 030c 	add.w	r3, r7, #12
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	9200      	str	r2, [sp, #0]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	4632      	mov	r2, r6
 80070ce:	4629      	mov	r1, r5
 80070d0:	4620      	mov	r0, r4
 80070d2:	f001 f838 	bl	8008146 <xTaskCreate>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d001      	beq.n	80070e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	e000      	b.n	80070e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80070e0:	68fb      	ldr	r3, [r7, #12]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <osDelay+0x16>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e000      	b.n	8007102 <osDelay+0x18>
 8007100:	2301      	movs	r3, #1
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f954 	bl	80083b0 <vTaskDelay>
  
  return osOK;
 8007108:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	4619      	mov	r1, r3
 8007128:	2001      	movs	r0, #1
 800712a:	f000 fb66 	bl	80077fa <xQueueCreateMutexStatic>
 800712e:	4603      	mov	r3, r0
 8007130:	e003      	b.n	800713a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007132:	2001      	movs	r0, #1
 8007134:	f000 fb49 	bl	80077ca <xQueueCreateMutex>
 8007138:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800713a:	4618      	mov	r0, r3
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800714e:	2300      	movs	r3, #0
 8007150:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <osMutexWait+0x18>
    return osErrorParameter;
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	e03a      	b.n	80071d2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d103      	bne.n	8007170 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007168:	f04f 33ff 	mov.w	r3, #4294967295
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	e009      	b.n	8007184 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d006      	beq.n	8007184 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <osMutexWait+0x40>
      ticks = 1;
 8007180:	2301      	movs	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007184:	f7ff ff4c 	bl	8007020 <inHandlerMode>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d017      	beq.n	80071be <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800718e:	f107 0308 	add.w	r3, r7, #8
 8007192:	461a      	mov	r2, r3
 8007194:	2100      	movs	r1, #0
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fdd6 	bl	8007d48 <xQueueReceiveFromISR>
 800719c:	4603      	mov	r3, r0
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d001      	beq.n	80071a6 <osMutexWait+0x62>
      return osErrorOS;
 80071a2:	23ff      	movs	r3, #255	; 0xff
 80071a4:	e015      	b.n	80071d2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d011      	beq.n	80071d0 <osMutexWait+0x8c>
 80071ac:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <osMutexWait+0x98>)
 80071ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	e008      	b.n	80071d0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fcb9 	bl	8007b38 <xQueueSemaphoreTake>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d001      	beq.n	80071d0 <osMutexWait+0x8c>
    return osErrorOS;
 80071cc:	23ff      	movs	r3, #255	; 0xff
 80071ce:	e000      	b.n	80071d2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	e000ed04 	.word	0xe000ed04

080071e0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80071f0:	f7ff ff16 	bl	8007020 <inHandlerMode>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d016      	beq.n	8007228 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80071fa:	f107 0308 	add.w	r3, r7, #8
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fc0f 	bl	8007a24 <xQueueGiveFromISR>
 8007206:	4603      	mov	r3, r0
 8007208:	2b01      	cmp	r3, #1
 800720a:	d001      	beq.n	8007210 <osMutexRelease+0x30>
      return osErrorOS;
 800720c:	23ff      	movs	r3, #255	; 0xff
 800720e:	e017      	b.n	8007240 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d013      	beq.n	800723e <osMutexRelease+0x5e>
 8007216:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <osMutexRelease+0x68>)
 8007218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	e00a      	b.n	800723e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007228:	2300      	movs	r3, #0
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fafe 	bl	8007830 <xQueueGenericSend>
 8007234:	4603      	mov	r3, r0
 8007236:	2b01      	cmp	r3, #1
 8007238:	d001      	beq.n	800723e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800723a:	23ff      	movs	r3, #255	; 0xff
 800723c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800723e:	68fb      	ldr	r3, [r7, #12]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af02      	add	r7, sp, #8
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d010      	beq.n	8007280 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d10b      	bne.n	800727c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	2303      	movs	r3, #3
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	4613      	mov	r3, r2
 800726e:	2200      	movs	r2, #0
 8007270:	2100      	movs	r1, #0
 8007272:	2001      	movs	r0, #1
 8007274:	f000 f9be 	bl	80075f4 <xQueueGenericCreateStatic>
 8007278:	4603      	mov	r3, r0
 800727a:	e016      	b.n	80072aa <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	e014      	b.n	80072aa <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d110      	bne.n	80072a8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8007286:	2203      	movs	r2, #3
 8007288:	2100      	movs	r1, #0
 800728a:	2001      	movs	r0, #1
 800728c:	f000 fa25 	bl	80076da <xQueueGenericCreate>
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <osSemaphoreCreate+0x58>
 8007298:	2300      	movs	r3, #0
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fac6 	bl	8007830 <xQueueGenericSend>
      return sema;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	e000      	b.n	80072aa <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80072a8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80072c8:	2380      	movs	r3, #128	; 0x80
 80072ca:	e03a      	b.n	8007342 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d6:	d103      	bne.n	80072e0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80072d8:	f04f 33ff 	mov.w	r3, #4294967295
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	e009      	b.n	80072f4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <osSemaphoreWait+0x40>
      ticks = 1;
 80072f0:	2301      	movs	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80072f4:	f7ff fe94 	bl	8007020 <inHandlerMode>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d017      	beq.n	800732e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	461a      	mov	r2, r3
 8007304:	2100      	movs	r1, #0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fd1e 	bl	8007d48 <xQueueReceiveFromISR>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d001      	beq.n	8007316 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007312:	23ff      	movs	r3, #255	; 0xff
 8007314:	e015      	b.n	8007342 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d011      	beq.n	8007340 <osSemaphoreWait+0x8c>
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <osSemaphoreWait+0x98>)
 800731e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	e008      	b.n	8007340 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fc01 	bl	8007b38 <xQueueSemaphoreTake>
 8007336:	4603      	mov	r3, r0
 8007338:	2b01      	cmp	r3, #1
 800733a:	d001      	beq.n	8007340 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800733c:	23ff      	movs	r3, #255	; 0xff
 800733e:	e000      	b.n	8007342 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007360:	f7ff fe5e 	bl	8007020 <inHandlerMode>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800736a:	f107 0308 	add.w	r3, r7, #8
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fb57 	bl	8007a24 <xQueueGiveFromISR>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	d001      	beq.n	8007380 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800737c:	23ff      	movs	r3, #255	; 0xff
 800737e:	e017      	b.n	80073b0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <osSemaphoreRelease+0x5e>
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <osSemaphoreRelease+0x68>)
 8007388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	e00a      	b.n	80073ae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007398:	2300      	movs	r3, #0
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fa46 	bl	8007830 <xQueueGenericSend>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d001      	beq.n	80073ae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80073aa:	23ff      	movs	r3, #255	; 0xff
 80073ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f103 0208 	add.w	r2, r3, #8
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295
 80073d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f103 0208 	add.w	r2, r3, #8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f103 0208 	add.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007416:	b480      	push	{r7}
 8007418:	b085      	sub	sp, #20
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d103      	bne.n	800747e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	60fb      	str	r3, [r7, #12]
 800747c:	e00c      	b.n	8007498 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3308      	adds	r3, #8
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e002      	b.n	800748c <vListInsert+0x2e>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	429a      	cmp	r2, r3
 8007496:	d2f6      	bcs.n	8007486 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6892      	ldr	r2, [r2, #8]
 80074e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6852      	ldr	r2, [r2, #4]
 80074f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d103      	bne.n	8007504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	1e5a      	subs	r2, r3, #1
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	e7fe      	b.n	800754a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800754c:	f001 feb6 	bl	80092bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007558:	68f9      	ldr	r1, [r7, #12]
 800755a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	441a      	add	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	3b01      	subs	r3, #1
 800757e:	68f9      	ldr	r1, [r7, #12]
 8007580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007582:	fb01 f303 	mul.w	r3, r1, r3
 8007586:	441a      	add	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	22ff      	movs	r2, #255	; 0xff
 8007590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	22ff      	movs	r2, #255	; 0xff
 8007598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d114      	bne.n	80075cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01a      	beq.n	80075e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3310      	adds	r3, #16
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f970 	bl	8008894 <xTaskRemoveFromEventList>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d012      	beq.n	80075e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075ba:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <xQueueGenericReset+0xcc>)
 80075bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	e009      	b.n	80075e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3310      	adds	r3, #16
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fef3 	bl	80073bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3324      	adds	r3, #36	; 0x24
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff feee 	bl	80073bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075e0:	f001 fe9a 	bl	8009318 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075e4:	2301      	movs	r3, #1
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08e      	sub	sp, #56	; 0x38
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <xQueueGenericCreateStatic+0x28>
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	f383 8811 	msr	BASEPRI, r3
 8007610:	f3bf 8f6f 	isb	sy
 8007614:	f3bf 8f4f 	dsb	sy
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
 800761a:	e7fe      	b.n	800761a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <xQueueGenericCreateStatic+0x42>
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
 8007634:	e7fe      	b.n	8007634 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <xQueueGenericCreateStatic+0x4e>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <xQueueGenericCreateStatic+0x52>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericCreateStatic+0x54>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <xQueueGenericCreateStatic+0x6c>
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	623b      	str	r3, [r7, #32]
 800765e:	e7fe      	b.n	800765e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <xQueueGenericCreateStatic+0x78>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <xQueueGenericCreateStatic+0x7c>
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <xQueueGenericCreateStatic+0x7e>
 8007670:	2300      	movs	r3, #0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <xQueueGenericCreateStatic+0x96>
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	e7fe      	b.n	8007688 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800768a:	2348      	movs	r3, #72	; 0x48
 800768c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b48      	cmp	r3, #72	; 0x48
 8007692:	d009      	beq.n	80076a8 <xQueueGenericCreateStatic+0xb4>
 8007694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e7fe      	b.n	80076a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00d      	beq.n	80076d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f844 	bl	8007758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3730      	adds	r7, #48	; 0x30
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b08a      	sub	sp, #40	; 0x28
 80076de:	af02      	add	r7, sp, #8
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	4613      	mov	r3, r2
 80076e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d109      	bne.n	8007702 <xQueueGenericCreate+0x28>
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	e7fe      	b.n	8007700 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007708:	2300      	movs	r3, #0
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e004      	b.n	8007718 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	fb02 f303 	mul.w	r3, r2, r3
 8007716:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	3348      	adds	r3, #72	; 0x48
 800771c:	4618      	mov	r0, r3
 800771e:	f001 fee7 	bl	80094f0 <pvPortMalloc>
 8007722:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d011      	beq.n	800774e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	3348      	adds	r3, #72	; 0x48
 8007732:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800773c:	79fa      	ldrb	r2, [r7, #7]
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	4613      	mov	r3, r2
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	68b9      	ldr	r1, [r7, #8]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f805 	bl	8007758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800774e:	69bb      	ldr	r3, [r7, #24]
	}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	e002      	b.n	800777a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007786:	2101      	movs	r1, #1
 8007788:	69b8      	ldr	r0, [r7, #24]
 800778a:	f7ff fecb 	bl	8007524 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00e      	beq.n	80077c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077b6:	2300      	movs	r3, #0
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f837 	bl	8007830 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b086      	sub	sp, #24
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	4603      	mov	r3, r0
 80077d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	461a      	mov	r2, r3
 80077e0:	6939      	ldr	r1, [r7, #16]
 80077e2:	6978      	ldr	r0, [r7, #20]
 80077e4:	f7ff ff79 	bl	80076da <xQueueGenericCreate>
 80077e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff ffd3 	bl	8007796 <prvInitialiseMutex>

		return xNewQueue;
 80077f0:	68fb      	ldr	r3, [r7, #12]
	}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b088      	sub	sp, #32
 80077fe:	af02      	add	r7, sp, #8
 8007800:	4603      	mov	r3, r0
 8007802:	6039      	str	r1, [r7, #0]
 8007804:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007806:	2301      	movs	r3, #1
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	2300      	movs	r3, #0
 800780c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2200      	movs	r2, #0
 8007816:	6939      	ldr	r1, [r7, #16]
 8007818:	6978      	ldr	r0, [r7, #20]
 800781a:	f7ff feeb 	bl	80075f4 <xQueueGenericCreateStatic>
 800781e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7ff ffb8 	bl	8007796 <prvInitialiseMutex>

		return xNewQueue;
 8007826:	68fb      	ldr	r3, [r7, #12]
	}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08e      	sub	sp, #56	; 0x38
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800783e:	2300      	movs	r3, #0
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	2b00      	cmp	r3, #0
 800784a:	d109      	bne.n	8007860 <xQueueGenericSend+0x30>
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	62bb      	str	r3, [r7, #40]	; 0x28
 800785e:	e7fe      	b.n	800785e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d103      	bne.n	800786e <xQueueGenericSend+0x3e>
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <xQueueGenericSend+0x42>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <xQueueGenericSend+0x44>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <xQueueGenericSend+0x5c>
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
 800788a:	e7fe      	b.n	800788a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d103      	bne.n	800789a <xQueueGenericSend+0x6a>
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <xQueueGenericSend+0x6e>
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <xQueueGenericSend+0x70>
 800789e:	2300      	movs	r3, #0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <xQueueGenericSend+0x88>
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	623b      	str	r3, [r7, #32]
 80078b6:	e7fe      	b.n	80078b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b8:	f001 f9a2 	bl	8008c00 <xTaskGetSchedulerState>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <xQueueGenericSend+0x98>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <xQueueGenericSend+0x9c>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e000      	b.n	80078ce <xQueueGenericSend+0x9e>
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <xQueueGenericSend+0xb6>
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	e7fe      	b.n	80078e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e6:	f001 fce9 	bl	80092bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d302      	bcc.n	80078fc <xQueueGenericSend+0xcc>
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d129      	bne.n	8007950 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007902:	f000 fab6 	bl	8007e72 <prvCopyDataToQueue>
 8007906:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d010      	beq.n	8007932 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	3324      	adds	r3, #36	; 0x24
 8007914:	4618      	mov	r0, r3
 8007916:	f000 ffbd 	bl	8008894 <xTaskRemoveFromEventList>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d013      	beq.n	8007948 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007920:	4b3f      	ldr	r3, [pc, #252]	; (8007a20 <xQueueGenericSend+0x1f0>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	e00a      	b.n	8007948 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007938:	4b39      	ldr	r3, [pc, #228]	; (8007a20 <xQueueGenericSend+0x1f0>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007948:	f001 fce6 	bl	8009318 <vPortExitCritical>
				return pdPASS;
 800794c:	2301      	movs	r3, #1
 800794e:	e063      	b.n	8007a18 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d103      	bne.n	800795e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007956:	f001 fcdf 	bl	8009318 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800795a:	2300      	movs	r3, #0
 800795c:	e05c      	b.n	8007a18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800795e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007964:	f107 0314 	add.w	r3, r7, #20
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fff5 	bl	8008958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800796e:	2301      	movs	r3, #1
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007972:	f001 fcd1 	bl	8009318 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007976:	f000 fdad 	bl	80084d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800797a:	f001 fc9f 	bl	80092bc <vPortEnterCritical>
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007984:	b25b      	sxtb	r3, r3
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d103      	bne.n	8007994 <xQueueGenericSend+0x164>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800799a:	b25b      	sxtb	r3, r3
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a0:	d103      	bne.n	80079aa <xQueueGenericSend+0x17a>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079aa:	f001 fcb5 	bl	8009318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079ae:	1d3a      	adds	r2, r7, #4
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	4611      	mov	r1, r2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 ffe4 	bl	8008984 <xTaskCheckForTimeOut>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d124      	bne.n	8007a0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c4:	f000 fb4d 	bl	8008062 <prvIsQueueFull>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d018      	beq.n	8007a00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	3310      	adds	r3, #16
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 ff38 	bl	800884c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079de:	f000 fad8 	bl	8007f92 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079e2:	f000 fd85 	bl	80084f0 <xTaskResumeAll>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f af7c 	bne.w	80078e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80079ee:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <xQueueGenericSend+0x1f0>)
 80079f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	e772      	b.n	80078e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a02:	f000 fac6 	bl	8007f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a06:	f000 fd73 	bl	80084f0 <xTaskResumeAll>
 8007a0a:	e76c      	b.n	80078e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a0e:	f000 fac0 	bl	8007f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a12:	f000 fd6d 	bl	80084f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3738      	adds	r7, #56	; 0x38
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08e      	sub	sp, #56	; 0x38
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d109      	bne.n	8007a4c <xQueueGiveFromISR+0x28>
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	623b      	str	r3, [r7, #32]
 8007a4a:	e7fe      	b.n	8007a4a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d009      	beq.n	8007a68 <xQueueGiveFromISR+0x44>
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	61fb      	str	r3, [r7, #28]
 8007a66:	e7fe      	b.n	8007a66 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <xQueueGiveFromISR+0x54>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <xQueueGiveFromISR+0x58>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <xQueueGiveFromISR+0x5a>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <xQueueGiveFromISR+0x72>
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	e7fe      	b.n	8007a94 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a96:	f001 fced 	bl	8009474 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	617a      	str	r2, [r7, #20]
 8007ab0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ab2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d22b      	bcs.n	8007b1e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	1c5a      	adds	r2, r3, #1
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d112      	bne.n	8007b08 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d016      	beq.n	8007b18 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	3324      	adds	r3, #36	; 0x24
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fed0 	bl	8008894 <xTaskRemoveFromEventList>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00e      	beq.n	8007b18 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2201      	movs	r2, #1
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	e007      	b.n	8007b18 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	b25a      	sxtb	r2, r3
 8007b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	e001      	b.n	8007b22 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3738      	adds	r7, #56	; 0x38
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08e      	sub	sp, #56	; 0x38
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d109      	bne.n	8007b68 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	e7fe      	b.n	8007b66 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <xQueueSemaphoreTake+0x4c>
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	61fb      	str	r3, [r7, #28]
 8007b82:	e7fe      	b.n	8007b82 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b84:	f001 f83c 	bl	8008c00 <xTaskGetSchedulerState>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d102      	bne.n	8007b94 <xQueueSemaphoreTake+0x5c>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <xQueueSemaphoreTake+0x60>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e000      	b.n	8007b9a <xQueueSemaphoreTake+0x62>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <xQueueSemaphoreTake+0x7a>
 8007b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	61bb      	str	r3, [r7, #24]
 8007bb0:	e7fe      	b.n	8007bb0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bb2:	f001 fb83 	bl	80092bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d024      	beq.n	8007c0c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc4:	1e5a      	subs	r2, r3, #1
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bd2:	f001 f9cf 	bl	8008f74 <pvTaskIncrementMutexHeldCount>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00f      	beq.n	8007c04 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	3310      	adds	r3, #16
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fe53 	bl	8008894 <xTaskRemoveFromEventList>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d007      	beq.n	8007c04 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bf4:	4b53      	ldr	r3, [pc, #332]	; (8007d44 <xQueueSemaphoreTake+0x20c>)
 8007bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c04:	f001 fb88 	bl	8009318 <vPortExitCritical>
				return pdPASS;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e096      	b.n	8007d3a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d110      	bne.n	8007c34 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d009      	beq.n	8007c2c <xQueueSemaphoreTake+0xf4>
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	e7fe      	b.n	8007c2a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c2c:	f001 fb74 	bl	8009318 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e082      	b.n	8007d3a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c3a:	f107 030c 	add.w	r3, r7, #12
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fe8a 	bl	8008958 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c44:	2301      	movs	r3, #1
 8007c46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c48:	f001 fb66 	bl	8009318 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c4c:	f000 fc42 	bl	80084d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c50:	f001 fb34 	bl	80092bc <vPortEnterCritical>
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c5a:	b25b      	sxtb	r3, r3
 8007c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c60:	d103      	bne.n	8007c6a <xQueueSemaphoreTake+0x132>
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c70:	b25b      	sxtb	r3, r3
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d103      	bne.n	8007c80 <xQueueSemaphoreTake+0x148>
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c80:	f001 fb4a 	bl	8009318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c84:	463a      	mov	r2, r7
 8007c86:	f107 030c 	add.w	r3, r7, #12
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 fe79 	bl	8008984 <xTaskCheckForTimeOut>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d132      	bne.n	8007cfe <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c9a:	f000 f9cc 	bl	8008036 <prvIsQueueEmpty>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d026      	beq.n	8007cf2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d109      	bne.n	8007cc0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007cac:	f001 fb06 	bl	80092bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 ffc1 	bl	8008c3c <xTaskPriorityInherit>
 8007cba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007cbc:	f001 fb2c 	bl	8009318 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc2:	3324      	adds	r3, #36	; 0x24
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fdbf 	bl	800884c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cd0:	f000 f95f 	bl	8007f92 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cd4:	f000 fc0c 	bl	80084f0 <xTaskResumeAll>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f47f af69 	bne.w	8007bb2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007ce0:	4b18      	ldr	r3, [pc, #96]	; (8007d44 <xQueueSemaphoreTake+0x20c>)
 8007ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	e75f      	b.n	8007bb2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cf4:	f000 f94d 	bl	8007f92 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cf8:	f000 fbfa 	bl	80084f0 <xTaskResumeAll>
 8007cfc:	e759      	b.n	8007bb2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d00:	f000 f947 	bl	8007f92 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d04:	f000 fbf4 	bl	80084f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d0a:	f000 f994 	bl	8008036 <prvIsQueueEmpty>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f43f af4e 	beq.w	8007bb2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007d1c:	f001 face 	bl	80092bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d22:	f000 f88e 	bl	8007e42 <prvGetDisinheritPriorityAfterTimeout>
 8007d26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 f888 	bl	8008e44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d34:	f001 faf0 	bl	8009318 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3738      	adds	r7, #56	; 0x38
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	e000ed04 	.word	0xe000ed04

08007d48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	; 0x38
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <xQueueReceiveFromISR+0x2a>
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	623b      	str	r3, [r7, #32]
 8007d70:	e7fe      	b.n	8007d70 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <xQueueReceiveFromISR+0x38>
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <xQueueReceiveFromISR+0x3c>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e000      	b.n	8007d86 <xQueueReceiveFromISR+0x3e>
 8007d84:	2300      	movs	r3, #0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <xQueueReceiveFromISR+0x56>
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	e7fe      	b.n	8007d9c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d9e:	f001 fb69 	bl	8009474 <vPortValidateInterruptPriority>
	__asm volatile
 8007da2:	f3ef 8211 	mrs	r2, BASEPRI
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	61ba      	str	r2, [r7, #24]
 8007db8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007dba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d02f      	beq.n	8007e2a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dd4:	68b9      	ldr	r1, [r7, #8]
 8007dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd8:	f000 f8b5 	bl	8007f46 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	1e5a      	subs	r2, r3, #1
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dec:	d112      	bne.n	8007e14 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d016      	beq.n	8007e24 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	3310      	adds	r3, #16
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fd4a 	bl	8008894 <xTaskRemoveFromEventList>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00e      	beq.n	8007e24 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	e007      	b.n	8007e24 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e18:	3301      	adds	r3, #1
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	b25a      	sxtb	r2, r3
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e24:	2301      	movs	r3, #1
 8007e26:	637b      	str	r3, [r7, #52]	; 0x34
 8007e28:	e001      	b.n	8007e2e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3738      	adds	r7, #56	; 0x38
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d006      	beq.n	8007e60 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f1c3 0307 	rsb	r3, r3, #7
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	e001      	b.n	8007e64 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e64:	68fb      	ldr	r3, [r7, #12]
	}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b086      	sub	sp, #24
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10d      	bne.n	8007eac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d14d      	bne.n	8007f34 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 ff4d 	bl	8008d3c <xTaskPriorityDisinherit>
 8007ea2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
 8007eaa:	e043      	b.n	8007f34 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d119      	bne.n	8007ee6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6858      	ldr	r0, [r3, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	f001 fd17 	bl	80098f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	441a      	add	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d32b      	bcc.n	8007f34 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	605a      	str	r2, [r3, #4]
 8007ee4:	e026      	b.n	8007f34 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	68d8      	ldr	r0, [r3, #12]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	f001 fcfd 	bl	80098f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	425b      	negs	r3, r3
 8007f00:	441a      	add	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d207      	bcs.n	8007f22 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	425b      	negs	r3, r3
 8007f1c:	441a      	add	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d105      	bne.n	8007f34 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d002      	beq.n	8007f34 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f3c:	697b      	ldr	r3, [r7, #20]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d018      	beq.n	8007f8a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	441a      	add	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d303      	bcc.n	8007f7a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68d9      	ldr	r1, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	461a      	mov	r2, r3
 8007f84:	6838      	ldr	r0, [r7, #0]
 8007f86:	f001 fcb3 	bl	80098f0 <memcpy>
	}
}
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f9a:	f001 f98f 	bl	80092bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fa4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fa6:	e011      	b.n	8007fcc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d012      	beq.n	8007fd6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3324      	adds	r3, #36	; 0x24
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fc6d 	bl	8008894 <xTaskRemoveFromEventList>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fc0:	f000 fd40 	bl	8008a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	dce9      	bgt.n	8007fa8 <prvUnlockQueue+0x16>
 8007fd4:	e000      	b.n	8007fd8 <prvUnlockQueue+0x46>
					break;
 8007fd6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	22ff      	movs	r2, #255	; 0xff
 8007fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007fe0:	f001 f99a 	bl	8009318 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fe4:	f001 f96a 	bl	80092bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ff0:	e011      	b.n	8008016 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d012      	beq.n	8008020 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 fc48 	bl	8008894 <xTaskRemoveFromEventList>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800800a:	f000 fd1b 	bl	8008a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	3b01      	subs	r3, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dce9      	bgt.n	8007ff2 <prvUnlockQueue+0x60>
 800801e:	e000      	b.n	8008022 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008020:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	22ff      	movs	r2, #255	; 0xff
 8008026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800802a:	f001 f975 	bl	8009318 <vPortExitCritical>
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800803e:	f001 f93d 	bl	80092bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800804a:	2301      	movs	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e001      	b.n	8008054 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008054:	f001 f960 	bl	8009318 <vPortExitCritical>

	return xReturn;
 8008058:	68fb      	ldr	r3, [r7, #12]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800806a:	f001 f927 	bl	80092bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	429a      	cmp	r2, r3
 8008078:	d102      	bne.n	8008080 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800807a:	2301      	movs	r3, #1
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	e001      	b.n	8008084 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008084:	f001 f948 	bl	8009318 <vPortExitCritical>

	return xReturn;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008092:	b580      	push	{r7, lr}
 8008094:	b08e      	sub	sp, #56	; 0x38
 8008096:	af04      	add	r7, sp, #16
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <xTaskCreateStatic+0x28>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	623b      	str	r3, [r7, #32]
 80080b8:	e7fe      	b.n	80080b8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d109      	bne.n	80080d4 <xTaskCreateStatic+0x42>
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	61fb      	str	r3, [r7, #28]
 80080d2:	e7fe      	b.n	80080d2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080d4:	2354      	movs	r3, #84	; 0x54
 80080d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b54      	cmp	r3, #84	; 0x54
 80080dc:	d009      	beq.n	80080f2 <xTaskCreateStatic+0x60>
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	61bb      	str	r3, [r7, #24]
 80080f0:	e7fe      	b.n	80080f0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d01e      	beq.n	8008138 <xTaskCreateStatic+0xa6>
 80080fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01b      	beq.n	8008138 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008108:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	2202      	movs	r2, #2
 800810e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008112:	2300      	movs	r3, #0
 8008114:	9303      	str	r3, [sp, #12]
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	9302      	str	r3, [sp, #8]
 800811a:	f107 0314 	add.w	r3, r7, #20
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	68b9      	ldr	r1, [r7, #8]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 f850 	bl	80081d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008130:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008132:	f000 f8d3 	bl	80082dc <prvAddNewTaskToReadyList>
 8008136:	e001      	b.n	800813c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800813c:	697b      	ldr	r3, [r7, #20]
	}
 800813e:	4618      	mov	r0, r3
 8008140:	3728      	adds	r7, #40	; 0x28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008146:	b580      	push	{r7, lr}
 8008148:	b08c      	sub	sp, #48	; 0x30
 800814a:	af04      	add	r7, sp, #16
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	603b      	str	r3, [r7, #0]
 8008152:	4613      	mov	r3, r2
 8008154:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4618      	mov	r0, r3
 800815c:	f001 f9c8 	bl	80094f0 <pvPortMalloc>
 8008160:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00e      	beq.n	8008186 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008168:	2054      	movs	r0, #84	; 0x54
 800816a:	f001 f9c1 	bl	80094f0 <pvPortMalloc>
 800816e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	631a      	str	r2, [r3, #48]	; 0x30
 800817c:	e005      	b.n	800818a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800817e:	6978      	ldr	r0, [r7, #20]
 8008180:	f001 fa78 	bl	8009674 <vPortFree>
 8008184:	e001      	b.n	800818a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d017      	beq.n	80081c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008198:	88fa      	ldrh	r2, [r7, #6]
 800819a:	2300      	movs	r3, #0
 800819c:	9303      	str	r3, [sp, #12]
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68b9      	ldr	r1, [r7, #8]
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f80e 	bl	80081d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081b4:	69f8      	ldr	r0, [r7, #28]
 80081b6:	f000 f891 	bl	80082dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081ba:	2301      	movs	r3, #1
 80081bc:	61bb      	str	r3, [r7, #24]
 80081be:	e002      	b.n	80081c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295
 80081c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081c6:	69bb      	ldr	r3, [r7, #24]
	}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3720      	adds	r7, #32
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081e8:	3b01      	subs	r3, #1
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	f023 0307 	bic.w	r3, r3, #7
 80081f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f003 0307 	and.w	r3, r3, #7
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d009      	beq.n	8008216 <prvInitialiseNewTask+0x46>
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e7fe      	b.n	8008214 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01f      	beq.n	800825c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	e012      	b.n	8008248 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	7819      	ldrb	r1, [r3, #0]
 800822a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	4413      	add	r3, r2
 8008230:	3334      	adds	r3, #52	; 0x34
 8008232:	460a      	mov	r2, r1
 8008234:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	4413      	add	r3, r2
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d006      	beq.n	8008250 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	3301      	adds	r3, #1
 8008246:	61fb      	str	r3, [r7, #28]
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	2b0f      	cmp	r3, #15
 800824c:	d9e9      	bls.n	8008222 <prvInitialiseNewTask+0x52>
 800824e:	e000      	b.n	8008252 <prvInitialiseNewTask+0x82>
			{
				break;
 8008250:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800825a:	e003      	b.n	8008264 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	2b06      	cmp	r3, #6
 8008268:	d901      	bls.n	800826e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800826a:	2306      	movs	r3, #6
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008272:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008278:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2200      	movs	r2, #0
 800827e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	3304      	adds	r3, #4
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff f8b9 	bl	80073fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	3318      	adds	r3, #24
 800828e:	4618      	mov	r0, r3
 8008290:	f7ff f8b4 	bl	80073fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008298:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	f1c3 0207 	rsb	r2, r3, #7
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	2200      	movs	r2, #0
 80082ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	69b8      	ldr	r0, [r7, #24]
 80082be:	f000 fed3 	bl	8009068 <pxPortInitialiseStack>
 80082c2:	4602      	mov	r2, r0
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082d4:	bf00      	nop
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082e4:	f000 ffea 	bl	80092bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082e8:	4b2a      	ldr	r3, [pc, #168]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	4a29      	ldr	r2, [pc, #164]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 80082f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082f2:	4b29      	ldr	r3, [pc, #164]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082fa:	4a27      	ldr	r2, [pc, #156]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008300:	4b24      	ldr	r3, [pc, #144]	; (8008394 <prvAddNewTaskToReadyList+0xb8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d110      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008308:	f000 fbc0 	bl	8008a8c <prvInitialiseTaskLists>
 800830c:	e00d      	b.n	800832a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <prvAddNewTaskToReadyList+0xc0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008316:	4b20      	ldr	r3, [pc, #128]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	429a      	cmp	r2, r3
 8008322:	d802      	bhi.n	800832a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008324:	4a1c      	ldr	r2, [pc, #112]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800832a:	4b1d      	ldr	r3, [pc, #116]	; (80083a0 <prvAddNewTaskToReadyList+0xc4>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3301      	adds	r3, #1
 8008330:	4a1b      	ldr	r2, [pc, #108]	; (80083a0 <prvAddNewTaskToReadyList+0xc4>)
 8008332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	2201      	movs	r2, #1
 800833a:	409a      	lsls	r2, r3
 800833c:	4b19      	ldr	r3, [pc, #100]	; (80083a4 <prvAddNewTaskToReadyList+0xc8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4313      	orrs	r3, r2
 8008342:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <prvAddNewTaskToReadyList+0xc8>)
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834a:	4613      	mov	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4a15      	ldr	r2, [pc, #84]	; (80083a8 <prvAddNewTaskToReadyList+0xcc>)
 8008354:	441a      	add	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	3304      	adds	r3, #4
 800835a:	4619      	mov	r1, r3
 800835c:	4610      	mov	r0, r2
 800835e:	f7ff f85a 	bl	8007416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008362:	f000 ffd9 	bl	8009318 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008366:	4b0d      	ldr	r3, [pc, #52]	; (800839c <prvAddNewTaskToReadyList+0xc0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00e      	beq.n	800838c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800836e:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <prvAddNewTaskToReadyList+0xbc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	429a      	cmp	r2, r3
 800837a:	d207      	bcs.n	800838c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <prvAddNewTaskToReadyList+0xd0>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000418 	.word	0x20000418
 8008398:	20000318 	.word	0x20000318
 800839c:	20000424 	.word	0x20000424
 80083a0:	20000434 	.word	0x20000434
 80083a4:	20000420 	.word	0x20000420
 80083a8:	2000031c 	.word	0x2000031c
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d016      	beq.n	80083f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083c2:	4b13      	ldr	r3, [pc, #76]	; (8008410 <vTaskDelay+0x60>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <vTaskDelay+0x2e>
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	60bb      	str	r3, [r7, #8]
 80083dc:	e7fe      	b.n	80083dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80083de:	f000 f879 	bl	80084d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083e2:	2100      	movs	r1, #0
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fdd9 	bl	8008f9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083ea:	f000 f881 	bl	80084f0 <xTaskResumeAll>
 80083ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d107      	bne.n	8008406 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <vTaskDelay+0x64>)
 80083f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008406:	bf00      	nop
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000440 	.word	0x20000440
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008426:	463a      	mov	r2, r7
 8008428:	1d39      	adds	r1, r7, #4
 800842a:	f107 0308 	add.w	r3, r7, #8
 800842e:	4618      	mov	r0, r3
 8008430:	f7f8 f8a6 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	9202      	str	r2, [sp, #8]
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	2300      	movs	r3, #0
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	460a      	mov	r2, r1
 8008446:	491d      	ldr	r1, [pc, #116]	; (80084bc <vTaskStartScheduler+0xa4>)
 8008448:	481d      	ldr	r0, [pc, #116]	; (80084c0 <vTaskStartScheduler+0xa8>)
 800844a:	f7ff fe22 	bl	8008092 <xTaskCreateStatic>
 800844e:	4602      	mov	r2, r0
 8008450:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <vTaskStartScheduler+0xac>)
 8008452:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008454:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <vTaskStartScheduler+0xac>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800845c:	2301      	movs	r3, #1
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	e001      	b.n	8008466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d115      	bne.n	8008498 <vTaskStartScheduler+0x80>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800847e:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <vTaskStartScheduler+0xb0>)
 8008480:	f04f 32ff 	mov.w	r2, #4294967295
 8008484:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <vTaskStartScheduler+0xb4>)
 8008488:	2201      	movs	r2, #1
 800848a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800848c:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <vTaskStartScheduler+0xb8>)
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008492:	f000 fe75 	bl	8009180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008496:	e00d      	b.n	80084b4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849e:	d109      	bne.n	80084b4 <vTaskStartScheduler+0x9c>
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e7fe      	b.n	80084b2 <vTaskStartScheduler+0x9a>
}
 80084b4:	bf00      	nop
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	0800a294 	.word	0x0800a294
 80084c0:	08008a5d 	.word	0x08008a5d
 80084c4:	2000043c 	.word	0x2000043c
 80084c8:	20000438 	.word	0x20000438
 80084cc:	20000424 	.word	0x20000424
 80084d0:	2000041c 	.word	0x2000041c

080084d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80084d8:	4b04      	ldr	r3, [pc, #16]	; (80084ec <vTaskSuspendAll+0x18>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	3301      	adds	r3, #1
 80084de:	4a03      	ldr	r2, [pc, #12]	; (80084ec <vTaskSuspendAll+0x18>)
 80084e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80084e2:	bf00      	nop
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	20000440 	.word	0x20000440

080084f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084fe:	4b41      	ldr	r3, [pc, #260]	; (8008604 <xTaskResumeAll+0x114>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <xTaskResumeAll+0x2a>
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	e7fe      	b.n	8008518 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800851a:	f000 fecf 	bl	80092bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800851e:	4b39      	ldr	r3, [pc, #228]	; (8008604 <xTaskResumeAll+0x114>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3b01      	subs	r3, #1
 8008524:	4a37      	ldr	r2, [pc, #220]	; (8008604 <xTaskResumeAll+0x114>)
 8008526:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008528:	4b36      	ldr	r3, [pc, #216]	; (8008604 <xTaskResumeAll+0x114>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d161      	bne.n	80085f4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008530:	4b35      	ldr	r3, [pc, #212]	; (8008608 <xTaskResumeAll+0x118>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d05d      	beq.n	80085f4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008538:	e02e      	b.n	8008598 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <xTaskResumeAll+0x11c>)
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3318      	adds	r3, #24
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe ffc2 	bl	80074d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3304      	adds	r3, #4
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe ffbd 	bl	80074d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	2201      	movs	r2, #1
 800855c:	409a      	lsls	r2, r3
 800855e:	4b2c      	ldr	r3, [pc, #176]	; (8008610 <xTaskResumeAll+0x120>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4313      	orrs	r3, r2
 8008564:	4a2a      	ldr	r2, [pc, #168]	; (8008610 <xTaskResumeAll+0x120>)
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a27      	ldr	r2, [pc, #156]	; (8008614 <xTaskResumeAll+0x124>)
 8008576:	441a      	add	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe ff49 	bl	8007416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	4b23      	ldr	r3, [pc, #140]	; (8008618 <xTaskResumeAll+0x128>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	429a      	cmp	r2, r3
 8008590:	d302      	bcc.n	8008598 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008592:	4b22      	ldr	r3, [pc, #136]	; (800861c <xTaskResumeAll+0x12c>)
 8008594:	2201      	movs	r2, #1
 8008596:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008598:	4b1c      	ldr	r3, [pc, #112]	; (800860c <xTaskResumeAll+0x11c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1cc      	bne.n	800853a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085a6:	f000 fb0b 	bl	8008bc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085aa:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <xTaskResumeAll+0x130>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d010      	beq.n	80085d8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085b6:	f000 f837 	bl	8008628 <xTaskIncrementTick>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80085c0:	4b16      	ldr	r3, [pc, #88]	; (800861c <xTaskResumeAll+0x12c>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f1      	bne.n	80085b6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80085d2:	4b13      	ldr	r3, [pc, #76]	; (8008620 <xTaskResumeAll+0x130>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085d8:	4b10      	ldr	r3, [pc, #64]	; (800861c <xTaskResumeAll+0x12c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085e0:	2301      	movs	r3, #1
 80085e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085e4:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <xTaskResumeAll+0x134>)
 80085e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f4:	f000 fe90 	bl	8009318 <vPortExitCritical>

	return xAlreadyYielded;
 80085f8:	68bb      	ldr	r3, [r7, #8]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000440 	.word	0x20000440
 8008608:	20000418 	.word	0x20000418
 800860c:	200003d8 	.word	0x200003d8
 8008610:	20000420 	.word	0x20000420
 8008614:	2000031c 	.word	0x2000031c
 8008618:	20000318 	.word	0x20000318
 800861c:	2000042c 	.word	0x2000042c
 8008620:	20000428 	.word	0x20000428
 8008624:	e000ed04 	.word	0xe000ed04

08008628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008632:	4b4e      	ldr	r3, [pc, #312]	; (800876c <xTaskIncrementTick+0x144>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f040 8087 	bne.w	800874a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800863c:	4b4c      	ldr	r3, [pc, #304]	; (8008770 <xTaskIncrementTick+0x148>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3301      	adds	r3, #1
 8008642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008644:	4a4a      	ldr	r2, [pc, #296]	; (8008770 <xTaskIncrementTick+0x148>)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d11f      	bne.n	8008690 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008650:	4b48      	ldr	r3, [pc, #288]	; (8008774 <xTaskIncrementTick+0x14c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d009      	beq.n	800866e <xTaskIncrementTick+0x46>
 800865a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	e7fe      	b.n	800866c <xTaskIncrementTick+0x44>
 800866e:	4b41      	ldr	r3, [pc, #260]	; (8008774 <xTaskIncrementTick+0x14c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	4b40      	ldr	r3, [pc, #256]	; (8008778 <xTaskIncrementTick+0x150>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a3e      	ldr	r2, [pc, #248]	; (8008774 <xTaskIncrementTick+0x14c>)
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	4a3e      	ldr	r2, [pc, #248]	; (8008778 <xTaskIncrementTick+0x150>)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4b3e      	ldr	r3, [pc, #248]	; (800877c <xTaskIncrementTick+0x154>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	4a3c      	ldr	r2, [pc, #240]	; (800877c <xTaskIncrementTick+0x154>)
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	f000 fa98 	bl	8008bc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008690:	4b3b      	ldr	r3, [pc, #236]	; (8008780 <xTaskIncrementTick+0x158>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	429a      	cmp	r2, r3
 8008698:	d348      	bcc.n	800872c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800869a:	4b36      	ldr	r3, [pc, #216]	; (8008774 <xTaskIncrementTick+0x14c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a4:	4b36      	ldr	r3, [pc, #216]	; (8008780 <xTaskIncrementTick+0x158>)
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295
 80086aa:	601a      	str	r2, [r3, #0]
					break;
 80086ac:	e03e      	b.n	800872c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ae:	4b31      	ldr	r3, [pc, #196]	; (8008774 <xTaskIncrementTick+0x14c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d203      	bcs.n	80086ce <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086c6:	4a2e      	ldr	r2, [pc, #184]	; (8008780 <xTaskIncrementTick+0x158>)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086cc:	e02e      	b.n	800872c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	3304      	adds	r3, #4
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fefc 	bl	80074d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3318      	adds	r3, #24
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe fef3 	bl	80074d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ee:	2201      	movs	r2, #1
 80086f0:	409a      	lsls	r2, r3
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <xTaskIncrementTick+0x15c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	4a22      	ldr	r2, [pc, #136]	; (8008784 <xTaskIncrementTick+0x15c>)
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4a1f      	ldr	r2, [pc, #124]	; (8008788 <xTaskIncrementTick+0x160>)
 800870a:	441a      	add	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f7fe fe7f 	bl	8007416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871c:	4b1b      	ldr	r3, [pc, #108]	; (800878c <xTaskIncrementTick+0x164>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	429a      	cmp	r2, r3
 8008724:	d3b9      	bcc.n	800869a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008726:	2301      	movs	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800872a:	e7b6      	b.n	800869a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800872c:	4b17      	ldr	r3, [pc, #92]	; (800878c <xTaskIncrementTick+0x164>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	4915      	ldr	r1, [pc, #84]	; (8008788 <xTaskIncrementTick+0x160>)
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d907      	bls.n	8008754 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008744:	2301      	movs	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e004      	b.n	8008754 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800874a:	4b11      	ldr	r3, [pc, #68]	; (8008790 <xTaskIncrementTick+0x168>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3301      	adds	r3, #1
 8008750:	4a0f      	ldr	r2, [pc, #60]	; (8008790 <xTaskIncrementTick+0x168>)
 8008752:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008754:	4b0f      	ldr	r3, [pc, #60]	; (8008794 <xTaskIncrementTick+0x16c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800875c:	2301      	movs	r3, #1
 800875e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008760:	697b      	ldr	r3, [r7, #20]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000440 	.word	0x20000440
 8008770:	2000041c 	.word	0x2000041c
 8008774:	200003d0 	.word	0x200003d0
 8008778:	200003d4 	.word	0x200003d4
 800877c:	20000430 	.word	0x20000430
 8008780:	20000438 	.word	0x20000438
 8008784:	20000420 	.word	0x20000420
 8008788:	2000031c 	.word	0x2000031c
 800878c:	20000318 	.word	0x20000318
 8008790:	20000428 	.word	0x20000428
 8008794:	2000042c 	.word	0x2000042c

08008798 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800879e:	4b26      	ldr	r3, [pc, #152]	; (8008838 <vTaskSwitchContext+0xa0>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087a6:	4b25      	ldr	r3, [pc, #148]	; (800883c <vTaskSwitchContext+0xa4>)
 80087a8:	2201      	movs	r2, #1
 80087aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087ac:	e03e      	b.n	800882c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80087ae:	4b23      	ldr	r3, [pc, #140]	; (800883c <vTaskSwitchContext+0xa4>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b4:	4b22      	ldr	r3, [pc, #136]	; (8008840 <vTaskSwitchContext+0xa8>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	fab3 f383 	clz	r3, r3
 80087c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80087c2:	7afb      	ldrb	r3, [r7, #11]
 80087c4:	f1c3 031f 	rsb	r3, r3, #31
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	491e      	ldr	r1, [pc, #120]	; (8008844 <vTaskSwitchContext+0xac>)
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	4613      	mov	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <vTaskSwitchContext+0x5a>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	e7fe      	b.n	80087f0 <vTaskSwitchContext+0x58>
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4613      	mov	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4a11      	ldr	r2, [pc, #68]	; (8008844 <vTaskSwitchContext+0xac>)
 80087fe:	4413      	add	r3, r2
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	685a      	ldr	r2, [r3, #4]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	605a      	str	r2, [r3, #4]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3308      	adds	r3, #8
 8008814:	429a      	cmp	r2, r3
 8008816:	d104      	bne.n	8008822 <vTaskSwitchContext+0x8a>
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	605a      	str	r2, [r3, #4]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	4a07      	ldr	r2, [pc, #28]	; (8008848 <vTaskSwitchContext+0xb0>)
 800882a:	6013      	str	r3, [r2, #0]
}
 800882c:	bf00      	nop
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	20000440 	.word	0x20000440
 800883c:	2000042c 	.word	0x2000042c
 8008840:	20000420 	.word	0x20000420
 8008844:	2000031c 	.word	0x2000031c
 8008848:	20000318 	.word	0x20000318

0800884c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d109      	bne.n	8008870 <vTaskPlaceOnEventList+0x24>
 800885c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008860:	f383 8811 	msr	BASEPRI, r3
 8008864:	f3bf 8f6f 	isb	sy
 8008868:	f3bf 8f4f 	dsb	sy
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	e7fe      	b.n	800886e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <vTaskPlaceOnEventList+0x44>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3318      	adds	r3, #24
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7fe fdf0 	bl	800745e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800887e:	2101      	movs	r1, #1
 8008880:	6838      	ldr	r0, [r7, #0]
 8008882:	f000 fb8b 	bl	8008f9c <prvAddCurrentTaskToDelayedList>
}
 8008886:	bf00      	nop
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20000318 	.word	0x20000318

08008894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d109      	bne.n	80088be <xTaskRemoveFromEventList+0x2a>
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	60fb      	str	r3, [r7, #12]
 80088bc:	e7fe      	b.n	80088bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	3318      	adds	r3, #24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fe fe04 	bl	80074d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c8:	4b1d      	ldr	r3, [pc, #116]	; (8008940 <xTaskRemoveFromEventList+0xac>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11c      	bne.n	800890a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fdfb 	bl	80074d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088de:	2201      	movs	r2, #1
 80088e0:	409a      	lsls	r2, r3
 80088e2:	4b18      	ldr	r3, [pc, #96]	; (8008944 <xTaskRemoveFromEventList+0xb0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	4a16      	ldr	r2, [pc, #88]	; (8008944 <xTaskRemoveFromEventList+0xb0>)
 80088ea:	6013      	str	r3, [r2, #0]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f0:	4613      	mov	r3, r2
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	4a13      	ldr	r2, [pc, #76]	; (8008948 <xTaskRemoveFromEventList+0xb4>)
 80088fa:	441a      	add	r2, r3
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3304      	adds	r3, #4
 8008900:	4619      	mov	r1, r3
 8008902:	4610      	mov	r0, r2
 8008904:	f7fe fd87 	bl	8007416 <vListInsertEnd>
 8008908:	e005      	b.n	8008916 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	3318      	adds	r3, #24
 800890e:	4619      	mov	r1, r3
 8008910:	480e      	ldr	r0, [pc, #56]	; (800894c <xTaskRemoveFromEventList+0xb8>)
 8008912:	f7fe fd80 	bl	8007416 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891a:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <xTaskRemoveFromEventList+0xbc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	429a      	cmp	r2, r3
 8008922:	d905      	bls.n	8008930 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008924:	2301      	movs	r3, #1
 8008926:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <xTaskRemoveFromEventList+0xc0>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e001      	b.n	8008934 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008934:	697b      	ldr	r3, [r7, #20]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	20000440 	.word	0x20000440
 8008944:	20000420 	.word	0x20000420
 8008948:	2000031c 	.word	0x2000031c
 800894c:	200003d8 	.word	0x200003d8
 8008950:	20000318 	.word	0x20000318
 8008954:	2000042c 	.word	0x2000042c

08008958 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <vTaskInternalSetTimeOutState+0x24>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <vTaskInternalSetTimeOutState+0x28>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	605a      	str	r2, [r3, #4]
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	20000430 	.word	0x20000430
 8008980:	2000041c 	.word	0x2000041c

08008984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d109      	bne.n	80089a8 <xTaskCheckForTimeOut+0x24>
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	e7fe      	b.n	80089a6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <xTaskCheckForTimeOut+0x3e>
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e7fe      	b.n	80089c0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80089c2:	f000 fc7b 	bl	80092bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089c6:	4b1d      	ldr	r3, [pc, #116]	; (8008a3c <xTaskCheckForTimeOut+0xb8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089de:	d102      	bne.n	80089e6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61fb      	str	r3, [r7, #28]
 80089e4:	e023      	b.n	8008a2e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	4b15      	ldr	r3, [pc, #84]	; (8008a40 <xTaskCheckForTimeOut+0xbc>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d007      	beq.n	8008a02 <xTaskCheckForTimeOut+0x7e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d302      	bcc.n	8008a02 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
 8008a00:	e015      	b.n	8008a2e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d20b      	bcs.n	8008a24 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	1ad2      	subs	r2, r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff ff9d 	bl	8008958 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61fb      	str	r3, [r7, #28]
 8008a22:	e004      	b.n	8008a2e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2200      	movs	r2, #0
 8008a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a2e:	f000 fc73 	bl	8009318 <vPortExitCritical>

	return xReturn;
 8008a32:	69fb      	ldr	r3, [r7, #28]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3720      	adds	r7, #32
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	2000041c 	.word	0x2000041c
 8008a40:	20000430 	.word	0x20000430

08008a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a48:	4b03      	ldr	r3, [pc, #12]	; (8008a58 <vTaskMissedYield+0x14>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	2000042c 	.word	0x2000042c

08008a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a64:	f000 f852 	bl	8008b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a68:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <prvIdleTask+0x28>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d9f9      	bls.n	8008a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <prvIdleTask+0x2c>)
 8008a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a80:	e7f0      	b.n	8008a64 <prvIdleTask+0x8>
 8008a82:	bf00      	nop
 8008a84:	2000031c 	.word	0x2000031c
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a92:	2300      	movs	r3, #0
 8008a94:	607b      	str	r3, [r7, #4]
 8008a96:	e00c      	b.n	8008ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4a12      	ldr	r2, [pc, #72]	; (8008aec <prvInitialiseTaskLists+0x60>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fc88 	bl	80073bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	607b      	str	r3, [r7, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d9ef      	bls.n	8008a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ab8:	480d      	ldr	r0, [pc, #52]	; (8008af0 <prvInitialiseTaskLists+0x64>)
 8008aba:	f7fe fc7f 	bl	80073bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008abe:	480d      	ldr	r0, [pc, #52]	; (8008af4 <prvInitialiseTaskLists+0x68>)
 8008ac0:	f7fe fc7c 	bl	80073bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ac4:	480c      	ldr	r0, [pc, #48]	; (8008af8 <prvInitialiseTaskLists+0x6c>)
 8008ac6:	f7fe fc79 	bl	80073bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008aca:	480c      	ldr	r0, [pc, #48]	; (8008afc <prvInitialiseTaskLists+0x70>)
 8008acc:	f7fe fc76 	bl	80073bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ad0:	480b      	ldr	r0, [pc, #44]	; (8008b00 <prvInitialiseTaskLists+0x74>)
 8008ad2:	f7fe fc73 	bl	80073bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	; (8008b04 <prvInitialiseTaskLists+0x78>)
 8008ad8:	4a05      	ldr	r2, [pc, #20]	; (8008af0 <prvInitialiseTaskLists+0x64>)
 8008ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <prvInitialiseTaskLists+0x7c>)
 8008ade:	4a05      	ldr	r2, [pc, #20]	; (8008af4 <prvInitialiseTaskLists+0x68>)
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	2000031c 	.word	0x2000031c
 8008af0:	200003a8 	.word	0x200003a8
 8008af4:	200003bc 	.word	0x200003bc
 8008af8:	200003d8 	.word	0x200003d8
 8008afc:	200003ec 	.word	0x200003ec
 8008b00:	20000404 	.word	0x20000404
 8008b04:	200003d0 	.word	0x200003d0
 8008b08:	200003d4 	.word	0x200003d4

08008b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b12:	e019      	b.n	8008b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b14:	f000 fbd2 	bl	80092bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <prvCheckTasksWaitingTermination+0x4c>)
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe fcd3 	bl	80074d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <prvCheckTasksWaitingTermination+0x50>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	4a0a      	ldr	r2, [pc, #40]	; (8008b5c <prvCheckTasksWaitingTermination+0x50>)
 8008b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b34:	4b0a      	ldr	r3, [pc, #40]	; (8008b60 <prvCheckTasksWaitingTermination+0x54>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3b01      	subs	r3, #1
 8008b3a:	4a09      	ldr	r2, [pc, #36]	; (8008b60 <prvCheckTasksWaitingTermination+0x54>)
 8008b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b3e:	f000 fbeb 	bl	8009318 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f80e 	bl	8008b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <prvCheckTasksWaitingTermination+0x54>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e1      	bne.n	8008b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	200003ec 	.word	0x200003ec
 8008b5c:	20000418 	.word	0x20000418
 8008b60:	20000400 	.word	0x20000400

08008b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d108      	bne.n	8008b88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fd7a 	bl	8009674 <vPortFree>
				vPortFree( pxTCB );
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fd77 	bl	8009674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b86:	e017      	b.n	8008bb8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d103      	bne.n	8008b9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fd6e 	bl	8009674 <vPortFree>
	}
 8008b98:	e00e      	b.n	8008bb8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d009      	beq.n	8008bb8 <prvDeleteTCB+0x54>
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	e7fe      	b.n	8008bb6 <prvDeleteTCB+0x52>
	}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <prvResetNextTaskUnblockTime+0x38>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	; (8008bfc <prvResetNextTaskUnblockTime+0x3c>)
 8008bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bd8:	e008      	b.n	8008bec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bda:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <prvResetNextTaskUnblockTime+0x38>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a04      	ldr	r2, [pc, #16]	; (8008bfc <prvResetNextTaskUnblockTime+0x3c>)
 8008bea:	6013      	str	r3, [r2, #0]
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	200003d0 	.word	0x200003d0
 8008bfc:	20000438 	.word	0x20000438

08008c00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <xTaskGetSchedulerState+0x34>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d102      	bne.n	8008c14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	607b      	str	r3, [r7, #4]
 8008c12:	e008      	b.n	8008c26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c14:	4b08      	ldr	r3, [pc, #32]	; (8008c38 <xTaskGetSchedulerState+0x38>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	e001      	b.n	8008c26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c26:	687b      	ldr	r3, [r7, #4]
	}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	20000424 	.word	0x20000424
 8008c38:	20000440 	.word	0x20000440

08008c3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d069      	beq.n	8008d26 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	4b36      	ldr	r3, [pc, #216]	; (8008d30 <xTaskPriorityInherit+0xf4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d259      	bcs.n	8008d14 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	db06      	blt.n	8008c76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c68:	4b31      	ldr	r3, [pc, #196]	; (8008d30 <xTaskPriorityInherit+0xf4>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	f1c3 0207 	rsb	r2, r3, #7
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	6959      	ldr	r1, [r3, #20]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4a2b      	ldr	r2, [pc, #172]	; (8008d34 <xTaskPriorityInherit+0xf8>)
 8008c88:	4413      	add	r3, r2
 8008c8a:	4299      	cmp	r1, r3
 8008c8c:	d13a      	bne.n	8008d04 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe fc1c 	bl	80074d0 <uxListRemove>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d115      	bne.n	8008cca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca2:	4924      	ldr	r1, [pc, #144]	; (8008d34 <xTaskPriorityInherit+0xf8>)
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10a      	bne.n	8008cca <xTaskPriorityInherit+0x8e>
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	2201      	movs	r2, #1
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	43da      	mvns	r2, r3
 8008cc0:	4b1d      	ldr	r3, [pc, #116]	; (8008d38 <xTaskPriorityInherit+0xfc>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	4a1c      	ldr	r2, [pc, #112]	; (8008d38 <xTaskPriorityInherit+0xfc>)
 8008cc8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cca:	4b19      	ldr	r3, [pc, #100]	; (8008d30 <xTaskPriorityInherit+0xf4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	2201      	movs	r2, #1
 8008cda:	409a      	lsls	r2, r3
 8008cdc:	4b16      	ldr	r3, [pc, #88]	; (8008d38 <xTaskPriorityInherit+0xfc>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	4a15      	ldr	r2, [pc, #84]	; (8008d38 <xTaskPriorityInherit+0xfc>)
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4a10      	ldr	r2, [pc, #64]	; (8008d34 <xTaskPriorityInherit+0xf8>)
 8008cf4:	441a      	add	r2, r3
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	3304      	adds	r3, #4
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	f7fe fb8a 	bl	8007416 <vListInsertEnd>
 8008d02:	e004      	b.n	8008d0e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d04:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <xTaskPriorityInherit+0xf4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	e008      	b.n	8008d26 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d18:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <xTaskPriorityInherit+0xf4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d201      	bcs.n	8008d26 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d26:	68fb      	ldr	r3, [r7, #12]
	}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000318 	.word	0x20000318
 8008d34:	2000031c 	.word	0x2000031c
 8008d38:	20000420 	.word	0x20000420

08008d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d06c      	beq.n	8008e2c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d52:	4b39      	ldr	r3, [pc, #228]	; (8008e38 <xTaskPriorityDisinherit+0xfc>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d009      	beq.n	8008d70 <xTaskPriorityDisinherit+0x34>
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	e7fe      	b.n	8008d6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <xTaskPriorityDisinherit+0x50>
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	e7fe      	b.n	8008d8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d90:	1e5a      	subs	r2, r3, #1
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d044      	beq.n	8008e2c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d140      	bne.n	8008e2c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fb8e 	bl	80074d0 <uxListRemove>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d115      	bne.n	8008de6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	491f      	ldr	r1, [pc, #124]	; (8008e3c <xTaskPriorityDisinherit+0x100>)
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	440b      	add	r3, r1
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xTaskPriorityDisinherit+0xaa>
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	43da      	mvns	r2, r3
 8008ddc:	4b18      	ldr	r3, [pc, #96]	; (8008e40 <xTaskPriorityDisinherit+0x104>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4013      	ands	r3, r2
 8008de2:	4a17      	ldr	r2, [pc, #92]	; (8008e40 <xTaskPriorityDisinherit+0x104>)
 8008de4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	f1c3 0207 	rsb	r2, r3, #7
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfe:	2201      	movs	r2, #1
 8008e00:	409a      	lsls	r2, r3
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <xTaskPriorityDisinherit+0x104>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	4a0d      	ldr	r2, [pc, #52]	; (8008e40 <xTaskPriorityDisinherit+0x104>)
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4a08      	ldr	r2, [pc, #32]	; (8008e3c <xTaskPriorityDisinherit+0x100>)
 8008e1a:	441a      	add	r2, r3
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f7fe faf7 	bl	8007416 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e2c:	697b      	ldr	r3, [r7, #20]
	}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000318 	.word	0x20000318
 8008e3c:	2000031c 	.word	0x2000031c
 8008e40:	20000420 	.word	0x20000420

08008e44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e52:	2301      	movs	r3, #1
 8008e54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8081 	beq.w	8008f60 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d109      	bne.n	8008e7a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	e7fe      	b.n	8008e78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d902      	bls.n	8008e8a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	61fb      	str	r3, [r7, #28]
 8008e88:	e002      	b.n	8008e90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e8e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	69fa      	ldr	r2, [r7, #28]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d062      	beq.n	8008f60 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d15d      	bne.n	8008f60 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ea4:	4b30      	ldr	r3, [pc, #192]	; (8008f68 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d109      	bne.n	8008ec2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	60bb      	str	r3, [r7, #8]
 8008ec0:	e7fe      	b.n	8008ec0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	db04      	blt.n	8008ee0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	f1c3 0207 	rsb	r2, r3, #7
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	6959      	ldr	r1, [r3, #20]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4299      	cmp	r1, r3
 8008ef4:	d134      	bne.n	8008f60 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fe fae8 	bl	80074d0 <uxListRemove>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d115      	bne.n	8008f32 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0a:	4918      	ldr	r1, [pc, #96]	; (8008f6c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	2201      	movs	r2, #1
 8008f22:	fa02 f303 	lsl.w	r3, r2, r3
 8008f26:	43da      	mvns	r2, r3
 8008f28:	4b11      	ldr	r3, [pc, #68]	; (8008f70 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	4a10      	ldr	r2, [pc, #64]	; (8008f70 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008f30:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	2201      	movs	r2, #1
 8008f38:	409a      	lsls	r2, r3
 8008f3a:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	4a0b      	ldr	r2, [pc, #44]	; (8008f70 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4a06      	ldr	r2, [pc, #24]	; (8008f6c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008f52:	441a      	add	r2, r3
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4619      	mov	r1, r3
 8008f5a:	4610      	mov	r0, r2
 8008f5c:	f7fe fa5b 	bl	8007416 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f60:	bf00      	nop
 8008f62:	3720      	adds	r7, #32
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20000318 	.word	0x20000318
 8008f6c:	2000031c 	.word	0x2000031c
 8008f70:	20000420 	.word	0x20000420

08008f74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f78:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d004      	beq.n	8008f8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f86:	3201      	adds	r2, #1
 8008f88:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008f8a:	4b03      	ldr	r3, [pc, #12]	; (8008f98 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
	}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	20000318 	.word	0x20000318

08008f9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fa6:	4b29      	ldr	r3, [pc, #164]	; (800904c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fac:	4b28      	ldr	r3, [pc, #160]	; (8009050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe fa8c 	bl	80074d0 <uxListRemove>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10b      	bne.n	8008fd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008fbe:	4b24      	ldr	r3, [pc, #144]	; (8009050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fca:	43da      	mvns	r2, r3
 8008fcc:	4b21      	ldr	r3, [pc, #132]	; (8009054 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	4a20      	ldr	r2, [pc, #128]	; (8009054 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fdc:	d10a      	bne.n	8008ff4 <prvAddCurrentTaskToDelayedList+0x58>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	4619      	mov	r1, r3
 8008fec:	481a      	ldr	r0, [pc, #104]	; (8009058 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008fee:	f7fe fa12 	bl	8007416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ff2:	e026      	b.n	8009042 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ffc:	4b14      	ldr	r3, [pc, #80]	; (8009050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	429a      	cmp	r2, r3
 800900a:	d209      	bcs.n	8009020 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800900c:	4b13      	ldr	r3, [pc, #76]	; (800905c <prvAddCurrentTaskToDelayedList+0xc0>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3304      	adds	r3, #4
 8009016:	4619      	mov	r1, r3
 8009018:	4610      	mov	r0, r2
 800901a:	f7fe fa20 	bl	800745e <vListInsert>
}
 800901e:	e010      	b.n	8009042 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009020:	4b0f      	ldr	r3, [pc, #60]	; (8009060 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3304      	adds	r3, #4
 800902a:	4619      	mov	r1, r3
 800902c:	4610      	mov	r0, r2
 800902e:	f7fe fa16 	bl	800745e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009032:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	429a      	cmp	r2, r3
 800903a:	d202      	bcs.n	8009042 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800903c:	4a09      	ldr	r2, [pc, #36]	; (8009064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6013      	str	r3, [r2, #0]
}
 8009042:	bf00      	nop
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	2000041c 	.word	0x2000041c
 8009050:	20000318 	.word	0x20000318
 8009054:	20000420 	.word	0x20000420
 8009058:	20000404 	.word	0x20000404
 800905c:	200003d4 	.word	0x200003d4
 8009060:	200003d0 	.word	0x200003d0
 8009064:	20000438 	.word	0x20000438

08009068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3b04      	subs	r3, #4
 8009078:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b04      	subs	r3, #4
 8009086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f023 0201 	bic.w	r2, r3, #1
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3b04      	subs	r3, #4
 8009096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009098:	4a0c      	ldr	r2, [pc, #48]	; (80090cc <pxPortInitialiseStack+0x64>)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3b14      	subs	r3, #20
 80090a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3b04      	subs	r3, #4
 80090ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f06f 0202 	mvn.w	r2, #2
 80090b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3b20      	subs	r3, #32
 80090bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090be:	68fb      	ldr	r3, [r7, #12]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	080090d1 	.word	0x080090d1

080090d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <prvTaskExitError+0x50>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e2:	d009      	beq.n	80090f8 <prvTaskExitError+0x28>
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e7fe      	b.n	80090f6 <prvTaskExitError+0x26>
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800910a:	bf00      	nop
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0fc      	beq.n	800910c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009112:	bf00      	nop
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	2000000c 	.word	0x2000000c
	...

08009130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009130:	4b07      	ldr	r3, [pc, #28]	; (8009150 <pxCurrentTCBConst2>)
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	6808      	ldr	r0, [r1, #0]
 8009136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	f380 8809 	msr	PSP, r0
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f04f 0000 	mov.w	r0, #0
 8009146:	f380 8811 	msr	BASEPRI, r0
 800914a:	4770      	bx	lr
 800914c:	f3af 8000 	nop.w

08009150 <pxCurrentTCBConst2>:
 8009150:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop

08009158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009158:	4808      	ldr	r0, [pc, #32]	; (800917c <prvPortStartFirstTask+0x24>)
 800915a:	6800      	ldr	r0, [r0, #0]
 800915c:	6800      	ldr	r0, [r0, #0]
 800915e:	f380 8808 	msr	MSP, r0
 8009162:	f04f 0000 	mov.w	r0, #0
 8009166:	f380 8814 	msr	CONTROL, r0
 800916a:	b662      	cpsie	i
 800916c:	b661      	cpsie	f
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	df00      	svc	0
 8009178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800917a:	bf00      	nop
 800917c:	e000ed08 	.word	0xe000ed08

08009180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009186:	4b44      	ldr	r3, [pc, #272]	; (8009298 <xPortStartScheduler+0x118>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a44      	ldr	r2, [pc, #272]	; (800929c <xPortStartScheduler+0x11c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d109      	bne.n	80091a4 <xPortStartScheduler+0x24>
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	e7fe      	b.n	80091a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091a4:	4b3c      	ldr	r3, [pc, #240]	; (8009298 <xPortStartScheduler+0x118>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a3d      	ldr	r2, [pc, #244]	; (80092a0 <xPortStartScheduler+0x120>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d109      	bne.n	80091c2 <xPortStartScheduler+0x42>
 80091ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b2:	f383 8811 	msr	BASEPRI, r3
 80091b6:	f3bf 8f6f 	isb	sy
 80091ba:	f3bf 8f4f 	dsb	sy
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	e7fe      	b.n	80091c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091c2:	4b38      	ldr	r3, [pc, #224]	; (80092a4 <xPortStartScheduler+0x124>)
 80091c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	22ff      	movs	r2, #255	; 0xff
 80091d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	4b30      	ldr	r3, [pc, #192]	; (80092a8 <xPortStartScheduler+0x128>)
 80091e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091ea:	4b30      	ldr	r3, [pc, #192]	; (80092ac <xPortStartScheduler+0x12c>)
 80091ec:	2207      	movs	r2, #7
 80091ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091f0:	e009      	b.n	8009206 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80091f2:	4b2e      	ldr	r3, [pc, #184]	; (80092ac <xPortStartScheduler+0x12c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4a2c      	ldr	r2, [pc, #176]	; (80092ac <xPortStartScheduler+0x12c>)
 80091fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	b2db      	uxtb	r3, r3
 8009204:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009206:	78fb      	ldrb	r3, [r7, #3]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920e:	2b80      	cmp	r3, #128	; 0x80
 8009210:	d0ef      	beq.n	80091f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009212:	4b26      	ldr	r3, [pc, #152]	; (80092ac <xPortStartScheduler+0x12c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f1c3 0307 	rsb	r3, r3, #7
 800921a:	2b04      	cmp	r3, #4
 800921c:	d009      	beq.n	8009232 <xPortStartScheduler+0xb2>
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	60bb      	str	r3, [r7, #8]
 8009230:	e7fe      	b.n	8009230 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009232:	4b1e      	ldr	r3, [pc, #120]	; (80092ac <xPortStartScheduler+0x12c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	4a1c      	ldr	r2, [pc, #112]	; (80092ac <xPortStartScheduler+0x12c>)
 800923a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800923c:	4b1b      	ldr	r3, [pc, #108]	; (80092ac <xPortStartScheduler+0x12c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009244:	4a19      	ldr	r2, [pc, #100]	; (80092ac <xPortStartScheduler+0x12c>)
 8009246:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	b2da      	uxtb	r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <xPortStartScheduler+0x130>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a16      	ldr	r2, [pc, #88]	; (80092b0 <xPortStartScheduler+0x130>)
 8009256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800925a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800925c:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <xPortStartScheduler+0x130>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <xPortStartScheduler+0x130>)
 8009262:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009266:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009268:	f000 f8d6 	bl	8009418 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800926c:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <xPortStartScheduler+0x134>)
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009272:	f000 f8f5 	bl	8009460 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009276:	4b10      	ldr	r3, [pc, #64]	; (80092b8 <xPortStartScheduler+0x138>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a0f      	ldr	r2, [pc, #60]	; (80092b8 <xPortStartScheduler+0x138>)
 800927c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009280:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009282:	f7ff ff69 	bl	8009158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009286:	f7ff fa87 	bl	8008798 <vTaskSwitchContext>
	prvTaskExitError();
 800928a:	f7ff ff21 	bl	80090d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	e000ed00 	.word	0xe000ed00
 800929c:	410fc271 	.word	0x410fc271
 80092a0:	410fc270 	.word	0x410fc270
 80092a4:	e000e400 	.word	0xe000e400
 80092a8:	20000444 	.word	0x20000444
 80092ac:	20000448 	.word	0x20000448
 80092b0:	e000ed20 	.word	0xe000ed20
 80092b4:	2000000c 	.word	0x2000000c
 80092b8:	e000ef34 	.word	0xe000ef34

080092bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092d4:	4b0e      	ldr	r3, [pc, #56]	; (8009310 <vPortEnterCritical+0x54>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3301      	adds	r3, #1
 80092da:	4a0d      	ldr	r2, [pc, #52]	; (8009310 <vPortEnterCritical+0x54>)
 80092dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092de:	4b0c      	ldr	r3, [pc, #48]	; (8009310 <vPortEnterCritical+0x54>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d10e      	bne.n	8009304 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092e6:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <vPortEnterCritical+0x58>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d009      	beq.n	8009304 <vPortEnterCritical+0x48>
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	603b      	str	r3, [r7, #0]
 8009302:	e7fe      	b.n	8009302 <vPortEnterCritical+0x46>
	}
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	2000000c 	.word	0x2000000c
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800931e:	4b11      	ldr	r3, [pc, #68]	; (8009364 <vPortExitCritical+0x4c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <vPortExitCritical+0x22>
 8009326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	607b      	str	r3, [r7, #4]
 8009338:	e7fe      	b.n	8009338 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <vPortExitCritical+0x4c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3b01      	subs	r3, #1
 8009340:	4a08      	ldr	r2, [pc, #32]	; (8009364 <vPortExitCritical+0x4c>)
 8009342:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009344:	4b07      	ldr	r3, [pc, #28]	; (8009364 <vPortExitCritical+0x4c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <vPortExitCritical+0x3e>
 800934c:	2300      	movs	r3, #0
 800934e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	2000000c 	.word	0x2000000c
	...

08009370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009370:	f3ef 8009 	mrs	r0, PSP
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <pxCurrentTCBConst>)
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	f01e 0f10 	tst.w	lr, #16
 8009380:	bf08      	it	eq
 8009382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938a:	6010      	str	r0, [r2, #0]
 800938c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009390:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009394:	f380 8811 	msr	BASEPRI, r0
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f7ff f9fa 	bl	8008798 <vTaskSwitchContext>
 80093a4:	f04f 0000 	mov.w	r0, #0
 80093a8:	f380 8811 	msr	BASEPRI, r0
 80093ac:	bc09      	pop	{r0, r3}
 80093ae:	6819      	ldr	r1, [r3, #0]
 80093b0:	6808      	ldr	r0, [r1, #0]
 80093b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b6:	f01e 0f10 	tst.w	lr, #16
 80093ba:	bf08      	it	eq
 80093bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093c0:	f380 8809 	msr	PSP, r0
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	f3af 8000 	nop.w

080093d0 <pxCurrentTCBConst>:
 80093d0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop

080093d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093f0:	f7ff f91a 	bl	8008628 <xTaskIncrementTick>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093fa:	4b06      	ldr	r3, [pc, #24]	; (8009414 <SysTick_Handler+0x3c>)
 80093fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	2300      	movs	r3, #0
 8009404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	e000ed04 	.word	0xe000ed04

08009418 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800941c:	4b0b      	ldr	r3, [pc, #44]	; (800944c <vPortSetupTimerInterrupt+0x34>)
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009422:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <vPortSetupTimerInterrupt+0x38>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <vPortSetupTimerInterrupt+0x3c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a0a      	ldr	r2, [pc, #40]	; (8009458 <vPortSetupTimerInterrupt+0x40>)
 800942e:	fba2 2303 	umull	r2, r3, r2, r3
 8009432:	099b      	lsrs	r3, r3, #6
 8009434:	4a09      	ldr	r2, [pc, #36]	; (800945c <vPortSetupTimerInterrupt+0x44>)
 8009436:	3b01      	subs	r3, #1
 8009438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800943a:	4b04      	ldr	r3, [pc, #16]	; (800944c <vPortSetupTimerInterrupt+0x34>)
 800943c:	2207      	movs	r2, #7
 800943e:	601a      	str	r2, [r3, #0]
}
 8009440:	bf00      	nop
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	e000e010 	.word	0xe000e010
 8009450:	e000e018 	.word	0xe000e018
 8009454:	20000000 	.word	0x20000000
 8009458:	10624dd3 	.word	0x10624dd3
 800945c:	e000e014 	.word	0xe000e014

08009460 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009460:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009470 <vPortEnableVFP+0x10>
 8009464:	6801      	ldr	r1, [r0, #0]
 8009466:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800946a:	6001      	str	r1, [r0, #0]
 800946c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800946e:	bf00      	nop
 8009470:	e000ed88 	.word	0xe000ed88

08009474 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800947a:	f3ef 8305 	mrs	r3, IPSR
 800947e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2b0f      	cmp	r3, #15
 8009484:	d913      	bls.n	80094ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009486:	4a16      	ldr	r2, [pc, #88]	; (80094e0 <vPortValidateInterruptPriority+0x6c>)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4413      	add	r3, r2
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009490:	4b14      	ldr	r3, [pc, #80]	; (80094e4 <vPortValidateInterruptPriority+0x70>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	7afa      	ldrb	r2, [r7, #11]
 8009496:	429a      	cmp	r2, r3
 8009498:	d209      	bcs.n	80094ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	607b      	str	r3, [r7, #4]
 80094ac:	e7fe      	b.n	80094ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094ae:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <vPortValidateInterruptPriority+0x74>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094b6:	4b0d      	ldr	r3, [pc, #52]	; (80094ec <vPortValidateInterruptPriority+0x78>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d909      	bls.n	80094d2 <vPortValidateInterruptPriority+0x5e>
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	e7fe      	b.n	80094d0 <vPortValidateInterruptPriority+0x5c>
	}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	e000e3f0 	.word	0xe000e3f0
 80094e4:	20000444 	.word	0x20000444
 80094e8:	e000ed0c 	.word	0xe000ed0c
 80094ec:	20000448 	.word	0x20000448

080094f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08a      	sub	sp, #40	; 0x28
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094fc:	f7fe ffea 	bl	80084d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009500:	4b57      	ldr	r3, [pc, #348]	; (8009660 <pvPortMalloc+0x170>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009508:	f000 f90c 	bl	8009724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800950c:	4b55      	ldr	r3, [pc, #340]	; (8009664 <pvPortMalloc+0x174>)
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4013      	ands	r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	f040 808c 	bne.w	8009632 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01c      	beq.n	800955a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009520:	2208      	movs	r2, #8
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4413      	add	r3, r2
 8009526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	2b00      	cmp	r3, #0
 8009530:	d013      	beq.n	800955a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f023 0307 	bic.w	r3, r3, #7
 8009538:	3308      	adds	r3, #8
 800953a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f003 0307 	and.w	r3, r3, #7
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <pvPortMalloc+0x6a>
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	617b      	str	r3, [r7, #20]
 8009558:	e7fe      	b.n	8009558 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d068      	beq.n	8009632 <pvPortMalloc+0x142>
 8009560:	4b41      	ldr	r3, [pc, #260]	; (8009668 <pvPortMalloc+0x178>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d863      	bhi.n	8009632 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800956a:	4b40      	ldr	r3, [pc, #256]	; (800966c <pvPortMalloc+0x17c>)
 800956c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800956e:	4b3f      	ldr	r3, [pc, #252]	; (800966c <pvPortMalloc+0x17c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009574:	e004      	b.n	8009580 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d903      	bls.n	8009592 <pvPortMalloc+0xa2>
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f1      	bne.n	8009576 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009592:	4b33      	ldr	r3, [pc, #204]	; (8009660 <pvPortMalloc+0x170>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009598:	429a      	cmp	r2, r3
 800959a:	d04a      	beq.n	8009632 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2208      	movs	r2, #8
 80095a2:	4413      	add	r3, r2
 80095a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	1ad2      	subs	r2, r2, r3
 80095b6:	2308      	movs	r3, #8
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d91e      	bls.n	80095fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <pvPortMalloc+0xf4>
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	613b      	str	r3, [r7, #16]
 80095e2:	e7fe      	b.n	80095e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095f6:	69b8      	ldr	r0, [r7, #24]
 80095f8:	f000 f8f6 	bl	80097e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095fc:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <pvPortMalloc+0x178>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	4a18      	ldr	r2, [pc, #96]	; (8009668 <pvPortMalloc+0x178>)
 8009608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800960a:	4b17      	ldr	r3, [pc, #92]	; (8009668 <pvPortMalloc+0x178>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	4b18      	ldr	r3, [pc, #96]	; (8009670 <pvPortMalloc+0x180>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d203      	bcs.n	800961e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <pvPortMalloc+0x178>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a15      	ldr	r2, [pc, #84]	; (8009670 <pvPortMalloc+0x180>)
 800961c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	4b10      	ldr	r3, [pc, #64]	; (8009664 <pvPortMalloc+0x174>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	431a      	orrs	r2, r3
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009632:	f7fe ff5d 	bl	80084f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f003 0307 	and.w	r3, r3, #7
 800963c:	2b00      	cmp	r3, #0
 800963e:	d009      	beq.n	8009654 <pvPortMalloc+0x164>
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	e7fe      	b.n	8009652 <pvPortMalloc+0x162>
	return pvReturn;
 8009654:	69fb      	ldr	r3, [r7, #28]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3728      	adds	r7, #40	; 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	20001bc4 	.word	0x20001bc4
 8009664:	20001bd0 	.word	0x20001bd0
 8009668:	20001bc8 	.word	0x20001bc8
 800966c:	20001bbc 	.word	0x20001bbc
 8009670:	20001bcc 	.word	0x20001bcc

08009674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d046      	beq.n	8009714 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009686:	2308      	movs	r3, #8
 8009688:	425b      	negs	r3, r3
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	4b20      	ldr	r3, [pc, #128]	; (800971c <vPortFree+0xa8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4013      	ands	r3, r2
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d109      	bne.n	80096b6 <vPortFree+0x42>
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60fb      	str	r3, [r7, #12]
 80096b4:	e7fe      	b.n	80096b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d009      	beq.n	80096d2 <vPortFree+0x5e>
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	60bb      	str	r3, [r7, #8]
 80096d0:	e7fe      	b.n	80096d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	4b11      	ldr	r3, [pc, #68]	; (800971c <vPortFree+0xa8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4013      	ands	r3, r2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d019      	beq.n	8009714 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d115      	bne.n	8009714 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <vPortFree+0xa8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	43db      	mvns	r3, r3
 80096f2:	401a      	ands	r2, r3
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096f8:	f7fe feec 	bl	80084d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <vPortFree+0xac>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4413      	add	r3, r2
 8009706:	4a06      	ldr	r2, [pc, #24]	; (8009720 <vPortFree+0xac>)
 8009708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800970a:	6938      	ldr	r0, [r7, #16]
 800970c:	f000 f86c 	bl	80097e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009710:	f7fe feee 	bl	80084f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009714:	bf00      	nop
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20001bd0 	.word	0x20001bd0
 8009720:	20001bc8 	.word	0x20001bc8

08009724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800972a:	f241 7370 	movw	r3, #6000	; 0x1770
 800972e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009730:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <prvHeapInit+0xac>)
 8009732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3307      	adds	r3, #7
 8009742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	4a1f      	ldr	r2, [pc, #124]	; (80097d0 <prvHeapInit+0xac>)
 8009754:	4413      	add	r3, r2
 8009756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800975c:	4a1d      	ldr	r2, [pc, #116]	; (80097d4 <prvHeapInit+0xb0>)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <prvHeapInit+0xb0>)
 8009764:	2200      	movs	r2, #0
 8009766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009770:	2208      	movs	r2, #8
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0307 	bic.w	r3, r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <prvHeapInit+0xb4>)
 8009784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009786:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <prvHeapInit+0xb4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <prvHeapInit+0xb4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097a4:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <prvHeapInit+0xb4>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <prvHeapInit+0xb8>)
 80097b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <prvHeapInit+0xbc>)
 80097ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <prvHeapInit+0xc0>)
 80097be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	2000044c 	.word	0x2000044c
 80097d4:	20001bbc 	.word	0x20001bbc
 80097d8:	20001bc4 	.word	0x20001bc4
 80097dc:	20001bcc 	.word	0x20001bcc
 80097e0:	20001bc8 	.word	0x20001bc8
 80097e4:	20001bd0 	.word	0x20001bd0

080097e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097f0:	4b28      	ldr	r3, [pc, #160]	; (8009894 <prvInsertBlockIntoFreeList+0xac>)
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <prvInsertBlockIntoFreeList+0x14>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d8f7      	bhi.n	80097f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	4413      	add	r3, r2
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d108      	bne.n	800982a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	441a      	add	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	441a      	add	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d118      	bne.n	8009870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <prvInsertBlockIntoFreeList+0xb0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d00d      	beq.n	8009866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	441a      	add	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e008      	b.n	8009878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009866:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <prvInsertBlockIntoFreeList+0xb0>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e003      	b.n	8009878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	d002      	beq.n	8009886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20001bbc 	.word	0x20001bbc
 8009898:	20001bc4 	.word	0x20001bc4

0800989c <__errno>:
 800989c:	4b01      	ldr	r3, [pc, #4]	; (80098a4 <__errno+0x8>)
 800989e:	6818      	ldr	r0, [r3, #0]
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000010 	.word	0x20000010

080098a8 <__libc_init_array>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4e0d      	ldr	r6, [pc, #52]	; (80098e0 <__libc_init_array+0x38>)
 80098ac:	4c0d      	ldr	r4, [pc, #52]	; (80098e4 <__libc_init_array+0x3c>)
 80098ae:	1ba4      	subs	r4, r4, r6
 80098b0:	10a4      	asrs	r4, r4, #2
 80098b2:	2500      	movs	r5, #0
 80098b4:	42a5      	cmp	r5, r4
 80098b6:	d109      	bne.n	80098cc <__libc_init_array+0x24>
 80098b8:	4e0b      	ldr	r6, [pc, #44]	; (80098e8 <__libc_init_array+0x40>)
 80098ba:	4c0c      	ldr	r4, [pc, #48]	; (80098ec <__libc_init_array+0x44>)
 80098bc:	f000 fc28 	bl	800a110 <_init>
 80098c0:	1ba4      	subs	r4, r4, r6
 80098c2:	10a4      	asrs	r4, r4, #2
 80098c4:	2500      	movs	r5, #0
 80098c6:	42a5      	cmp	r5, r4
 80098c8:	d105      	bne.n	80098d6 <__libc_init_array+0x2e>
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098d0:	4798      	blx	r3
 80098d2:	3501      	adds	r5, #1
 80098d4:	e7ee      	b.n	80098b4 <__libc_init_array+0xc>
 80098d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098da:	4798      	blx	r3
 80098dc:	3501      	adds	r5, #1
 80098de:	e7f2      	b.n	80098c6 <__libc_init_array+0x1e>
 80098e0:	0800a320 	.word	0x0800a320
 80098e4:	0800a320 	.word	0x0800a320
 80098e8:	0800a320 	.word	0x0800a320
 80098ec:	0800a324 	.word	0x0800a324

080098f0 <memcpy>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	1e43      	subs	r3, r0, #1
 80098f4:	440a      	add	r2, r1
 80098f6:	4291      	cmp	r1, r2
 80098f8:	d100      	bne.n	80098fc <memcpy+0xc>
 80098fa:	bd10      	pop	{r4, pc}
 80098fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009904:	e7f7      	b.n	80098f6 <memcpy+0x6>

08009906 <memset>:
 8009906:	4402      	add	r2, r0
 8009908:	4603      	mov	r3, r0
 800990a:	4293      	cmp	r3, r2
 800990c:	d100      	bne.n	8009910 <memset+0xa>
 800990e:	4770      	bx	lr
 8009910:	f803 1b01 	strb.w	r1, [r3], #1
 8009914:	e7f9      	b.n	800990a <memset+0x4>
	...

08009918 <siprintf>:
 8009918:	b40e      	push	{r1, r2, r3}
 800991a:	b500      	push	{lr}
 800991c:	b09c      	sub	sp, #112	; 0x70
 800991e:	ab1d      	add	r3, sp, #116	; 0x74
 8009920:	9002      	str	r0, [sp, #8]
 8009922:	9006      	str	r0, [sp, #24]
 8009924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009928:	4809      	ldr	r0, [pc, #36]	; (8009950 <siprintf+0x38>)
 800992a:	9107      	str	r1, [sp, #28]
 800992c:	9104      	str	r1, [sp, #16]
 800992e:	4909      	ldr	r1, [pc, #36]	; (8009954 <siprintf+0x3c>)
 8009930:	f853 2b04 	ldr.w	r2, [r3], #4
 8009934:	9105      	str	r1, [sp, #20]
 8009936:	6800      	ldr	r0, [r0, #0]
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	a902      	add	r1, sp, #8
 800993c:	f000 f866 	bl	8009a0c <_svfiprintf_r>
 8009940:	9b02      	ldr	r3, [sp, #8]
 8009942:	2200      	movs	r2, #0
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	b01c      	add	sp, #112	; 0x70
 8009948:	f85d eb04 	ldr.w	lr, [sp], #4
 800994c:	b003      	add	sp, #12
 800994e:	4770      	bx	lr
 8009950:	20000010 	.word	0x20000010
 8009954:	ffff0208 	.word	0xffff0208

08009958 <__ssputs_r>:
 8009958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800995c:	688e      	ldr	r6, [r1, #8]
 800995e:	429e      	cmp	r6, r3
 8009960:	4682      	mov	sl, r0
 8009962:	460c      	mov	r4, r1
 8009964:	4690      	mov	r8, r2
 8009966:	4699      	mov	r9, r3
 8009968:	d837      	bhi.n	80099da <__ssputs_r+0x82>
 800996a:	898a      	ldrh	r2, [r1, #12]
 800996c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009970:	d031      	beq.n	80099d6 <__ssputs_r+0x7e>
 8009972:	6825      	ldr	r5, [r4, #0]
 8009974:	6909      	ldr	r1, [r1, #16]
 8009976:	1a6f      	subs	r7, r5, r1
 8009978:	6965      	ldr	r5, [r4, #20]
 800997a:	2302      	movs	r3, #2
 800997c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009980:	fb95 f5f3 	sdiv	r5, r5, r3
 8009984:	f109 0301 	add.w	r3, r9, #1
 8009988:	443b      	add	r3, r7
 800998a:	429d      	cmp	r5, r3
 800998c:	bf38      	it	cc
 800998e:	461d      	movcc	r5, r3
 8009990:	0553      	lsls	r3, r2, #21
 8009992:	d530      	bpl.n	80099f6 <__ssputs_r+0x9e>
 8009994:	4629      	mov	r1, r5
 8009996:	f000 fb21 	bl	8009fdc <_malloc_r>
 800999a:	4606      	mov	r6, r0
 800999c:	b950      	cbnz	r0, 80099b4 <__ssputs_r+0x5c>
 800999e:	230c      	movs	r3, #12
 80099a0:	f8ca 3000 	str.w	r3, [sl]
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b4:	463a      	mov	r2, r7
 80099b6:	6921      	ldr	r1, [r4, #16]
 80099b8:	f7ff ff9a 	bl	80098f0 <memcpy>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c6:	81a3      	strh	r3, [r4, #12]
 80099c8:	6126      	str	r6, [r4, #16]
 80099ca:	6165      	str	r5, [r4, #20]
 80099cc:	443e      	add	r6, r7
 80099ce:	1bed      	subs	r5, r5, r7
 80099d0:	6026      	str	r6, [r4, #0]
 80099d2:	60a5      	str	r5, [r4, #8]
 80099d4:	464e      	mov	r6, r9
 80099d6:	454e      	cmp	r6, r9
 80099d8:	d900      	bls.n	80099dc <__ssputs_r+0x84>
 80099da:	464e      	mov	r6, r9
 80099dc:	4632      	mov	r2, r6
 80099de:	4641      	mov	r1, r8
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	f000 fa93 	bl	8009f0c <memmove>
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	1b9b      	subs	r3, r3, r6
 80099ea:	60a3      	str	r3, [r4, #8]
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	441e      	add	r6, r3
 80099f0:	6026      	str	r6, [r4, #0]
 80099f2:	2000      	movs	r0, #0
 80099f4:	e7dc      	b.n	80099b0 <__ssputs_r+0x58>
 80099f6:	462a      	mov	r2, r5
 80099f8:	f000 fb4a 	bl	800a090 <_realloc_r>
 80099fc:	4606      	mov	r6, r0
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d1e2      	bne.n	80099c8 <__ssputs_r+0x70>
 8009a02:	6921      	ldr	r1, [r4, #16]
 8009a04:	4650      	mov	r0, sl
 8009a06:	f000 fa9b 	bl	8009f40 <_free_r>
 8009a0a:	e7c8      	b.n	800999e <__ssputs_r+0x46>

08009a0c <_svfiprintf_r>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	461d      	mov	r5, r3
 8009a12:	898b      	ldrh	r3, [r1, #12]
 8009a14:	061f      	lsls	r7, r3, #24
 8009a16:	b09d      	sub	sp, #116	; 0x74
 8009a18:	4680      	mov	r8, r0
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	4616      	mov	r6, r2
 8009a1e:	d50f      	bpl.n	8009a40 <_svfiprintf_r+0x34>
 8009a20:	690b      	ldr	r3, [r1, #16]
 8009a22:	b96b      	cbnz	r3, 8009a40 <_svfiprintf_r+0x34>
 8009a24:	2140      	movs	r1, #64	; 0x40
 8009a26:	f000 fad9 	bl	8009fdc <_malloc_r>
 8009a2a:	6020      	str	r0, [r4, #0]
 8009a2c:	6120      	str	r0, [r4, #16]
 8009a2e:	b928      	cbnz	r0, 8009a3c <_svfiprintf_r+0x30>
 8009a30:	230c      	movs	r3, #12
 8009a32:	f8c8 3000 	str.w	r3, [r8]
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	e0c8      	b.n	8009bce <_svfiprintf_r+0x1c2>
 8009a3c:	2340      	movs	r3, #64	; 0x40
 8009a3e:	6163      	str	r3, [r4, #20]
 8009a40:	2300      	movs	r3, #0
 8009a42:	9309      	str	r3, [sp, #36]	; 0x24
 8009a44:	2320      	movs	r3, #32
 8009a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a4a:	2330      	movs	r3, #48	; 0x30
 8009a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a50:	9503      	str	r5, [sp, #12]
 8009a52:	f04f 0b01 	mov.w	fp, #1
 8009a56:	4637      	mov	r7, r6
 8009a58:	463d      	mov	r5, r7
 8009a5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009a5e:	b10b      	cbz	r3, 8009a64 <_svfiprintf_r+0x58>
 8009a60:	2b25      	cmp	r3, #37	; 0x25
 8009a62:	d13e      	bne.n	8009ae2 <_svfiprintf_r+0xd6>
 8009a64:	ebb7 0a06 	subs.w	sl, r7, r6
 8009a68:	d00b      	beq.n	8009a82 <_svfiprintf_r+0x76>
 8009a6a:	4653      	mov	r3, sl
 8009a6c:	4632      	mov	r2, r6
 8009a6e:	4621      	mov	r1, r4
 8009a70:	4640      	mov	r0, r8
 8009a72:	f7ff ff71 	bl	8009958 <__ssputs_r>
 8009a76:	3001      	adds	r0, #1
 8009a78:	f000 80a4 	beq.w	8009bc4 <_svfiprintf_r+0x1b8>
 8009a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7e:	4453      	add	r3, sl
 8009a80:	9309      	str	r3, [sp, #36]	; 0x24
 8009a82:	783b      	ldrb	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 809d 	beq.w	8009bc4 <_svfiprintf_r+0x1b8>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	9307      	str	r3, [sp, #28]
 8009a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a9e:	462f      	mov	r7, r5
 8009aa0:	2205      	movs	r2, #5
 8009aa2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009aa6:	4850      	ldr	r0, [pc, #320]	; (8009be8 <_svfiprintf_r+0x1dc>)
 8009aa8:	f7f6 fb9a 	bl	80001e0 <memchr>
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	b9d0      	cbnz	r0, 8009ae6 <_svfiprintf_r+0xda>
 8009ab0:	06d9      	lsls	r1, r3, #27
 8009ab2:	bf44      	itt	mi
 8009ab4:	2220      	movmi	r2, #32
 8009ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009aba:	071a      	lsls	r2, r3, #28
 8009abc:	bf44      	itt	mi
 8009abe:	222b      	movmi	r2, #43	; 0x2b
 8009ac0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ac4:	782a      	ldrb	r2, [r5, #0]
 8009ac6:	2a2a      	cmp	r2, #42	; 0x2a
 8009ac8:	d015      	beq.n	8009af6 <_svfiprintf_r+0xea>
 8009aca:	9a07      	ldr	r2, [sp, #28]
 8009acc:	462f      	mov	r7, r5
 8009ace:	2000      	movs	r0, #0
 8009ad0:	250a      	movs	r5, #10
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ad8:	3b30      	subs	r3, #48	; 0x30
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	d94d      	bls.n	8009b7a <_svfiprintf_r+0x16e>
 8009ade:	b1b8      	cbz	r0, 8009b10 <_svfiprintf_r+0x104>
 8009ae0:	e00f      	b.n	8009b02 <_svfiprintf_r+0xf6>
 8009ae2:	462f      	mov	r7, r5
 8009ae4:	e7b8      	b.n	8009a58 <_svfiprintf_r+0x4c>
 8009ae6:	4a40      	ldr	r2, [pc, #256]	; (8009be8 <_svfiprintf_r+0x1dc>)
 8009ae8:	1a80      	subs	r0, r0, r2
 8009aea:	fa0b f000 	lsl.w	r0, fp, r0
 8009aee:	4318      	orrs	r0, r3
 8009af0:	9004      	str	r0, [sp, #16]
 8009af2:	463d      	mov	r5, r7
 8009af4:	e7d3      	b.n	8009a9e <_svfiprintf_r+0x92>
 8009af6:	9a03      	ldr	r2, [sp, #12]
 8009af8:	1d11      	adds	r1, r2, #4
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	9103      	str	r1, [sp, #12]
 8009afe:	2a00      	cmp	r2, #0
 8009b00:	db01      	blt.n	8009b06 <_svfiprintf_r+0xfa>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e004      	b.n	8009b10 <_svfiprintf_r+0x104>
 8009b06:	4252      	negs	r2, r2
 8009b08:	f043 0302 	orr.w	r3, r3, #2
 8009b0c:	9207      	str	r2, [sp, #28]
 8009b0e:	9304      	str	r3, [sp, #16]
 8009b10:	783b      	ldrb	r3, [r7, #0]
 8009b12:	2b2e      	cmp	r3, #46	; 0x2e
 8009b14:	d10c      	bne.n	8009b30 <_svfiprintf_r+0x124>
 8009b16:	787b      	ldrb	r3, [r7, #1]
 8009b18:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1a:	d133      	bne.n	8009b84 <_svfiprintf_r+0x178>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	1d1a      	adds	r2, r3, #4
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	9203      	str	r2, [sp, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	bfb8      	it	lt
 8009b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b2c:	3702      	adds	r7, #2
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	4d2e      	ldr	r5, [pc, #184]	; (8009bec <_svfiprintf_r+0x1e0>)
 8009b32:	7839      	ldrb	r1, [r7, #0]
 8009b34:	2203      	movs	r2, #3
 8009b36:	4628      	mov	r0, r5
 8009b38:	f7f6 fb52 	bl	80001e0 <memchr>
 8009b3c:	b138      	cbz	r0, 8009b4e <_svfiprintf_r+0x142>
 8009b3e:	2340      	movs	r3, #64	; 0x40
 8009b40:	1b40      	subs	r0, r0, r5
 8009b42:	fa03 f000 	lsl.w	r0, r3, r0
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	4303      	orrs	r3, r0
 8009b4a:	3701      	adds	r7, #1
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	7839      	ldrb	r1, [r7, #0]
 8009b50:	4827      	ldr	r0, [pc, #156]	; (8009bf0 <_svfiprintf_r+0x1e4>)
 8009b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b56:	2206      	movs	r2, #6
 8009b58:	1c7e      	adds	r6, r7, #1
 8009b5a:	f7f6 fb41 	bl	80001e0 <memchr>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d038      	beq.n	8009bd4 <_svfiprintf_r+0x1c8>
 8009b62:	4b24      	ldr	r3, [pc, #144]	; (8009bf4 <_svfiprintf_r+0x1e8>)
 8009b64:	bb13      	cbnz	r3, 8009bac <_svfiprintf_r+0x1a0>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	3307      	adds	r3, #7
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	3308      	adds	r3, #8
 8009b70:	9303      	str	r3, [sp, #12]
 8009b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b74:	444b      	add	r3, r9
 8009b76:	9309      	str	r3, [sp, #36]	; 0x24
 8009b78:	e76d      	b.n	8009a56 <_svfiprintf_r+0x4a>
 8009b7a:	fb05 3202 	mla	r2, r5, r2, r3
 8009b7e:	2001      	movs	r0, #1
 8009b80:	460f      	mov	r7, r1
 8009b82:	e7a6      	b.n	8009ad2 <_svfiprintf_r+0xc6>
 8009b84:	2300      	movs	r3, #0
 8009b86:	3701      	adds	r7, #1
 8009b88:	9305      	str	r3, [sp, #20]
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	250a      	movs	r5, #10
 8009b8e:	4638      	mov	r0, r7
 8009b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b94:	3a30      	subs	r2, #48	; 0x30
 8009b96:	2a09      	cmp	r2, #9
 8009b98:	d903      	bls.n	8009ba2 <_svfiprintf_r+0x196>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0c8      	beq.n	8009b30 <_svfiprintf_r+0x124>
 8009b9e:	9105      	str	r1, [sp, #20]
 8009ba0:	e7c6      	b.n	8009b30 <_svfiprintf_r+0x124>
 8009ba2:	fb05 2101 	mla	r1, r5, r1, r2
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4607      	mov	r7, r0
 8009baa:	e7f0      	b.n	8009b8e <_svfiprintf_r+0x182>
 8009bac:	ab03      	add	r3, sp, #12
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <_svfiprintf_r+0x1ec>)
 8009bb4:	a904      	add	r1, sp, #16
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	f3af 8000 	nop.w
 8009bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009bc0:	4681      	mov	r9, r0
 8009bc2:	d1d6      	bne.n	8009b72 <_svfiprintf_r+0x166>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	065b      	lsls	r3, r3, #25
 8009bc8:	f53f af35 	bmi.w	8009a36 <_svfiprintf_r+0x2a>
 8009bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bce:	b01d      	add	sp, #116	; 0x74
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	ab03      	add	r3, sp, #12
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	4622      	mov	r2, r4
 8009bda:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <_svfiprintf_r+0x1ec>)
 8009bdc:	a904      	add	r1, sp, #16
 8009bde:	4640      	mov	r0, r8
 8009be0:	f000 f882 	bl	8009ce8 <_printf_i>
 8009be4:	e7ea      	b.n	8009bbc <_svfiprintf_r+0x1b0>
 8009be6:	bf00      	nop
 8009be8:	0800a2e4 	.word	0x0800a2e4
 8009bec:	0800a2ea 	.word	0x0800a2ea
 8009bf0:	0800a2ee 	.word	0x0800a2ee
 8009bf4:	00000000 	.word	0x00000000
 8009bf8:	08009959 	.word	0x08009959

08009bfc <_printf_common>:
 8009bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c00:	4691      	mov	r9, r2
 8009c02:	461f      	mov	r7, r3
 8009c04:	688a      	ldr	r2, [r1, #8]
 8009c06:	690b      	ldr	r3, [r1, #16]
 8009c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	bfb8      	it	lt
 8009c10:	4613      	movlt	r3, r2
 8009c12:	f8c9 3000 	str.w	r3, [r9]
 8009c16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	b112      	cbz	r2, 8009c26 <_printf_common+0x2a>
 8009c20:	3301      	adds	r3, #1
 8009c22:	f8c9 3000 	str.w	r3, [r9]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	0699      	lsls	r1, r3, #26
 8009c2a:	bf42      	ittt	mi
 8009c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c30:	3302      	addmi	r3, #2
 8009c32:	f8c9 3000 	strmi.w	r3, [r9]
 8009c36:	6825      	ldr	r5, [r4, #0]
 8009c38:	f015 0506 	ands.w	r5, r5, #6
 8009c3c:	d107      	bne.n	8009c4e <_printf_common+0x52>
 8009c3e:	f104 0a19 	add.w	sl, r4, #25
 8009c42:	68e3      	ldr	r3, [r4, #12]
 8009c44:	f8d9 2000 	ldr.w	r2, [r9]
 8009c48:	1a9b      	subs	r3, r3, r2
 8009c4a:	42ab      	cmp	r3, r5
 8009c4c:	dc28      	bgt.n	8009ca0 <_printf_common+0xa4>
 8009c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c52:	6822      	ldr	r2, [r4, #0]
 8009c54:	3300      	adds	r3, #0
 8009c56:	bf18      	it	ne
 8009c58:	2301      	movne	r3, #1
 8009c5a:	0692      	lsls	r2, r2, #26
 8009c5c:	d42d      	bmi.n	8009cba <_printf_common+0xbe>
 8009c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c62:	4639      	mov	r1, r7
 8009c64:	4630      	mov	r0, r6
 8009c66:	47c0      	blx	r8
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d020      	beq.n	8009cae <_printf_common+0xb2>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	68e5      	ldr	r5, [r4, #12]
 8009c70:	f8d9 2000 	ldr.w	r2, [r9]
 8009c74:	f003 0306 	and.w	r3, r3, #6
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	bf08      	it	eq
 8009c7c:	1aad      	subeq	r5, r5, r2
 8009c7e:	68a3      	ldr	r3, [r4, #8]
 8009c80:	6922      	ldr	r2, [r4, #16]
 8009c82:	bf0c      	ite	eq
 8009c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c88:	2500      	movne	r5, #0
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	bfc4      	itt	gt
 8009c8e:	1a9b      	subgt	r3, r3, r2
 8009c90:	18ed      	addgt	r5, r5, r3
 8009c92:	f04f 0900 	mov.w	r9, #0
 8009c96:	341a      	adds	r4, #26
 8009c98:	454d      	cmp	r5, r9
 8009c9a:	d11a      	bne.n	8009cd2 <_printf_common+0xd6>
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	e008      	b.n	8009cb2 <_printf_common+0xb6>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	47c0      	blx	r8
 8009caa:	3001      	adds	r0, #1
 8009cac:	d103      	bne.n	8009cb6 <_printf_common+0xba>
 8009cae:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb6:	3501      	adds	r5, #1
 8009cb8:	e7c3      	b.n	8009c42 <_printf_common+0x46>
 8009cba:	18e1      	adds	r1, r4, r3
 8009cbc:	1c5a      	adds	r2, r3, #1
 8009cbe:	2030      	movs	r0, #48	; 0x30
 8009cc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cc4:	4422      	add	r2, r4
 8009cc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cce:	3302      	adds	r3, #2
 8009cd0:	e7c5      	b.n	8009c5e <_printf_common+0x62>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4622      	mov	r2, r4
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4630      	mov	r0, r6
 8009cda:	47c0      	blx	r8
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d0e6      	beq.n	8009cae <_printf_common+0xb2>
 8009ce0:	f109 0901 	add.w	r9, r9, #1
 8009ce4:	e7d8      	b.n	8009c98 <_printf_common+0x9c>
	...

08009ce8 <_printf_i>:
 8009ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	7e09      	ldrb	r1, [r1, #24]
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	296e      	cmp	r1, #110	; 0x6e
 8009cf8:	4617      	mov	r7, r2
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	4698      	mov	r8, r3
 8009cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d00:	f000 80b3 	beq.w	8009e6a <_printf_i+0x182>
 8009d04:	d822      	bhi.n	8009d4c <_printf_i+0x64>
 8009d06:	2963      	cmp	r1, #99	; 0x63
 8009d08:	d036      	beq.n	8009d78 <_printf_i+0x90>
 8009d0a:	d80a      	bhi.n	8009d22 <_printf_i+0x3a>
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	f000 80b9 	beq.w	8009e84 <_printf_i+0x19c>
 8009d12:	2958      	cmp	r1, #88	; 0x58
 8009d14:	f000 8083 	beq.w	8009e1e <_printf_i+0x136>
 8009d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d20:	e032      	b.n	8009d88 <_printf_i+0xa0>
 8009d22:	2964      	cmp	r1, #100	; 0x64
 8009d24:	d001      	beq.n	8009d2a <_printf_i+0x42>
 8009d26:	2969      	cmp	r1, #105	; 0x69
 8009d28:	d1f6      	bne.n	8009d18 <_printf_i+0x30>
 8009d2a:	6820      	ldr	r0, [r4, #0]
 8009d2c:	6813      	ldr	r3, [r2, #0]
 8009d2e:	0605      	lsls	r5, r0, #24
 8009d30:	f103 0104 	add.w	r1, r3, #4
 8009d34:	d52a      	bpl.n	8009d8c <_printf_i+0xa4>
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6011      	str	r1, [r2, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da03      	bge.n	8009d46 <_printf_i+0x5e>
 8009d3e:	222d      	movs	r2, #45	; 0x2d
 8009d40:	425b      	negs	r3, r3
 8009d42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d46:	486f      	ldr	r0, [pc, #444]	; (8009f04 <_printf_i+0x21c>)
 8009d48:	220a      	movs	r2, #10
 8009d4a:	e039      	b.n	8009dc0 <_printf_i+0xd8>
 8009d4c:	2973      	cmp	r1, #115	; 0x73
 8009d4e:	f000 809d 	beq.w	8009e8c <_printf_i+0x1a4>
 8009d52:	d808      	bhi.n	8009d66 <_printf_i+0x7e>
 8009d54:	296f      	cmp	r1, #111	; 0x6f
 8009d56:	d020      	beq.n	8009d9a <_printf_i+0xb2>
 8009d58:	2970      	cmp	r1, #112	; 0x70
 8009d5a:	d1dd      	bne.n	8009d18 <_printf_i+0x30>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	f043 0320 	orr.w	r3, r3, #32
 8009d62:	6023      	str	r3, [r4, #0]
 8009d64:	e003      	b.n	8009d6e <_printf_i+0x86>
 8009d66:	2975      	cmp	r1, #117	; 0x75
 8009d68:	d017      	beq.n	8009d9a <_printf_i+0xb2>
 8009d6a:	2978      	cmp	r1, #120	; 0x78
 8009d6c:	d1d4      	bne.n	8009d18 <_printf_i+0x30>
 8009d6e:	2378      	movs	r3, #120	; 0x78
 8009d70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d74:	4864      	ldr	r0, [pc, #400]	; (8009f08 <_printf_i+0x220>)
 8009d76:	e055      	b.n	8009e24 <_printf_i+0x13c>
 8009d78:	6813      	ldr	r3, [r2, #0]
 8009d7a:	1d19      	adds	r1, r3, #4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6011      	str	r1, [r2, #0]
 8009d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e08c      	b.n	8009ea6 <_printf_i+0x1be>
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6011      	str	r1, [r2, #0]
 8009d90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d94:	bf18      	it	ne
 8009d96:	b21b      	sxthne	r3, r3
 8009d98:	e7cf      	b.n	8009d3a <_printf_i+0x52>
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	6825      	ldr	r5, [r4, #0]
 8009d9e:	1d18      	adds	r0, r3, #4
 8009da0:	6010      	str	r0, [r2, #0]
 8009da2:	0628      	lsls	r0, r5, #24
 8009da4:	d501      	bpl.n	8009daa <_printf_i+0xc2>
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	e002      	b.n	8009db0 <_printf_i+0xc8>
 8009daa:	0668      	lsls	r0, r5, #25
 8009dac:	d5fb      	bpl.n	8009da6 <_printf_i+0xbe>
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	4854      	ldr	r0, [pc, #336]	; (8009f04 <_printf_i+0x21c>)
 8009db2:	296f      	cmp	r1, #111	; 0x6f
 8009db4:	bf14      	ite	ne
 8009db6:	220a      	movne	r2, #10
 8009db8:	2208      	moveq	r2, #8
 8009dba:	2100      	movs	r1, #0
 8009dbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dc0:	6865      	ldr	r5, [r4, #4]
 8009dc2:	60a5      	str	r5, [r4, #8]
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	f2c0 8095 	blt.w	8009ef4 <_printf_i+0x20c>
 8009dca:	6821      	ldr	r1, [r4, #0]
 8009dcc:	f021 0104 	bic.w	r1, r1, #4
 8009dd0:	6021      	str	r1, [r4, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d13d      	bne.n	8009e52 <_printf_i+0x16a>
 8009dd6:	2d00      	cmp	r5, #0
 8009dd8:	f040 808e 	bne.w	8009ef8 <_printf_i+0x210>
 8009ddc:	4665      	mov	r5, ip
 8009dde:	2a08      	cmp	r2, #8
 8009de0:	d10b      	bne.n	8009dfa <_printf_i+0x112>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	07db      	lsls	r3, r3, #31
 8009de6:	d508      	bpl.n	8009dfa <_printf_i+0x112>
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	6862      	ldr	r2, [r4, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	bfde      	ittt	le
 8009df0:	2330      	movle	r3, #48	; 0x30
 8009df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009df6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dfa:	ebac 0305 	sub.w	r3, ip, r5
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	f8cd 8000 	str.w	r8, [sp]
 8009e04:	463b      	mov	r3, r7
 8009e06:	aa03      	add	r2, sp, #12
 8009e08:	4621      	mov	r1, r4
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff fef6 	bl	8009bfc <_printf_common>
 8009e10:	3001      	adds	r0, #1
 8009e12:	d14d      	bne.n	8009eb0 <_printf_i+0x1c8>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	b005      	add	sp, #20
 8009e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e1e:	4839      	ldr	r0, [pc, #228]	; (8009f04 <_printf_i+0x21c>)
 8009e20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e24:	6813      	ldr	r3, [r2, #0]
 8009e26:	6821      	ldr	r1, [r4, #0]
 8009e28:	1d1d      	adds	r5, r3, #4
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6015      	str	r5, [r2, #0]
 8009e2e:	060a      	lsls	r2, r1, #24
 8009e30:	d50b      	bpl.n	8009e4a <_printf_i+0x162>
 8009e32:	07ca      	lsls	r2, r1, #31
 8009e34:	bf44      	itt	mi
 8009e36:	f041 0120 	orrmi.w	r1, r1, #32
 8009e3a:	6021      	strmi	r1, [r4, #0]
 8009e3c:	b91b      	cbnz	r3, 8009e46 <_printf_i+0x15e>
 8009e3e:	6822      	ldr	r2, [r4, #0]
 8009e40:	f022 0220 	bic.w	r2, r2, #32
 8009e44:	6022      	str	r2, [r4, #0]
 8009e46:	2210      	movs	r2, #16
 8009e48:	e7b7      	b.n	8009dba <_printf_i+0xd2>
 8009e4a:	064d      	lsls	r5, r1, #25
 8009e4c:	bf48      	it	mi
 8009e4e:	b29b      	uxthmi	r3, r3
 8009e50:	e7ef      	b.n	8009e32 <_printf_i+0x14a>
 8009e52:	4665      	mov	r5, ip
 8009e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e58:	fb02 3311 	mls	r3, r2, r1, r3
 8009e5c:	5cc3      	ldrb	r3, [r0, r3]
 8009e5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e62:	460b      	mov	r3, r1
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d1f5      	bne.n	8009e54 <_printf_i+0x16c>
 8009e68:	e7b9      	b.n	8009dde <_printf_i+0xf6>
 8009e6a:	6813      	ldr	r3, [r2, #0]
 8009e6c:	6825      	ldr	r5, [r4, #0]
 8009e6e:	6961      	ldr	r1, [r4, #20]
 8009e70:	1d18      	adds	r0, r3, #4
 8009e72:	6010      	str	r0, [r2, #0]
 8009e74:	0628      	lsls	r0, r5, #24
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	d501      	bpl.n	8009e7e <_printf_i+0x196>
 8009e7a:	6019      	str	r1, [r3, #0]
 8009e7c:	e002      	b.n	8009e84 <_printf_i+0x19c>
 8009e7e:	066a      	lsls	r2, r5, #25
 8009e80:	d5fb      	bpl.n	8009e7a <_printf_i+0x192>
 8009e82:	8019      	strh	r1, [r3, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	4665      	mov	r5, ip
 8009e8a:	e7b9      	b.n	8009e00 <_printf_i+0x118>
 8009e8c:	6813      	ldr	r3, [r2, #0]
 8009e8e:	1d19      	adds	r1, r3, #4
 8009e90:	6011      	str	r1, [r2, #0]
 8009e92:	681d      	ldr	r5, [r3, #0]
 8009e94:	6862      	ldr	r2, [r4, #4]
 8009e96:	2100      	movs	r1, #0
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f7f6 f9a1 	bl	80001e0 <memchr>
 8009e9e:	b108      	cbz	r0, 8009ea4 <_printf_i+0x1bc>
 8009ea0:	1b40      	subs	r0, r0, r5
 8009ea2:	6060      	str	r0, [r4, #4]
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	6123      	str	r3, [r4, #16]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eae:	e7a7      	b.n	8009e00 <_printf_i+0x118>
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	47c0      	blx	r8
 8009eba:	3001      	adds	r0, #1
 8009ebc:	d0aa      	beq.n	8009e14 <_printf_i+0x12c>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	079b      	lsls	r3, r3, #30
 8009ec2:	d413      	bmi.n	8009eec <_printf_i+0x204>
 8009ec4:	68e0      	ldr	r0, [r4, #12]
 8009ec6:	9b03      	ldr	r3, [sp, #12]
 8009ec8:	4298      	cmp	r0, r3
 8009eca:	bfb8      	it	lt
 8009ecc:	4618      	movlt	r0, r3
 8009ece:	e7a3      	b.n	8009e18 <_printf_i+0x130>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	464a      	mov	r2, r9
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	47c0      	blx	r8
 8009eda:	3001      	adds	r0, #1
 8009edc:	d09a      	beq.n	8009e14 <_printf_i+0x12c>
 8009ede:	3501      	adds	r5, #1
 8009ee0:	68e3      	ldr	r3, [r4, #12]
 8009ee2:	9a03      	ldr	r2, [sp, #12]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	42ab      	cmp	r3, r5
 8009ee8:	dcf2      	bgt.n	8009ed0 <_printf_i+0x1e8>
 8009eea:	e7eb      	b.n	8009ec4 <_printf_i+0x1dc>
 8009eec:	2500      	movs	r5, #0
 8009eee:	f104 0919 	add.w	r9, r4, #25
 8009ef2:	e7f5      	b.n	8009ee0 <_printf_i+0x1f8>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1ac      	bne.n	8009e52 <_printf_i+0x16a>
 8009ef8:	7803      	ldrb	r3, [r0, #0]
 8009efa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009efe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f02:	e76c      	b.n	8009dde <_printf_i+0xf6>
 8009f04:	0800a2f5 	.word	0x0800a2f5
 8009f08:	0800a306 	.word	0x0800a306

08009f0c <memmove>:
 8009f0c:	4288      	cmp	r0, r1
 8009f0e:	b510      	push	{r4, lr}
 8009f10:	eb01 0302 	add.w	r3, r1, r2
 8009f14:	d807      	bhi.n	8009f26 <memmove+0x1a>
 8009f16:	1e42      	subs	r2, r0, #1
 8009f18:	4299      	cmp	r1, r3
 8009f1a:	d00a      	beq.n	8009f32 <memmove+0x26>
 8009f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f20:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009f24:	e7f8      	b.n	8009f18 <memmove+0xc>
 8009f26:	4283      	cmp	r3, r0
 8009f28:	d9f5      	bls.n	8009f16 <memmove+0xa>
 8009f2a:	1881      	adds	r1, r0, r2
 8009f2c:	1ad2      	subs	r2, r2, r3
 8009f2e:	42d3      	cmn	r3, r2
 8009f30:	d100      	bne.n	8009f34 <memmove+0x28>
 8009f32:	bd10      	pop	{r4, pc}
 8009f34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009f3c:	e7f7      	b.n	8009f2e <memmove+0x22>
	...

08009f40 <_free_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	2900      	cmp	r1, #0
 8009f46:	d045      	beq.n	8009fd4 <_free_r+0x94>
 8009f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4c:	1f0c      	subs	r4, r1, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bfb8      	it	lt
 8009f52:	18e4      	addlt	r4, r4, r3
 8009f54:	f000 f8d2 	bl	800a0fc <__malloc_lock>
 8009f58:	4a1f      	ldr	r2, [pc, #124]	; (8009fd8 <_free_r+0x98>)
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	b933      	cbnz	r3, 8009f6e <_free_r+0x2e>
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	6014      	str	r4, [r2, #0]
 8009f64:	4628      	mov	r0, r5
 8009f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f6a:	f000 b8c8 	b.w	800a0fe <__malloc_unlock>
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	d90c      	bls.n	8009f8c <_free_r+0x4c>
 8009f72:	6821      	ldr	r1, [r4, #0]
 8009f74:	1862      	adds	r2, r4, r1
 8009f76:	4293      	cmp	r3, r2
 8009f78:	bf04      	itt	eq
 8009f7a:	681a      	ldreq	r2, [r3, #0]
 8009f7c:	685b      	ldreq	r3, [r3, #4]
 8009f7e:	6063      	str	r3, [r4, #4]
 8009f80:	bf04      	itt	eq
 8009f82:	1852      	addeq	r2, r2, r1
 8009f84:	6022      	streq	r2, [r4, #0]
 8009f86:	6004      	str	r4, [r0, #0]
 8009f88:	e7ec      	b.n	8009f64 <_free_r+0x24>
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	b10a      	cbz	r2, 8009f94 <_free_r+0x54>
 8009f90:	42a2      	cmp	r2, r4
 8009f92:	d9fa      	bls.n	8009f8a <_free_r+0x4a>
 8009f94:	6819      	ldr	r1, [r3, #0]
 8009f96:	1858      	adds	r0, r3, r1
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d10b      	bne.n	8009fb4 <_free_r+0x74>
 8009f9c:	6820      	ldr	r0, [r4, #0]
 8009f9e:	4401      	add	r1, r0
 8009fa0:	1858      	adds	r0, r3, r1
 8009fa2:	4282      	cmp	r2, r0
 8009fa4:	6019      	str	r1, [r3, #0]
 8009fa6:	d1dd      	bne.n	8009f64 <_free_r+0x24>
 8009fa8:	6810      	ldr	r0, [r2, #0]
 8009faa:	6852      	ldr	r2, [r2, #4]
 8009fac:	605a      	str	r2, [r3, #4]
 8009fae:	4401      	add	r1, r0
 8009fb0:	6019      	str	r1, [r3, #0]
 8009fb2:	e7d7      	b.n	8009f64 <_free_r+0x24>
 8009fb4:	d902      	bls.n	8009fbc <_free_r+0x7c>
 8009fb6:	230c      	movs	r3, #12
 8009fb8:	602b      	str	r3, [r5, #0]
 8009fba:	e7d3      	b.n	8009f64 <_free_r+0x24>
 8009fbc:	6820      	ldr	r0, [r4, #0]
 8009fbe:	1821      	adds	r1, r4, r0
 8009fc0:	428a      	cmp	r2, r1
 8009fc2:	bf04      	itt	eq
 8009fc4:	6811      	ldreq	r1, [r2, #0]
 8009fc6:	6852      	ldreq	r2, [r2, #4]
 8009fc8:	6062      	str	r2, [r4, #4]
 8009fca:	bf04      	itt	eq
 8009fcc:	1809      	addeq	r1, r1, r0
 8009fce:	6021      	streq	r1, [r4, #0]
 8009fd0:	605c      	str	r4, [r3, #4]
 8009fd2:	e7c7      	b.n	8009f64 <_free_r+0x24>
 8009fd4:	bd38      	pop	{r3, r4, r5, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20001bd4 	.word	0x20001bd4

08009fdc <_malloc_r>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	1ccd      	adds	r5, r1, #3
 8009fe0:	f025 0503 	bic.w	r5, r5, #3
 8009fe4:	3508      	adds	r5, #8
 8009fe6:	2d0c      	cmp	r5, #12
 8009fe8:	bf38      	it	cc
 8009fea:	250c      	movcc	r5, #12
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	4606      	mov	r6, r0
 8009ff0:	db01      	blt.n	8009ff6 <_malloc_r+0x1a>
 8009ff2:	42a9      	cmp	r1, r5
 8009ff4:	d903      	bls.n	8009ffe <_malloc_r+0x22>
 8009ff6:	230c      	movs	r3, #12
 8009ff8:	6033      	str	r3, [r6, #0]
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	bd70      	pop	{r4, r5, r6, pc}
 8009ffe:	f000 f87d 	bl	800a0fc <__malloc_lock>
 800a002:	4a21      	ldr	r2, [pc, #132]	; (800a088 <_malloc_r+0xac>)
 800a004:	6814      	ldr	r4, [r2, #0]
 800a006:	4621      	mov	r1, r4
 800a008:	b991      	cbnz	r1, 800a030 <_malloc_r+0x54>
 800a00a:	4c20      	ldr	r4, [pc, #128]	; (800a08c <_malloc_r+0xb0>)
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	b91b      	cbnz	r3, 800a018 <_malloc_r+0x3c>
 800a010:	4630      	mov	r0, r6
 800a012:	f000 f863 	bl	800a0dc <_sbrk_r>
 800a016:	6020      	str	r0, [r4, #0]
 800a018:	4629      	mov	r1, r5
 800a01a:	4630      	mov	r0, r6
 800a01c:	f000 f85e 	bl	800a0dc <_sbrk_r>
 800a020:	1c43      	adds	r3, r0, #1
 800a022:	d124      	bne.n	800a06e <_malloc_r+0x92>
 800a024:	230c      	movs	r3, #12
 800a026:	6033      	str	r3, [r6, #0]
 800a028:	4630      	mov	r0, r6
 800a02a:	f000 f868 	bl	800a0fe <__malloc_unlock>
 800a02e:	e7e4      	b.n	8009ffa <_malloc_r+0x1e>
 800a030:	680b      	ldr	r3, [r1, #0]
 800a032:	1b5b      	subs	r3, r3, r5
 800a034:	d418      	bmi.n	800a068 <_malloc_r+0x8c>
 800a036:	2b0b      	cmp	r3, #11
 800a038:	d90f      	bls.n	800a05a <_malloc_r+0x7e>
 800a03a:	600b      	str	r3, [r1, #0]
 800a03c:	50cd      	str	r5, [r1, r3]
 800a03e:	18cc      	adds	r4, r1, r3
 800a040:	4630      	mov	r0, r6
 800a042:	f000 f85c 	bl	800a0fe <__malloc_unlock>
 800a046:	f104 000b 	add.w	r0, r4, #11
 800a04a:	1d23      	adds	r3, r4, #4
 800a04c:	f020 0007 	bic.w	r0, r0, #7
 800a050:	1ac3      	subs	r3, r0, r3
 800a052:	d0d3      	beq.n	8009ffc <_malloc_r+0x20>
 800a054:	425a      	negs	r2, r3
 800a056:	50e2      	str	r2, [r4, r3]
 800a058:	e7d0      	b.n	8009ffc <_malloc_r+0x20>
 800a05a:	428c      	cmp	r4, r1
 800a05c:	684b      	ldr	r3, [r1, #4]
 800a05e:	bf16      	itet	ne
 800a060:	6063      	strne	r3, [r4, #4]
 800a062:	6013      	streq	r3, [r2, #0]
 800a064:	460c      	movne	r4, r1
 800a066:	e7eb      	b.n	800a040 <_malloc_r+0x64>
 800a068:	460c      	mov	r4, r1
 800a06a:	6849      	ldr	r1, [r1, #4]
 800a06c:	e7cc      	b.n	800a008 <_malloc_r+0x2c>
 800a06e:	1cc4      	adds	r4, r0, #3
 800a070:	f024 0403 	bic.w	r4, r4, #3
 800a074:	42a0      	cmp	r0, r4
 800a076:	d005      	beq.n	800a084 <_malloc_r+0xa8>
 800a078:	1a21      	subs	r1, r4, r0
 800a07a:	4630      	mov	r0, r6
 800a07c:	f000 f82e 	bl	800a0dc <_sbrk_r>
 800a080:	3001      	adds	r0, #1
 800a082:	d0cf      	beq.n	800a024 <_malloc_r+0x48>
 800a084:	6025      	str	r5, [r4, #0]
 800a086:	e7db      	b.n	800a040 <_malloc_r+0x64>
 800a088:	20001bd4 	.word	0x20001bd4
 800a08c:	20001bd8 	.word	0x20001bd8

0800a090 <_realloc_r>:
 800a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a092:	4607      	mov	r7, r0
 800a094:	4614      	mov	r4, r2
 800a096:	460e      	mov	r6, r1
 800a098:	b921      	cbnz	r1, 800a0a4 <_realloc_r+0x14>
 800a09a:	4611      	mov	r1, r2
 800a09c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0a0:	f7ff bf9c 	b.w	8009fdc <_malloc_r>
 800a0a4:	b922      	cbnz	r2, 800a0b0 <_realloc_r+0x20>
 800a0a6:	f7ff ff4b 	bl	8009f40 <_free_r>
 800a0aa:	4625      	mov	r5, r4
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b0:	f000 f826 	bl	800a100 <_malloc_usable_size_r>
 800a0b4:	42a0      	cmp	r0, r4
 800a0b6:	d20f      	bcs.n	800a0d8 <_realloc_r+0x48>
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	f7ff ff8e 	bl	8009fdc <_malloc_r>
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d0f2      	beq.n	800a0ac <_realloc_r+0x1c>
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4622      	mov	r2, r4
 800a0ca:	f7ff fc11 	bl	80098f0 <memcpy>
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f7ff ff35 	bl	8009f40 <_free_r>
 800a0d6:	e7e9      	b.n	800a0ac <_realloc_r+0x1c>
 800a0d8:	4635      	mov	r5, r6
 800a0da:	e7e7      	b.n	800a0ac <_realloc_r+0x1c>

0800a0dc <_sbrk_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4c06      	ldr	r4, [pc, #24]	; (800a0f8 <_sbrk_r+0x1c>)
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	4608      	mov	r0, r1
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	f7f7 ffbc 	bl	8002064 <_sbrk>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_sbrk_r+0x1a>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_sbrk_r+0x1a>
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	20002398 	.word	0x20002398

0800a0fc <__malloc_lock>:
 800a0fc:	4770      	bx	lr

0800a0fe <__malloc_unlock>:
 800a0fe:	4770      	bx	lr

0800a100 <_malloc_usable_size_r>:
 800a100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a104:	1f18      	subs	r0, r3, #4
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfbc      	itt	lt
 800a10a:	580b      	ldrlt	r3, [r1, r0]
 800a10c:	18c0      	addlt	r0, r0, r3
 800a10e:	4770      	bx	lr

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
