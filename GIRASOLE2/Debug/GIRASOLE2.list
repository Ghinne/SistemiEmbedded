
GIRASOLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a218  0800a218  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a220  0800a220  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a220  0800a220  0001a220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a224  0800a224  0001a224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000231c  20000074  0800a29c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002390  0800a29c  00022390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000284e1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047ab  00000000  00000000  00048585  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024c0  00000000  00000000  0004cd30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022a8  00000000  00000000  0004f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c817  00000000  00000000  00051498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b4dd  00000000  00000000  0007dcaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00119172  00000000  00000000  0009918c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b22fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1a8  00000000  00000000  001b237c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a010 	.word	0x0800a010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a010 	.word	0x0800a010

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <panelDataInit>:
struct panelsData {
	int rightPanelValue, leftPanelValue, threshold, variation;
} pd;

// Function to initialize panel data
void panelDataInit() {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	pd.leftPanelValue = 0;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <panelDataInit+0x28>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
	pd.rightPanelValue = 0;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <panelDataInit+0x28>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	pd.threshold = 10;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <panelDataInit+0x28>)
 80005c6:	220a      	movs	r2, #10
 80005c8:	609a      	str	r2, [r3, #8]
	pd.variation = 10;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <panelDataInit+0x28>)
 80005cc:	220a      	movs	r2, #10
 80005ce:	60da      	str	r2, [r3, #12]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200022d8 	.word	0x200022d8

080005e0 <prec_control_manag_init>:
	int lpanel_done, rpanel_done;
	int led1_done, led2_done, led3_done;
} pcm;

void prec_control_manag_init()
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	pcm.lpw = pcm.rpw = 0;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <prec_control_manag_init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <prec_control_manag_init+0x58>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <prec_control_manag_init+0x58>)
 80005f0:	6013      	str	r3, [r2, #0]
	pcm.l1w = pcm.l2w = pcm.l3w = 0;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <prec_control_manag_init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <prec_control_manag_init+0x58>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <prec_control_manag_init+0x58>)
 80005fe:	60d3      	str	r3, [r2, #12]
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <prec_control_manag_init+0x58>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <prec_control_manag_init+0x58>)
 8000606:	6093      	str	r3, [r2, #8]
	pcm.lpanel_done = pcm.rpanel_done = 0;
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <prec_control_manag_init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <prec_control_manag_init+0x58>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a09      	ldr	r2, [pc, #36]	; (8000638 <prec_control_manag_init+0x58>)
 8000614:	6153      	str	r3, [r2, #20]
	pcm.led1_done = pcm.led2_done = pcm.led3_done = 1;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <prec_control_manag_init+0x58>)
 8000618:	2201      	movs	r2, #1
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <prec_control_manag_init+0x58>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	4a05      	ldr	r2, [pc, #20]	; (8000638 <prec_control_manag_init+0x58>)
 8000622:	6213      	str	r3, [r2, #32]
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <prec_control_manag_init+0x58>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <prec_control_manag_init+0x58>)
 800062a:	61d3      	str	r3, [r2, #28]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000215c 	.word	0x2000215c

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b0c0      	sub	sp, #256	; 0x100
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Initialize panels data structure
	panelDataInit();
 8000642:	f7ff ffb7 	bl	80005b4 <panelDataInit>
	// Initialize control data structure
	prec_control_manag_init();
 8000646:	f7ff ffcb 	bl	80005e0 <prec_control_manag_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f001 fd1c 	bl	8002086 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f92b 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 fc17 	bl	8000e84 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000656:	f000 faad 	bl	8000bb4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800065a:	f000 fae3 	bl	8000c24 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800065e:	f000 fb1f 	bl	8000ca0 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000662:	f000 fb43 	bl	8000cec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000666:	f000 fb7f 	bl	8000d68 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800066a:	f000 fbad 	bl	8000dc8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800066e:	f000 fbdb 	bl	8000e28 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000672:	f000 f9bf 	bl	80009f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000676:	f000 fa37 	bl	8000ae8 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexPD */
  osMutexDef(MutexPD);
 800067a:	2300      	movs	r3, #0
 800067c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000680:	2300      	movs	r3, #0
 8000682:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  MutexPDHandle = osMutexCreate(osMutex(MutexPD));
 8000686:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fcc7 	bl	800701e <osMutexCreate>
 8000690:	4602      	mov	r2, r0
 8000692:	4b70      	ldr	r3, [pc, #448]	; (8000854 <main+0x218>)
 8000694:	601a      	str	r2, [r3, #0]

  /* definition and creation of panelsMutex */
  osMutexDef(panelsMutex);
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  panelsMutexHandle = osMutexCreate(osMutex(panelsMutex));
 80006a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fcb9 	bl	800701e <osMutexCreate>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4b6a      	ldr	r3, [pc, #424]	; (8000858 <main+0x21c>)
 80006b0:	601a      	str	r2, [r3, #0]
  //osMutexWait(panelsMutexHandle, osWaitForever);
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of rpanel_sem */
  osSemaphoreDef(rpanel_sem);
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  rpanel_semHandle = osSemaphoreCreate(osSemaphore(rpanel_sem), 1);
 80006be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80006c2:	2101      	movs	r1, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fd47 	bl	8007158 <osSemaphoreCreate>
 80006ca:	4602      	mov	r2, r0
 80006cc:	4b63      	ldr	r3, [pc, #396]	; (800085c <main+0x220>)
 80006ce:	601a      	str	r2, [r3, #0]

  /* definition and creation of lpanel_sem */
  osSemaphoreDef(lpanel_sem);
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  lpanel_semHandle = osSemaphoreCreate(osSemaphore(lpanel_sem), 1);
 80006dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80006e0:	2101      	movs	r1, #1
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 fd38 	bl	8007158 <osSemaphoreCreate>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4b5d      	ldr	r3, [pc, #372]	; (8000860 <main+0x224>)
 80006ec:	601a      	str	r2, [r3, #0]

  /* definition and creation of led1_sem */
  osSemaphoreDef(led1_sem);
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  led1_semHandle = osSemaphoreCreate(osSemaphore(led1_sem), 1);
 80006fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f006 fd29 	bl	8007158 <osSemaphoreCreate>
 8000706:	4602      	mov	r2, r0
 8000708:	4b56      	ldr	r3, [pc, #344]	; (8000864 <main+0x228>)
 800070a:	601a      	str	r2, [r3, #0]

  /* definition and creation of led2_sem */
  osSemaphoreDef(led2_sem);
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  led2_semHandle = osSemaphoreCreate(osSemaphore(led2_sem), 1);
 8000718:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800071c:	2101      	movs	r1, #1
 800071e:	4618      	mov	r0, r3
 8000720:	f006 fd1a 	bl	8007158 <osSemaphoreCreate>
 8000724:	4602      	mov	r2, r0
 8000726:	4b50      	ldr	r3, [pc, #320]	; (8000868 <main+0x22c>)
 8000728:	601a      	str	r2, [r3, #0]

  /* definition and creation of led3_sem */
  osSemaphoreDef(led3_sem);
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000730:	2300      	movs	r3, #0
 8000732:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  led3_semHandle = osSemaphoreCreate(osSemaphore(led3_sem), 1);
 8000736:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800073a:	2101      	movs	r1, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f006 fd0b 	bl	8007158 <osSemaphoreCreate>
 8000742:	4602      	mov	r2, r0
 8000744:	4b49      	ldr	r3, [pc, #292]	; (800086c <main+0x230>)
 8000746:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadLeftPanel */
  osThreadDef(ReadLeftPanel, StartReadLeftPanel, osPriorityNormal, 0, 128);
 8000748:	4b49      	ldr	r3, [pc, #292]	; (8000870 <main+0x234>)
 800074a:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadLeftPanelHandle = osThreadCreate(osThread(ReadLeftPanel), NULL);
 800075c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f006 fbfb 	bl	8006f5e <osThreadCreate>
 8000768:	4602      	mov	r2, r0
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <main+0x238>)
 800076c:	601a      	str	r2, [r3, #0]

  /* definition and creation of SerialDebug */
  osThreadDef(SerialDebug, StartSerialDebug, osPriorityNormal, 0, 128);
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <main+0x23c>)
 8000770:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialDebugHandle = osThreadCreate(osThread(SerialDebug), NULL);
 8000782:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f006 fbe8 	bl	8006f5e <osThreadCreate>
 800078e:	4602      	mov	r2, r0
 8000790:	4b3a      	ldr	r3, [pc, #232]	; (800087c <main+0x240>)
 8000792:	601a      	str	r2, [r3, #0]

  /* definition and creation of SyncButtonTask */
  osThreadDef(SyncButtonTask, StartSynkButton, osPriorityAboveNormal, 0, 128);
 8000794:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <main+0x244>)
 8000796:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800079a:	461d      	mov	r5, r3
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SyncButtonTaskHandle = osThreadCreate(osThread(SyncButtonTask), NULL);
 80007a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fbd5 	bl	8006f5e <osThreadCreate>
 80007b4:	4602      	mov	r2, r0
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <main+0x248>)
 80007b8:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReadRightPanel */
  osThreadDef(ReadRightPanel, StartReadRightPanel, osPriorityNormal, 0, 128);
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <main+0x24c>)
 80007bc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80007c0:	461d      	mov	r5, r3
 80007c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRightPanelHandle = osThreadCreate(osThread(ReadRightPanel), NULL);
 80007ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f006 fbc2 	bl	8006f5e <osThreadCreate>
 80007da:	4602      	mov	r2, r0
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <main+0x250>)
 80007de:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask1 */
  osThreadDef(ledTask1, StartLedTask1, osPriorityNormal, 0, 128);
 80007e0:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <main+0x254>)
 80007e2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask1Handle = osThreadCreate(osThread(ledTask1), NULL);
 80007f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 fbaf 	bl	8006f5e <osThreadCreate>
 8000800:	4602      	mov	r2, r0
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <main+0x258>)
 8000804:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask2 */
  osThreadDef(ledTask2, StartLedTask2, osPriorityNormal, 0, 128);
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <main+0x25c>)
 8000808:	f107 0420 	add.w	r4, r7, #32
 800080c:	461d      	mov	r5, r3
 800080e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000812:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask2Handle = osThreadCreate(osThread(ledTask2), NULL);
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f006 fb9c 	bl	8006f5e <osThreadCreate>
 8000826:	4602      	mov	r2, r0
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <main+0x260>)
 800082a:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask3 */
  osThreadDef(ledTask3, StartLedTask3, osPriorityNormal, 0, 128);
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <main+0x264>)
 800082e:	1d3c      	adds	r4, r7, #4
 8000830:	461d      	mov	r5, r3
 8000832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000836:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask3Handle = osThreadCreate(osThread(ledTask3), NULL);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f006 fb8b 	bl	8006f5e <osThreadCreate>
 8000848:	4602      	mov	r2, r0
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <main+0x268>)
 800084c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800084e:	f006 fb7f 	bl	8006f50 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000852:	e7fe      	b.n	8000852 <main+0x216>
 8000854:	20002300 	.word	0x20002300
 8000858:	20002254 	.word	0x20002254
 800085c:	200021e8 	.word	0x200021e8
 8000860:	200022f0 	.word	0x200022f0
 8000864:	20001c18 	.word	0x20001c18
 8000868:	200022fc 	.word	0x200022fc
 800086c:	200022f8 	.word	0x200022f8
 8000870:	0800a038 	.word	0x0800a038
 8000874:	200022ec 	.word	0x200022ec
 8000878:	0800a060 	.word	0x0800a060
 800087c:	20001d04 	.word	0x20001d04
 8000880:	0800a08c 	.word	0x0800a08c
 8000884:	20001d00 	.word	0x20001d00
 8000888:	0800a0b8 	.word	0x0800a0b8
 800088c:	200022f4 	.word	0x200022f4
 8000890:	0800a0e0 	.word	0x0800a0e0
 8000894:	20002250 	.word	0x20002250
 8000898:	0800a108 	.word	0x0800a108
 800089c:	20001bdc 	.word	0x20001bdc
 80008a0:	0800a130 	.word	0x0800a130
 80008a4:	200022e8 	.word	0x200022e8

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0b8      	sub	sp, #224	; 0xe0
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008b2:	2244      	movs	r2, #68	; 0x44
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f008 ffa5 	bl	8009806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2288      	movs	r2, #136	; 0x88
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f008 ff97 	bl	8009806 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80008d8:	f003 fbc0 	bl	800405c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008dc:	4b43      	ldr	r3, [pc, #268]	; (80009ec <SystemClock_Config+0x144>)
 80008de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008e2:	4a42      	ldr	r2, [pc, #264]	; (80009ec <SystemClock_Config+0x144>)
 80008e4:	f023 0318 	bic.w	r3, r3, #24
 80008e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008ec:	2314      	movs	r3, #20
 80008ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000904:	2360      	movs	r3, #96	; 0x60
 8000906:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000910:	2301      	movs	r3, #1
 8000912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800091c:	2328      	movs	r3, #40	; 0x28
 800091e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000922:	2307      	movs	r3, #7
 8000924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800092e:	2302      	movs	r3, #2
 8000930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fcdb 	bl	80042f4 <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000944:	f000 ff8e 	bl	8001864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094e:	2303      	movs	r3, #3
 8000950:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000966:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f004 f8a7 	bl	8004ac0 <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000978:	f000 ff74 	bl	8001864 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <SystemClock_Config+0x148>)
 800097e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000980:	2300      	movs	r3, #0
 8000982:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000984:	2300      	movs	r3, #0
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000988:	2300      	movs	r3, #0
 800098a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800098c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000990:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000998:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800099c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800099e:	2301      	movs	r3, #1
 80009a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009a6:	2318      	movs	r3, #24
 80009a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009aa:	2307      	movs	r3, #7
 80009ac:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80009b6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80009ba:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 fab4 	bl	8004f2c <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x126>
  {
    Error_Handler();
 80009ca:	f000 ff4b 	bl	8001864 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009d2:	f003 fb61 	bl	8004098 <HAL_PWREx_ControlVoltageScaling>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80009dc:	f000 ff42 	bl	8001864 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009e0:	f004 fd8a 	bl	80054f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80009e4:	bf00      	nop
 80009e6:	37e0      	adds	r7, #224	; 0xe0
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	00016085 	.word	0x00016085

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a18:	4a31      	ldr	r2, [pc, #196]	; (8000ae0 <MX_ADC1_Init+0xec>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a7e:	f001 fd31 	bl	80024e4 <HAL_ADC_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a88:	f000 feec 	bl	8001864 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	4811      	ldr	r0, [pc, #68]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000a98:	f002 fbf4 	bl	8003284 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000aa2:	f000 fedf 	bl	8001864 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_ADC1_Init+0xf0>)
 8000aa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aaa:	2306      	movs	r3, #6
 8000aac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab2:	237f      	movs	r3, #127	; 0x7f
 8000ab4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_ADC1_Init+0xe8>)
 8000ac4:	f001 fffa 	bl	8002abc <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ace:	f000 fec9 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200021ec 	.word	0x200021ec
 8000ae0:	50040000 	.word	0x50040000
 8000ae4:	04300002 	.word	0x04300002

08000ae8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000afe:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b00:	4a2a      	ldr	r2, [pc, #168]	; (8000bac <MX_ADC2_Init+0xc4>)
 8000b02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b16:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.NbrOfDiscConversion = 1;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b66:	f001 fcbd 	bl	80024e4 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f000 fe78 	bl	8001864 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_ADC2_Init+0xc8>)
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b78:	2306      	movs	r3, #6
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b80:	237f      	movs	r3, #127	; 0x7f
 8000b82:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b84:	2304      	movs	r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_ADC2_Init+0xc0>)
 8000b92:	f001 ff93 	bl	8002abc <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000b9c:	f000 fe62 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20001c9c 	.word	0x20001c9c
 8000bac:	50040100 	.word	0x50040100
 8000bb0:	08600004 	.word	0x08600004

08000bb4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bba:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <MX_DFSDM1_Init+0x6c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_DFSDM1_Init+0x68>)
 8000c0a:	f002 fcc9 	bl	80035a0 <HAL_DFSDM_ChannelInit>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c14:	f000 fe26 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20001be0 	.word	0x20001be0
 8000c20:	40016020 	.word	0x40016020

08000c24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <MX_I2C2_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c30:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c34:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c62:	f002 ff8c 	bl	8003b7e <HAL_I2C_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 fdfa 	bl	8001864 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c74:	f003 f812 	bl	8003c9c <HAL_I2CEx_ConfigAnalogFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c7e:	f000 fdf1 	bl	8001864 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_I2C2_Init+0x74>)
 8000c86:	f003 f854 	bl	8003d32 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 fde8 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20002110 	.word	0x20002110
 8000c9c:	40005800 	.word	0x40005800

08000ca0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <MX_QUADSPI_Init+0x48>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000cac:	22ff      	movs	r2, #255	; 0xff
 8000cae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_QUADSPI_Init+0x44>)
 8000cd0:	f003 fa48 	bl	8004164 <HAL_QSPI_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cda:	f000 fdc3 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20002304 	.word	0x20002304
 8000ce8:	a0001000 	.word	0xa0001000

08000cec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000cf2:	4a1c      	ldr	r2, [pc, #112]	; (8000d64 <MX_SPI3_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cfc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_SPI3_Init+0x74>)
 8000d4c:	f004 fdae 	bl	80058ac <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f000 fd85 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20002184 	.word	0x20002184
 8000d64:	40003c00 	.word	0x40003c00

08000d68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_USART1_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART1_UART_Init+0x58>)
 8000dac:	f005 f868 	bl	8005e80 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 fd55 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20002258 	.word	0x20002258
 8000dc4:	40013800 	.word	0x40013800

08000dc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <MX_USART3_UART_Init+0x5c>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART3_UART_Init+0x58>)
 8000e0c:	f005 f838 	bl	8005e80 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e16:	f000 fd25 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001c1c 	.word	0x20001c1c
 8000e24:	40004800 	.word	0x40004800

08000e28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e36:	2206      	movs	r2, #6
 8000e38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6c:	f002 ffad 	bl	8003dca <HAL_PCD_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 fcf5 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20001d08 	.word	0x20001d08

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9a:	4bb7      	ldr	r3, [pc, #732]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4ab6      	ldr	r2, [pc, #728]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ea0:	f043 0310 	orr.w	r3, r3, #16
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4bb4      	ldr	r3, [pc, #720]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4bb1      	ldr	r3, [pc, #708]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4ab0      	ldr	r2, [pc, #704]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4bae      	ldr	r3, [pc, #696]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4bab      	ldr	r3, [pc, #684]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	4aaa      	ldr	r2, [pc, #680]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed6:	4ba8      	ldr	r3, [pc, #672]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4ba5      	ldr	r3, [pc, #660]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4aa4      	ldr	r2, [pc, #656]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4ba2      	ldr	r3, [pc, #648]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	4b9f      	ldr	r3, [pc, #636]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a9e      	ldr	r2, [pc, #632]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b9c      	ldr	r3, [pc, #624]	; (8001178 <MX_GPIO_Init+0x2f4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0308 	and.w	r3, r3, #8
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f18:	4898      	ldr	r0, [pc, #608]	; (800117c <MX_GPIO_Init+0x2f8>)
 8000f1a:	f002 fdf5 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f28:	f002 fdee 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f32:	4893      	ldr	r0, [pc, #588]	; (8001180 <MX_GPIO_Init+0x2fc>)
 8000f34:	f002 fde8 	bl	8003b08 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f3e:	4891      	ldr	r0, [pc, #580]	; (8001184 <MX_GPIO_Init+0x300>)
 8000f40:	f002 fde2 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	488e      	ldr	r0, [pc, #568]	; (8001184 <MX_GPIO_Init+0x300>)
 8000f4c:	f002 fddc 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f56:	488c      	ldr	r0, [pc, #560]	; (8001188 <MX_GPIO_Init+0x304>)
 8000f58:	f002 fdd6 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2120      	movs	r1, #32
 8000f60:	4887      	ldr	r0, [pc, #540]	; (8001180 <MX_GPIO_Init+0x2fc>)
 8000f62:	f002 fdd1 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4884      	ldr	r0, [pc, #528]	; (800117c <MX_GPIO_Init+0x2f8>)
 8000f6c:	f002 fdcc 	bl	8003b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000f70:	f240 1315 	movw	r3, #277	; 0x115
 8000f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	487c      	ldr	r0, [pc, #496]	; (800117c <MX_GPIO_Init+0x2f8>)
 8000f8a:	f002 fc15 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f8e:	236a      	movs	r3, #106	; 0x6a
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	4b7e      	ldr	r3, [pc, #504]	; (800118c <MX_GPIO_Init+0x308>)
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4876      	ldr	r0, [pc, #472]	; (800117c <MX_GPIO_Init+0x2f8>)
 8000fa2:	f002 fc09 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTBLUE_Pin */
  GPIO_InitStruct.Pin = BUTBLUE_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fac:	4b78      	ldr	r3, [pc, #480]	; (8001190 <MX_GPIO_Init+0x30c>)
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTBLUE_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4873      	ldr	r0, [pc, #460]	; (8001188 <MX_GPIO_Init+0x304>)
 8000fbc:	f002 fbfc 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f002 fbeb 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000fe2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffe:	f002 fbdb 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001002:	2308      	movs	r3, #8
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001012:	2301      	movs	r3, #1
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f002 fbca 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001024:	23e0      	movs	r3, #224	; 0xe0
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001034:	2305      	movs	r3, #5
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f002 fbb9 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104a:	4b50      	ldr	r3, [pc, #320]	; (800118c <MX_GPIO_Init+0x308>)
 800104c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4849      	ldr	r0, [pc, #292]	; (8001180 <MX_GPIO_Init+0x2fc>)
 800105a:	f002 fbad 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800105e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001062:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4842      	ldr	r0, [pc, #264]	; (8001180 <MX_GPIO_Init+0x2fc>)
 8001078:	f002 fb9e 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800107c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001080:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001082:	4b42      	ldr	r3, [pc, #264]	; (800118c <MX_GPIO_Init+0x308>)
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	483c      	ldr	r0, [pc, #240]	; (8001184 <MX_GPIO_Init+0x300>)
 8001092:	f002 fb91 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001096:	f243 0381 	movw	r3, #12417	; 0x3081
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4835      	ldr	r0, [pc, #212]	; (8001184 <MX_GPIO_Init+0x300>)
 80010b0:	f002 fb82 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80010b4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <MX_GPIO_Init+0x304>)
 80010ce:	f002 fb73 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80010d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_GPIO_Init+0x308>)
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4828      	ldr	r0, [pc, #160]	; (8001188 <MX_GPIO_Init+0x304>)
 80010e8:	f002 fb66 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010ec:	2302      	movs	r3, #2
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010fc:	2305      	movs	r3, #5
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	481f      	ldr	r0, [pc, #124]	; (8001184 <MX_GPIO_Init+0x300>)
 8001108:	f002 fb56 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800110c:	2378      	movs	r3, #120	; 0x78
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111c:	2307      	movs	r3, #7
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4817      	ldr	r0, [pc, #92]	; (8001184 <MX_GPIO_Init+0x300>)
 8001128:	f002 fb46 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800112c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001132:	2312      	movs	r3, #18
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001136:	2301      	movs	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800113e:	2304      	movs	r3, #4
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_GPIO_Init+0x2fc>)
 800114a:	f002 fb35 	bl	80037b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2105      	movs	r1, #5
 8001152:	2017      	movs	r0, #23
 8001154:	f002 f9fa 	bl	800354c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001158:	2017      	movs	r0, #23
 800115a:	f002 fa13 	bl	8003584 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2105      	movs	r1, #5
 8001162:	2028      	movs	r0, #40	; 0x28
 8001164:	f002 f9f2 	bl	800354c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001168:	2028      	movs	r0, #40	; 0x28
 800116a:	f002 fa0b 	bl	8003584 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	48001000 	.word	0x48001000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000c00 	.word	0x48000c00
 8001188:	48000800 	.word	0x48000800
 800118c:	10110000 	.word	0x10110000
 8001190:	10210000 	.word	0x10210000

08001194 <PostLedTasks>:

/* USER CODE BEGIN 4 */
void PostLedTasks()
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
    if (pcm.l1w)
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <PostLedTasks+0x5c>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d009      	beq.n	80011b4 <PostLedTasks+0x20>
    {
        pcm.l1w--;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <PostLedTasks+0x5c>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <PostLedTasks+0x5c>)
 80011a8:	6093      	str	r3, [r2, #8]
        osSemaphoreRelease(led1_semHandle);
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <PostLedTasks+0x60>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 f854 	bl	800725c <osSemaphoreRelease>
    }

    if (pcm.l2w)
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <PostLedTasks+0x5c>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d009      	beq.n	80011d0 <PostLedTasks+0x3c>
    {
        pcm.l2w--;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <PostLedTasks+0x5c>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <PostLedTasks+0x5c>)
 80011c4:	60d3      	str	r3, [r2, #12]
        osSemaphoreRelease(led2_semHandle);
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <PostLedTasks+0x64>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f006 f846 	bl	800725c <osSemaphoreRelease>
    }

    if (pcm.l3w)
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <PostLedTasks+0x5c>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d009      	beq.n	80011ec <PostLedTasks+0x58>
    {
        pcm.l3w--;
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <PostLedTasks+0x5c>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	3b01      	subs	r3, #1
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <PostLedTasks+0x5c>)
 80011e0:	6113      	str	r3, [r2, #16]
        osSemaphoreRelease(led3_semHandle);
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <PostLedTasks+0x68>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f006 f838 	bl	800725c <osSemaphoreRelease>
    }
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000215c 	.word	0x2000215c
 80011f4:	20001c18 	.word	0x20001c18
 80011f8:	200022fc 	.word	0x200022fc
 80011fc:	200022f8 	.word	0x200022f8

08001200 <PostPanelTasks>:

void PostPanelTasks()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    if (pcm.lpw)
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <PostPanelTasks+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d009      	beq.n	8001220 <PostPanelTasks+0x20>
    {
        pcm.lpw--;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <PostPanelTasks+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <PostPanelTasks+0x40>)
 8001214:	6013      	str	r3, [r2, #0]
        osSemaphoreRelease(lpanel_semHandle);
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <PostPanelTasks+0x44>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f006 f81e 	bl	800725c <osSemaphoreRelease>
    }

    if (pcm.rpw)
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <PostPanelTasks+0x40>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d009      	beq.n	800123c <PostPanelTasks+0x3c>
    {
        pcm.rpw--;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <PostPanelTasks+0x40>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	3b01      	subs	r3, #1
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <PostPanelTasks+0x40>)
 8001230:	6053      	str	r3, [r2, #4]
        osSemaphoreRelease(rpanel_semHandle);
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <PostPanelTasks+0x48>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f006 f810 	bl	800725c <osSemaphoreRelease>
    }
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000215c 	.word	0x2000215c
 8001244:	200022f0 	.word	0x200022f0
 8001248:	200021e8 	.word	0x200021e8

0800124c <ReadLPStart>:

void ReadLPStart()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <ReadLPStart+0x4c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	4618      	mov	r0, r3
 800125a:	f005 fef9 	bl	8007050 <osMutexWait>
	if (pcm.lpanel_done)
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <ReadLPStart+0x50>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <ReadLPStart+0x26>
		pcm.lpw++;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <ReadLPStart+0x50>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a0b      	ldr	r2, [pc, #44]	; (800129c <ReadLPStart+0x50>)
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e004      	b.n	800127c <ReadLPStart+0x30>
	else
		osSemaphoreRelease(lpanel_semHandle);
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <ReadLPStart+0x54>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f005 fff0 	bl	800725c <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <ReadLPStart+0x4c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f005 ff33 	bl	80070ec <osMutexRelease>
	osSemaphoreWait(lpanel_semHandle, osWaitForever);
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <ReadLPStart+0x54>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f04f 31ff 	mov.w	r1, #4294967295
 800128e:	4618      	mov	r0, r3
 8001290:	f005 ff96 	bl	80071c0 <osSemaphoreWait>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20002300 	.word	0x20002300
 800129c:	2000215c 	.word	0x2000215c
 80012a0:	200022f0 	.word	0x200022f0

080012a4 <ReadLPEnd>:

void ReadLPEnd()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <ReadLPEnd+0x50>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	4618      	mov	r0, r3
 80012b2:	f005 fecd 	bl	8007050 <osMutexWait>
	pcm.lpanel_done = 1;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <ReadLPEnd+0x54>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
	if (pcm.lpanel_done && pcm.rpanel_done)
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <ReadLPEnd+0x54>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d010      	beq.n	80012e6 <ReadLPEnd+0x42>
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <ReadLPEnd+0x54>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00c      	beq.n	80012e6 <ReadLPEnd+0x42>
    {
		pcm.led1_done = pcm.led2_done = pcm.led3_done = 0; //indico che devono eseguire i led
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <ReadLPEnd+0x54>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <ReadLPEnd+0x54>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <ReadLPEnd+0x54>)
 80012d8:	6213      	str	r3, [r2, #32]
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <ReadLPEnd+0x54>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <ReadLPEnd+0x54>)
 80012e0:	61d3      	str	r3, [r2, #28]
	    PostLedTasks();
 80012e2:	f7ff ff57 	bl	8001194 <PostLedTasks>
	 }
	osMutexRelease(MutexPDHandle);
 80012e6:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <ReadLPEnd+0x50>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fefe 	bl	80070ec <osMutexRelease>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20002300 	.word	0x20002300
 80012f8:	2000215c 	.word	0x2000215c

080012fc <ReadRPStart>:

void ReadRPStart()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <ReadRPStart+0x4c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f04f 31ff 	mov.w	r1, #4294967295
 8001308:	4618      	mov	r0, r3
 800130a:	f005 fea1 	bl	8007050 <osMutexWait>
	if (pcm.rpanel_done)
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <ReadRPStart+0x50>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <ReadRPStart+0x26>
		pcm.rpw++;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <ReadRPStart+0x50>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	3301      	adds	r3, #1
 800131c:	4a0b      	ldr	r2, [pc, #44]	; (800134c <ReadRPStart+0x50>)
 800131e:	6053      	str	r3, [r2, #4]
 8001320:	e004      	b.n	800132c <ReadRPStart+0x30>
	else
		osSemaphoreRelease(rpanel_semHandle);
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <ReadRPStart+0x54>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f005 ff98 	bl	800725c <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <ReadRPStart+0x4c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f005 fedb 	bl	80070ec <osMutexRelease>
	osSemaphoreWait(rpanel_semHandle, osWaitForever);
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <ReadRPStart+0x54>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f04f 31ff 	mov.w	r1, #4294967295
 800133e:	4618      	mov	r0, r3
 8001340:	f005 ff3e 	bl	80071c0 <osSemaphoreWait>
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20002300 	.word	0x20002300
 800134c:	2000215c 	.word	0x2000215c
 8001350:	200021e8 	.word	0x200021e8

08001354 <ReadRPEnd>:

void ReadRPEnd()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <ReadRPEnd+0x50>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fe75 	bl	8007050 <osMutexWait>
	pcm.rpanel_done = 1;
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <ReadRPEnd+0x54>)
 8001368:	2201      	movs	r2, #1
 800136a:	619a      	str	r2, [r3, #24]
	if (pcm.lpanel_done && pcm.rpanel_done)
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <ReadRPEnd+0x54>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d010      	beq.n	8001396 <ReadRPEnd+0x42>
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <ReadRPEnd+0x54>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00c      	beq.n	8001396 <ReadRPEnd+0x42>
	{
		pcm.led1_done = pcm.led2_done = pcm.led3_done = 0; //indico che devono eseguire i led
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <ReadRPEnd+0x54>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <ReadRPEnd+0x54>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <ReadRPEnd+0x54>)
 8001388:	6213      	str	r3, [r2, #32]
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <ReadRPEnd+0x54>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <ReadRPEnd+0x54>)
 8001390:	61d3      	str	r3, [r2, #28]
		PostLedTasks();
 8001392:	f7ff feff 	bl	8001194 <PostLedTasks>
	}
	osMutexRelease(MutexPDHandle);
 8001396:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <ReadRPEnd+0x50>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f005 fea6 	bl	80070ec <osMutexRelease>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20002300 	.word	0x20002300
 80013a8:	2000215c 	.word	0x2000215c

080013ac <WriteL1Start>:

void WriteL1Start()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <WriteL1Start+0x4c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	4618      	mov	r0, r3
 80013ba:	f005 fe49 	bl	8007050 <osMutexWait>
	if (pcm.led1_done)
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <WriteL1Start+0x50>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <WriteL1Start+0x26>
		pcm.l1w++;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <WriteL1Start+0x50>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <WriteL1Start+0x50>)
 80013ce:	6093      	str	r3, [r2, #8]
 80013d0:	e004      	b.n	80013dc <WriteL1Start+0x30>
	else
		osSemaphoreRelease(led1_semHandle);
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <WriteL1Start+0x54>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 ff40 	bl	800725c <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <WriteL1Start+0x4c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fe83 	bl	80070ec <osMutexRelease>
	osSemaphoreWait(led1_semHandle, osWaitForever);
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <WriteL1Start+0x54>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f04f 31ff 	mov.w	r1, #4294967295
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 fee6 	bl	80071c0 <osSemaphoreWait>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20002300 	.word	0x20002300
 80013fc:	2000215c 	.word	0x2000215c
 8001400:	20001c18 	.word	0x20001c18

08001404 <WriteL2Start>:

void WriteL2Start()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <WriteL2Start+0x4c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	4618      	mov	r0, r3
 8001412:	f005 fe1d 	bl	8007050 <osMutexWait>
	if (pcm.led2_done)
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <WriteL2Start+0x50>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <WriteL2Start+0x26>
		pcm.l2w++;
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <WriteL2Start+0x50>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <WriteL2Start+0x50>)
 8001426:	60d3      	str	r3, [r2, #12]
 8001428:	e004      	b.n	8001434 <WriteL2Start+0x30>
	else
		osSemaphoreRelease(led2_semHandle);
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <WriteL2Start+0x54>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f005 ff14 	bl	800725c <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <WriteL2Start+0x4c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f005 fe57 	bl	80070ec <osMutexRelease>
	osSemaphoreWait(led2_semHandle, osWaitForever);
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <WriteL2Start+0x54>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f04f 31ff 	mov.w	r1, #4294967295
 8001446:	4618      	mov	r0, r3
 8001448:	f005 feba 	bl	80071c0 <osSemaphoreWait>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20002300 	.word	0x20002300
 8001454:	2000215c 	.word	0x2000215c
 8001458:	200022fc 	.word	0x200022fc

0800145c <WriteL3Start>:

void WriteL3Start()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <WriteL3Start+0x4c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	4618      	mov	r0, r3
 800146a:	f005 fdf1 	bl	8007050 <osMutexWait>
	if (pcm.led3_done)
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <WriteL3Start+0x50>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <WriteL3Start+0x26>
		pcm.l3w++;
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <WriteL3Start+0x50>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	3301      	adds	r3, #1
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <WriteL3Start+0x50>)
 800147e:	6113      	str	r3, [r2, #16]
 8001480:	e004      	b.n	800148c <WriteL3Start+0x30>
	else
		osSemaphoreRelease(led3_semHandle);
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <WriteL3Start+0x54>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fee8 	bl	800725c <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <WriteL3Start+0x4c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fe2b 	bl	80070ec <osMutexRelease>
	osSemaphoreWait(led3_semHandle, osWaitForever);
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <WriteL3Start+0x54>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f04f 31ff 	mov.w	r1, #4294967295
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 fe8e 	bl	80071c0 <osSemaphoreWait>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20002300 	.word	0x20002300
 80014ac:	2000215c 	.word	0x2000215c
 80014b0:	200022f8 	.word	0x200022f8

080014b4 <WriteL1End>:

void WriteL1End()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <WriteL1End+0x50>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	4618      	mov	r0, r3
 80014c2:	f005 fdc5 	bl	8007050 <osMutexWait>
	pcm.led1_done = 1;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <WriteL1End+0x54>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	61da      	str	r2, [r3, #28]
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <WriteL1End+0x54>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d010      	beq.n	80014f6 <WriteL1End+0x42>
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <WriteL1End+0x54>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00c      	beq.n	80014f6 <WriteL1End+0x42>
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <WriteL1End+0x54>)
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <WriteL1End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <WriteL1End+0x54>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <WriteL1End+0x54>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <WriteL1End+0x54>)
 80014f0:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 80014f2:	f7ff fe85 	bl	8001200 <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <WriteL1End+0x50>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 fdf6 	bl	80070ec <osMutexRelease>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20002300 	.word	0x20002300
 8001508:	2000215c 	.word	0x2000215c

0800150c <WriteL2End>:

void WriteL2End()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <WriteL2End+0x50>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	4618      	mov	r0, r3
 800151a:	f005 fd99 	bl	8007050 <osMutexWait>
	pcm.led2_done = 1;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <WriteL2End+0x54>)
 8001520:	2201      	movs	r2, #1
 8001522:	621a      	str	r2, [r3, #32]
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <WriteL2End+0x54>)
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d010      	beq.n	800154e <WriteL2End+0x42>
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <WriteL2End+0x54>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00c      	beq.n	800154e <WriteL2End+0x42>
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <WriteL2End+0x54>)
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <WriteL2End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <WriteL2End+0x54>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <WriteL2End+0x54>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a06      	ldr	r2, [pc, #24]	; (8001560 <WriteL2End+0x54>)
 8001548:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 800154a:	f7ff fe59 	bl	8001200 <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <WriteL2End+0x50>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f005 fdca 	bl	80070ec <osMutexRelease>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20002300 	.word	0x20002300
 8001560:	2000215c 	.word	0x2000215c

08001564 <WriteL3End>:

void WriteL3End()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <WriteL3End+0x50>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fd6d 	bl	8007050 <osMutexWait>
	pcm.led3_done = 1;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <WriteL3End+0x54>)
 8001578:	2201      	movs	r2, #1
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <WriteL3End+0x54>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d010      	beq.n	80015a6 <WriteL3End+0x42>
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <WriteL3End+0x54>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d00c      	beq.n	80015a6 <WriteL3End+0x42>
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <WriteL3End+0x54>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <WriteL3End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <WriteL3End+0x54>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <WriteL3End+0x54>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <WriteL3End+0x54>)
 80015a0:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 80015a2:	f7ff fe2d 	bl	8001200 <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 80015a6:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <WriteL3End+0x50>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f005 fd9e 	bl	80070ec <osMutexRelease>
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20002300 	.word	0x20002300
 80015b8:	2000215c 	.word	0x2000215c

080015bc <StartReadLeftPanel>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartReadLeftPanel */
void StartReadLeftPanel(void const * argument)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;)
	{
		ReadLPStart();
 80015c4:	f7ff fe42 	bl	800124c <ReadLPStart>

		 // Get left panel value
		HAL_ADC_Start(&hadc2);
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <StartReadLeftPanel+0x44>)
 80015ca:	f001 f8df 	bl	800278c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80015ce:	f04f 31ff 	mov.w	r1, #4294967295
 80015d2:	480b      	ldr	r0, [pc, #44]	; (8001600 <StartReadLeftPanel+0x44>)
 80015d4:	f001 f994 	bl	8002900 <HAL_ADC_PollForConversion>
		pd.leftPanelValue = HAL_ADC_GetValue(&hadc2)*100/2400;
 80015d8:	4809      	ldr	r0, [pc, #36]	; (8001600 <StartReadLeftPanel+0x44>)
 80015da:	f001 fa61 	bl	8002aa0 <HAL_ADC_GetValue>
 80015de:	4602      	mov	r2, r0
 80015e0:	2364      	movs	r3, #100	; 0x64
 80015e2:	fb03 f302 	mul.w	r3, r3, r2
 80015e6:	4a07      	ldr	r2, [pc, #28]	; (8001604 <StartReadLeftPanel+0x48>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <StartReadLeftPanel+0x4c>)
 80015f2:	605a      	str	r2, [r3, #4]

		ReadLPEnd();
 80015f4:	f7ff fe56 	bl	80012a4 <ReadLPEnd>

		// Delay time (msec)
		osDelay(100);
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f005 fcfc 	bl	8006ff6 <osDelay>
		ReadLPStart();
 80015fe:	e7e1      	b.n	80015c4 <StartReadLeftPanel+0x8>
 8001600:	20001c9c 	.word	0x20001c9c
 8001604:	1b4e81b5 	.word	0x1b4e81b5
 8001608:	200022d8 	.word	0x200022d8

0800160c <StartSerialDebug>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialDebug */
void StartSerialDebug(void const * argument)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b093      	sub	sp, #76	; 0x4c
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]
	/** Update panel data structure values **/
	// Lock data reads semaphore
  	//startReadPD(); DISABILITATO TEMPORANEAMENTE

  	// Get data
	sprintf(msg, "Light Panel Right = %hu\r\nLight Panel Left = %hu\r\nThr = %hu\r\nVar = %hu\r\n", pd.rightPanelValue, pd.leftPanelValue, pd.threshold, pd.variation);
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <StartSerialDebug+0x50>)
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <StartSerialDebug+0x50>)
 800161a:	685c      	ldr	r4, [r3, #4]
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <StartSerialDebug+0x50>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <StartSerialDebug+0x50>)
 8001622:	68d2      	ldr	r2, [r2, #12]
 8001624:	f107 000c 	add.w	r0, r7, #12
 8001628:	9201      	str	r2, [sp, #4]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4623      	mov	r3, r4
 800162e:	460a      	mov	r2, r1
 8001630:	490b      	ldr	r1, [pc, #44]	; (8001660 <StartSerialDebug+0x54>)
 8001632:	f008 f8f1 	bl	8009818 <siprintf>

	// Unlock data reads semaphore
	//endReadPD();

	// Print data
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fdc8 	bl	80001d0 <strlen>
 8001640:	4603      	mov	r3, r0
 8001642:	b29a      	uxth	r2, r3
 8001644:	f107 010c 	add.w	r1, r7, #12
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <StartSerialDebug+0x58>)
 800164e:	f004 fc65 	bl	8005f1c <HAL_UART_Transmit>

	// Delay time (msec)
	osDelay(3000);
 8001652:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001656:	f005 fcce 	bl	8006ff6 <osDelay>
  {
 800165a:	e7db      	b.n	8001614 <StartSerialDebug+0x8>
 800165c:	200022d8 	.word	0x200022d8
 8001660:	0800a14c 	.word	0x0800a14c
 8001664:	20002258 	.word	0x20002258

08001668 <StartSynkButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSynkButton */
void StartSynkButton(void const * argument)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSynkButton */
  /* Infinite loop */
  for(;;)
  {
	  if (blue_button_pressed) {
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <StartSynkButton+0x48>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <StartSynkButton+0x3c>
		  // Reset button pressed variable
		  blue_button_pressed = 0;
 8001678:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <StartSynkButton+0x48>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
		  // Start semaphore
		  //startWritePD();
		  // Set threshold
		  pd.threshold = pd.leftPanelValue<pd.rightPanelValue?pd.leftPanelValue:pd.rightPanelValue;
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <StartSynkButton+0x4c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <StartSynkButton+0x4c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4293      	cmp	r3, r2
 8001688:	bfa8      	it	ge
 800168a:	4613      	movge	r3, r2
 800168c:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <StartSynkButton+0x4c>)
 800168e:	6093      	str	r3, [r2, #8]
		  // Set variation
		  pd.variation = abs(pd.leftPanelValue - pd.rightPanelValue);
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <StartSynkButton+0x4c>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <StartSynkButton+0x4c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b00      	cmp	r3, #0
 800169c:	bfb8      	it	lt
 800169e:	425b      	neglt	r3, r3
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <StartSynkButton+0x4c>)
 80016a2:	60d3      	str	r3, [r2, #12]
		  // Release semaphore
		  //endWritePD();
	  }
	  // Delay time (msec)
	  osDelay(1000);
 80016a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a8:	f005 fca5 	bl	8006ff6 <osDelay>
	  if (blue_button_pressed) {
 80016ac:	e7e0      	b.n	8001670 <StartSynkButton+0x8>
 80016ae:	bf00      	nop
 80016b0:	200002ec 	.word	0x200002ec
 80016b4:	200022d8 	.word	0x200022d8

080016b8 <StartReadRightPanel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadRightPanel */
void StartReadRightPanel(void const * argument)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadRightPanel */
  /* Infinite loop */
  for(;;)
  {
	ReadRPStart();
 80016c0:	f7ff fe1c 	bl	80012fc <ReadRPStart>
	 // Get right panel value
	HAL_ADC_Start(&hadc1);
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <StartReadRightPanel+0x44>)
 80016c6:	f001 f861 	bl	800278c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80016ca:	f04f 31ff 	mov.w	r1, #4294967295
 80016ce:	480b      	ldr	r0, [pc, #44]	; (80016fc <StartReadRightPanel+0x44>)
 80016d0:	f001 f916 	bl	8002900 <HAL_ADC_PollForConversion>
	pd.rightPanelValue = HAL_ADC_GetValue(&hadc1)*100/2400;
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <StartReadRightPanel+0x44>)
 80016d6:	f001 f9e3 	bl	8002aa0 <HAL_ADC_GetValue>
 80016da:	4602      	mov	r2, r0
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	fb03 f302 	mul.w	r3, r3, r2
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <StartReadRightPanel+0x48>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <StartReadRightPanel+0x4c>)
 80016ee:	601a      	str	r2, [r3, #0]

	ReadRPEnd();
 80016f0:	f7ff fe30 	bl	8001354 <ReadRPEnd>

    osDelay(100);
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	f005 fc7e 	bl	8006ff6 <osDelay>
	ReadRPStart();
 80016fa:	e7e1      	b.n	80016c0 <StartReadRightPanel+0x8>
 80016fc:	200021ec 	.word	0x200021ec
 8001700:	1b4e81b5 	.word	0x1b4e81b5
 8001704:	200022d8 	.word	0x200022d8

08001708 <StartLedTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask1 */
void StartLedTask1(void const * argument)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask1 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL1Start();
 8001710:	f7ff fe4c 	bl	80013ac <WriteL1Start>
	  int lpv = pd.leftPanelValue;
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <StartLedTask1+0x50>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <StartLedTask1+0x50>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <StartLedTask1+0x50>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <StartLedTask1+0x50>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)<var)//(rpv>th && lpv>th))
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfb8      	it	lt
 8001736:	425b      	neglt	r3, r3
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	429a      	cmp	r2, r3
 800173c:	dd05      	ble.n	800174a <StartLedTask1+0x42>
	  {
		  //HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <StartLedTask1+0x54>)
 8001746:	f002 f9df 	bl	8003b08 <HAL_GPIO_WritePin>
	  }
	  WriteL1End();
 800174a:	f7ff feb3 	bl	80014b4 <WriteL1End>
	  osDelay(100);
 800174e:	2064      	movs	r0, #100	; 0x64
 8001750:	f005 fc51 	bl	8006ff6 <osDelay>
  {
 8001754:	e7dc      	b.n	8001710 <StartLedTask1+0x8>
 8001756:	bf00      	nop
 8001758:	200022d8 	.word	0x200022d8
 800175c:	48000400 	.word	0x48000400

08001760 <StartLedTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask2 */
void StartLedTask2(void const * argument)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask2 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL2Start();
 8001768:	f7ff fe4c 	bl	8001404 <WriteL2Start>
	  int lpv = pd.leftPanelValue;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <StartLedTask2+0x64>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <StartLedTask2+0x64>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <StartLedTask2+0x64>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <StartLedTask2+0x64>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)>var && (rpv>=lpv))
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	bfb8      	it	lt
 800178e:	425b      	neglt	r3, r3
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	da0f      	bge.n	80017b6 <StartLedTask2+0x56>
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	429a      	cmp	r2, r3
 800179c:	db0b      	blt.n	80017b6 <StartLedTask2+0x56>
	  {
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a4:	4808      	ldr	r0, [pc, #32]	; (80017c8 <StartLedTask2+0x68>)
 80017a6:	f002 f9af 	bl	8003b08 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <StartLedTask2+0x6c>)
 80017b2:	f002 f9a9 	bl	8003b08 <HAL_GPIO_WritePin>
	  }
	  WriteL2End();
 80017b6:	f7ff fea9 	bl	800150c <WriteL2End>
	  osDelay(100);
 80017ba:	2064      	movs	r0, #100	; 0x64
 80017bc:	f005 fc1b 	bl	8006ff6 <osDelay>
  {
 80017c0:	e7d2      	b.n	8001768 <StartLedTask2+0x8>
 80017c2:	bf00      	nop
 80017c4:	200022d8 	.word	0x200022d8
 80017c8:	48000400 	.word	0x48000400
 80017cc:	48000800 	.word	0x48000800

080017d0 <StartLedTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask3 */
void StartLedTask3(void const * argument)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask3 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL3Start();
 80017d8:	f7ff fe40 	bl	800145c <WriteL3Start>
	  int lpv = pd.leftPanelValue;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <StartLedTask3+0x64>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <StartLedTask3+0x64>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <StartLedTask3+0x64>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <StartLedTask3+0x64>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)>var && rpv<lpv)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bfb8      	it	lt
 80017fe:	425b      	neglt	r3, r3
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	429a      	cmp	r2, r3
 8001804:	da0f      	bge.n	8001826 <StartLedTask3+0x56>
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	429a      	cmp	r2, r3
 800180c:	da0b      	bge.n	8001826 <StartLedTask3+0x56>
	  {
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <StartLedTask3+0x68>)
 8001816:	f002 f977 	bl	8003b08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001820:	4806      	ldr	r0, [pc, #24]	; (800183c <StartLedTask3+0x6c>)
 8001822:	f002 f971 	bl	8003b08 <HAL_GPIO_WritePin>
	  }
	  WriteL3End();
 8001826:	f7ff fe9d 	bl	8001564 <WriteL3End>
	  osDelay(100);
 800182a:	2064      	movs	r0, #100	; 0x64
 800182c:	f005 fbe3 	bl	8006ff6 <osDelay>
  {
 8001830:	e7d2      	b.n	80017d8 <StartLedTask3+0x8>
 8001832:	bf00      	nop
 8001834:	200022d8 	.word	0x200022d8
 8001838:	48000400 	.word	0x48000400
 800183c:	48000800 	.word	0x48000800

08001840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001852:	f000 fc31 	bl	80020b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40012c00 	.word	0x40012c00

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_MspInit+0x4c>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_MspInit+0x4c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6613      	str	r3, [r2, #96]	; 0x60
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_MspInit+0x4c>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_MspInit+0x4c>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	210f      	movs	r1, #15
 80018ae:	f06f 0001 	mvn.w	r0, #1
 80018b2:	f001 fe4b 	bl	800354c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	; 0x38
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <HAL_ADC_MspInit+0x14c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d15e      	bne.n	80019a4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80018e6:	4b4b      	ldr	r3, [pc, #300]	; (8001a14 <HAL_ADC_MspInit+0x150>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a49      	ldr	r2, [pc, #292]	; (8001a14 <HAL_ADC_MspInit+0x150>)
 80018ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80018f0:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <HAL_ADC_MspInit+0x150>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10b      	bne.n	8001910 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	4a46      	ldr	r2, [pc, #280]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80018fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001904:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190c:	623b      	str	r3, [r7, #32]
 800190e:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001910:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	4a40      	ldr	r2, [pc, #256]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191c:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	4a3a      	ldr	r2, [pc, #232]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001934:	4b38      	ldr	r3, [pc, #224]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	4a34      	ldr	r2, [pc, #208]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194c:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1|ARD_A3_Pin|ARD_A2_Pin 
 8001958:	233f      	movs	r3, #63	; 0x3f
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800195c:	230b      	movs	r3, #11
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	482c      	ldr	r0, [pc, #176]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 800196c:	f001 ff24 	bl	80037b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001970:	2310      	movs	r3, #16
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001974:	230b      	movs	r3, #11
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f001 ff17 	bl	80037b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 800198a:	2302      	movs	r3, #2
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800198e:	230b      	movs	r3, #11
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	4820      	ldr	r0, [pc, #128]	; (8001a20 <HAL_ADC_MspInit+0x15c>)
 800199e:	f001 ff0b 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80019a2:	e031      	b.n	8001a08 <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_ADC_MspInit+0x160>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d12c      	bne.n	8001a08 <HAL_ADC_MspInit+0x144>
    HAL_RCC_ADC_CLK_ENABLED++;
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_ADC_MspInit+0x150>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_ADC_MspInit+0x150>)
 80019b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <HAL_ADC_MspInit+0x150>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10b      	bne.n	80019d8 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC_CLK_ENABLE();
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80019c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_ADC_MspInit+0x154>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019f0:	2302      	movs	r3, #2
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019f4:	230b      	movs	r3, #11
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <HAL_ADC_MspInit+0x158>)
 8001a04:	f001 fed8 	bl	80037b8 <HAL_GPIO_Init>
}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	; 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	50040000 	.word	0x50040000
 8001a14:	200002e4 	.word	0x200002e4
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48000800 	.word	0x48000800
 8001a20:	48000400 	.word	0x48000400
 8001a24:	50040100 	.word	0x50040100

08001a28 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d128      	bne.n	8001a9a <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4c:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6613      	str	r3, [r2, #96]	; 0x60
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a66:	f043 0310 	orr.w	r3, r3, #16
 8001a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001a78:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_DFSDM_ChannelMspInit+0x84>)
 8001a96:	f001 fe8f 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200002e8 	.word	0x200002e8
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	48001000 	.word	0x48001000

08001ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_I2C_MspInit+0x7c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d128      	bne.n	8001b24 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_I2C_MspInit+0x80>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_I2C_MspInit+0x80>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_I2C_MspInit+0x80>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001aea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af0:	2312      	movs	r3, #18
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001afc:	2304      	movs	r3, #4
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	480b      	ldr	r0, [pc, #44]	; (8001b34 <HAL_I2C_MspInit+0x84>)
 8001b08:	f001 fe56 	bl	80037b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_I2C_MspInit+0x80>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_I2C_MspInit+0x80>)
 8001b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b16:	6593      	str	r3, [r2, #88]	; 0x58
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_I2C_MspInit+0x80>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40005800 	.word	0x40005800
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000400 	.word	0x48000400

08001b38 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_QSPI_MspInit+0x7c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d128      	bne.n	8001bac <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_QSPI_MspInit+0x80>)
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_QSPI_MspInit+0x80>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6513      	str	r3, [r2, #80]	; 0x50
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_QSPI_MspInit+0x80>)
 8001b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_QSPI_MspInit+0x80>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_QSPI_MspInit+0x80>)
 8001b78:	f043 0310 	orr.w	r3, r3, #16
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_QSPI_MspInit+0x80>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001b8a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b8e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_QSPI_MspInit+0x84>)
 8001ba8:	f001 fe06 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3728      	adds	r7, #40	; 0x28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	a0001000 	.word	0xa0001000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48001000 	.word	0x48001000

08001bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <HAL_SPI_MspInit+0x7c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d128      	bne.n	8001c34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_SPI_MspInit+0x80>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <HAL_SPI_MspInit+0x80>)
 8001be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bec:	6593      	str	r3, [r2, #88]	; 0x58
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_SPI_MspInit+0x80>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HAL_SPI_MspInit+0x80>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_SPI_MspInit+0x80>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_SPI_MspInit+0x80>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001c12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c24:	2306      	movs	r3, #6
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <HAL_SPI_MspInit+0x84>)
 8001c30:	f001 fdc2 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40003c00 	.word	0x40003c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	48000800 	.word	0x48000800

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <HAL_UART_MspInit+0xd8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d128      	bne.n	8001cbc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	4a2d      	ldr	r2, [pc, #180]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6613      	str	r3, [r2, #96]	; 0x60
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	4a27      	ldr	r2, [pc, #156]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001caa:	2307      	movs	r3, #7
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 031c 	add.w	r3, r7, #28
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481c      	ldr	r0, [pc, #112]	; (8001d28 <HAL_UART_MspInit+0xe0>)
 8001cb6:	f001 fd7f 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cba:	e02d      	b.n	8001d18 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <HAL_UART_MspInit+0xe4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d128      	bne.n	8001d18 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_UART_MspInit+0xdc>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4807      	ldr	r0, [pc, #28]	; (8001d30 <HAL_UART_MspInit+0xe8>)
 8001d14:	f001 fd50 	bl	80037b8 <HAL_GPIO_Init>
}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	; 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	40004800 	.word	0x40004800
 8001d30:	48000c00 	.word	0x48000c00

08001d34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d54:	d154      	bne.n	8001e00 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b2c      	ldr	r3, [pc, #176]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5a:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d86:	f001 fd17 	bl	80037b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001daa:	f001 fd05 	bl	80037b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d114      	bne.n	8001dfc <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001dea:	f002 f9ab 	bl	8004144 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_PCD_MspInit+0xd4>)
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001dfa:	e001      	b.n	8001e00 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001dfc:	f002 f9a2 	bl	8004144 <HAL_PWREx_EnableVddUSB>
}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	; 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	2019      	movs	r0, #25
 8001e22:	f001 fb93 	bl	800354c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001e26:	2019      	movs	r0, #25
 8001e28:	f001 fbac 	bl	8003584 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_InitTick+0x9c>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e30:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_InitTick+0x9c>)
 8001e32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e36:	6613      	str	r3, [r2, #96]	; 0x60
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_InitTick+0x9c>)
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e44:	f107 0210 	add.w	r2, r7, #16
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 ffda 	bl	8004e08 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e54:	f002 ffc2 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8001e58:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_InitTick+0xa0>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0c9b      	lsrs	r3, r3, #18
 8001e64:	3b01      	subs	r3, #1
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_InitTick+0xa4>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <HAL_InitTick+0xa8>)
 8001e6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_InitTick+0xa4>)
 8001e70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_InitTick+0xa4>)
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_InitTick+0xa4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_InitTick+0xa4>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <HAL_InitTick+0xa4>)
 8001e8a:	f003 fd99 	bl	80059c0 <HAL_TIM_Base_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d104      	bne.n	8001e9e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e94:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <HAL_InitTick+0xa4>)
 8001e96:	f003 fdc9 	bl	8005a2c <HAL_TIM_Base_Start_IT>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3730      	adds	r7, #48	; 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	20002348 	.word	0x20002348
 8001eb4:	40012c00 	.word	0x40012c00

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <UsageFault_Handler+0x4>

08001ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ef0:	2020      	movs	r0, #32
 8001ef2:	f001 fe21 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ef6:	2040      	movs	r0, #64	; 0x40
 8001ef8:	f001 fe1e 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001efc:	2080      	movs	r0, #128	; 0x80
 8001efe:	f001 fe1b 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f06:	f001 fe17 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f14:	4802      	ldr	r0, [pc, #8]	; (8001f20 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f16:	f003 fdb3 	bl	8005a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20002348 	.word	0x20002348

08001f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8001f28:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <EXTI15_10_IRQHandler+0x44>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <EXTI15_10_IRQHandler+0x16>
	  blue_button_pressed = 1; // toggle blue button pressed
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <EXTI15_10_IRQHandler+0x48>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f3e:	f001 fdfb 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001f42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f46:	f001 fdf7 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f4e:	f001 fdf3 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f56:	f001 fdef 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001f5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f5e:	f001 fdeb 	bl	8003b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40010400 	.word	0x40010400
 8001f6c:	200002ec 	.word	0x200002ec

08001f70 <_sbrk>:
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <_sbrk+0x50>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x16>
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <_sbrk+0x50>)
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <_sbrk+0x54>)
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <_sbrk+0x50>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <_sbrk+0x50>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	466a      	mov	r2, sp
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d907      	bls.n	8001faa <_sbrk+0x3a>
 8001f9a:	f007 fbff 	bl	800979c <__errno>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa8:	e006      	b.n	8001fb8 <_sbrk+0x48>
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <_sbrk+0x50>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <_sbrk+0x50>)
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200002f0 	.word	0x200002f0
 8001fc4:	20002390 	.word	0x20002390

08001fc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <SystemInit+0x64>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	4a16      	ldr	r2, [pc, #88]	; (800202c <SystemInit+0x64>)
 8001fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <SystemInit+0x68>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <SystemInit+0x68>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <SystemInit+0x68>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <SystemInit+0x68>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <SystemInit+0x68>)
 8001ff4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ff8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <SystemInit+0x68>)
 8002000:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002004:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <SystemInit+0x68>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <SystemInit+0x68>)
 800200c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <SystemInit+0x68>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <SystemInit+0x64>)
 800201a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201e:	609a      	str	r2, [r3, #8]
#endif
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00
 8002030:	40021000 	.word	0x40021000

08002034 <Reset_Handler>:
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopForever+0x2>
 8002038:	2100      	movs	r1, #0
 800203a:	e003      	b.n	8002044 <LoopCopyDataInit>

0800203c <CopyDataInit>:
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <LoopForever+0x6>)
 800203e:	585b      	ldr	r3, [r3, r1]
 8002040:	5043      	str	r3, [r0, r1]
 8002042:	3104      	adds	r1, #4

08002044 <LoopCopyDataInit>:
 8002044:	480b      	ldr	r0, [pc, #44]	; (8002074 <LoopForever+0xa>)
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <LoopForever+0xe>)
 8002048:	1842      	adds	r2, r0, r1
 800204a:	429a      	cmp	r2, r3
 800204c:	d3f6      	bcc.n	800203c <CopyDataInit>
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LoopForever+0x12>)
 8002050:	e002      	b.n	8002058 <LoopFillZerobss>

08002052 <FillZerobss>:
 8002052:	2300      	movs	r3, #0
 8002054:	f842 3b04 	str.w	r3, [r2], #4

08002058 <LoopFillZerobss>:
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <LoopForever+0x16>)
 800205a:	429a      	cmp	r2, r3
 800205c:	d3f9      	bcc.n	8002052 <FillZerobss>
 800205e:	f7ff ffb3 	bl	8001fc8 <SystemInit>
 8002062:	f007 fba1 	bl	80097a8 <__libc_init_array>
 8002066:	f7fe fae9 	bl	800063c <main>

0800206a <LoopForever>:
 800206a:	e7fe      	b.n	800206a <LoopForever>
 800206c:	20018000 	.word	0x20018000
 8002070:	0800a228 	.word	0x0800a228
 8002074:	20000000 	.word	0x20000000
 8002078:	20000074 	.word	0x20000074
 800207c:	20000074 	.word	0x20000074
 8002080:	20002390 	.word	0x20002390

08002084 <ADC1_2_IRQHandler>:
 8002084:	e7fe      	b.n	8002084 <ADC1_2_IRQHandler>

08002086 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f001 fa50 	bl	8003536 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff feb8 	bl	8001e0c <HAL_InitTick>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	e001      	b.n	80020ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020a8:	f7ff fbe4 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020ac:	79fb      	ldrb	r3, [r7, #7]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_IncTick+0x1c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_IncTick+0x20>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a03      	ldr	r2, [pc, #12]	; (80020d4 <HAL_IncTick+0x1c>)
 80020c8:	6013      	str	r3, [r2, #0]
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	20002388 	.word	0x20002388
 80020d8:	20000008 	.word	0x20000008

080020dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return uwTick;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_GetTick+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20002388 	.word	0x20002388

080020f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff ffee 	bl	80020dc <HAL_GetTick>
 8002100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d004      	beq.n	8002118 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_Delay+0x40>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002118:	bf00      	nop
 800211a:	f7ff ffdf 	bl	80020dc <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	429a      	cmp	r2, r3
 8002128:	d8f7      	bhi.n	800211a <HAL_Delay+0x26>
  {
  }
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000008 	.word	0x20000008

08002138 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	609a      	str	r2, [r3, #8]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021a0:	b490      	push	{r4, r7}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3360      	adds	r3, #96	; 0x60
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021bc:	6822      	ldr	r2, [r4, #0]
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <LL_ADC_SetOffset+0x40>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc90      	pop	{r4, r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	03fff000 	.word	0x03fff000

080021e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021e4:	b490      	push	{r4, r7}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3360      	adds	r3, #96	; 0x60
 80021f2:	461a      	mov	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bc90      	pop	{r4, r7}
 800220a:	4770      	bx	lr

0800220c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800220c:	b490      	push	{r4, r7}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3360      	adds	r3, #96	; 0x60
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4313      	orrs	r3, r2
 8002230:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bc90      	pop	{r4, r7}
 800223a:	4770      	bx	lr

0800223c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002262:	b490      	push	{r4, r7}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3330      	adds	r3, #48	; 0x30
 8002272:	461a      	mov	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	4413      	add	r3, r2
 8002280:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002282:	6822      	ldr	r2, [r4, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	211f      	movs	r1, #31
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	f003 011f 	and.w	r1, r3, #31
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc90      	pop	{r4, r7}
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022b4:	b490      	push	{r4, r7}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3314      	adds	r3, #20
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	0e5b      	lsrs	r3, r3, #25
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	4413      	add	r3, r2
 80022d2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022d4:	6822      	ldr	r2, [r4, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	0d1b      	lsrs	r3, r3, #20
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2107      	movs	r1, #7
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	0d1b      	lsrs	r3, r3, #20
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc90      	pop	{r4, r7}
 8002302:	4770      	bx	lr

08002304 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231c:	43db      	mvns	r3, r3
 800231e:	401a      	ands	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0318 	and.w	r3, r3, #24
 8002326:	4908      	ldr	r1, [pc, #32]	; (8002348 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002328:	40d9      	lsrs	r1, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	400b      	ands	r3, r1
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002332:	431a      	orrs	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	0007ffff 	.word	0x0007ffff

0800234c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 031f 	and.w	r3, r3, #31
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002394:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6093      	str	r3, [r2, #8]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023bc:	d101      	bne.n	80023c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800240c:	d101      	bne.n	8002412 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <LL_ADC_IsEnabled+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_ADC_IsEnabled+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800247e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002482:	f043 0204 	orr.w	r2, r3, #4
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d101      	bne.n	80024ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d101      	bne.n	80024d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e134      	b.n	8002768 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff f9d9 	bl	80018c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff3f 	bl	80023a8 <LL_ADC_IsDeepPowerDownEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff25 	bl	8002384 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff5a 	bl	80023f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d113      	bne.n	8002572 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff3e 	bl	80023d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002554:	4b86      	ldr	r3, [pc, #536]	; (8002770 <HAL_ADC_Init+0x28c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	4a86      	ldr	r2, [pc, #536]	; (8002774 <HAL_ADC_Init+0x290>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002564:	e002      	b.n	800256c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff3e 	bl	80023f8 <LL_ADC_IsInternalRegulatorEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f043 0210 	orr.w	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff77 	bl	8002496 <LL_ADC_REG_IsConversionOngoing>
 80025a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 80cf 	bne.w	8002756 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80cb 	bne.w	8002756 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025c8:	f043 0202 	orr.w	r2, r3, #2
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff37 	bl	8002448 <LL_ADC_IsEnabled>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d115      	bne.n	800260c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025e0:	4865      	ldr	r0, [pc, #404]	; (8002778 <HAL_ADC_Init+0x294>)
 80025e2:	f7ff ff31 	bl	8002448 <LL_ADC_IsEnabled>
 80025e6:	4604      	mov	r4, r0
 80025e8:	4864      	ldr	r0, [pc, #400]	; (800277c <HAL_ADC_Init+0x298>)
 80025ea:	f7ff ff2d 	bl	8002448 <LL_ADC_IsEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	431c      	orrs	r4, r3
 80025f2:	4863      	ldr	r0, [pc, #396]	; (8002780 <HAL_ADC_Init+0x29c>)
 80025f4:	f7ff ff28 	bl	8002448 <LL_ADC_IsEnabled>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4323      	orrs	r3, r4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d105      	bne.n	800260c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4619      	mov	r1, r3
 8002606:	485f      	ldr	r0, [pc, #380]	; (8002784 <HAL_ADC_Init+0x2a0>)
 8002608:	f7ff fd96 	bl	8002138 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e5b      	ldrb	r3, [r3, #25]
 8002610:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002616:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800261c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002622:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d106      	bne.n	8002648 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	3b01      	subs	r3, #1
 8002640:	045b      	lsls	r3, r3, #17
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_ADC_Init+0x2a4>)
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	69b9      	ldr	r1, [r7, #24]
 8002674:	430b      	orrs	r3, r1
 8002676:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff0a 	bl	8002496 <LL_ADC_REG_IsConversionOngoing>
 8002682:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff17 	bl	80024bc <LL_ADC_INJ_IsConversionOngoing>
 800268e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d13d      	bne.n	8002712 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d13a      	bne.n	8002712 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b8:	f023 0302 	bic.w	r3, r3, #2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	69b9      	ldr	r1, [r7, #24]
 80026c2:	430b      	orrs	r3, r1
 80026c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d118      	bne.n	8002702 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026e6:	4311      	orrs	r1, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026ec:	4311      	orrs	r1, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026f2:	430a      	orrs	r2, r1
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	611a      	str	r2, [r3, #16]
 8002700:	e007      	b.n	8002712 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10c      	bne.n	8002734 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f023 010f 	bic.w	r1, r3, #15
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
 8002732:	e007      	b.n	8002744 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020f 	bic.w	r2, r2, #15
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002748:	f023 0303 	bic.w	r3, r3, #3
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
 8002754:	e007      	b.n	8002766 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f043 0210 	orr.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002766:	7ffb      	ldrb	r3, [r7, #31]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3724      	adds	r7, #36	; 0x24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	20000000 	.word	0x20000000
 8002774:	053e2d63 	.word	0x053e2d63
 8002778:	50040000 	.word	0x50040000
 800277c:	50040100 	.word	0x50040100
 8002780:	50040200 	.word	0x50040200
 8002784:	50040300 	.word	0x50040300
 8002788:	fff0c007 	.word	0xfff0c007

0800278c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002794:	4857      	ldr	r0, [pc, #348]	; (80028f4 <HAL_ADC_Start+0x168>)
 8002796:	f7ff fdd9 	bl	800234c <LL_ADC_GetMultimode>
 800279a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fe78 	bl	8002496 <LL_ADC_REG_IsConversionOngoing>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 809c 	bne.w	80028e6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_Start+0x30>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e097      	b.n	80028ec <HAL_ADC_Start+0x160>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 fcdd 	bl	8003184 <ADC_Enable>
 80027ca:	4603      	mov	r3, r0
 80027cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 8083 	bne.w	80028dc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a42      	ldr	r2, [pc, #264]	; (80028f8 <HAL_ADC_Start+0x16c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d002      	beq.n	80027fa <HAL_ADC_Start+0x6e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	e000      	b.n	80027fc <HAL_ADC_Start+0x70>
 80027fa:	4b40      	ldr	r3, [pc, #256]	; (80028fc <HAL_ADC_Start+0x170>)
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	4293      	cmp	r3, r2
 8002802:	d002      	beq.n	800280a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d106      	bne.n	8002832 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	f023 0206 	bic.w	r2, r3, #6
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	659a      	str	r2, [r3, #88]	; 0x58
 8002830:	e002      	b.n	8002838 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	221c      	movs	r2, #28
 800283e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2a      	ldr	r2, [pc, #168]	; (80028f8 <HAL_ADC_Start+0x16c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <HAL_ADC_Start+0xcc>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e000      	b.n	800285a <HAL_ADC_Start+0xce>
 8002858:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_ADC_Start+0x170>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4293      	cmp	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d002      	beq.n	8002874 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b09      	cmp	r3, #9
 8002872:	d114      	bne.n	800289e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800288a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fde9 	bl	800246e <LL_ADC_REG_StartConversion>
 800289c:	e025      	b.n	80028ea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <HAL_ADC_Start+0x16c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d002      	beq.n	80028ba <HAL_ADC_Start+0x12e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	e000      	b.n	80028bc <HAL_ADC_Start+0x130>
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_ADC_Start+0x170>)
 80028bc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00f      	beq.n	80028ea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
 80028da:	e006      	b.n	80028ea <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80028e4:	e001      	b.n	80028ea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
 80028e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	50040300 	.word	0x50040300
 80028f8:	50040100 	.word	0x50040100
 80028fc:	50040000 	.word	0x50040000

08002900 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800290a:	4862      	ldr	r0, [pc, #392]	; (8002a94 <HAL_ADC_PollForConversion+0x194>)
 800290c:	f7ff fd1e 	bl	800234c <LL_ADC_GetMultimode>
 8002910:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b08      	cmp	r3, #8
 8002918:	d102      	bne.n	8002920 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800291a:	2308      	movs	r3, #8
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e02a      	b.n	8002976 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b05      	cmp	r3, #5
 800292a:	d002      	beq.n	8002932 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b09      	cmp	r3, #9
 8002930:	d111      	bne.n	8002956 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e09d      	b.n	8002a8c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002950:	2304      	movs	r3, #4
 8002952:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002954:	e00f      	b.n	8002976 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002956:	484f      	ldr	r0, [pc, #316]	; (8002a94 <HAL_ADC_PollForConversion+0x194>)
 8002958:	f7ff fd06 	bl	8002368 <LL_ADC_GetMultiDMATransfer>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e08c      	b.n	8002a8c <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002972:	2304      	movs	r3, #4
 8002974:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002976:	f7ff fbb1 	bl	80020dc <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800297c:	e01a      	b.n	80029b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d016      	beq.n	80029b4 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002986:	f7ff fba9 	bl	80020dc <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d302      	bcc.n	800299c <HAL_ADC_PollForConversion+0x9c>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e06b      	b.n	8002a8c <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0dd      	beq.n	800297e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fc32 	bl	800223c <LL_ADC_REG_IsTriggerSourceSWStart>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01c      	beq.n	8002a18 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7e5b      	ldrb	r3, [r3, #25]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d111      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d105      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_ADC_PollForConversion+0x198>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d002      	beq.n	8002a28 <HAL_ADC_PollForConversion+0x128>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e000      	b.n	8002a2a <HAL_ADC_PollForConversion+0x12a>
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <HAL_ADC_PollForConversion+0x19c>)
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d008      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d002      	beq.n	8002a44 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d104      	bne.n	8002a4e <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	e00c      	b.n	8002a68 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_ADC_PollForConversion+0x198>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d002      	beq.n	8002a5e <HAL_ADC_PollForConversion+0x15e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_PollForConversion+0x160>
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_ADC_PollForConversion+0x19c>)
 8002a60:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d104      	bne.n	8002a78 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2208      	movs	r2, #8
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e008      	b.n	8002a8a <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	220c      	movs	r2, #12
 8002a88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	50040300 	.word	0x50040300
 8002a98:	50040100 	.word	0x50040100
 8002a9c:	50040000 	.word	0x50040000

08002aa0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0a6      	sub	sp, #152	; 0x98
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x22>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e348      	b.n	8003170 <HAL_ADC_ConfigChannel+0x6b4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fcd3 	bl	8002496 <LL_ADC_REG_IsConversionOngoing>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8329 	bne.w	800314a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d824      	bhi.n	8002b4a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	3b02      	subs	r3, #2
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d81b      	bhi.n	8002b42 <HAL_ADC_ConfigChannel+0x86>
 8002b0a:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <HAL_ADC_ConfigChannel+0x54>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b29 	.word	0x08002b29
 8002b18:	08002b31 	.word	0x08002b31
 8002b1c:	08002b39 	.word	0x08002b39
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	220c      	movs	r2, #12
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	e011      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2212      	movs	r2, #18
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	e00d      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2218      	movs	r2, #24
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	e009      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	e004      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2206      	movs	r2, #6
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	e000      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b4a:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff fb82 	bl	8002262 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fc97 	bl	8002496 <LL_ADC_REG_IsConversionOngoing>
 8002b68:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fca3 	bl	80024bc <LL_ADC_INJ_IsConversionOngoing>
 8002b76:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 8148 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f040 8143 	bne.w	8002e14 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f7ff fb8a 	bl	80022b4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	695a      	ldr	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6919      	ldr	r1, [r3, #16]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bd2:	f7ff fae5 	bl	80021a0 <LL_ADC_SetOffset>
 8002bd6:	e11d      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fb00 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x148>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff faf5 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	f003 021f 	and.w	r2, r3, #31
 8002c02:	e012      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x16e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff faea 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x186>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e9b      	lsrs	r3, r3, #26
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	e00a      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x19c>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4a:	fa93 f3a3 	rbit	r3, r3
 8002c4e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d106      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fad1 	bl	800220c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fab7 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10a      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x1da>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff faac 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	e010      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x1fc>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff faa1 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x214>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0e9b      	lsrs	r3, r3, #26
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	e00a      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x22a>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d106      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fa8a 	bl	800220c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2102      	movs	r1, #2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fa70 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10a      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x268>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fa65 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	f003 021f 	and.w	r2, r3, #31
 8002d22:	e010      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x28a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2102      	movs	r1, #2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fa5a 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x2a2>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	e00a      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x2b8>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2102      	movs	r1, #2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fa43 	bl	800220c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2103      	movs	r1, #3
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fa29 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x2f6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2103      	movs	r1, #3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fa1e 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	e010      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x318>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2103      	movs	r1, #3
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fa13 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x330>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	e00a      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x346>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d106      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f9fc 	bl	800220c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fb15 	bl	8002448 <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 810c 	bne.w	800303e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f7ff fa66 	bl	8002304 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4aad      	ldr	r2, [pc, #692]	; (80030f4 <HAL_ADC_ConfigChannel+0x638>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	f040 80fd 	bne.w	800303e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10b      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x3b0>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	0e9b      	lsrs	r3, r3, #26
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2b09      	cmp	r3, #9
 8002e62:	bf94      	ite	ls
 8002e64:	2301      	movls	r3, #1
 8002e66:	2300      	movhi	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	e012      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x3d6>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3301      	adds	r3, #1
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d064      	beq.n	8002f60 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d107      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x3f6>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb0:	e00e      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x414>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	069b      	lsls	r3, r3, #26
 8002ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x434>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	e010      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x456>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	ea42 0103 	orr.w	r1, r2, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x47c>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	e011      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x4a0>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	e069      	b.n	8003034 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x4c0>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	3301      	adds	r3, #1
 8002f74:	069b      	lsls	r3, r3, #26
 8002f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7a:	e00e      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x4de>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	61fb      	str	r3, [r7, #28]
  return result;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	069b      	lsls	r3, r3, #26
 8002f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x4fe>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0e9b      	lsrs	r3, r3, #26
 8002fac:	3301      	adds	r3, #1
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	e010      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x520>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa93 f3a3 	rbit	r3, r3
 8002fc6:	617b      	str	r3, [r7, #20]
  return result;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	ea42 0103 	orr.w	r1, r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10d      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x54c>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	0e9b      	lsrs	r3, r3, #26
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3b1e      	subs	r3, #30
 8003000:	051b      	lsls	r3, r3, #20
 8003002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003006:	e014      	b.n	8003032 <HAL_ADC_ConfigChannel+0x576>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	60fb      	str	r3, [r7, #12]
  return result;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	3b1e      	subs	r3, #30
 800302c:	051b      	lsls	r3, r3, #20
 800302e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003032:	430b      	orrs	r3, r1
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	6892      	ldr	r2, [r2, #8]
 8003038:	4619      	mov	r1, r3
 800303a:	f7ff f93b 	bl	80022b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_ADC_ConfigChannel+0x63c>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 808c 	beq.w	8003164 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800304c:	482b      	ldr	r0, [pc, #172]	; (80030fc <HAL_ADC_ConfigChannel+0x640>)
 800304e:	f7ff f899 	bl	8002184 <LL_ADC_GetCommonPathInternalCh>
 8003052:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a29      	ldr	r2, [pc, #164]	; (8003100 <HAL_ADC_ConfigChannel+0x644>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d12b      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x5fc>
 8003060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d125      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a24      	ldr	r2, [pc, #144]	; (8003104 <HAL_ADC_ConfigChannel+0x648>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_ADC_ConfigChannel+0x5c4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a23      	ldr	r2, [pc, #140]	; (8003108 <HAL_ADC_ConfigChannel+0x64c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d16e      	bne.n	800315e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003088:	4619      	mov	r1, r3
 800308a:	481c      	ldr	r0, [pc, #112]	; (80030fc <HAL_ADC_ConfigChannel+0x640>)
 800308c:	f7ff f867 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003090:	4b1e      	ldr	r3, [pc, #120]	; (800310c <HAL_ADC_ConfigChannel+0x650>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_ADC_ConfigChannel+0x654>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	099a      	lsrs	r2, r3, #6
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030a8:	e002      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b6:	e052      	b.n	800315e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a15      	ldr	r2, [pc, #84]	; (8003114 <HAL_ADC_ConfigChannel+0x658>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d12a      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x65c>
 80030c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d124      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <HAL_ADC_ConfigChannel+0x648>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_ADC_ConfigChannel+0x626>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_ADC_ConfigChannel+0x64c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d13f      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	4619      	mov	r1, r3
 80030ec:	4803      	ldr	r0, [pc, #12]	; (80030fc <HAL_ADC_ConfigChannel+0x640>)
 80030ee:	f7ff f836 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f2:	e036      	b.n	8003162 <HAL_ADC_ConfigChannel+0x6a6>
 80030f4:	407f0000 	.word	0x407f0000
 80030f8:	80080000 	.word	0x80080000
 80030fc:	50040300 	.word	0x50040300
 8003100:	c7520000 	.word	0xc7520000
 8003104:	50040000 	.word	0x50040000
 8003108:	50040200 	.word	0x50040200
 800310c:	20000000 	.word	0x20000000
 8003110:	053e2d63 	.word	0x053e2d63
 8003114:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a16      	ldr	r2, [pc, #88]	; (8003178 <HAL_ADC_ConfigChannel+0x6bc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d120      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11a      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <HAL_ADC_ConfigChannel+0x6c0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d115      	bne.n	8003164 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800313c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003140:	4619      	mov	r1, r3
 8003142:	480f      	ldr	r0, [pc, #60]	; (8003180 <HAL_ADC_ConfigChannel+0x6c4>)
 8003144:	f7ff f80b 	bl	800215e <LL_ADC_SetCommonPathInternalCh>
 8003148:	e00c      	b.n	8003164 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800315c:	e002      	b.n	8003164 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003162:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800316c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003170:	4618      	mov	r0, r3
 8003172:	3798      	adds	r7, #152	; 0x98
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	80000001 	.word	0x80000001
 800317c:	50040000 	.word	0x50040000
 8003180:	50040300 	.word	0x50040300

08003184 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f959 	bl	8002448 <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d146      	bne.n	800322a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	4b24      	ldr	r3, [pc, #144]	; (8003234 <ADC_Enable+0xb0>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f043 0210 	orr.w	r2, r3, #16
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f043 0201 	orr.w	r2, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e032      	b.n	800322c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff f928 	bl	8002420 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031d0:	f7fe ff84 	bl	80020dc <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031d6:	e021      	b.n	800321c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff f933 	bl	8002448 <LL_ADC_IsEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f917 	bl	8002420 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031f2:	f7fe ff73 	bl	80020dc <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d90d      	bls.n	800321c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f043 0210 	orr.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e007      	b.n	800322c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d1d6      	bne.n	80031d8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	8000003f 	.word	0x8000003f

08003238 <LL_ADC_IsEnabled>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <LL_ADC_IsEnabled+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_ADC_IsEnabled+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_IsConversionOngoing>:
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d101      	bne.n	8003276 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b09f      	sub	sp, #124	; 0x7c
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800329e:	2302      	movs	r3, #2
 80032a0:	e08f      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a47      	ldr	r2, [pc, #284]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d102      	bne.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80032b4:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	e001      	b.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e072      	b.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ffbd 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 80032e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ffb7 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d154      	bne.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d151      	bne.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d02c      	beq.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800331a:	035b      	lsls	r3, r3, #13
 800331c:	430b      	orrs	r3, r1
 800331e:	431a      	orrs	r2, r3
 8003320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003322:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003324:	4829      	ldr	r0, [pc, #164]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003326:	f7ff ff87 	bl	8003238 <LL_ADC_IsEnabled>
 800332a:	4604      	mov	r4, r0
 800332c:	4828      	ldr	r0, [pc, #160]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800332e:	f7ff ff83 	bl	8003238 <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	431c      	orrs	r4, r3
 8003336:	4828      	ldr	r0, [pc, #160]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003338:	f7ff ff7e 	bl	8003238 <LL_ADC_IsEnabled>
 800333c:	4603      	mov	r3, r0
 800333e:	4323      	orrs	r3, r4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d137      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800334c:	f023 030f 	bic.w	r3, r3, #15
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	6811      	ldr	r1, [r2, #0]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	6892      	ldr	r2, [r2, #8]
 8003358:	430a      	orrs	r2, r1
 800335a:	431a      	orrs	r2, r3
 800335c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003360:	e028      	b.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800336c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800336e:	4817      	ldr	r0, [pc, #92]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003370:	f7ff ff62 	bl	8003238 <LL_ADC_IsEnabled>
 8003374:	4604      	mov	r4, r0
 8003376:	4816      	ldr	r0, [pc, #88]	; (80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003378:	f7ff ff5e 	bl	8003238 <LL_ADC_IsEnabled>
 800337c:	4603      	mov	r3, r0
 800337e:	431c      	orrs	r4, r3
 8003380:	4815      	ldr	r0, [pc, #84]	; (80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003382:	f7ff ff59 	bl	8003238 <LL_ADC_IsEnabled>
 8003386:	4603      	mov	r3, r0
 8003388:	4323      	orrs	r3, r4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d112      	bne.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800338e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003396:	f023 030f 	bic.w	r3, r3, #15
 800339a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800339c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800339e:	e009      	b.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033b2:	e000      	b.n	80033b6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	377c      	adds	r7, #124	; 0x7c
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd90      	pop	{r4, r7, pc}
 80033ca:	bf00      	nop
 80033cc:	50040000 	.word	0x50040000
 80033d0:	50040100 	.word	0x50040100
 80033d4:	50040300 	.word	0x50040300
 80033d8:	50040200 	.word	0x50040200

080033dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	60d3      	str	r3, [r2, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	; (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	; (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff ff4c 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800355e:	f7ff ff61 	bl	8003424 <__NVIC_GetPriorityGrouping>
 8003562:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	6978      	ldr	r0, [r7, #20]
 800356a:	f7ff ffb1 	bl	80034d0 <NVIC_EncodePriority>
 800356e:	4602      	mov	r2, r0
 8003570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff80 	bl	800347c <__NVIC_SetPriority>
}
 800357c:	bf00      	nop
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff54 	bl	8003440 <__NVIC_EnableIRQ>
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0ac      	b.n	800370c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f8b2 	bl	8003720 <DFSDM_GetChannelFromInstance>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b55      	ldr	r3, [pc, #340]	; (8003714 <HAL_DFSDM_ChannelInit+0x174>)
 80035c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e09f      	b.n	800370c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fe fa2b 	bl	8001a28 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80035d2:	4b51      	ldr	r3, [pc, #324]	; (8003718 <HAL_DFSDM_ChannelInit+0x178>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3301      	adds	r3, #1
 80035d8:	4a4f      	ldr	r2, [pc, #316]	; (8003718 <HAL_DFSDM_ChannelInit+0x178>)
 80035da:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80035dc:	4b4e      	ldr	r3, [pc, #312]	; (8003718 <HAL_DFSDM_ChannelInit+0x178>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d125      	bne.n	8003630 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80035e4:	4b4d      	ldr	r3, [pc, #308]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a4c      	ldr	r2, [pc, #304]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 80035ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035ee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80035f0:	4b4a      	ldr	r3, [pc, #296]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4948      	ldr	r1, [pc, #288]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 8003604:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003608:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	791b      	ldrb	r3, [r3, #4]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d108      	bne.n	8003624 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003612:	4b42      	ldr	r3, [pc, #264]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	493f      	ldr	r1, [pc, #252]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003624:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3c      	ldr	r2, [pc, #240]	; (800371c <HAL_DFSDM_ChannelInit+0x17c>)
 800362a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800362e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800363e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6819      	ldr	r1, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800364e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003654:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 020f 	bic.w	r2, r2, #15
 800366c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003694:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6899      	ldr	r1, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f002 0207 	and.w	r2, r2, #7
 80036c0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f810 	bl	8003720 <DFSDM_GetChannelFromInstance>
 8003700:	4601      	mov	r1, r0
 8003702:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_DFSDM_ChannelInit+0x174>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200002f8 	.word	0x200002f8
 8003718:	200002f4 	.word	0x200002f4
 800371c:	40016000 	.word	0x40016000

08003720 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <DFSDM_GetChannelFromInstance+0x7c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d102      	bne.n	8003736 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	e02b      	b.n	800378e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <DFSDM_GetChannelFromInstance+0x80>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d102      	bne.n	8003744 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e024      	b.n	800378e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <DFSDM_GetChannelFromInstance+0x84>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d102      	bne.n	8003752 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800374c:	2302      	movs	r3, #2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e01d      	b.n	800378e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <DFSDM_GetChannelFromInstance+0x88>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d102      	bne.n	8003760 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800375a:	2304      	movs	r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e016      	b.n	800378e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <DFSDM_GetChannelFromInstance+0x8c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d102      	bne.n	800376e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003768:	2305      	movs	r3, #5
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e00f      	b.n	800378e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <DFSDM_GetChannelFromInstance+0x90>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d102      	bne.n	800377c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003776:	2306      	movs	r3, #6
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e008      	b.n	800378e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <DFSDM_GetChannelFromInstance+0x94>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d102      	bne.n	800378a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003784:	2307      	movs	r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e001      	b.n	800378e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800378a:	2303      	movs	r3, #3
 800378c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800378e:	68fb      	ldr	r3, [r7, #12]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40016000 	.word	0x40016000
 80037a0:	40016020 	.word	0x40016020
 80037a4:	40016040 	.word	0x40016040
 80037a8:	40016080 	.word	0x40016080
 80037ac:	400160a0 	.word	0x400160a0
 80037b0:	400160c0 	.word	0x400160c0
 80037b4:	400160e0 	.word	0x400160e0

080037b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c6:	e17f      	b.n	8003ac8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	2101      	movs	r1, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8171 	beq.w	8003ac2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d00b      	beq.n	8003800 <HAL_GPIO_Init+0x48>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d007      	beq.n	8003800 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f4:	2b11      	cmp	r3, #17
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b12      	cmp	r3, #18
 80037fe:	d130      	bne.n	8003862 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003836:	2201      	movs	r2, #1
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0201 	and.w	r2, r3, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b03      	cmp	r3, #3
 800386c:	d118      	bne.n	80038a0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003874:	2201      	movs	r2, #1
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	f003 0201 	and.w	r2, r3, #1
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x128>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b12      	cmp	r3, #18
 80038de:	d123      	bne.n	8003928 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	08da      	lsrs	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3208      	adds	r2, #8
 80038e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	6939      	ldr	r1, [r7, #16]
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80ac 	beq.w	8003ac2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396a:	4b5e      	ldr	r3, [pc, #376]	; (8003ae4 <HAL_GPIO_Init+0x32c>)
 800396c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396e:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <HAL_GPIO_Init+0x32c>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6613      	str	r3, [r2, #96]	; 0x60
 8003976:	4b5b      	ldr	r3, [pc, #364]	; (8003ae4 <HAL_GPIO_Init+0x32c>)
 8003978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003982:	4a59      	ldr	r2, [pc, #356]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	220f      	movs	r2, #15
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039ac:	d025      	beq.n	80039fa <HAL_GPIO_Init+0x242>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4e      	ldr	r2, [pc, #312]	; (8003aec <HAL_GPIO_Init+0x334>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01f      	beq.n	80039f6 <HAL_GPIO_Init+0x23e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4d      	ldr	r2, [pc, #308]	; (8003af0 <HAL_GPIO_Init+0x338>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d019      	beq.n	80039f2 <HAL_GPIO_Init+0x23a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <HAL_GPIO_Init+0x33c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_GPIO_Init+0x236>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a4b      	ldr	r2, [pc, #300]	; (8003af8 <HAL_GPIO_Init+0x340>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00d      	beq.n	80039ea <HAL_GPIO_Init+0x232>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <HAL_GPIO_Init+0x344>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <HAL_GPIO_Init+0x22e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a49      	ldr	r2, [pc, #292]	; (8003b00 <HAL_GPIO_Init+0x348>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_GPIO_Init+0x22a>
 80039de:	2306      	movs	r3, #6
 80039e0:	e00c      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e00a      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039e6:	2305      	movs	r3, #5
 80039e8:	e008      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039ea:	2304      	movs	r3, #4
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039ee:	2303      	movs	r3, #3
 80039f0:	e004      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x244>
 80039fa:	2300      	movs	r3, #0
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	f002 0203 	and.w	r2, r2, #3
 8003a02:	0092      	lsls	r2, r2, #2
 8003a04:	4093      	lsls	r3, r2
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a0c:	4936      	ldr	r1, [pc, #216]	; (8003ae8 <HAL_GPIO_Init+0x330>)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a1a:	4b3a      	ldr	r3, [pc, #232]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a3e:	4a31      	ldr	r2, [pc, #196]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003a44:	4b2f      	ldr	r3, [pc, #188]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a68:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a6e:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a98:	4b1a      	ldr	r3, [pc, #104]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003abc:	4a11      	ldr	r2, [pc, #68]	; (8003b04 <HAL_GPIO_Init+0x34c>)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f47f ae78 	bne.w	80037c8 <HAL_GPIO_Init+0x10>
  }
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40010000 	.word	0x40010000
 8003aec:	48000400 	.word	0x48000400
 8003af0:	48000800 	.word	0x48000800
 8003af4:	48000c00 	.word	0x48000c00
 8003af8:	48001000 	.word	0x48001000
 8003afc:	48001400 	.word	0x48001400
 8003b00:	48001800 	.word	0x48001800
 8003b04:	40010400 	.word	0x40010400

08003b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
 8003b14:	4613      	mov	r3, r2
 8003b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b24:	e002      	b.n	8003b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b4e:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f806 	bl	8003b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40010400 	.word	0x40010400

08003b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e081      	b.n	8003c94 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fd ff83 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2224      	movs	r2, #36	; 0x24
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d107      	bne.n	8003bf8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf4:	609a      	str	r2, [r3, #8]
 8003bf6:	e006      	b.n	8003c06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d104      	bne.n	8003c18 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	ea42 0103 	orr.w	r1, r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	021a      	lsls	r2, r3, #8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69d9      	ldr	r1, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	d138      	bne.n	8003d24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e032      	b.n	8003d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	; 0x24
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d24:	2302      	movs	r3, #2
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d139      	bne.n	8003dbc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e033      	b.n	8003dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2224      	movs	r2, #36	; 0x24
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0201 	bic.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dcc:	b08f      	sub	sp, #60	; 0x3c
 8003dce:	af0a      	add	r7, sp, #40	; 0x28
 8003dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e116      	b.n	800400a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd ff9c 	bl	8001d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2203      	movs	r2, #3
 8003e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fe38 	bl	8006a90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	687e      	ldr	r6, [r7, #4]
 8003e28:	466d      	mov	r5, sp
 8003e2a:	f106 0410 	add.w	r4, r6, #16
 8003e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e3e:	1d33      	adds	r3, r6, #4
 8003e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e42:	6838      	ldr	r0, [r7, #0]
 8003e44:	f002 fdd2 	bl	80069ec <USB_CoreInit>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0d7      	b.n	800400a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f002 fe26 	bl	8006ab2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e04a      	b.n	8003f02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	333d      	adds	r3, #61	; 0x3d
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	333c      	adds	r3, #60	; 0x3c
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e94:	7bfa      	ldrb	r2, [r7, #15]
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	b298      	uxth	r0, r3
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3342      	adds	r3, #66	; 0x42
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003eac:	7bfa      	ldrb	r2, [r7, #15]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	333f      	adds	r3, #63	; 0x3f
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3344      	adds	r3, #68	; 0x44
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3348      	adds	r3, #72	; 0x48
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3350      	adds	r3, #80	; 0x50
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	3301      	adds	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3af      	bcc.n	8003e6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73fb      	strb	r3, [r7, #15]
 8003f10:	e044      	b.n	8003f9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f12:	7bfa      	ldrb	r2, [r7, #15]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003f3a:	7bfa      	ldrb	r2, [r7, #15]
 8003f3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f3e:	7bfa      	ldrb	r2, [r7, #15]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f54:	7bfa      	ldrb	r2, [r7, #15]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f6a:	7bfa      	ldrb	r2, [r7, #15]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	1a9b      	subs	r3, r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	7bfa      	ldrb	r2, [r7, #15]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3b5      	bcc.n	8003f12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	687e      	ldr	r6, [r7, #4]
 8003fae:	466d      	mov	r5, sp
 8003fb0:	f106 0410 	add.w	r4, r6, #16
 8003fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fc4:	1d33      	adds	r3, r6, #4
 8003fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc8:	6838      	ldr	r0, [r7, #0]
 8003fca:	f002 fd9d 	bl	8006b08 <USB_DevInit>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e014      	b.n	800400a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f80a 	bl	8004012 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f002 ff2d 	bl	8006e62 <USB_DevDisconnect>

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004012 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	f043 0303 	orr.w	r3, r3, #3
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40007000 	.word	0x40007000

0800407c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <HAL_PWREx_GetVoltageRange+0x18>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40007000 	.word	0x40007000

08004098 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a6:	d130      	bne.n	800410a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040a8:	4b23      	ldr	r3, [pc, #140]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b4:	d038      	beq.n	8004128 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040be:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2232      	movs	r2, #50	; 0x32
 80040cc:	fb02 f303 	mul.w	r3, r2, r3
 80040d0:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0c9b      	lsrs	r3, r3, #18
 80040d8:	3301      	adds	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040dc:	e002      	b.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d102      	bne.n	80040f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f2      	bne.n	80040de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d110      	bne.n	8004128 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e00f      	b.n	800412a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800410a:	4b0b      	ldr	r3, [pc, #44]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004116:	d007      	beq.n	8004128 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004120:	4a05      	ldr	r2, [pc, #20]	; (8004138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004126:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40007000 	.word	0x40007000
 800413c:	20000000 	.word	0x20000000
 8004140:	431bde83 	.word	0x431bde83

08004144 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_PWREx_EnableVddUSB+0x1c>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_PWREx_EnableVddUSB+0x1c>)
 800414e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004152:	6053      	str	r3, [r2, #4]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40007000 	.word	0x40007000

08004164 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800416c:	f7fd ffb6 	bl	80020dc <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e06f      	b.n	800425c <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_QSPI_Init+0x28>
 8004188:	2302      	movs	r3, #2
 800418a:	e067      	b.n	800425c <HAL_QSPI_Init+0xf8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fd fcc5 	bl	8001b38 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80041ae:	f241 3188 	movw	r1, #5000	; 0x1388
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f858 	bl	8004268 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	021a      	lsls	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	2120      	movs	r1, #32
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f850 	bl	8004284 <QSPI_WaitFlagStateUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80041e8:	7afb      	ldrb	r3, [r7, #11]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d131      	bne.n	8004252 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041f8:	f023 0310 	bic.w	r3, r3, #16
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6852      	ldr	r2, [r2, #4]
 8004200:	0611      	lsls	r1, r2, #24
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68d2      	ldr	r2, [r2, #12]
 8004206:	4311      	orrs	r1, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	430b      	orrs	r3, r1
 800420e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_QSPI_Init+0x100>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6912      	ldr	r2, [r2, #16]
 800421e:	0411      	lsls	r1, r2, #16
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6952      	ldr	r2, [r2, #20]
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6992      	ldr	r2, [r2, #24]
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	430b      	orrs	r3, r1
 8004232:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800425a:	7afb      	ldrb	r3, [r7, #11]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	ffe0f8fe 	.word	0xffe0f8fe

08004268 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004294:	e01a      	b.n	80042cc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d016      	beq.n	80042cc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fd ff1d 	bl	80020dc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2204      	movs	r2, #4
 80042b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e00e      	b.n	80042ea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bf14      	ite	ne
 80042da:	2301      	movne	r3, #1
 80042dc:	2300      	moveq	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	79fb      	ldrb	r3, [r7, #7]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d1d6      	bne.n	8004296 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e3d4      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004306:	4ba1      	ldr	r3, [pc, #644]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004310:	4b9e      	ldr	r3, [pc, #632]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80e4 	beq.w	80044f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_RCC_OscConfig+0x4a>
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2b0c      	cmp	r3, #12
 8004332:	f040 808b 	bne.w	800444c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b01      	cmp	r3, #1
 800433a:	f040 8087 	bne.w	800444c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800433e:	4b93      	ldr	r3, [pc, #588]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_RCC_OscConfig+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e3ac      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	4b8c      	ldr	r3, [pc, #560]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <HAL_RCC_OscConfig+0x7c>
 8004366:	4b89      	ldr	r3, [pc, #548]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436e:	e005      	b.n	800437c <HAL_RCC_OscConfig+0x88>
 8004370:	4b86      	ldr	r3, [pc, #536]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437c:	4293      	cmp	r3, r2
 800437e:	d223      	bcs.n	80043c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fd71 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e38d      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004394:	4b7d      	ldr	r3, [pc, #500]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a7c      	ldr	r2, [pc, #496]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800439a:	f043 0308 	orr.w	r3, r3, #8
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	4b7a      	ldr	r3, [pc, #488]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4977      	ldr	r1, [pc, #476]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b2:	4b76      	ldr	r3, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	4972      	ldr	r1, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	604b      	str	r3, [r1, #4]
 80043c6:	e025      	b.n	8004414 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c8:	4b70      	ldr	r3, [pc, #448]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6f      	ldr	r2, [pc, #444]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043ce:	f043 0308 	orr.w	r3, r3, #8
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b6d      	ldr	r3, [pc, #436]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	496a      	ldr	r1, [pc, #424]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e6:	4b69      	ldr	r3, [pc, #420]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	4965      	ldr	r1, [pc, #404]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fd31 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e34d      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004414:	f000 fc36 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004418:	4601      	mov	r1, r0
 800441a:	4b5c      	ldr	r3, [pc, #368]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	091b      	lsrs	r3, r3, #4
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	4a5a      	ldr	r2, [pc, #360]	; (8004590 <HAL_RCC_OscConfig+0x29c>)
 8004426:	5cd3      	ldrb	r3, [r2, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa21 f303 	lsr.w	r3, r1, r3
 8004430:	4a58      	ldr	r2, [pc, #352]	; (8004594 <HAL_RCC_OscConfig+0x2a0>)
 8004432:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004434:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCC_OscConfig+0x2a4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7fd fce7 	bl	8001e0c <HAL_InitTick>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d052      	beq.n	80044ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	e331      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d032      	beq.n	80044ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004454:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a4c      	ldr	r2, [pc, #304]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004460:	f7fd fe3c 	bl	80020dc <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004468:	f7fd fe38 	bl	80020dc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e31a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800447a:	4b44      	ldr	r3, [pc, #272]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004486:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a40      	ldr	r2, [pc, #256]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800448c:	f043 0308 	orr.w	r3, r3, #8
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	493b      	ldr	r1, [pc, #236]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a4:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	4936      	ldr	r1, [pc, #216]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
 80044b8:	e01a      	b.n	80044f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044ba:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a33      	ldr	r2, [pc, #204]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044c6:	f7fd fe09 	bl	80020dc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ce:	f7fd fe05 	bl	80020dc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e2e7      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <HAL_RCC_OscConfig+0x298>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x1da>
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d074      	beq.n	80045e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d005      	beq.n	800450e <HAL_RCC_OscConfig+0x21a>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b0c      	cmp	r3, #12
 8004506:	d10e      	bne.n	8004526 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d10b      	bne.n	8004526 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450e:	4b1f      	ldr	r3, [pc, #124]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d064      	beq.n	80045e4 <HAL_RCC_OscConfig+0x2f0>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d160      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e2c4      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x24a>
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a15      	ldr	r2, [pc, #84]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e01d      	b.n	800457a <HAL_RCC_OscConfig+0x286>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004546:	d10c      	bne.n	8004562 <HAL_RCC_OscConfig+0x26e>
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0f      	ldr	r2, [pc, #60]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800454e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0c      	ldr	r2, [pc, #48]	; (800458c <HAL_RCC_OscConfig+0x298>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e00b      	b.n	800457a <HAL_RCC_OscConfig+0x286>
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a06      	ldr	r2, [pc, #24]	; (800458c <HAL_RCC_OscConfig+0x298>)
 8004574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01c      	beq.n	80045bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fd fdab 	bl	80020dc <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004588:	e011      	b.n	80045ae <HAL_RCC_OscConfig+0x2ba>
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	0800a19c 	.word	0x0800a19c
 8004594:	20000000 	.word	0x20000000
 8004598:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fd fd9e 	bl	80020dc <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e280      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ae:	4baf      	ldr	r3, [pc, #700]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCC_OscConfig+0x2a8>
 80045ba:	e014      	b.n	80045e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fd fd8e 	bl	80020dc <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd fd8a 	bl	80020dc <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e26c      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045d6:	4ba5      	ldr	r3, [pc, #660]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x2d0>
 80045e2:	e000      	b.n	80045e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d060      	beq.n	80046b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_OscConfig+0x310>
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d119      	bne.n	8004632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d116      	bne.n	8004632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004604:	4b99      	ldr	r3, [pc, #612]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_RCC_OscConfig+0x328>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e249      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461c:	4b93      	ldr	r3, [pc, #588]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	061b      	lsls	r3, r3, #24
 800462a:	4990      	ldr	r1, [pc, #576]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004630:	e040      	b.n	80046b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d023      	beq.n	8004682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463a:	4b8c      	ldr	r3, [pc, #560]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a8b      	ldr	r2, [pc, #556]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd fd49 	bl	80020dc <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464e:	f7fd fd45 	bl	80020dc <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e227      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004660:	4b82      	ldr	r3, [pc, #520]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466c:	4b7f      	ldr	r3, [pc, #508]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	061b      	lsls	r3, r3, #24
 800467a:	497c      	ldr	r1, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800467c:	4313      	orrs	r3, r2
 800467e:	604b      	str	r3, [r1, #4]
 8004680:	e018      	b.n	80046b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004682:	4b7a      	ldr	r3, [pc, #488]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a79      	ldr	r2, [pc, #484]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800468c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fd fd25 	bl	80020dc <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004696:	f7fd fd21 	bl	80020dc <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e203      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a8:	4b70      	ldr	r3, [pc, #448]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d03c      	beq.n	800473a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01c      	beq.n	8004702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c8:	4b68      	ldr	r3, [pc, #416]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ce:	4a67      	ldr	r2, [pc, #412]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d8:	f7fd fd00 	bl	80020dc <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e0:	f7fd fcfc 	bl	80020dc <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e1de      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046f2:	4b5e      	ldr	r3, [pc, #376]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80046f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ef      	beq.n	80046e0 <HAL_RCC_OscConfig+0x3ec>
 8004700:	e01b      	b.n	800473a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004702:	4b5a      	ldr	r3, [pc, #360]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004708:	4a58      	ldr	r2, [pc, #352]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004712:	f7fd fce3 	bl	80020dc <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471a:	f7fd fcdf 	bl	80020dc <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e1c1      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800472c:	4b4f      	ldr	r3, [pc, #316]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800472e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1ef      	bne.n	800471a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	f000 80a6 	beq.w	8004894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004748:	2300      	movs	r3, #0
 800474a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800474c:	4b47      	ldr	r3, [pc, #284]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10d      	bne.n	8004774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004758:	4b44      	ldr	r3, [pc, #272]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475c:	4a43      	ldr	r2, [pc, #268]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004762:	6593      	str	r3, [r2, #88]	; 0x58
 8004764:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004770:	2301      	movs	r3, #1
 8004772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004774:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <HAL_RCC_OscConfig+0x57c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d118      	bne.n	80047b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004780:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCC_OscConfig+0x57c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a3a      	ldr	r2, [pc, #232]	; (8004870 <HAL_RCC_OscConfig+0x57c>)
 8004786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478c:	f7fd fca6 	bl	80020dc <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004794:	f7fd fca2 	bl	80020dc <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e184      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a6:	4b32      	ldr	r3, [pc, #200]	; (8004870 <HAL_RCC_OscConfig+0x57c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d108      	bne.n	80047cc <HAL_RCC_OscConfig+0x4d8>
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	4a2a      	ldr	r2, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ca:	e024      	b.n	8004816 <HAL_RCC_OscConfig+0x522>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b05      	cmp	r3, #5
 80047d2:	d110      	bne.n	80047f6 <HAL_RCC_OscConfig+0x502>
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	4a24      	ldr	r2, [pc, #144]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e4:	4b21      	ldr	r3, [pc, #132]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	4a20      	ldr	r2, [pc, #128]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047f4:	e00f      	b.n	8004816 <HAL_RCC_OscConfig+0x522>
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	4a1b      	ldr	r2, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x578>)
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004806:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_OscConfig+0x578>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	4a17      	ldr	r2, [pc, #92]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800480e:	f023 0304 	bic.w	r3, r3, #4
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481e:	f7fd fc5d 	bl	80020dc <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004824:	e00a      	b.n	800483c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fd fc59 	bl	80020dc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	; 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e139      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_OscConfig+0x578>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0ed      	beq.n	8004826 <HAL_RCC_OscConfig+0x532>
 800484a:	e01a      	b.n	8004882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fd fc46 	bl	80020dc <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004852:	e00f      	b.n	8004874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fd fc42 	bl	80020dc <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d906      	bls.n	8004874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e122      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004874:	4b90      	ldr	r3, [pc, #576]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e8      	bne.n	8004854 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004882:	7ffb      	ldrb	r3, [r7, #31]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d105      	bne.n	8004894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004888:	4b8b      	ldr	r3, [pc, #556]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	4a8a      	ldr	r2, [pc, #552]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 800488e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004892:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8108 	beq.w	8004aae <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	f040 80d0 	bne.w	8004a48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048a8:	4b83      	ldr	r3, [pc, #524]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f003 0203 	and.w	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d130      	bne.n	800491e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	3b01      	subs	r3, #1
 80048c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d127      	bne.n	800491e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d11f      	bne.n	800491e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e8:	2a07      	cmp	r2, #7
 80048ea:	bf14      	ite	ne
 80048ec:	2201      	movne	r2, #1
 80048ee:	2200      	moveq	r2, #0
 80048f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d113      	bne.n	800491e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	3b01      	subs	r3, #1
 8004904:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d109      	bne.n	800491e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	3b01      	subs	r3, #1
 8004918:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800491a:	429a      	cmp	r2, r3
 800491c:	d06e      	beq.n	80049fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d069      	beq.n	80049f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004924:	4b64      	ldr	r3, [pc, #400]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d105      	bne.n	800493c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004930:	4b61      	ldr	r3, [pc, #388]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0b7      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004940:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a5c      	ldr	r2, [pc, #368]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800494a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800494c:	f7fd fbc6 	bl	80020dc <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004954:	f7fd fbc2 	bl	80020dc <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0a4      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004966:	4b54      	ldr	r3, [pc, #336]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004972:	4b51      	ldr	r3, [pc, #324]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	4b51      	ldr	r3, [pc, #324]	; (8004abc <HAL_RCC_OscConfig+0x7c8>)
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004982:	3a01      	subs	r2, #1
 8004984:	0112      	lsls	r2, r2, #4
 8004986:	4311      	orrs	r1, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800498c:	0212      	lsls	r2, r2, #8
 800498e:	4311      	orrs	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004994:	0852      	lsrs	r2, r2, #1
 8004996:	3a01      	subs	r2, #1
 8004998:	0552      	lsls	r2, r2, #21
 800499a:	4311      	orrs	r1, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049a0:	0852      	lsrs	r2, r2, #1
 80049a2:	3a01      	subs	r2, #1
 80049a4:	0652      	lsls	r2, r2, #25
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049ac:	0912      	lsrs	r2, r2, #4
 80049ae:	0452      	lsls	r2, r2, #17
 80049b0:	430a      	orrs	r2, r1
 80049b2:	4941      	ldr	r1, [pc, #260]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049b8:	4b3f      	ldr	r3, [pc, #252]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a3e      	ldr	r2, [pc, #248]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80049be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049c4:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4a3b      	ldr	r2, [pc, #236]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80049ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049d0:	f7fd fb84 	bl	80020dc <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d8:	f7fd fb80 	bl	80020dc <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e062      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ea:	4b33      	ldr	r3, [pc, #204]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049f6:	e05a      	b.n	8004aae <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e059      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fc:	4b2e      	ldr	r3, [pc, #184]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d152      	bne.n	8004aae <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a08:	4b2b      	ldr	r3, [pc, #172]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a14:	4b28      	ldr	r3, [pc, #160]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a27      	ldr	r2, [pc, #156]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a20:	f7fd fb5c 	bl	80020dc <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fd fb58 	bl	80020dc <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e03a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x734>
 8004a46:	e032      	b.n	8004aae <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d02d      	beq.n	8004aaa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a58:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a5a:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d105      	bne.n	8004a72 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a6c:	f023 0303 	bic.w	r3, r3, #3
 8004a70:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a80:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fd fb2b 	bl	80020dc <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fd fb27 	bl	80020dc <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e009      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_RCC_OscConfig+0x7c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x796>
 8004aa8:	e001      	b.n	8004aae <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3720      	adds	r7, #32
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	f99d808c 	.word	0xf99d808c

08004ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0c8      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ad4:	4b66      	ldr	r3, [pc, #408]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d910      	bls.n	8004b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae2:	4b63      	ldr	r3, [pc, #396]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 0207 	bic.w	r2, r3, #7
 8004aea:	4961      	ldr	r1, [pc, #388]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b5f      	ldr	r3, [pc, #380]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0b0      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d04c      	beq.n	8004baa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b18:	4b56      	ldr	r3, [pc, #344]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d121      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e09e      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d107      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b30:	4b50      	ldr	r3, [pc, #320]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d115      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e092      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b48:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d109      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e086      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b58:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e07e      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b68:	4b42      	ldr	r3, [pc, #264]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 0203 	bic.w	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	493f      	ldr	r1, [pc, #252]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7a:	f7fd faaf 	bl	80020dc <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b80:	e00a      	b.n	8004b98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b82:	f7fd faab 	bl	80020dc <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e066      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b98:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 020c 	and.w	r2, r3, #12
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d1eb      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb6:	4b2f      	ldr	r3, [pc, #188]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	492c      	ldr	r1, [pc, #176]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc8:	4b29      	ldr	r3, [pc, #164]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d210      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd6:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 0207 	bic.w	r2, r3, #7
 8004bde:	4924      	ldr	r1, [pc, #144]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <HAL_RCC_ClockConfig+0x1b0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e036      	b.n	8004c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c04:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4918      	ldr	r1, [pc, #96]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4910      	ldr	r1, [pc, #64]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c36:	f000 f825 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <HAL_RCC_ClockConfig+0x1b4>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	5cd3      	ldrb	r3, [r2, r3]
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c52:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd f8d6 	bl	8001e0c <HAL_InitTick>
 8004c60:	4603      	mov	r3, r0
 8004c62:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c64:	7afb      	ldrb	r3, [r7, #11]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40022000 	.word	0x40022000
 8004c74:	40021000 	.word	0x40021000
 8004c78:	0800a19c 	.word	0x0800a19c
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	20000004 	.word	0x20000004

08004c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c92:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c9c:	4b3a      	ldr	r3, [pc, #232]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d121      	bne.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d11e      	bne.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cb8:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cc4:	4b30      	ldr	r3, [pc, #192]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cca:	0a1b      	lsrs	r3, r3, #8
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cd4:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10d      	bne.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d102      	bne.n	8004d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cfc:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	e004      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d08:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d133      	bne.n	8004d7a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d002      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0xa4>
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d003      	beq.n	8004d2e <HAL_RCC_GetSysClockFreq+0xaa>
 8004d26:	e005      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d28:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d2a:	617b      	str	r3, [r7, #20]
      break;
 8004d2c:	e005      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d2e:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d30:	617b      	str	r3, [r7, #20]
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	617b      	str	r3, [r7, #20]
      break;
 8004d38:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	3301      	adds	r3, #1
 8004d46:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	fb02 f203 	mul.w	r2, r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d60:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	0e5b      	lsrs	r3, r3, #25
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3724      	adds	r7, #36	; 0x24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	0800a1b4 	.word	0x0800a1b4
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	007a1200 	.word	0x007a1200

08004d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000000 	.word	0x20000000

08004db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004db4:	f7ff fff0 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004db8:	4601      	mov	r1, r0
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc6:	5cd3      	ldrb	r3, [r2, r3]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	0800a1ac 	.word	0x0800a1ac

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004de0:	f7ff ffda 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004de4:	4601      	mov	r1, r0
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	0adb      	lsrs	r3, r3, #11
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4a04      	ldr	r2, [pc, #16]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004df2:	5cd3      	ldrb	r3, [r2, r3]
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40021000 	.word	0x40021000
 8004e04:	0800a1ac 	.word	0x0800a1ac

08004e08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	220f      	movs	r2, #15
 8004e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0203 	and.w	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <HAL_RCC_GetClockConfig+0x60>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0207 	and.w	r2, r3, #7
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40022000 	.word	0x40022000

08004e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e78:	4b2a      	ldr	r3, [pc, #168]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e84:	f7ff f8fa 	bl	800407c <HAL_PWREx_GetVoltageRange>
 8004e88:	6178      	str	r0, [r7, #20]
 8004e8a:	e014      	b.n	8004eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e8c:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e96:	6593      	str	r3, [r2, #88]	; 0x58
 8004e98:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ea4:	f7ff f8ea 	bl	800407c <HAL_PWREx_GetVoltageRange>
 8004ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eaa:	4b1e      	ldr	r3, [pc, #120]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eae:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebc:	d10b      	bne.n	8004ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b80      	cmp	r3, #128	; 0x80
 8004ec2:	d919      	bls.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ec8:	d902      	bls.n	8004ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eca:	2302      	movs	r3, #2
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	e013      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	e010      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b80      	cmp	r3, #128	; 0x80
 8004eda:	d902      	bls.n	8004ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004edc:	2303      	movs	r3, #3
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	e00a      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d102      	bne.n	8004eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ee8:	2302      	movs	r3, #2
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e004      	b.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b70      	cmp	r3, #112	; 0x70
 8004ef2:	d101      	bne.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 0207 	bic.w	r2, r3, #7
 8004f00:	4909      	ldr	r1, [pc, #36]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f08:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40022000 	.word	0x40022000

08004f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f34:	2300      	movs	r3, #0
 8004f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f38:	2300      	movs	r3, #0
 8004f3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d03f      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f50:	d01c      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f56:	d802      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004f5c:	e01f      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f62:	d003      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004f64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f68:	d01c      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004f6a:	e018      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f6c:	4b85      	ldr	r3, [pc, #532]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a84      	ldr	r2, [pc, #528]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f78:	e015      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fac9 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f8a:	e00c      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3320      	adds	r3, #32
 8004f90:	2100      	movs	r1, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fbb0 	bl	80056f8 <RCCEx_PLLSAI2_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f9c:	e003      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fac:	4b75      	ldr	r3, [pc, #468]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fba:	4972      	ldr	r1, [pc, #456]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fc2:	e001      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	7cfb      	ldrb	r3, [r7, #19]
 8004fc6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d03f      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fdc:	d01c      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fe2:	d802      	bhi.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00e      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004fe8:	e01f      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fee:	d003      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004ff0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ff4:	d01c      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004ff6:	e018      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ff8:	4b62      	ldr	r3, [pc, #392]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a61      	ldr	r2, [pc, #388]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005002:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005004:	e015      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3304      	adds	r3, #4
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fa83 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8005012:	4603      	mov	r3, r0
 8005014:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005016:	e00c      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3320      	adds	r3, #32
 800501c:	2100      	movs	r1, #0
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fb6a 	bl	80056f8 <RCCEx_PLLSAI2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005028:	e003      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	74fb      	strb	r3, [r7, #19]
      break;
 800502e:	e000      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005038:	4b52      	ldr	r3, [pc, #328]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005046:	494f      	ldr	r1, [pc, #316]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800504e:	e001      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a0 	beq.w	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005066:	4b47      	ldr	r3, [pc, #284]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005076:	2300      	movs	r3, #0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507c:	4b41      	ldr	r3, [pc, #260]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	4a40      	ldr	r2, [pc, #256]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6593      	str	r3, [r2, #88]	; 0x58
 8005088:	4b3e      	ldr	r3, [pc, #248]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005094:	2301      	movs	r3, #1
 8005096:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a3a      	ldr	r2, [pc, #232]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800509e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050a4:	f7fd f81a 	bl	80020dc <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050aa:	e009      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ac:	f7fd f816 	bl	80020dc <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d902      	bls.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	74fb      	strb	r3, [r7, #19]
        break;
 80050be:	e005      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050c0:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0ef      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d15c      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050d2:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01f      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d019      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050f0:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050fc:	4b21      	ldr	r3, [pc, #132]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	4a20      	ldr	r2, [pc, #128]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d016      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512e:	f7fc ffd5 	bl	80020dc <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005134:	e00b      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fc ffd1 	bl	80020dc <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d902      	bls.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	74fb      	strb	r3, [r7, #19]
            break;
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ec      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800515c:	7cfb      	ldrb	r3, [r7, #19]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005172:	4904      	ldr	r1, [pc, #16]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800517a:	e009      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800517c:	7cfb      	ldrb	r3, [r7, #19]
 800517e:	74bb      	strb	r3, [r7, #18]
 8005180:	e006      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005190:	7c7b      	ldrb	r3, [r7, #17]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d105      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005196:	4b9e      	ldr	r3, [pc, #632]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519a:	4a9d      	ldr	r2, [pc, #628]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800519c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ae:	4b98      	ldr	r3, [pc, #608]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f023 0203 	bic.w	r2, r3, #3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4994      	ldr	r1, [pc, #592]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051d0:	4b8f      	ldr	r3, [pc, #572]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f023 020c 	bic.w	r2, r3, #12
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	498c      	ldr	r1, [pc, #560]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051f2:	4b87      	ldr	r3, [pc, #540]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	4983      	ldr	r1, [pc, #524]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005214:	4b7e      	ldr	r3, [pc, #504]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	497b      	ldr	r1, [pc, #492]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005236:	4b76      	ldr	r3, [pc, #472]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005244:	4972      	ldr	r1, [pc, #456]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005258:	4b6d      	ldr	r3, [pc, #436]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	496a      	ldr	r1, [pc, #424]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005288:	4961      	ldr	r1, [pc, #388]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800529c:	4b5c      	ldr	r3, [pc, #368]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052aa:	4959      	ldr	r1, [pc, #356]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052be:	4b54      	ldr	r3, [pc, #336]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052cc:	4950      	ldr	r1, [pc, #320]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00a      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052e0:	4b4b      	ldr	r3, [pc, #300]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ee:	4948      	ldr	r1, [pc, #288]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005302:	4b43      	ldr	r3, [pc, #268]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	493f      	ldr	r1, [pc, #252]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d028      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005324:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005332:	4937      	ldr	r1, [pc, #220]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005342:	d106      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005344:	4b32      	ldr	r3, [pc, #200]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a31      	ldr	r2, [pc, #196]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800534a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800534e:	60d3      	str	r3, [r2, #12]
 8005350:	e011      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800535a:	d10c      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f000 f8d8 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d028      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005388:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	491f      	ldr	r1, [pc, #124]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a0:	d106      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ac:	60d3      	str	r3, [r2, #12]
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	2101      	movs	r1, #1
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f8a9 	bl	8005518 <RCCEx_PLLSAI1_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02b      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053fe:	d109      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005400:	4b03      	ldr	r3, [pc, #12]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a02      	ldr	r2, [pc, #8]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540a:	60d3      	str	r3, [r2, #12]
 800540c:	e014      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005418:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800541c:	d10c      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	2101      	movs	r1, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f877 	bl	8005518 <RCCEx_PLLSAI1_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005444:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005452:	4928      	ldr	r1, [pc, #160]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800545e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005462:	d10d      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	2102      	movs	r1, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f854 	bl	8005518 <RCCEx_PLLSAI1_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d014      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	74bb      	strb	r3, [r7, #18]
 800547e:	e011      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3320      	adds	r3, #32
 800548e:	2102      	movs	r1, #2
 8005490:	4618      	mov	r0, r3
 8005492:	f000 f931 	bl	80056f8 <RCCEx_PLLSAI2_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054b0:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054be:	490d      	ldr	r1, [pc, #52]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054d2:	4b08      	ldr	r3, [pc, #32]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054e2:	4904      	ldr	r1, [pc, #16]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40021000 	.word	0x40021000

080054f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005502:	f043 0304 	orr.w	r3, r3, #4
 8005506:	6013      	str	r3, [r2, #0]
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000

08005518 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005526:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d018      	beq.n	8005564 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005532:	4b70      	ldr	r3, [pc, #448]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0203 	and.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	429a      	cmp	r2, r3
 8005540:	d10d      	bne.n	800555e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
       ||
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800554a:	4b6a      	ldr	r3, [pc, #424]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
       ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d044      	beq.n	80055e8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e041      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d00c      	beq.n	8005586 <RCCEx_PLLSAI1_Config+0x6e>
 800556c:	2b03      	cmp	r3, #3
 800556e:	d013      	beq.n	8005598 <RCCEx_PLLSAI1_Config+0x80>
 8005570:	2b01      	cmp	r3, #1
 8005572:	d120      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005574:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11d      	bne.n	80055bc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005584:	e01a      	b.n	80055bc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005586:	4b5b      	ldr	r3, [pc, #364]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558e:	2b00      	cmp	r3, #0
 8005590:	d116      	bne.n	80055c0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005596:	e013      	b.n	80055c0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005598:	4b56      	ldr	r3, [pc, #344]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10f      	bne.n	80055c4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055a4:	4b53      	ldr	r3, [pc, #332]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d109      	bne.n	80055c4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055b4:	e006      	b.n	80055c4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ba:	e004      	b.n	80055c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80055c4:	bf00      	nop
    }

    if(status == HAL_OK)
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055cc:	4b49      	ldr	r3, [pc, #292]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6819      	ldr	r1, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	3b01      	subs	r3, #1
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	430b      	orrs	r3, r1
 80055e2:	4944      	ldr	r1, [pc, #272]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d17d      	bne.n	80056ea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055ee:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055fa:	f7fc fd6f 	bl	80020dc <HAL_GetTick>
 80055fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005600:	e009      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005602:	f7fc fd6b 	bl	80020dc <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d902      	bls.n	8005616 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	73fb      	strb	r3, [r7, #15]
        break;
 8005614:	e005      	b.n	8005622 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005616:	4b37      	ldr	r3, [pc, #220]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1ef      	bne.n	8005602 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d160      	bne.n	80056ea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d111      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800562e:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	6892      	ldr	r2, [r2, #8]
 800563e:	0211      	lsls	r1, r2, #8
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68d2      	ldr	r2, [r2, #12]
 8005644:	0912      	lsrs	r2, r2, #4
 8005646:	0452      	lsls	r2, r2, #17
 8005648:	430a      	orrs	r2, r1
 800564a:	492a      	ldr	r1, [pc, #168]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800564c:	4313      	orrs	r3, r2
 800564e:	610b      	str	r3, [r1, #16]
 8005650:	e027      	b.n	80056a2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d112      	bne.n	800567e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005658:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005660:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6892      	ldr	r2, [r2, #8]
 8005668:	0211      	lsls	r1, r2, #8
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6912      	ldr	r2, [r2, #16]
 800566e:	0852      	lsrs	r2, r2, #1
 8005670:	3a01      	subs	r2, #1
 8005672:	0552      	lsls	r2, r2, #21
 8005674:	430a      	orrs	r2, r1
 8005676:	491f      	ldr	r1, [pc, #124]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005678:	4313      	orrs	r3, r2
 800567a:	610b      	str	r3, [r1, #16]
 800567c:	e011      	b.n	80056a2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005686:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6892      	ldr	r2, [r2, #8]
 800568e:	0211      	lsls	r1, r2, #8
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6952      	ldr	r2, [r2, #20]
 8005694:	0852      	lsrs	r2, r2, #1
 8005696:	3a01      	subs	r2, #1
 8005698:	0652      	lsls	r2, r2, #25
 800569a:	430a      	orrs	r2, r1
 800569c:	4915      	ldr	r1, [pc, #84]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056a2:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ae:	f7fc fd15 	bl	80020dc <HAL_GetTick>
 80056b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056b4:	e009      	b.n	80056ca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056b6:	f7fc fd11 	bl	80020dc <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d902      	bls.n	80056ca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	73fb      	strb	r3, [r7, #15]
          break;
 80056c8:	e005      	b.n	80056d6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0ef      	beq.n	80056b6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	4903      	ldr	r1, [pc, #12]	; (80056f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40021000 	.word	0x40021000

080056f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005706:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d018      	beq.n	8005744 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005712:	4b65      	ldr	r3, [pc, #404]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0203 	and.w	r2, r3, #3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d10d      	bne.n	800573e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
       ||
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800572a:	4b5f      	ldr	r3, [pc, #380]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
       ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d044      	beq.n	80057c8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	73fb      	strb	r3, [r7, #15]
 8005742:	e041      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d00c      	beq.n	8005766 <RCCEx_PLLSAI2_Config+0x6e>
 800574c:	2b03      	cmp	r3, #3
 800574e:	d013      	beq.n	8005778 <RCCEx_PLLSAI2_Config+0x80>
 8005750:	2b01      	cmp	r3, #1
 8005752:	d120      	bne.n	8005796 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005754:	4b54      	ldr	r3, [pc, #336]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11d      	bne.n	800579c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005764:	e01a      	b.n	800579c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005766:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576e:	2b00      	cmp	r3, #0
 8005770:	d116      	bne.n	80057a0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005776:	e013      	b.n	80057a0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005778:	4b4b      	ldr	r3, [pc, #300]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10f      	bne.n	80057a4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005784:	4b48      	ldr	r3, [pc, #288]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005794:	e006      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
      break;
 800579a:	e004      	b.n	80057a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800579c:	bf00      	nop
 800579e:	e002      	b.n	80057a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80057a0:	bf00      	nop
 80057a2:	e000      	b.n	80057a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80057a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10d      	bne.n	80057c8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057ac:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6819      	ldr	r1, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	3b01      	subs	r3, #1
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	430b      	orrs	r3, r1
 80057c2:	4939      	ldr	r1, [pc, #228]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d167      	bne.n	800589e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057ce:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a35      	ldr	r2, [pc, #212]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057da:	f7fc fc7f 	bl	80020dc <HAL_GetTick>
 80057de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057e0:	e009      	b.n	80057f6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057e2:	f7fc fc7b 	bl	80020dc <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d902      	bls.n	80057f6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	73fb      	strb	r3, [r7, #15]
        break;
 80057f4:	e005      	b.n	8005802 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057f6:	4b2c      	ldr	r3, [pc, #176]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1ef      	bne.n	80057e2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d14a      	bne.n	800589e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d111      	bne.n	8005832 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800580e:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6892      	ldr	r2, [r2, #8]
 800581e:	0211      	lsls	r1, r2, #8
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68d2      	ldr	r2, [r2, #12]
 8005824:	0912      	lsrs	r2, r2, #4
 8005826:	0452      	lsls	r2, r2, #17
 8005828:	430a      	orrs	r2, r1
 800582a:	491f      	ldr	r1, [pc, #124]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800582c:	4313      	orrs	r3, r2
 800582e:	614b      	str	r3, [r1, #20]
 8005830:	e011      	b.n	8005856 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005832:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800583a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6892      	ldr	r2, [r2, #8]
 8005842:	0211      	lsls	r1, r2, #8
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	6912      	ldr	r2, [r2, #16]
 8005848:	0852      	lsrs	r2, r2, #1
 800584a:	3a01      	subs	r2, #1
 800584c:	0652      	lsls	r2, r2, #25
 800584e:	430a      	orrs	r2, r1
 8005850:	4915      	ldr	r1, [pc, #84]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005856:	4b14      	ldr	r3, [pc, #80]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800585c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005860:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7fc fc3b 	bl	80020dc <HAL_GetTick>
 8005866:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005868:	e009      	b.n	800587e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800586a:	f7fc fc37 	bl	80020dc <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d902      	bls.n	800587e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	73fb      	strb	r3, [r7, #15]
          break;
 800587c:	e005      	b.n	800588a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0ef      	beq.n	800586a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d106      	bne.n	800589e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	4903      	ldr	r1, [pc, #12]	; (80058a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800589a:	4313      	orrs	r3, r2
 800589c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000

080058ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e07c      	b.n	80059b8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fc f971 	bl	8001bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058fe:	d902      	bls.n	8005906 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e002      	b.n	800590c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800590a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005914:	d007      	beq.n	8005926 <HAL_SPI_Init+0x7a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800591e:	d002      	beq.n	8005926 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005936:	d903      	bls.n	8005940 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
 800593e:	e002      	b.n	8005946 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	ea42 0103 	orr.w	r1, r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	0c1b      	lsrs	r3, r3, #16
 8005986:	f003 0204 	and.w	r2, r3, #4
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	ea42 0103 	orr.w	r1, r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	430a      	orrs	r2, r1
 80059a6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e01d      	b.n	8005a0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f815 	bl	8005a16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 f986 	bl	8005d10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <HAL_TIM_Base_Start_IT+0x50>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d00b      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0x42>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5c:	d007      	beq.n	8005a6e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	00010007 	.word	0x00010007

08005a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0202 	mvn.w	r2, #2
 8005aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f905 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8f7 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f908 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0204 	mvn.w	r2, #4
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8db 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8cd 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8de 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d122      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d11b      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0208 	mvn.w	r2, #8
 8005b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8b1 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8a3 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8b4 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d122      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0210 	mvn.w	r2, #16
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2208      	movs	r2, #8
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f887 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f879 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f88a 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10e      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0201 	mvn.w	r2, #1
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fb fe1e 	bl	8001840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d10e      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b80      	cmp	r3, #128	; 0x80
 8005c1e:	d107      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f914 	bl	8005e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3e:	d10e      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d107      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f907 	bl	8005e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d10e      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d107      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f838 	bl	8005cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d10e      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f06f 0220 	mvn.w	r2, #32
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8c7 	bl	8005e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a40      	ldr	r2, [pc, #256]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d00f      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3d      	ldr	r2, [pc, #244]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3c      	ldr	r2, [pc, #240]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3b      	ldr	r2, [pc, #236]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d108      	bne.n	8005d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2f      	ldr	r2, [pc, #188]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d01b      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <TIM_Base_SetConfig+0x118>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d017      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	; (8005e2c <TIM_Base_SetConfig+0x11c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <TIM_Base_SetConfig+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a28      	ldr	r2, [pc, #160]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0x9a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a10      	ldr	r2, [pc, #64]	; (8005e24 <TIM_Base_SetConfig+0x114>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a12      	ldr	r2, [pc, #72]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a11      	ldr	r2, [pc, #68]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a10      	ldr	r2, [pc, #64]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0xf8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a0f      	ldr	r2, [pc, #60]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	615a      	str	r2, [r3, #20]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40014000 	.word	0x40014000
 8005e3c:	40014400 	.word	0x40014400
 8005e40:	40014800 	.word	0x40014800

08005e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e040      	b.n	8005f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fb fed0 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8c0 	bl	8006044 <UART_SetConfig>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e022      	b.n	8005f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fc26 	bl	8006728 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0201 	orr.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fcad 	bl	800686c <UART_CheckIdleState>
 8005f12:	4603      	mov	r3, r0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	f040 8081 	bne.w	8006038 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_UART_Transmit+0x26>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e079      	b.n	800603a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_UART_Transmit+0x38>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e072      	b.n	800603a <HAL_UART_Transmit+0x11e>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2221      	movs	r2, #33	; 0x21
 8005f66:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005f68:	f7fc f8b8 	bl	80020dc <HAL_GetTick>
 8005f6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	88fa      	ldrh	r2, [r7, #6]
 8005f72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f86:	d108      	bne.n	8005f9a <HAL_UART_Transmit+0x7e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	e003      	b.n	8005fa2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005faa:	e02d      	b.n	8006008 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2180      	movs	r1, #128	; 0x80
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fc9d 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e039      	b.n	800603a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	881a      	ldrh	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd8:	b292      	uxth	r2, r2
 8005fda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	3302      	adds	r3, #2
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e008      	b.n	8005ff6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b292      	uxth	r2, r2
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1cb      	bne.n	8005fac <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2200      	movs	r2, #0
 800601c:	2140      	movs	r1, #64	; 0x40
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fc69 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e005      	b.n	800603a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2220      	movs	r2, #32
 8006032:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	e000      	b.n	800603a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006048:	b08a      	sub	sp, #40	; 0x28
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	4313      	orrs	r3, r2
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4bb8      	ldr	r3, [pc, #736]	; (800635c <UART_SetConfig+0x318>)
 800607a:	4013      	ands	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006082:	430b      	orrs	r3, r1
 8006084:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4aae      	ldr	r2, [pc, #696]	; (8006360 <UART_SetConfig+0x31c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b2:	4313      	orrs	r3, r2
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c6:	430a      	orrs	r2, r1
 80060c8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4aa5      	ldr	r2, [pc, #660]	; (8006364 <UART_SetConfig+0x320>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d126      	bne.n	8006122 <UART_SetConfig+0xde>
 80060d4:	4ba4      	ldr	r3, [pc, #656]	; (8006368 <UART_SetConfig+0x324>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d81a      	bhi.n	8006118 <UART_SetConfig+0xd4>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0xa4>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	08006109 	.word	0x08006109
 80060f0:	08006101 	.word	0x08006101
 80060f4:	08006111 	.word	0x08006111
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fe:	e105      	b.n	800630c <UART_SetConfig+0x2c8>
 8006100:	2302      	movs	r3, #2
 8006102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006106:	e101      	b.n	800630c <UART_SetConfig+0x2c8>
 8006108:	2304      	movs	r3, #4
 800610a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610e:	e0fd      	b.n	800630c <UART_SetConfig+0x2c8>
 8006110:	2308      	movs	r3, #8
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006116:	e0f9      	b.n	800630c <UART_SetConfig+0x2c8>
 8006118:	2310      	movs	r3, #16
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800611e:	bf00      	nop
 8006120:	e0f4      	b.n	800630c <UART_SetConfig+0x2c8>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a91      	ldr	r2, [pc, #580]	; (800636c <UART_SetConfig+0x328>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d138      	bne.n	800619e <UART_SetConfig+0x15a>
 800612c:	4b8e      	ldr	r3, [pc, #568]	; (8006368 <UART_SetConfig+0x324>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006132:	f003 030c 	and.w	r3, r3, #12
 8006136:	2b0c      	cmp	r3, #12
 8006138:	d82c      	bhi.n	8006194 <UART_SetConfig+0x150>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <UART_SetConfig+0xfc>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006175 	.word	0x08006175
 8006144:	08006195 	.word	0x08006195
 8006148:	08006195 	.word	0x08006195
 800614c:	08006195 	.word	0x08006195
 8006150:	08006185 	.word	0x08006185
 8006154:	08006195 	.word	0x08006195
 8006158:	08006195 	.word	0x08006195
 800615c:	08006195 	.word	0x08006195
 8006160:	0800617d 	.word	0x0800617d
 8006164:	08006195 	.word	0x08006195
 8006168:	08006195 	.word	0x08006195
 800616c:	08006195 	.word	0x08006195
 8006170:	0800618d 	.word	0x0800618d
 8006174:	2300      	movs	r3, #0
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617a:	e0c7      	b.n	800630c <UART_SetConfig+0x2c8>
 800617c:	2302      	movs	r3, #2
 800617e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006182:	e0c3      	b.n	800630c <UART_SetConfig+0x2c8>
 8006184:	2304      	movs	r3, #4
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618a:	e0bf      	b.n	800630c <UART_SetConfig+0x2c8>
 800618c:	2308      	movs	r3, #8
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e0bb      	b.n	800630c <UART_SetConfig+0x2c8>
 8006194:	2310      	movs	r3, #16
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	bf00      	nop
 800619c:	e0b6      	b.n	800630c <UART_SetConfig+0x2c8>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a73      	ldr	r2, [pc, #460]	; (8006370 <UART_SetConfig+0x32c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d125      	bne.n	80061f4 <UART_SetConfig+0x1b0>
 80061a8:	4b6f      	ldr	r3, [pc, #444]	; (8006368 <UART_SetConfig+0x324>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d011      	beq.n	80061da <UART_SetConfig+0x196>
 80061b6:	2b10      	cmp	r3, #16
 80061b8:	d802      	bhi.n	80061c0 <UART_SetConfig+0x17c>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <UART_SetConfig+0x186>
 80061be:	e014      	b.n	80061ea <UART_SetConfig+0x1a6>
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d006      	beq.n	80061d2 <UART_SetConfig+0x18e>
 80061c4:	2b30      	cmp	r3, #48	; 0x30
 80061c6:	d00c      	beq.n	80061e2 <UART_SetConfig+0x19e>
 80061c8:	e00f      	b.n	80061ea <UART_SetConfig+0x1a6>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d0:	e09c      	b.n	800630c <UART_SetConfig+0x2c8>
 80061d2:	2302      	movs	r3, #2
 80061d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d8:	e098      	b.n	800630c <UART_SetConfig+0x2c8>
 80061da:	2304      	movs	r3, #4
 80061dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e0:	e094      	b.n	800630c <UART_SetConfig+0x2c8>
 80061e2:	2308      	movs	r3, #8
 80061e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e8:	e090      	b.n	800630c <UART_SetConfig+0x2c8>
 80061ea:	2310      	movs	r3, #16
 80061ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f0:	bf00      	nop
 80061f2:	e08b      	b.n	800630c <UART_SetConfig+0x2c8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a5e      	ldr	r2, [pc, #376]	; (8006374 <UART_SetConfig+0x330>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d125      	bne.n	800624a <UART_SetConfig+0x206>
 80061fe:	4b5a      	ldr	r3, [pc, #360]	; (8006368 <UART_SetConfig+0x324>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d011      	beq.n	8006230 <UART_SetConfig+0x1ec>
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	d802      	bhi.n	8006216 <UART_SetConfig+0x1d2>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <UART_SetConfig+0x1dc>
 8006214:	e014      	b.n	8006240 <UART_SetConfig+0x1fc>
 8006216:	2b80      	cmp	r3, #128	; 0x80
 8006218:	d006      	beq.n	8006228 <UART_SetConfig+0x1e4>
 800621a:	2bc0      	cmp	r3, #192	; 0xc0
 800621c:	d00c      	beq.n	8006238 <UART_SetConfig+0x1f4>
 800621e:	e00f      	b.n	8006240 <UART_SetConfig+0x1fc>
 8006220:	2300      	movs	r3, #0
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006226:	e071      	b.n	800630c <UART_SetConfig+0x2c8>
 8006228:	2302      	movs	r3, #2
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622e:	e06d      	b.n	800630c <UART_SetConfig+0x2c8>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006236:	e069      	b.n	800630c <UART_SetConfig+0x2c8>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623e:	e065      	b.n	800630c <UART_SetConfig+0x2c8>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	bf00      	nop
 8006248:	e060      	b.n	800630c <UART_SetConfig+0x2c8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a4a      	ldr	r2, [pc, #296]	; (8006378 <UART_SetConfig+0x334>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d129      	bne.n	80062a8 <UART_SetConfig+0x264>
 8006254:	4b44      	ldr	r3, [pc, #272]	; (8006368 <UART_SetConfig+0x324>)
 8006256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	d014      	beq.n	800628e <UART_SetConfig+0x24a>
 8006264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006268:	d802      	bhi.n	8006270 <UART_SetConfig+0x22c>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <UART_SetConfig+0x23a>
 800626e:	e016      	b.n	800629e <UART_SetConfig+0x25a>
 8006270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006274:	d007      	beq.n	8006286 <UART_SetConfig+0x242>
 8006276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800627a:	d00c      	beq.n	8006296 <UART_SetConfig+0x252>
 800627c:	e00f      	b.n	800629e <UART_SetConfig+0x25a>
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006284:	e042      	b.n	800630c <UART_SetConfig+0x2c8>
 8006286:	2302      	movs	r3, #2
 8006288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628c:	e03e      	b.n	800630c <UART_SetConfig+0x2c8>
 800628e:	2304      	movs	r3, #4
 8006290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006294:	e03a      	b.n	800630c <UART_SetConfig+0x2c8>
 8006296:	2308      	movs	r3, #8
 8006298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629c:	e036      	b.n	800630c <UART_SetConfig+0x2c8>
 800629e:	2310      	movs	r3, #16
 80062a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a4:	bf00      	nop
 80062a6:	e031      	b.n	800630c <UART_SetConfig+0x2c8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <UART_SetConfig+0x31c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d129      	bne.n	8006306 <UART_SetConfig+0x2c2>
 80062b2:	4b2d      	ldr	r3, [pc, #180]	; (8006368 <UART_SetConfig+0x324>)
 80062b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c0:	d014      	beq.n	80062ec <UART_SetConfig+0x2a8>
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c6:	d802      	bhi.n	80062ce <UART_SetConfig+0x28a>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <UART_SetConfig+0x298>
 80062cc:	e016      	b.n	80062fc <UART_SetConfig+0x2b8>
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d2:	d007      	beq.n	80062e4 <UART_SetConfig+0x2a0>
 80062d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062d8:	d00c      	beq.n	80062f4 <UART_SetConfig+0x2b0>
 80062da:	e00f      	b.n	80062fc <UART_SetConfig+0x2b8>
 80062dc:	2300      	movs	r3, #0
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e013      	b.n	800630c <UART_SetConfig+0x2c8>
 80062e4:	2302      	movs	r3, #2
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e00f      	b.n	800630c <UART_SetConfig+0x2c8>
 80062ec:	2304      	movs	r3, #4
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e00b      	b.n	800630c <UART_SetConfig+0x2c8>
 80062f4:	2308      	movs	r3, #8
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e007      	b.n	800630c <UART_SetConfig+0x2c8>
 80062fc:	2310      	movs	r3, #16
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <UART_SetConfig+0x2c8>
 8006306:	2310      	movs	r3, #16
 8006308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a13      	ldr	r2, [pc, #76]	; (8006360 <UART_SetConfig+0x31c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f040 80fe 	bne.w	8006514 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006318:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800631c:	2b08      	cmp	r3, #8
 800631e:	d837      	bhi.n	8006390 <UART_SetConfig+0x34c>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0x2e4>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800634d 	.word	0x0800634d
 800632c:	08006391 	.word	0x08006391
 8006330:	08006355 	.word	0x08006355
 8006334:	08006391 	.word	0x08006391
 8006338:	08006381 	.word	0x08006381
 800633c:	08006391 	.word	0x08006391
 8006340:	08006391 	.word	0x08006391
 8006344:	08006391 	.word	0x08006391
 8006348:	08006389 	.word	0x08006389
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800634c:	f7fe fd30 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8006350:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006352:	e020      	b.n	8006396 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <UART_SetConfig+0x338>)
 8006356:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006358:	e01d      	b.n	8006396 <UART_SetConfig+0x352>
 800635a:	bf00      	nop
 800635c:	efff69f3 	.word	0xefff69f3
 8006360:	40008000 	.word	0x40008000
 8006364:	40013800 	.word	0x40013800
 8006368:	40021000 	.word	0x40021000
 800636c:	40004400 	.word	0x40004400
 8006370:	40004800 	.word	0x40004800
 8006374:	40004c00 	.word	0x40004c00
 8006378:	40005000 	.word	0x40005000
 800637c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006380:	f7fe fc80 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 8006384:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006386:	e006      	b.n	8006396 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800638e:	e002      	b.n	8006396 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	76fb      	strb	r3, [r7, #27]
        break;
 8006394:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 81b9 	beq.w	8006710 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	4413      	add	r3, r2
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d305      	bcc.n	80063ba <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d902      	bls.n	80063c0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	76fb      	strb	r3, [r7, #27]
 80063be:	e1a7      	b.n	8006710 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80063c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	f200 8092 	bhi.w	80064ee <UART_SetConfig+0x4aa>
 80063ca:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <UART_SetConfig+0x38c>)
 80063cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d0:	080063f5 	.word	0x080063f5
 80063d4:	080064ef 	.word	0x080064ef
 80063d8:	08006443 	.word	0x08006443
 80063dc:	080064ef 	.word	0x080064ef
 80063e0:	08006477 	.word	0x08006477
 80063e4:	080064ef 	.word	0x080064ef
 80063e8:	080064ef 	.word	0x080064ef
 80063ec:	080064ef 	.word	0x080064ef
 80063f0:	080064c5 	.word	0x080064c5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80063f4:	f7fe fcdc 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 80063f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4619      	mov	r1, r3
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	f04f 0400 	mov.w	r4, #0
 800640a:	0214      	lsls	r4, r2, #8
 800640c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006410:	020b      	lsls	r3, r1, #8
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6852      	ldr	r2, [r2, #4]
 8006416:	0852      	lsrs	r2, r2, #1
 8006418:	4611      	mov	r1, r2
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	eb13 0b01 	adds.w	fp, r3, r1
 8006422:	eb44 0c02 	adc.w	ip, r4, r2
 8006426:	4658      	mov	r0, fp
 8006428:	4661      	mov	r1, ip
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f04f 0400 	mov.w	r4, #0
 8006432:	461a      	mov	r2, r3
 8006434:	4623      	mov	r3, r4
 8006436:	f7f9 ff23 	bl	8000280 <__aeabi_uldivmod>
 800643a:	4603      	mov	r3, r0
 800643c:	460c      	mov	r4, r1
 800643e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006440:	e058      	b.n	80064f4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	f04f 0400 	mov.w	r4, #0
 800644c:	49ae      	ldr	r1, [pc, #696]	; (8006708 <UART_SetConfig+0x6c4>)
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	eb13 0b01 	adds.w	fp, r3, r1
 8006456:	eb44 0c02 	adc.w	ip, r4, r2
 800645a:	4658      	mov	r0, fp
 800645c:	4661      	mov	r1, ip
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f04f 0400 	mov.w	r4, #0
 8006466:	461a      	mov	r2, r3
 8006468:	4623      	mov	r3, r4
 800646a:	f7f9 ff09 	bl	8000280 <__aeabi_uldivmod>
 800646e:	4603      	mov	r3, r0
 8006470:	460c      	mov	r4, r1
 8006472:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006474:	e03e      	b.n	80064f4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fe fc05 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 800647a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	4619      	mov	r1, r3
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	f04f 0400 	mov.w	r4, #0
 800648c:	0214      	lsls	r4, r2, #8
 800648e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006492:	020b      	lsls	r3, r1, #8
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6852      	ldr	r2, [r2, #4]
 8006498:	0852      	lsrs	r2, r2, #1
 800649a:	4611      	mov	r1, r2
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	eb13 0b01 	adds.w	fp, r3, r1
 80064a4:	eb44 0c02 	adc.w	ip, r4, r2
 80064a8:	4658      	mov	r0, fp
 80064aa:	4661      	mov	r1, ip
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f04f 0400 	mov.w	r4, #0
 80064b4:	461a      	mov	r2, r3
 80064b6:	4623      	mov	r3, r4
 80064b8:	f7f9 fee2 	bl	8000280 <__aeabi_uldivmod>
 80064bc:	4603      	mov	r3, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80064c2:	e017      	b.n	80064f4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	f04f 0400 	mov.w	r4, #0
 80064ce:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80064d2:	f144 0100 	adc.w	r1, r4, #0
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f04f 0400 	mov.w	r4, #0
 80064de:	461a      	mov	r2, r3
 80064e0:	4623      	mov	r3, r4
 80064e2:	f7f9 fecd 	bl	8000280 <__aeabi_uldivmod>
 80064e6:	4603      	mov	r3, r0
 80064e8:	460c      	mov	r4, r1
 80064ea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80064ec:	e002      	b.n	80064f4 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	76fb      	strb	r3, [r7, #27]
            break;
 80064f2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fa:	d308      	bcc.n	800650e <UART_SetConfig+0x4ca>
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006502:	d204      	bcs.n	800650e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e100      	b.n	8006710 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	76fb      	strb	r3, [r7, #27]
 8006512:	e0fd      	b.n	8006710 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651c:	f040 8084 	bne.w	8006628 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006524:	2b08      	cmp	r3, #8
 8006526:	d85f      	bhi.n	80065e8 <UART_SetConfig+0x5a4>
 8006528:	a201      	add	r2, pc, #4	; (adr r2, 8006530 <UART_SetConfig+0x4ec>)
 800652a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652e:	bf00      	nop
 8006530:	08006555 	.word	0x08006555
 8006534:	08006575 	.word	0x08006575
 8006538:	08006595 	.word	0x08006595
 800653c:	080065e9 	.word	0x080065e9
 8006540:	080065b1 	.word	0x080065b1
 8006544:	080065e9 	.word	0x080065e9
 8006548:	080065e9 	.word	0x080065e9
 800654c:	080065e9 	.word	0x080065e9
 8006550:	080065d1 	.word	0x080065d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006554:	f7fe fc2c 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8006558:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	005a      	lsls	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	b29b      	uxth	r3, r3
 8006570:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006572:	e03c      	b.n	80065ee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006574:	f7fe fc32 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8006578:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	005a      	lsls	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	085b      	lsrs	r3, r3, #1
 8006584:	441a      	add	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	fbb2 f3f3 	udiv	r3, r2, r3
 800658e:	b29b      	uxth	r3, r3
 8006590:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006592:	e02c      	b.n	80065ee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	085b      	lsrs	r3, r3, #1
 800659a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800659e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6852      	ldr	r2, [r2, #4]
 80065a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065ae:	e01e      	b.n	80065ee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b0:	f7fe fb68 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 80065b4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	005a      	lsls	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065ce:	e00e      	b.n	80065ee <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065e6:	e002      	b.n	80065ee <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	76fb      	strb	r3, [r7, #27]
        break;
 80065ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b0f      	cmp	r3, #15
 80065f2:	d916      	bls.n	8006622 <UART_SetConfig+0x5de>
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fa:	d212      	bcs.n	8006622 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f023 030f 	bic.w	r3, r3, #15
 8006604:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	b29a      	uxth	r2, r3
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	4313      	orrs	r3, r2
 8006616:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	89fa      	ldrh	r2, [r7, #14]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e076      	b.n	8006710 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	76fb      	strb	r3, [r7, #27]
 8006626:	e073      	b.n	8006710 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006628:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800662c:	2b08      	cmp	r3, #8
 800662e:	d85c      	bhi.n	80066ea <UART_SetConfig+0x6a6>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x5f4>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	0800665d 	.word	0x0800665d
 800663c:	0800667b 	.word	0x0800667b
 8006640:	08006699 	.word	0x08006699
 8006644:	080066eb 	.word	0x080066eb
 8006648:	080066b5 	.word	0x080066b5
 800664c:	080066eb 	.word	0x080066eb
 8006650:	080066eb 	.word	0x080066eb
 8006654:	080066eb 	.word	0x080066eb
 8006658:	080066d3 	.word	0x080066d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800665c:	f7fe fba8 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8006660:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	085a      	lsrs	r2, r3, #1
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	441a      	add	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	b29b      	uxth	r3, r3
 8006676:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006678:	e03a      	b.n	80066f0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800667a:	f7fe fbaf 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 800667e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	085a      	lsrs	r2, r3, #1
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	b29b      	uxth	r3, r3
 8006694:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006696:	e02b      	b.n	80066f0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80066a2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6852      	ldr	r2, [r2, #4]
 80066aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066b2:	e01d      	b.n	80066f0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b4:	f7fe fae6 	bl	8004c84 <HAL_RCC_GetSysClockFreq>
 80066b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	085a      	lsrs	r2, r3, #1
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	441a      	add	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066d0:	e00e      	b.n	80066f0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066e8:	e002      	b.n	80066f0 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	76fb      	strb	r3, [r7, #27]
        break;
 80066ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d90a      	bls.n	800670c <UART_SetConfig+0x6c8>
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fc:	d206      	bcs.n	800670c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69fa      	ldr	r2, [r7, #28]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	e003      	b.n	8006710 <UART_SetConfig+0x6cc>
 8006708:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800671c:	7efb      	ldrb	r3, [r7, #27]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3728      	adds	r7, #40	; 0x28
 8006722:	46bd      	mov	sp, r7
 8006724:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006728 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	430a      	orrs	r2, r1
 8006750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01a      	beq.n	800683e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006826:	d10a      	bne.n	800683e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af02      	add	r7, sp, #8
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800687a:	f7fb fc2f 	bl	80020dc <HAL_GetTick>
 800687e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b08      	cmp	r3, #8
 800688c:	d10e      	bne.n	80068ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800688e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f82a 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e020      	b.n	80068ee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d10e      	bne.n	80068d8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f814 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e00a      	b.n	80068ee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	4613      	mov	r3, r2
 8006904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006906:	e05d      	b.n	80069c4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d059      	beq.n	80069c4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006910:	f7fb fbe4 	bl	80020dc <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	429a      	cmp	r2, r3
 800691e:	d302      	bcc.n	8006926 <UART_WaitOnFlagUntilTimeout+0x30>
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d11b      	bne.n	800695e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006934:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0201 	bic.w	r2, r2, #1
 8006944:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2220      	movs	r2, #32
 8006950:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e042      	b.n	80069e4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d02b      	beq.n	80069c4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697a:	d123      	bne.n	80069c4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006984:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006994:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e00f      	b.n	80069e4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	69da      	ldr	r2, [r3, #28]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	4013      	ands	r3, r2
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d092      	beq.n	8006908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069ec:	b084      	sub	sp, #16
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	f107 001c 	add.w	r0, r7, #28
 80069fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d122      	bne.n	8006a4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d105      	bne.n	8006a3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa28 	bl	8006e94 <USB_CoreReset>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
 8006a48:	e01a      	b.n	8006a80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa1c 	bl	8006e94 <USB_CoreReset>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
 8006a72:	e005      	b.n	8006a80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a8c:	b004      	add	sp, #16
 8006a8e:	4770      	bx	lr

08006a90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f023 0201 	bic.w	r2, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	460b      	mov	r3, r1
 8006abc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d106      	bne.n	8006ade <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60da      	str	r2, [r3, #12]
 8006adc:	e00b      	b.n	8006af6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	60da      	str	r2, [r3, #12]
 8006af0:	e001      	b.n	8006af6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e003      	b.n	8006afe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006af6:	2032      	movs	r0, #50	; 0x32
 8006af8:	f7fb fafc 	bl	80020f4 <HAL_Delay>

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b08:	b084      	sub	sp, #16
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	e009      	b.n	8006b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3340      	adds	r3, #64	; 0x40
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	2200      	movs	r2, #0
 8006b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b0e      	cmp	r3, #14
 8006b40:	d9f2      	bls.n	8006b28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11c      	bne.n	8006b82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b56:	f043 0302 	orr.w	r3, r3, #2
 8006b5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	e005      	b.n	8006b8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b94:	461a      	mov	r2, r3
 8006b96:	2300      	movs	r3, #0
 8006b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba8:	461a      	mov	r2, r3
 8006baa:	680b      	ldr	r3, [r1, #0]
 8006bac:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bae:	2103      	movs	r1, #3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f93d 	bl	8006e30 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bb6:	2110      	movs	r1, #16
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 f8f1 	bl	8006da0 <USB_FlushTxFifo>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f90f 	bl	8006dec <USB_FlushRxFifo>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bde:	461a      	mov	r2, r3
 8006be0:	2300      	movs	r3, #0
 8006be2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bea:	461a      	mov	r2, r3
 8006bec:	2300      	movs	r3, #0
 8006bee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	e043      	b.n	8006c8a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c18:	d118      	bne.n	8006c4c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	e013      	b.n	8006c5e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c42:	461a      	mov	r2, r3
 8006c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c48:	6013      	str	r3, [r2, #0]
 8006c4a:	e008      	b.n	8006c5e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3301      	adds	r3, #1
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d3b7      	bcc.n	8006c02 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	e043      	b.n	8006d20 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cae:	d118      	bne.n	8006ce2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	e013      	b.n	8006cf4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	e008      	b.n	8006cf4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	461a      	mov	r2, r3
 8006d02:	2300      	movs	r3, #0
 8006d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d12:	461a      	mov	r2, r3
 8006d14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d3b7      	bcc.n	8006c98 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f043 0210 	orr.w	r2, r3, #16
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <USB_DevInit+0x294>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f043 0208 	orr.w	r2, r3, #8
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d107      	bne.n	8006d8a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3718      	adds	r7, #24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d96:	b004      	add	sp, #16
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	803c3800 	.word	0x803c3800

08006da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	019b      	lsls	r3, r3, #6
 8006db2:	f043 0220 	orr.w	r2, r3, #32
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <USB_FlushTxFifo+0x48>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e006      	b.n	8006dda <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d0f0      	beq.n	8006dba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	00030d40 	.word	0x00030d40

08006dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a09      	ldr	r2, [pc, #36]	; (8006e2c <USB_FlushRxFifo+0x40>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d901      	bls.n	8006e10 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e006      	b.n	8006e1e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d0f0      	beq.n	8006dfe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	00030d40 	.word	0x00030d40

08006e30 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e50:	4313      	orrs	r3, r2
 8006e52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e7c:	f043 0302 	orr.w	r3, r3, #2
 8006e80:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006e82:	2003      	movs	r0, #3
 8006e84:	f7fb f936 	bl	80020f4 <HAL_Delay>

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a13      	ldr	r2, [pc, #76]	; (8006ef8 <USB_CoreReset+0x64>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e01b      	b.n	8006eea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	daf2      	bge.n	8006ea0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	f043 0201 	orr.w	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <USB_CoreReset+0x64>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d901      	bls.n	8006edc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e006      	b.n	8006eea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d0f0      	beq.n	8006eca <USB_CoreReset+0x36>

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	00030d40 	.word	0x00030d40

08006efc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f0e:	2b84      	cmp	r3, #132	; 0x84
 8006f10:	d005      	beq.n	8006f1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	3303      	adds	r3, #3
 8006f1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f32:	f3ef 8305 	mrs	r3, IPSR
 8006f36:	607b      	str	r3, [r7, #4]
  return(result);
 8006f38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bf14      	ite	ne
 8006f3e:	2301      	movne	r3, #1
 8006f40:	2300      	moveq	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f54:	f001 f9e6 	bl	8008324 <vTaskStartScheduler>
  
  return osOK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f60:	b089      	sub	sp, #36	; 0x24
 8006f62:	af04      	add	r7, sp, #16
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d020      	beq.n	8006fb2 <osThreadCreate+0x54>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01c      	beq.n	8006fb2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685c      	ldr	r4, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681d      	ldr	r5, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691e      	ldr	r6, [r3, #16]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff ffb6 	bl	8006efc <makeFreeRtosPriority>
 8006f90:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f9a:	9202      	str	r2, [sp, #8]
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	9100      	str	r1, [sp, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	4632      	mov	r2, r6
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f000 fff9 	bl	8007f9e <xTaskCreateStatic>
 8006fac:	4603      	mov	r3, r0
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e01c      	b.n	8006fec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685c      	ldr	r4, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fbe:	b29e      	uxth	r6, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ff98 	bl	8006efc <makeFreeRtosPriority>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	f107 030c 	add.w	r3, r7, #12
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	9200      	str	r2, [sp, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	4632      	mov	r2, r6
 8006fda:	4629      	mov	r1, r5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f001 f838 	bl	8008052 <xTaskCreate>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d001      	beq.n	8006fec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e000      	b.n	8006fee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ff6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <osDelay+0x16>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	e000      	b.n	800700e <osDelay+0x18>
 800700c:	2301      	movs	r3, #1
 800700e:	4618      	mov	r0, r3
 8007010:	f001 f954 	bl	80082bc <vTaskDelay>
  
  return osOK;
 8007014:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4619      	mov	r1, r3
 8007034:	2001      	movs	r0, #1
 8007036:	f000 fb66 	bl	8007706 <xQueueCreateMutexStatic>
 800703a:	4603      	mov	r3, r0
 800703c:	e003      	b.n	8007046 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800703e:	2001      	movs	r0, #1
 8007040:	f000 fb49 	bl	80076d6 <xQueueCreateMutex>
 8007044:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
	...

08007050 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <osMutexWait+0x18>
    return osErrorParameter;
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	e03a      	b.n	80070de <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007072:	d103      	bne.n	800707c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	e009      	b.n	8007090 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d006      	beq.n	8007090 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <osMutexWait+0x40>
      ticks = 1;
 800708c:	2301      	movs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007090:	f7ff ff4c 	bl	8006f2c <inHandlerMode>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d017      	beq.n	80070ca <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800709a:	f107 0308 	add.w	r3, r7, #8
 800709e:	461a      	mov	r2, r3
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fdd6 	bl	8007c54 <xQueueReceiveFromISR>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d001      	beq.n	80070b2 <osMutexWait+0x62>
      return osErrorOS;
 80070ae:	23ff      	movs	r3, #255	; 0xff
 80070b0:	e015      	b.n	80070de <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d011      	beq.n	80070dc <osMutexWait+0x8c>
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <osMutexWait+0x98>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	e008      	b.n	80070dc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80070ca:	68f9      	ldr	r1, [r7, #12]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fcb9 	bl	8007a44 <xQueueSemaphoreTake>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d001      	beq.n	80070dc <osMutexWait+0x8c>
    return osErrorOS;
 80070d8:	23ff      	movs	r3, #255	; 0xff
 80070da:	e000      	b.n	80070de <osMutexWait+0x8e>
  }
  
  return osOK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80070fc:	f7ff ff16 	bl	8006f2c <inHandlerMode>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d016      	beq.n	8007134 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007106:	f107 0308 	add.w	r3, r7, #8
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 fc0f 	bl	8007930 <xQueueGiveFromISR>
 8007112:	4603      	mov	r3, r0
 8007114:	2b01      	cmp	r3, #1
 8007116:	d001      	beq.n	800711c <osMutexRelease+0x30>
      return osErrorOS;
 8007118:	23ff      	movs	r3, #255	; 0xff
 800711a:	e017      	b.n	800714c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d013      	beq.n	800714a <osMutexRelease+0x5e>
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <osMutexRelease+0x68>)
 8007124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	e00a      	b.n	800714a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	2100      	movs	r1, #0
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fafe 	bl	800773c <xQueueGenericSend>
 8007140:	4603      	mov	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d001      	beq.n	800714a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007146:	23ff      	movs	r3, #255	; 0xff
 8007148:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800714a:	68fb      	ldr	r3, [r7, #12]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	e000ed04 	.word	0xe000ed04

08007158 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af02      	add	r7, sp, #8
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d010      	beq.n	800718c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d10b      	bne.n	8007188 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	2303      	movs	r3, #3
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	2001      	movs	r0, #1
 8007180:	f000 f9be 	bl	8007500 <xQueueGenericCreateStatic>
 8007184:	4603      	mov	r3, r0
 8007186:	e016      	b.n	80071b6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	e014      	b.n	80071b6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d110      	bne.n	80071b4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8007192:	2203      	movs	r2, #3
 8007194:	2100      	movs	r1, #0
 8007196:	2001      	movs	r0, #1
 8007198:	f000 fa25 	bl	80075e6 <xQueueGenericCreate>
 800719c:	60f8      	str	r0, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d005      	beq.n	80071b0 <osSemaphoreCreate+0x58>
 80071a4:	2300      	movs	r3, #0
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 fac6 	bl	800773c <xQueueGenericSend>
      return sema;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e000      	b.n	80071b6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80071b4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80071ca:	2300      	movs	r3, #0
 80071cc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80071d4:	2380      	movs	r3, #128	; 0x80
 80071d6:	e03a      	b.n	800724e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e2:	d103      	bne.n	80071ec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80071e4:	f04f 33ff 	mov.w	r3, #4294967295
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e009      	b.n	8007200 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d006      	beq.n	8007200 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <osSemaphoreWait+0x40>
      ticks = 1;
 80071fc:	2301      	movs	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007200:	f7ff fe94 	bl	8006f2c <inHandlerMode>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d017      	beq.n	800723a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800720a:	f107 0308 	add.w	r3, r7, #8
 800720e:	461a      	mov	r2, r3
 8007210:	2100      	movs	r1, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fd1e 	bl	8007c54 <xQueueReceiveFromISR>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d001      	beq.n	8007222 <osSemaphoreWait+0x62>
      return osErrorOS;
 800721e:	23ff      	movs	r3, #255	; 0xff
 8007220:	e015      	b.n	800724e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d011      	beq.n	800724c <osSemaphoreWait+0x8c>
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <osSemaphoreWait+0x98>)
 800722a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	e008      	b.n	800724c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc01 	bl	8007a44 <xQueueSemaphoreTake>
 8007242:	4603      	mov	r3, r0
 8007244:	2b01      	cmp	r3, #1
 8007246:	d001      	beq.n	800724c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007248:	23ff      	movs	r3, #255	; 0xff
 800724a:	e000      	b.n	800724e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007268:	2300      	movs	r3, #0
 800726a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800726c:	f7ff fe5e 	bl	8006f2c <inHandlerMode>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d016      	beq.n	80072a4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007276:	f107 0308 	add.w	r3, r7, #8
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fb57 	bl	8007930 <xQueueGiveFromISR>
 8007282:	4603      	mov	r3, r0
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007288:	23ff      	movs	r3, #255	; 0xff
 800728a:	e017      	b.n	80072bc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d013      	beq.n	80072ba <osSemaphoreRelease+0x5e>
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <osSemaphoreRelease+0x68>)
 8007294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	e00a      	b.n	80072ba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80072a4:	2300      	movs	r3, #0
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa46 	bl	800773c <xQueueGenericSend>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d001      	beq.n	80072ba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80072b6:	23ff      	movs	r3, #255	; 0xff
 80072b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80072ba:	68fb      	ldr	r3, [r7, #12]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	e000ed04 	.word	0xe000ed04

080072c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f103 0208 	add.w	r2, r3, #8
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f04f 32ff 	mov.w	r2, #4294967295
 80072e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f103 0208 	add.w	r2, r3, #8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f103 0208 	add.w	r2, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007322:	b480      	push	{r7}
 8007324:	b085      	sub	sp, #20
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	1c5a      	adds	r2, r3, #1
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	601a      	str	r2, [r3, #0]
}
 800735e:	bf00      	nop
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800736a:	b480      	push	{r7}
 800736c:	b085      	sub	sp, #20
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007380:	d103      	bne.n	800738a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e00c      	b.n	80073a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3308      	adds	r3, #8
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	e002      	b.n	8007398 <vListInsert+0x2e>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d2f6      	bcs.n	8007392 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	601a      	str	r2, [r3, #0]
}
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6892      	ldr	r2, [r2, #8]
 80073f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6852      	ldr	r2, [r2, #4]
 80073fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d103      	bne.n	8007410 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	1e5a      	subs	r2, r3, #1
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d109      	bne.n	8007458 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	e7fe      	b.n	8007456 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007458:	f001 feb0 	bl	80091bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	68f9      	ldr	r1, [r7, #12]
 8007466:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	441a      	add	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007488:	3b01      	subs	r3, #1
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	441a      	add	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	22ff      	movs	r2, #255	; 0xff
 800749c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	22ff      	movs	r2, #255	; 0xff
 80074a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d114      	bne.n	80074d8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01a      	beq.n	80074ec <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3310      	adds	r3, #16
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 f970 	bl	80087a0 <xTaskRemoveFromEventList>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d012      	beq.n	80074ec <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074c6:	4b0d      	ldr	r3, [pc, #52]	; (80074fc <xQueueGenericReset+0xcc>)
 80074c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	e009      	b.n	80074ec <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3310      	adds	r3, #16
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fef3 	bl	80072c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3324      	adds	r3, #36	; 0x24
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff feee 	bl	80072c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074ec:	f001 fe94 	bl	8009218 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074f0:	2301      	movs	r3, #1
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08e      	sub	sp, #56	; 0x38
 8007504:	af02      	add	r7, sp, #8
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <xQueueGenericCreateStatic+0x28>
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
 8007526:	e7fe      	b.n	8007526 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <xQueueGenericCreateStatic+0x42>
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
 8007540:	e7fe      	b.n	8007540 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <xQueueGenericCreateStatic+0x4e>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <xQueueGenericCreateStatic+0x52>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xQueueGenericCreateStatic+0x54>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <xQueueGenericCreateStatic+0x6c>
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	623b      	str	r3, [r7, #32]
 800756a:	e7fe      	b.n	800756a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <xQueueGenericCreateStatic+0x78>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <xQueueGenericCreateStatic+0x7c>
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <xQueueGenericCreateStatic+0x7e>
 800757c:	2300      	movs	r3, #0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <xQueueGenericCreateStatic+0x96>
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e7fe      	b.n	8007594 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007596:	2348      	movs	r3, #72	; 0x48
 8007598:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b48      	cmp	r3, #72	; 0x48
 800759e:	d009      	beq.n	80075b4 <xQueueGenericCreateStatic+0xb4>
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	61bb      	str	r3, [r7, #24]
 80075b2:	e7fe      	b.n	80075b2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00d      	beq.n	80075dc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	4613      	mov	r3, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f844 	bl	8007664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80075de:	4618      	mov	r0, r3
 80075e0:	3730      	adds	r7, #48	; 0x30
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b08a      	sub	sp, #40	; 0x28
 80075ea:	af02      	add	r7, sp, #8
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	4613      	mov	r3, r2
 80075f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <xQueueGenericCreate+0x28>
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	e7fe      	b.n	800760c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007614:	2300      	movs	r3, #0
 8007616:	61fb      	str	r3, [r7, #28]
 8007618:	e004      	b.n	8007624 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	3348      	adds	r3, #72	; 0x48
 8007628:	4618      	mov	r0, r3
 800762a:	f001 fee1 	bl	80093f0 <pvPortMalloc>
 800762e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d011      	beq.n	800765a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	3348      	adds	r3, #72	; 0x48
 800763e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007648:	79fa      	ldrb	r2, [r7, #7]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	4613      	mov	r3, r2
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	68b9      	ldr	r1, [r7, #8]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f805 	bl	8007664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800765a:	69bb      	ldr	r3, [r7, #24]
	}
 800765c:	4618      	mov	r0, r3
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d103      	bne.n	8007680 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	e002      	b.n	8007686 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007692:	2101      	movs	r1, #1
 8007694:	69b8      	ldr	r0, [r7, #24]
 8007696:	f7ff fecb 	bl	8007430 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80076c2:	2300      	movs	r3, #0
 80076c4:	2200      	movs	r2, #0
 80076c6:	2100      	movs	r1, #0
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f837 	bl	800773c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	4603      	mov	r3, r0
 80076de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	2300      	movs	r3, #0
 80076e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6939      	ldr	r1, [r7, #16]
 80076ee:	6978      	ldr	r0, [r7, #20]
 80076f0:	f7ff ff79 	bl	80075e6 <xQueueGenericCreate>
 80076f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff ffd3 	bl	80076a2 <prvInitialiseMutex>

		return xNewQueue;
 80076fc:	68fb      	ldr	r3, [r7, #12]
	}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007706:	b580      	push	{r7, lr}
 8007708:	b088      	sub	sp, #32
 800770a:	af02      	add	r7, sp, #8
 800770c:	4603      	mov	r3, r0
 800770e:	6039      	str	r1, [r7, #0]
 8007710:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007712:	2301      	movs	r3, #1
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2200      	movs	r2, #0
 8007722:	6939      	ldr	r1, [r7, #16]
 8007724:	6978      	ldr	r0, [r7, #20]
 8007726:	f7ff feeb 	bl	8007500 <xQueueGenericCreateStatic>
 800772a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff ffb8 	bl	80076a2 <prvInitialiseMutex>

		return xNewQueue;
 8007732:	68fb      	ldr	r3, [r7, #12]
	}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08e      	sub	sp, #56	; 0x38
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800774a:	2300      	movs	r3, #0
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	2b00      	cmp	r3, #0
 8007756:	d109      	bne.n	800776c <xQueueGenericSend+0x30>
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	62bb      	str	r3, [r7, #40]	; 0x28
 800776a:	e7fe      	b.n	800776a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <xQueueGenericSend+0x3e>
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <xQueueGenericSend+0x42>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <xQueueGenericSend+0x44>
 800777e:	2300      	movs	r3, #0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d109      	bne.n	8007798 <xQueueGenericSend+0x5c>
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
 8007796:	e7fe      	b.n	8007796 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b02      	cmp	r3, #2
 800779c:	d103      	bne.n	80077a6 <xQueueGenericSend+0x6a>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <xQueueGenericSend+0x6e>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <xQueueGenericSend+0x70>
 80077aa:	2300      	movs	r3, #0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d109      	bne.n	80077c4 <xQueueGenericSend+0x88>
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	623b      	str	r3, [r7, #32]
 80077c2:	e7fe      	b.n	80077c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077c4:	f001 f9a2 	bl	8008b0c <xTaskGetSchedulerState>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <xQueueGenericSend+0x98>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <xQueueGenericSend+0x9c>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <xQueueGenericSend+0x9e>
 80077d8:	2300      	movs	r3, #0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d109      	bne.n	80077f2 <xQueueGenericSend+0xb6>
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	e7fe      	b.n	80077f0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077f2:	f001 fce3 	bl	80091bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fe:	429a      	cmp	r2, r3
 8007800:	d302      	bcc.n	8007808 <xQueueGenericSend+0xcc>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d129      	bne.n	800785c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800780e:	f000 fab6 	bl	8007d7e <prvCopyDataToQueue>
 8007812:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	3324      	adds	r3, #36	; 0x24
 8007820:	4618      	mov	r0, r3
 8007822:	f000 ffbd 	bl	80087a0 <xTaskRemoveFromEventList>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d013      	beq.n	8007854 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800782c:	4b3f      	ldr	r3, [pc, #252]	; (800792c <xQueueGenericSend+0x1f0>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	e00a      	b.n	8007854 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800783e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007844:	4b39      	ldr	r3, [pc, #228]	; (800792c <xQueueGenericSend+0x1f0>)
 8007846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007854:	f001 fce0 	bl	8009218 <vPortExitCritical>
				return pdPASS;
 8007858:	2301      	movs	r3, #1
 800785a:	e063      	b.n	8007924 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007862:	f001 fcd9 	bl	8009218 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007866:	2300      	movs	r3, #0
 8007868:	e05c      	b.n	8007924 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007870:	f107 0314 	add.w	r3, r7, #20
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fff5 	bl	8008864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800787a:	2301      	movs	r3, #1
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800787e:	f001 fccb 	bl	8009218 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007882:	f000 fdad 	bl	80083e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007886:	f001 fc99 	bl	80091bc <vPortEnterCritical>
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007890:	b25b      	sxtb	r3, r3
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d103      	bne.n	80078a0 <xQueueGenericSend+0x164>
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a6:	b25b      	sxtb	r3, r3
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d103      	bne.n	80078b6 <xQueueGenericSend+0x17a>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078b6:	f001 fcaf 	bl	8009218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078ba:	1d3a      	adds	r2, r7, #4
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	4611      	mov	r1, r2
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 ffe4 	bl	8008890 <xTaskCheckForTimeOut>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d124      	bne.n	8007918 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078d0:	f000 fb4d 	bl	8007f6e <prvIsQueueFull>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	3310      	adds	r3, #16
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	4611      	mov	r1, r2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 ff38 	bl	8008758 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078ea:	f000 fad8 	bl	8007e9e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078ee:	f000 fd85 	bl	80083fc <xTaskResumeAll>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f af7c 	bne.w	80077f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80078fa:	4b0c      	ldr	r3, [pc, #48]	; (800792c <xQueueGenericSend+0x1f0>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e772      	b.n	80077f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800790c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800790e:	f000 fac6 	bl	8007e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007912:	f000 fd73 	bl	80083fc <xTaskResumeAll>
 8007916:	e76c      	b.n	80077f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800791a:	f000 fac0 	bl	8007e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791e:	f000 fd6d 	bl	80083fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007922:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007924:	4618      	mov	r0, r3
 8007926:	3738      	adds	r7, #56	; 0x38
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08e      	sub	sp, #56	; 0x38
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <xQueueGiveFromISR+0x28>
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	623b      	str	r3, [r7, #32]
 8007956:	e7fe      	b.n	8007956 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <xQueueGiveFromISR+0x44>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	e7fe      	b.n	8007972 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <xQueueGiveFromISR+0x54>
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <xQueueGiveFromISR+0x58>
 8007984:	2301      	movs	r3, #1
 8007986:	e000      	b.n	800798a <xQueueGiveFromISR+0x5a>
 8007988:	2300      	movs	r3, #0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <xQueueGiveFromISR+0x72>
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	61bb      	str	r3, [r7, #24]
 80079a0:	e7fe      	b.n	80079a0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079a2:	f001 fce7 	bl	8009374 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079a6:	f3ef 8211 	mrs	r2, BASEPRI
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	617a      	str	r2, [r7, #20]
 80079bc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d22b      	bcs.n	8007a2a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d112      	bne.n	8007a14 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d016      	beq.n	8007a24 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	3324      	adds	r3, #36	; 0x24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 fed0 	bl	80087a0 <xTaskRemoveFromEventList>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e007      	b.n	8007a24 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a18:	3301      	adds	r3, #1
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	b25a      	sxtb	r2, r3
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a24:	2301      	movs	r3, #1
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
 8007a28:	e001      	b.n	8007a2e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3738      	adds	r7, #56	; 0x38
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08e      	sub	sp, #56	; 0x38
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	e7fe      	b.n	8007a72 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <xQueueSemaphoreTake+0x4c>
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	61fb      	str	r3, [r7, #28]
 8007a8e:	e7fe      	b.n	8007a8e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a90:	f001 f83c 	bl	8008b0c <xTaskGetSchedulerState>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d102      	bne.n	8007aa0 <xQueueSemaphoreTake+0x5c>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <xQueueSemaphoreTake+0x60>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e000      	b.n	8007aa6 <xQueueSemaphoreTake+0x62>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d109      	bne.n	8007abe <xQueueSemaphoreTake+0x7a>
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	e7fe      	b.n	8007abc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007abe:	f001 fb7d 	bl	80091bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d024      	beq.n	8007b18 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad0:	1e5a      	subs	r2, r3, #1
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d104      	bne.n	8007ae8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ade:	f001 f9cf 	bl	8008e80 <pvTaskIncrementMutexHeldCount>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00f      	beq.n	8007b10 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	3310      	adds	r3, #16
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fe53 	bl	80087a0 <xTaskRemoveFromEventList>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d007      	beq.n	8007b10 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b00:	4b53      	ldr	r3, [pc, #332]	; (8007c50 <xQueueSemaphoreTake+0x20c>)
 8007b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b10:	f001 fb82 	bl	8009218 <vPortExitCritical>
				return pdPASS;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e096      	b.n	8007c46 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d110      	bne.n	8007b40 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <xQueueSemaphoreTake+0xf4>
 8007b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	e7fe      	b.n	8007b36 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007b38:	f001 fb6e 	bl	8009218 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e082      	b.n	8007c46 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b46:	f107 030c 	add.w	r3, r7, #12
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fe8a 	bl	8008864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b50:	2301      	movs	r3, #1
 8007b52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b54:	f001 fb60 	bl	8009218 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b58:	f000 fc42 	bl	80083e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b5c:	f001 fb2e 	bl	80091bc <vPortEnterCritical>
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b66:	b25b      	sxtb	r3, r3
 8007b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6c:	d103      	bne.n	8007b76 <xQueueSemaphoreTake+0x132>
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b7c:	b25b      	sxtb	r3, r3
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d103      	bne.n	8007b8c <xQueueSemaphoreTake+0x148>
 8007b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b8c:	f001 fb44 	bl	8009218 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b90:	463a      	mov	r2, r7
 8007b92:	f107 030c 	add.w	r3, r7, #12
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fe79 	bl	8008890 <xTaskCheckForTimeOut>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d132      	bne.n	8007c0a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ba6:	f000 f9cc 	bl	8007f42 <prvIsQueueEmpty>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d026      	beq.n	8007bfe <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007bb8:	f001 fb00 	bl	80091bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 ffc1 	bl	8008b48 <xTaskPriorityInherit>
 8007bc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007bc8:	f001 fb26 	bl	8009218 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	3324      	adds	r3, #36	; 0x24
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fdbf 	bl	8008758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bdc:	f000 f95f 	bl	8007e9e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007be0:	f000 fc0c 	bl	80083fc <xTaskResumeAll>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f47f af69 	bne.w	8007abe <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007bec:	4b18      	ldr	r3, [pc, #96]	; (8007c50 <xQueueSemaphoreTake+0x20c>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	e75f      	b.n	8007abe <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c00:	f000 f94d 	bl	8007e9e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c04:	f000 fbfa 	bl	80083fc <xTaskResumeAll>
 8007c08:	e759      	b.n	8007abe <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c0c:	f000 f947 	bl	8007e9e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c10:	f000 fbf4 	bl	80083fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c16:	f000 f994 	bl	8007f42 <prvIsQueueEmpty>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f43f af4e 	beq.w	8007abe <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00d      	beq.n	8007c44 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007c28:	f001 fac8 	bl	80091bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007c2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c2e:	f000 f88e 	bl	8007d4e <prvGetDisinheritPriorityAfterTimeout>
 8007c32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 f888 	bl	8008d50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007c40:	f001 faea 	bl	8009218 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3738      	adds	r7, #56	; 0x38
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08e      	sub	sp, #56	; 0x38
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d109      	bne.n	8007c7e <xQueueReceiveFromISR+0x2a>
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	623b      	str	r3, [r7, #32]
 8007c7c:	e7fe      	b.n	8007c7c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <xQueueReceiveFromISR+0x38>
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <xQueueReceiveFromISR+0x3c>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <xQueueReceiveFromISR+0x3e>
 8007c90:	2300      	movs	r3, #0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d109      	bne.n	8007caa <xQueueReceiveFromISR+0x56>
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	e7fe      	b.n	8007ca8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007caa:	f001 fb63 	bl	8009374 <vPortValidateInterruptPriority>
	__asm volatile
 8007cae:	f3ef 8211 	mrs	r2, BASEPRI
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	61ba      	str	r2, [r7, #24]
 8007cc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007cc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d02f      	beq.n	8007d36 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ce4:	f000 f8b5 	bl	8007e52 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cea:	1e5a      	subs	r2, r3, #1
 8007cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d112      	bne.n	8007d20 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d016      	beq.n	8007d30 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	3310      	adds	r3, #16
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fd4a 	bl	80087a0 <xTaskRemoveFromEventList>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00e      	beq.n	8007d30 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	e007      	b.n	8007d30 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d24:	3301      	adds	r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	b25a      	sxtb	r2, r3
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007d30:	2301      	movs	r3, #1
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
 8007d34:	e001      	b.n	8007d3a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	637b      	str	r3, [r7, #52]	; 0x34
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3738      	adds	r7, #56	; 0x38
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d006      	beq.n	8007d6c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f1c3 0307 	rsb	r3, r3, #7
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e001      	b.n	8007d70 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d70:	68fb      	ldr	r3, [r7, #12]
	}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b086      	sub	sp, #24
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d92:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d14d      	bne.n	8007e40 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 ff4d 	bl	8008c48 <xTaskPriorityDisinherit>
 8007dae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	609a      	str	r2, [r3, #8]
 8007db6:	e043      	b.n	8007e40 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d119      	bne.n	8007df2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6858      	ldr	r0, [r3, #4]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	f001 fd11 	bl	80097f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	441a      	add	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d32b      	bcc.n	8007e40 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	605a      	str	r2, [r3, #4]
 8007df0:	e026      	b.n	8007e40 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68d8      	ldr	r0, [r3, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68b9      	ldr	r1, [r7, #8]
 8007dfe:	f001 fcf7 	bl	80097f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	425b      	negs	r3, r3
 8007e0c:	441a      	add	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d207      	bcs.n	8007e2e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689a      	ldr	r2, [r3, #8]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	425b      	negs	r3, r3
 8007e28:	441a      	add	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d105      	bne.n	8007e40 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e48:	697b      	ldr	r3, [r7, #20]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d018      	beq.n	8007e96 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	441a      	add	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d303      	bcc.n	8007e86 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68d9      	ldr	r1, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6838      	ldr	r0, [r7, #0]
 8007e92:	f001 fcad 	bl	80097f0 <memcpy>
	}
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ea6:	f001 f989 	bl	80091bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007eb0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eb2:	e011      	b.n	8007ed8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d012      	beq.n	8007ee2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fc6d 	bl	80087a0 <xTaskRemoveFromEventList>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ecc:	f000 fd40 	bl	8008950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dce9      	bgt.n	8007eb4 <prvUnlockQueue+0x16>
 8007ee0:	e000      	b.n	8007ee4 <prvUnlockQueue+0x46>
					break;
 8007ee2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007eec:	f001 f994 	bl	8009218 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ef0:	f001 f964 	bl	80091bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007efa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007efc:	e011      	b.n	8007f22 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d012      	beq.n	8007f2c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3310      	adds	r3, #16
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fc48 	bl	80087a0 <xTaskRemoveFromEventList>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f16:	f000 fd1b 	bl	8008950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dce9      	bgt.n	8007efe <prvUnlockQueue+0x60>
 8007f2a:	e000      	b.n	8007f2e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f2c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	22ff      	movs	r2, #255	; 0xff
 8007f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f36:	f001 f96f 	bl	8009218 <vPortExitCritical>
}
 8007f3a:	bf00      	nop
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f4a:	f001 f937 	bl	80091bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f56:	2301      	movs	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e001      	b.n	8007f60 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f60:	f001 f95a 	bl	8009218 <vPortExitCritical>

	return xReturn;
 8007f64:	68fb      	ldr	r3, [r7, #12]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f76:	f001 f921 	bl	80091bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d102      	bne.n	8007f8c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f86:	2301      	movs	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	e001      	b.n	8007f90 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f90:	f001 f942 	bl	8009218 <vPortExitCritical>

	return xReturn;
 8007f94:	68fb      	ldr	r3, [r7, #12]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b08e      	sub	sp, #56	; 0x38
 8007fa2:	af04      	add	r7, sp, #16
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
 8007faa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <xTaskCreateStatic+0x28>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	623b      	str	r3, [r7, #32]
 8007fc4:	e7fe      	b.n	8007fc4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d109      	bne.n	8007fe0 <xTaskCreateStatic+0x42>
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	61fb      	str	r3, [r7, #28]
 8007fde:	e7fe      	b.n	8007fde <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fe0:	2354      	movs	r3, #84	; 0x54
 8007fe2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	2b54      	cmp	r3, #84	; 0x54
 8007fe8:	d009      	beq.n	8007ffe <xTaskCreateStatic+0x60>
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	61bb      	str	r3, [r7, #24]
 8007ffc:	e7fe      	b.n	8007ffc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ffe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01e      	beq.n	8008044 <xTaskCreateStatic+0xa6>
 8008006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01b      	beq.n	8008044 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008014:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	2202      	movs	r2, #2
 800801a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800801e:	2300      	movs	r3, #0
 8008020:	9303      	str	r3, [sp, #12]
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	9302      	str	r3, [sp, #8]
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	68b9      	ldr	r1, [r7, #8]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f850 	bl	80080dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800803c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800803e:	f000 f8d3 	bl	80081e8 <prvAddNewTaskToReadyList>
 8008042:	e001      	b.n	8008048 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008048:	697b      	ldr	r3, [r7, #20]
	}
 800804a:	4618      	mov	r0, r3
 800804c:	3728      	adds	r7, #40	; 0x28
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008052:	b580      	push	{r7, lr}
 8008054:	b08c      	sub	sp, #48	; 0x30
 8008056:	af04      	add	r7, sp, #16
 8008058:	60f8      	str	r0, [r7, #12]
 800805a:	60b9      	str	r1, [r7, #8]
 800805c:	603b      	str	r3, [r7, #0]
 800805e:	4613      	mov	r3, r2
 8008060:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4618      	mov	r0, r3
 8008068:	f001 f9c2 	bl	80093f0 <pvPortMalloc>
 800806c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00e      	beq.n	8008092 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008074:	2054      	movs	r0, #84	; 0x54
 8008076:	f001 f9bb 	bl	80093f0 <pvPortMalloc>
 800807a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	631a      	str	r2, [r3, #48]	; 0x30
 8008088:	e005      	b.n	8008096 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800808a:	6978      	ldr	r0, [r7, #20]
 800808c:	f001 fa72 	bl	8009574 <vPortFree>
 8008090:	e001      	b.n	8008096 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d017      	beq.n	80080cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	2300      	movs	r3, #0
 80080a8:	9303      	str	r3, [sp, #12]
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	9302      	str	r3, [sp, #8]
 80080ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68b9      	ldr	r1, [r7, #8]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f80e 	bl	80080dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080c0:	69f8      	ldr	r0, [r7, #28]
 80080c2:	f000 f891 	bl	80081e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080c6:	2301      	movs	r3, #1
 80080c8:	61bb      	str	r3, [r7, #24]
 80080ca:	e002      	b.n	80080d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080cc:	f04f 33ff 	mov.w	r3, #4294967295
 80080d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080d2:	69bb      	ldr	r3, [r7, #24]
	}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3720      	adds	r7, #32
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080f4:	3b01      	subs	r3, #1
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f023 0307 	bic.w	r3, r3, #7
 8008102:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <prvInitialiseNewTask+0x46>
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	617b      	str	r3, [r7, #20]
 8008120:	e7fe      	b.n	8008120 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01f      	beq.n	8008168 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008128:	2300      	movs	r3, #0
 800812a:	61fb      	str	r3, [r7, #28]
 800812c:	e012      	b.n	8008154 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	4413      	add	r3, r2
 8008134:	7819      	ldrb	r1, [r3, #0]
 8008136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	4413      	add	r3, r2
 800813c:	3334      	adds	r3, #52	; 0x34
 800813e:	460a      	mov	r2, r1
 8008140:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	4413      	add	r3, r2
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3301      	adds	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	2b0f      	cmp	r3, #15
 8008158:	d9e9      	bls.n	800812e <prvInitialiseNewTask+0x52>
 800815a:	e000      	b.n	800815e <prvInitialiseNewTask+0x82>
			{
				break;
 800815c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008166:	e003      	b.n	8008170 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	2b06      	cmp	r3, #6
 8008174:	d901      	bls.n	800817a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008176:	2306      	movs	r3, #6
 8008178:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008184:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008188:	2200      	movs	r2, #0
 800818a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	3304      	adds	r3, #4
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff f8b9 	bl	8007308 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	3318      	adds	r3, #24
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff f8b4 	bl	8007308 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	f1c3 0207 	rsb	r2, r3, #7
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b8:	2200      	movs	r2, #0
 80081ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	69b8      	ldr	r0, [r7, #24]
 80081ca:	f000 fed3 	bl	8008f74 <pxPortInitialiseStack>
 80081ce:	4602      	mov	r2, r0
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081e0:	bf00      	nop
 80081e2:	3720      	adds	r7, #32
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081f0:	f000 ffe4 	bl	80091bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081f4:	4b2a      	ldr	r3, [pc, #168]	; (80082a0 <prvAddNewTaskToReadyList+0xb8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	3301      	adds	r3, #1
 80081fa:	4a29      	ldr	r2, [pc, #164]	; (80082a0 <prvAddNewTaskToReadyList+0xb8>)
 80081fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081fe:	4b29      	ldr	r3, [pc, #164]	; (80082a4 <prvAddNewTaskToReadyList+0xbc>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008206:	4a27      	ldr	r2, [pc, #156]	; (80082a4 <prvAddNewTaskToReadyList+0xbc>)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800820c:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <prvAddNewTaskToReadyList+0xb8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d110      	bne.n	8008236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008214:	f000 fbc0 	bl	8008998 <prvInitialiseTaskLists>
 8008218:	e00d      	b.n	8008236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800821a:	4b23      	ldr	r3, [pc, #140]	; (80082a8 <prvAddNewTaskToReadyList+0xc0>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008222:	4b20      	ldr	r3, [pc, #128]	; (80082a4 <prvAddNewTaskToReadyList+0xbc>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	429a      	cmp	r2, r3
 800822e:	d802      	bhi.n	8008236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008230:	4a1c      	ldr	r2, [pc, #112]	; (80082a4 <prvAddNewTaskToReadyList+0xbc>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008236:	4b1d      	ldr	r3, [pc, #116]	; (80082ac <prvAddNewTaskToReadyList+0xc4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	4a1b      	ldr	r2, [pc, #108]	; (80082ac <prvAddNewTaskToReadyList+0xc4>)
 800823e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	2201      	movs	r2, #1
 8008246:	409a      	lsls	r2, r3
 8008248:	4b19      	ldr	r3, [pc, #100]	; (80082b0 <prvAddNewTaskToReadyList+0xc8>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4313      	orrs	r3, r2
 800824e:	4a18      	ldr	r2, [pc, #96]	; (80082b0 <prvAddNewTaskToReadyList+0xc8>)
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <prvAddNewTaskToReadyList+0xcc>)
 8008260:	441a      	add	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7ff f85a 	bl	8007322 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800826e:	f000 ffd3 	bl	8009218 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008272:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <prvAddNewTaskToReadyList+0xc0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800827a:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <prvAddNewTaskToReadyList+0xbc>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	429a      	cmp	r2, r3
 8008286:	d207      	bcs.n	8008298 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <prvAddNewTaskToReadyList+0xd0>)
 800828a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000418 	.word	0x20000418
 80082a4:	20000318 	.word	0x20000318
 80082a8:	20000424 	.word	0x20000424
 80082ac:	20000434 	.word	0x20000434
 80082b0:	20000420 	.word	0x20000420
 80082b4:	2000031c 	.word	0x2000031c
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d016      	beq.n	80082fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <vTaskDelay+0x60>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <vTaskDelay+0x2e>
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	60bb      	str	r3, [r7, #8]
 80082e8:	e7fe      	b.n	80082e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80082ea:	f000 f879 	bl	80083e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fdd9 	bl	8008ea8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082f6:	f000 f881 	bl	80083fc <xTaskResumeAll>
 80082fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d107      	bne.n	8008312 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <vTaskDelay+0x64>)
 8008304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000440 	.word	0x20000440
 8008320:	e000ed04 	.word	0xe000ed04

08008324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008332:	463a      	mov	r2, r7
 8008334:	1d39      	adds	r1, r7, #4
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	4618      	mov	r0, r3
 800833c:	f7f8 f920 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	9202      	str	r2, [sp, #8]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	2300      	movs	r3, #0
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	460a      	mov	r2, r1
 8008352:	491d      	ldr	r1, [pc, #116]	; (80083c8 <vTaskStartScheduler+0xa4>)
 8008354:	481d      	ldr	r0, [pc, #116]	; (80083cc <vTaskStartScheduler+0xa8>)
 8008356:	f7ff fe22 	bl	8007f9e <xTaskCreateStatic>
 800835a:	4602      	mov	r2, r0
 800835c:	4b1c      	ldr	r3, [pc, #112]	; (80083d0 <vTaskStartScheduler+0xac>)
 800835e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008360:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <vTaskStartScheduler+0xac>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008368:	2301      	movs	r3, #1
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e001      	b.n	8008372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d115      	bne.n	80083a4 <vTaskStartScheduler+0x80>
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <vTaskStartScheduler+0xb0>)
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008392:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <vTaskStartScheduler+0xb4>)
 8008394:	2201      	movs	r2, #1
 8008396:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008398:	4b10      	ldr	r3, [pc, #64]	; (80083dc <vTaskStartScheduler+0xb8>)
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800839e:	f000 fe6f 	bl	8009080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083a2:	e00d      	b.n	80083c0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083aa:	d109      	bne.n	80083c0 <vTaskStartScheduler+0x9c>
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e7fe      	b.n	80083be <vTaskStartScheduler+0x9a>
}
 80083c0:	bf00      	nop
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	0800a194 	.word	0x0800a194
 80083cc:	08008969 	.word	0x08008969
 80083d0:	2000043c 	.word	0x2000043c
 80083d4:	20000438 	.word	0x20000438
 80083d8:	20000424 	.word	0x20000424
 80083dc:	2000041c 	.word	0x2000041c

080083e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083e4:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <vTaskSuspendAll+0x18>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3301      	adds	r3, #1
 80083ea:	4a03      	ldr	r2, [pc, #12]	; (80083f8 <vTaskSuspendAll+0x18>)
 80083ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80083ee:	bf00      	nop
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20000440 	.word	0x20000440

080083fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008406:	2300      	movs	r3, #0
 8008408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800840a:	4b41      	ldr	r3, [pc, #260]	; (8008510 <xTaskResumeAll+0x114>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d109      	bne.n	8008426 <xTaskResumeAll+0x2a>
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	e7fe      	b.n	8008424 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008426:	f000 fec9 	bl	80091bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800842a:	4b39      	ldr	r3, [pc, #228]	; (8008510 <xTaskResumeAll+0x114>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3b01      	subs	r3, #1
 8008430:	4a37      	ldr	r2, [pc, #220]	; (8008510 <xTaskResumeAll+0x114>)
 8008432:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008434:	4b36      	ldr	r3, [pc, #216]	; (8008510 <xTaskResumeAll+0x114>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d161      	bne.n	8008500 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800843c:	4b35      	ldr	r3, [pc, #212]	; (8008514 <xTaskResumeAll+0x118>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d05d      	beq.n	8008500 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008444:	e02e      	b.n	80084a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008446:	4b34      	ldr	r3, [pc, #208]	; (8008518 <xTaskResumeAll+0x11c>)
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3318      	adds	r3, #24
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe ffc2 	bl	80073dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3304      	adds	r3, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe ffbd 	bl	80073dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	2201      	movs	r2, #1
 8008468:	409a      	lsls	r2, r3
 800846a:	4b2c      	ldr	r3, [pc, #176]	; (800851c <xTaskResumeAll+0x120>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4313      	orrs	r3, r2
 8008470:	4a2a      	ldr	r2, [pc, #168]	; (800851c <xTaskResumeAll+0x120>)
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008478:	4613      	mov	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4a27      	ldr	r2, [pc, #156]	; (8008520 <xTaskResumeAll+0x124>)
 8008482:	441a      	add	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3304      	adds	r3, #4
 8008488:	4619      	mov	r1, r3
 800848a:	4610      	mov	r0, r2
 800848c:	f7fe ff49 	bl	8007322 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4b23      	ldr	r3, [pc, #140]	; (8008524 <xTaskResumeAll+0x128>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849a:	429a      	cmp	r2, r3
 800849c:	d302      	bcc.n	80084a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800849e:	4b22      	ldr	r3, [pc, #136]	; (8008528 <xTaskResumeAll+0x12c>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084a4:	4b1c      	ldr	r3, [pc, #112]	; (8008518 <xTaskResumeAll+0x11c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1cc      	bne.n	8008446 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084b2:	f000 fb0b 	bl	8008acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084b6:	4b1d      	ldr	r3, [pc, #116]	; (800852c <xTaskResumeAll+0x130>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d010      	beq.n	80084e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084c2:	f000 f837 	bl	8008534 <xTaskIncrementTick>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80084cc:	4b16      	ldr	r3, [pc, #88]	; (8008528 <xTaskResumeAll+0x12c>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f1      	bne.n	80084c2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <xTaskResumeAll+0x130>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <xTaskResumeAll+0x12c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d009      	beq.n	8008500 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084f0:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <xTaskResumeAll+0x134>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008500:	f000 fe8a 	bl	8009218 <vPortExitCritical>

	return xAlreadyYielded;
 8008504:	68bb      	ldr	r3, [r7, #8]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000440 	.word	0x20000440
 8008514:	20000418 	.word	0x20000418
 8008518:	200003d8 	.word	0x200003d8
 800851c:	20000420 	.word	0x20000420
 8008520:	2000031c 	.word	0x2000031c
 8008524:	20000318 	.word	0x20000318
 8008528:	2000042c 	.word	0x2000042c
 800852c:	20000428 	.word	0x20000428
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853e:	4b4e      	ldr	r3, [pc, #312]	; (8008678 <xTaskIncrementTick+0x144>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f040 8087 	bne.w	8008656 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008548:	4b4c      	ldr	r3, [pc, #304]	; (800867c <xTaskIncrementTick+0x148>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3301      	adds	r3, #1
 800854e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008550:	4a4a      	ldr	r2, [pc, #296]	; (800867c <xTaskIncrementTick+0x148>)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d11f      	bne.n	800859c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800855c:	4b48      	ldr	r3, [pc, #288]	; (8008680 <xTaskIncrementTick+0x14c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <xTaskIncrementTick+0x46>
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	e7fe      	b.n	8008578 <xTaskIncrementTick+0x44>
 800857a:	4b41      	ldr	r3, [pc, #260]	; (8008680 <xTaskIncrementTick+0x14c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	4b40      	ldr	r3, [pc, #256]	; (8008684 <xTaskIncrementTick+0x150>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a3e      	ldr	r2, [pc, #248]	; (8008680 <xTaskIncrementTick+0x14c>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4a3e      	ldr	r2, [pc, #248]	; (8008684 <xTaskIncrementTick+0x150>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	4b3e      	ldr	r3, [pc, #248]	; (8008688 <xTaskIncrementTick+0x154>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	4a3c      	ldr	r2, [pc, #240]	; (8008688 <xTaskIncrementTick+0x154>)
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	f000 fa98 	bl	8008acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800859c:	4b3b      	ldr	r3, [pc, #236]	; (800868c <xTaskIncrementTick+0x158>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d348      	bcc.n	8008638 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a6:	4b36      	ldr	r3, [pc, #216]	; (8008680 <xTaskIncrementTick+0x14c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b0:	4b36      	ldr	r3, [pc, #216]	; (800868c <xTaskIncrementTick+0x158>)
 80085b2:	f04f 32ff 	mov.w	r2, #4294967295
 80085b6:	601a      	str	r2, [r3, #0]
					break;
 80085b8:	e03e      	b.n	8008638 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ba:	4b31      	ldr	r3, [pc, #196]	; (8008680 <xTaskIncrementTick+0x14c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d203      	bcs.n	80085da <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085d2:	4a2e      	ldr	r2, [pc, #184]	; (800868c <xTaskIncrementTick+0x158>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085d8:	e02e      	b.n	8008638 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	3304      	adds	r3, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe fefc 	bl	80073dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	3318      	adds	r3, #24
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fef3 	bl	80073dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	2201      	movs	r2, #1
 80085fc:	409a      	lsls	r2, r3
 80085fe:	4b24      	ldr	r3, [pc, #144]	; (8008690 <xTaskIncrementTick+0x15c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	4a22      	ldr	r2, [pc, #136]	; (8008690 <xTaskIncrementTick+0x15c>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a1f      	ldr	r2, [pc, #124]	; (8008694 <xTaskIncrementTick+0x160>)
 8008616:	441a      	add	r2, r3
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fe fe7f 	bl	8007322 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008628:	4b1b      	ldr	r3, [pc, #108]	; (8008698 <xTaskIncrementTick+0x164>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	429a      	cmp	r2, r3
 8008630:	d3b9      	bcc.n	80085a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008632:	2301      	movs	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008636:	e7b6      	b.n	80085a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008638:	4b17      	ldr	r3, [pc, #92]	; (8008698 <xTaskIncrementTick+0x164>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863e:	4915      	ldr	r1, [pc, #84]	; (8008694 <xTaskIncrementTick+0x160>)
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d907      	bls.n	8008660 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e004      	b.n	8008660 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008656:	4b11      	ldr	r3, [pc, #68]	; (800869c <xTaskIncrementTick+0x168>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	4a0f      	ldr	r2, [pc, #60]	; (800869c <xTaskIncrementTick+0x168>)
 800865e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008660:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <xTaskIncrementTick+0x16c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800866c:	697b      	ldr	r3, [r7, #20]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000440 	.word	0x20000440
 800867c:	2000041c 	.word	0x2000041c
 8008680:	200003d0 	.word	0x200003d0
 8008684:	200003d4 	.word	0x200003d4
 8008688:	20000430 	.word	0x20000430
 800868c:	20000438 	.word	0x20000438
 8008690:	20000420 	.word	0x20000420
 8008694:	2000031c 	.word	0x2000031c
 8008698:	20000318 	.word	0x20000318
 800869c:	20000428 	.word	0x20000428
 80086a0:	2000042c 	.word	0x2000042c

080086a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086aa:	4b26      	ldr	r3, [pc, #152]	; (8008744 <vTaskSwitchContext+0xa0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086b2:	4b25      	ldr	r3, [pc, #148]	; (8008748 <vTaskSwitchContext+0xa4>)
 80086b4:	2201      	movs	r2, #1
 80086b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086b8:	e03e      	b.n	8008738 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80086ba:	4b23      	ldr	r3, [pc, #140]	; (8008748 <vTaskSwitchContext+0xa4>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c0:	4b22      	ldr	r3, [pc, #136]	; (800874c <vTaskSwitchContext+0xa8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	fab3 f383 	clz	r3, r3
 80086cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80086ce:	7afb      	ldrb	r3, [r7, #11]
 80086d0:	f1c3 031f 	rsb	r3, r3, #31
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	491e      	ldr	r1, [pc, #120]	; (8008750 <vTaskSwitchContext+0xac>)
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d109      	bne.n	80086fe <vTaskSwitchContext+0x5a>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	e7fe      	b.n	80086fc <vTaskSwitchContext+0x58>
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4a11      	ldr	r2, [pc, #68]	; (8008750 <vTaskSwitchContext+0xac>)
 800870a:	4413      	add	r3, r2
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	3308      	adds	r3, #8
 8008720:	429a      	cmp	r2, r3
 8008722:	d104      	bne.n	800872e <vTaskSwitchContext+0x8a>
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	605a      	str	r2, [r3, #4]
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	4a07      	ldr	r2, [pc, #28]	; (8008754 <vTaskSwitchContext+0xb0>)
 8008736:	6013      	str	r3, [r2, #0]
}
 8008738:	bf00      	nop
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	20000440 	.word	0x20000440
 8008748:	2000042c 	.word	0x2000042c
 800874c:	20000420 	.word	0x20000420
 8008750:	2000031c 	.word	0x2000031c
 8008754:	20000318 	.word	0x20000318

08008758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <vTaskPlaceOnEventList+0x24>
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	60fb      	str	r3, [r7, #12]
 800877a:	e7fe      	b.n	800877a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800877c:	4b07      	ldr	r3, [pc, #28]	; (800879c <vTaskPlaceOnEventList+0x44>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3318      	adds	r3, #24
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7fe fdf0 	bl	800736a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800878a:	2101      	movs	r1, #1
 800878c:	6838      	ldr	r0, [r7, #0]
 800878e:	f000 fb8b 	bl	8008ea8 <prvAddCurrentTaskToDelayedList>
}
 8008792:	bf00      	nop
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000318 	.word	0x20000318

080087a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d109      	bne.n	80087ca <xTaskRemoveFromEventList+0x2a>
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	e7fe      	b.n	80087c8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	3318      	adds	r3, #24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fe04 	bl	80073dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d4:	4b1d      	ldr	r3, [pc, #116]	; (800884c <xTaskRemoveFromEventList+0xac>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d11c      	bne.n	8008816 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe fdfb 	bl	80073dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ea:	2201      	movs	r2, #1
 80087ec:	409a      	lsls	r2, r3
 80087ee:	4b18      	ldr	r3, [pc, #96]	; (8008850 <xTaskRemoveFromEventList+0xb0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	4a16      	ldr	r2, [pc, #88]	; (8008850 <xTaskRemoveFromEventList+0xb0>)
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4a13      	ldr	r2, [pc, #76]	; (8008854 <xTaskRemoveFromEventList+0xb4>)
 8008806:	441a      	add	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	3304      	adds	r3, #4
 800880c:	4619      	mov	r1, r3
 800880e:	4610      	mov	r0, r2
 8008810:	f7fe fd87 	bl	8007322 <vListInsertEnd>
 8008814:	e005      	b.n	8008822 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	3318      	adds	r3, #24
 800881a:	4619      	mov	r1, r3
 800881c:	480e      	ldr	r0, [pc, #56]	; (8008858 <xTaskRemoveFromEventList+0xb8>)
 800881e:	f7fe fd80 	bl	8007322 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	4b0d      	ldr	r3, [pc, #52]	; (800885c <xTaskRemoveFromEventList+0xbc>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	429a      	cmp	r2, r3
 800882e:	d905      	bls.n	800883c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008830:	2301      	movs	r3, #1
 8008832:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008834:	4b0a      	ldr	r3, [pc, #40]	; (8008860 <xTaskRemoveFromEventList+0xc0>)
 8008836:	2201      	movs	r2, #1
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e001      	b.n	8008840 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800883c:	2300      	movs	r3, #0
 800883e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008840:	697b      	ldr	r3, [r7, #20]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000440 	.word	0x20000440
 8008850:	20000420 	.word	0x20000420
 8008854:	2000031c 	.word	0x2000031c
 8008858:	200003d8 	.word	0x200003d8
 800885c:	20000318 	.word	0x20000318
 8008860:	2000042c 	.word	0x2000042c

08008864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800886c:	4b06      	ldr	r3, [pc, #24]	; (8008888 <vTaskInternalSetTimeOutState+0x24>)
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <vTaskInternalSetTimeOutState+0x28>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	605a      	str	r2, [r3, #4]
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	20000430 	.word	0x20000430
 800888c:	2000041c 	.word	0x2000041c

08008890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <xTaskCheckForTimeOut+0x24>
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	e7fe      	b.n	80088b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <xTaskCheckForTimeOut+0x3e>
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	e7fe      	b.n	80088cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80088ce:	f000 fc75 	bl	80091bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <xTaskCheckForTimeOut+0xb8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ea:	d102      	bne.n	80088f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61fb      	str	r3, [r7, #28]
 80088f0:	e023      	b.n	800893a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	4b15      	ldr	r3, [pc, #84]	; (800894c <xTaskCheckForTimeOut+0xbc>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d007      	beq.n	800890e <xTaskCheckForTimeOut+0x7e>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	429a      	cmp	r2, r3
 8008906:	d302      	bcc.n	800890e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008908:	2301      	movs	r3, #1
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	e015      	b.n	800893a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	429a      	cmp	r2, r3
 8008916:	d20b      	bcs.n	8008930 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff ff9d 	bl	8008864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800892a:	2300      	movs	r3, #0
 800892c:	61fb      	str	r3, [r7, #28]
 800892e:	e004      	b.n	800893a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008936:	2301      	movs	r3, #1
 8008938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800893a:	f000 fc6d 	bl	8009218 <vPortExitCritical>

	return xReturn;
 800893e:	69fb      	ldr	r3, [r7, #28]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	2000041c 	.word	0x2000041c
 800894c:	20000430 	.word	0x20000430

08008950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008954:	4b03      	ldr	r3, [pc, #12]	; (8008964 <vTaskMissedYield+0x14>)
 8008956:	2201      	movs	r2, #1
 8008958:	601a      	str	r2, [r3, #0]
}
 800895a:	bf00      	nop
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr
 8008964:	2000042c 	.word	0x2000042c

08008968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008970:	f000 f852 	bl	8008a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008974:	4b06      	ldr	r3, [pc, #24]	; (8008990 <prvIdleTask+0x28>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d9f9      	bls.n	8008970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800897c:	4b05      	ldr	r3, [pc, #20]	; (8008994 <prvIdleTask+0x2c>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800898c:	e7f0      	b.n	8008970 <prvIdleTask+0x8>
 800898e:	bf00      	nop
 8008990:	2000031c 	.word	0x2000031c
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800899e:	2300      	movs	r3, #0
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	e00c      	b.n	80089be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4a12      	ldr	r2, [pc, #72]	; (80089f8 <prvInitialiseTaskLists+0x60>)
 80089b0:	4413      	add	r3, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fc88 	bl	80072c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3301      	adds	r3, #1
 80089bc:	607b      	str	r3, [r7, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b06      	cmp	r3, #6
 80089c2:	d9ef      	bls.n	80089a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089c4:	480d      	ldr	r0, [pc, #52]	; (80089fc <prvInitialiseTaskLists+0x64>)
 80089c6:	f7fe fc7f 	bl	80072c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089ca:	480d      	ldr	r0, [pc, #52]	; (8008a00 <prvInitialiseTaskLists+0x68>)
 80089cc:	f7fe fc7c 	bl	80072c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089d0:	480c      	ldr	r0, [pc, #48]	; (8008a04 <prvInitialiseTaskLists+0x6c>)
 80089d2:	f7fe fc79 	bl	80072c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089d6:	480c      	ldr	r0, [pc, #48]	; (8008a08 <prvInitialiseTaskLists+0x70>)
 80089d8:	f7fe fc76 	bl	80072c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089dc:	480b      	ldr	r0, [pc, #44]	; (8008a0c <prvInitialiseTaskLists+0x74>)
 80089de:	f7fe fc73 	bl	80072c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089e2:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <prvInitialiseTaskLists+0x78>)
 80089e4:	4a05      	ldr	r2, [pc, #20]	; (80089fc <prvInitialiseTaskLists+0x64>)
 80089e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089e8:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <prvInitialiseTaskLists+0x7c>)
 80089ea:	4a05      	ldr	r2, [pc, #20]	; (8008a00 <prvInitialiseTaskLists+0x68>)
 80089ec:	601a      	str	r2, [r3, #0]
}
 80089ee:	bf00      	nop
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	2000031c 	.word	0x2000031c
 80089fc:	200003a8 	.word	0x200003a8
 8008a00:	200003bc 	.word	0x200003bc
 8008a04:	200003d8 	.word	0x200003d8
 8008a08:	200003ec 	.word	0x200003ec
 8008a0c:	20000404 	.word	0x20000404
 8008a10:	200003d0 	.word	0x200003d0
 8008a14:	200003d4 	.word	0x200003d4

08008a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a1e:	e019      	b.n	8008a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a20:	f000 fbcc 	bl	80091bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a24:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <prvCheckTasksWaitingTermination+0x4c>)
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fcd3 	bl	80073dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a36:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <prvCheckTasksWaitingTermination+0x50>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4a0a      	ldr	r2, [pc, #40]	; (8008a68 <prvCheckTasksWaitingTermination+0x50>)
 8008a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a40:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3b01      	subs	r3, #1
 8008a46:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a4a:	f000 fbe5 	bl	8009218 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f80e 	bl	8008a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a54:	4b05      	ldr	r3, [pc, #20]	; (8008a6c <prvCheckTasksWaitingTermination+0x54>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e1      	bne.n	8008a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	200003ec 	.word	0x200003ec
 8008a68:	20000418 	.word	0x20000418
 8008a6c:	20000400 	.word	0x20000400

08008a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d108      	bne.n	8008a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fd74 	bl	8009574 <vPortFree>
				vPortFree( pxTCB );
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fd71 	bl	8009574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a92:	e017      	b.n	8008ac4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d103      	bne.n	8008aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fd68 	bl	8009574 <vPortFree>
	}
 8008aa4:	e00e      	b.n	8008ac4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d009      	beq.n	8008ac4 <prvDeleteTCB+0x54>
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	e7fe      	b.n	8008ac2 <prvDeleteTCB+0x52>
	}
 8008ac4:	bf00      	nop
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <prvResetNextTaskUnblockTime+0x38>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d104      	bne.n	8008ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <prvResetNextTaskUnblockTime+0x3c>)
 8008ade:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ae4:	e008      	b.n	8008af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae6:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <prvResetNextTaskUnblockTime+0x38>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	4a04      	ldr	r2, [pc, #16]	; (8008b08 <prvResetNextTaskUnblockTime+0x3c>)
 8008af6:	6013      	str	r3, [r2, #0]
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	200003d0 	.word	0x200003d0
 8008b08:	20000438 	.word	0x20000438

08008b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b12:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <xTaskGetSchedulerState+0x34>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d102      	bne.n	8008b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	607b      	str	r3, [r7, #4]
 8008b1e:	e008      	b.n	8008b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b20:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <xTaskGetSchedulerState+0x38>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	e001      	b.n	8008b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b32:	687b      	ldr	r3, [r7, #4]
	}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	20000424 	.word	0x20000424
 8008b44:	20000440 	.word	0x20000440

08008b48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d069      	beq.n	8008c32 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b62:	4b36      	ldr	r3, [pc, #216]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d259      	bcs.n	8008c20 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	db06      	blt.n	8008b82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b74:	4b31      	ldr	r3, [pc, #196]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7a:	f1c3 0207 	rsb	r2, r3, #7
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6959      	ldr	r1, [r3, #20]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4a2b      	ldr	r2, [pc, #172]	; (8008c40 <xTaskPriorityInherit+0xf8>)
 8008b94:	4413      	add	r3, r2
 8008b96:	4299      	cmp	r1, r3
 8008b98:	d13a      	bne.n	8008c10 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fc1c 	bl	80073dc <uxListRemove>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d115      	bne.n	8008bd6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	4924      	ldr	r1, [pc, #144]	; (8008c40 <xTaskPriorityInherit+0xf8>)
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <xTaskPriorityInherit+0x8e>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	43da      	mvns	r2, r3
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bd4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bd6:	4b19      	ldr	r3, [pc, #100]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	2201      	movs	r2, #1
 8008be6:	409a      	lsls	r2, r3
 8008be8:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	4a15      	ldr	r2, [pc, #84]	; (8008c44 <xTaskPriorityInherit+0xfc>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4a10      	ldr	r2, [pc, #64]	; (8008c40 <xTaskPriorityInherit+0xf8>)
 8008c00:	441a      	add	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4619      	mov	r1, r3
 8008c08:	4610      	mov	r0, r2
 8008c0a:	f7fe fb8a 	bl	8007322 <vListInsertEnd>
 8008c0e:	e004      	b.n	8008c1a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c10:	4b0a      	ldr	r3, [pc, #40]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e008      	b.n	8008c32 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c24:	4b05      	ldr	r3, [pc, #20]	; (8008c3c <xTaskPriorityInherit+0xf4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d201      	bcs.n	8008c32 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c32:	68fb      	ldr	r3, [r7, #12]
	}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20000318 	.word	0x20000318
 8008c40:	2000031c 	.word	0x2000031c
 8008c44:	20000420 	.word	0x20000420

08008c48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d06c      	beq.n	8008d38 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <xTaskPriorityDisinherit+0xfc>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d009      	beq.n	8008c7c <xTaskPriorityDisinherit+0x34>
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	e7fe      	b.n	8008c7a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d109      	bne.n	8008c98 <xTaskPriorityDisinherit+0x50>
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	60bb      	str	r3, [r7, #8]
 8008c96:	e7fe      	b.n	8008c96 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c9c:	1e5a      	subs	r2, r3, #1
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d044      	beq.n	8008d38 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d140      	bne.n	8008d38 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fe fb8e 	bl	80073dc <uxListRemove>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d115      	bne.n	8008cf2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cca:	491f      	ldr	r1, [pc, #124]	; (8008d48 <xTaskPriorityDisinherit+0x100>)
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <xTaskPriorityDisinherit+0xaa>
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce6:	43da      	mvns	r2, r3
 8008ce8:	4b18      	ldr	r3, [pc, #96]	; (8008d4c <xTaskPriorityDisinherit+0x104>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4013      	ands	r3, r2
 8008cee:	4a17      	ldr	r2, [pc, #92]	; (8008d4c <xTaskPriorityDisinherit+0x104>)
 8008cf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	f1c3 0207 	rsb	r2, r3, #7
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	409a      	lsls	r2, r3
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <xTaskPriorityDisinherit+0x104>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <xTaskPriorityDisinherit+0x104>)
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4a08      	ldr	r2, [pc, #32]	; (8008d48 <xTaskPriorityDisinherit+0x100>)
 8008d26:	441a      	add	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe faf7 	bl	8007322 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d38:	697b      	ldr	r3, [r7, #20]
	}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000318 	.word	0x20000318
 8008d48:	2000031c 	.word	0x2000031c
 8008d4c:	20000420 	.word	0x20000420

08008d50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8081 	beq.w	8008e6c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e7fe      	b.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d902      	bls.n	8008d96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e002      	b.n	8008d9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	69fa      	ldr	r2, [r7, #28]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d062      	beq.n	8008e6c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d15d      	bne.n	8008e6c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008db0:	4b30      	ldr	r3, [pc, #192]	; (8008e74 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d109      	bne.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	e7fe      	b.n	8008dcc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	db04      	blt.n	8008dec <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	f1c3 0207 	rsb	r2, r3, #7
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	6959      	ldr	r1, [r3, #20]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4613      	mov	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4a1f      	ldr	r2, [pc, #124]	; (8008e78 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008dfc:	4413      	add	r3, r2
 8008dfe:	4299      	cmp	r1, r3
 8008e00:	d134      	bne.n	8008e6c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fae8 	bl	80073dc <uxListRemove>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d115      	bne.n	8008e3e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	4918      	ldr	r1, [pc, #96]	; (8008e78 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	440b      	add	r3, r1
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10a      	bne.n	8008e3e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	43da      	mvns	r2, r3
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008e3c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	2201      	movs	r2, #1
 8008e44:	409a      	lsls	r2, r3
 8008e46:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	4a0b      	ldr	r2, [pc, #44]	; (8008e7c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4a06      	ldr	r2, [pc, #24]	; (8008e78 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8008e5e:	441a      	add	r2, r3
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	3304      	adds	r3, #4
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	f7fe fa5b 	bl	8007322 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e6c:	bf00      	nop
 8008e6e:	3720      	adds	r7, #32
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000318 	.word	0x20000318
 8008e78:	2000031c 	.word	0x2000031c
 8008e7c:	20000420 	.word	0x20000420

08008e80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e80:	b480      	push	{r7}
 8008e82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e84:	4b07      	ldr	r3, [pc, #28]	; (8008ea4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e8c:	4b05      	ldr	r3, [pc, #20]	; (8008ea4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e92:	3201      	adds	r2, #1
 8008e94:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008e96:	4b03      	ldr	r3, [pc, #12]	; (8008ea4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e98:	681b      	ldr	r3, [r3, #0]
	}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	20000318 	.word	0x20000318

08008ea8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eb2:	4b29      	ldr	r3, [pc, #164]	; (8008f58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eb8:	4b28      	ldr	r3, [pc, #160]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe fa8c 	bl	80073dc <uxListRemove>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10b      	bne.n	8008ee2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed6:	43da      	mvns	r2, r3
 8008ed8:	4b21      	ldr	r3, [pc, #132]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4013      	ands	r3, r2
 8008ede:	4a20      	ldr	r2, [pc, #128]	; (8008f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008ee0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee8:	d10a      	bne.n	8008f00 <prvAddCurrentTaskToDelayedList+0x58>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef0:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	481a      	ldr	r0, [pc, #104]	; (8008f64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008efa:	f7fe fa12 	bl	8007322 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008efe:	e026      	b.n	8008f4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4413      	add	r3, r2
 8008f06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f08:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d209      	bcs.n	8008f2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f18:	4b13      	ldr	r3, [pc, #76]	; (8008f68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3304      	adds	r3, #4
 8008f22:	4619      	mov	r1, r3
 8008f24:	4610      	mov	r0, r2
 8008f26:	f7fe fa20 	bl	800736a <vListInsert>
}
 8008f2a:	e010      	b.n	8008f4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fe fa16 	bl	800736a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	; (8008f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d202      	bcs.n	8008f4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f48:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	6013      	str	r3, [r2, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	2000041c 	.word	0x2000041c
 8008f5c:	20000318 	.word	0x20000318
 8008f60:	20000420 	.word	0x20000420
 8008f64:	20000404 	.word	0x20000404
 8008f68:	200003d4 	.word	0x200003d4
 8008f6c:	200003d0 	.word	0x200003d0
 8008f70:	20000438 	.word	0x20000438

08008f74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3b04      	subs	r3, #4
 8008f84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3b04      	subs	r3, #4
 8008f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f023 0201 	bic.w	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fa4:	4a0c      	ldr	r2, [pc, #48]	; (8008fd8 <pxPortInitialiseStack+0x64>)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3b14      	subs	r3, #20
 8008fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f06f 0202 	mvn.w	r2, #2
 8008fc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3b20      	subs	r3, #32
 8008fc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fca:	68fb      	ldr	r3, [r7, #12]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	08008fdd 	.word	0x08008fdd

08008fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fe6:	4b11      	ldr	r3, [pc, #68]	; (800902c <prvTaskExitError+0x50>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fee:	d009      	beq.n	8009004 <prvTaskExitError+0x28>
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e7fe      	b.n	8009002 <prvTaskExitError+0x26>
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009016:	bf00      	nop
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0fc      	beq.n	8009018 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	2000000c 	.word	0x2000000c

08009030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <pxCurrentTCBConst2>)
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	6808      	ldr	r0, [r1, #0]
 8009036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903a:	f380 8809 	msr	PSP, r0
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f04f 0000 	mov.w	r0, #0
 8009046:	f380 8811 	msr	BASEPRI, r0
 800904a:	4770      	bx	lr
 800904c:	f3af 8000 	nop.w

08009050 <pxCurrentTCBConst2>:
 8009050:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop

08009058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009058:	4808      	ldr	r0, [pc, #32]	; (800907c <prvPortStartFirstTask+0x24>)
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	6800      	ldr	r0, [r0, #0]
 800905e:	f380 8808 	msr	MSP, r0
 8009062:	f04f 0000 	mov.w	r0, #0
 8009066:	f380 8814 	msr	CONTROL, r0
 800906a:	b662      	cpsie	i
 800906c:	b661      	cpsie	f
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	df00      	svc	0
 8009078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800907a:	bf00      	nop
 800907c:	e000ed08 	.word	0xe000ed08

08009080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009086:	4b44      	ldr	r3, [pc, #272]	; (8009198 <xPortStartScheduler+0x118>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a44      	ldr	r2, [pc, #272]	; (800919c <xPortStartScheduler+0x11c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d109      	bne.n	80090a4 <xPortStartScheduler+0x24>
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	613b      	str	r3, [r7, #16]
 80090a2:	e7fe      	b.n	80090a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80090a4:	4b3c      	ldr	r3, [pc, #240]	; (8009198 <xPortStartScheduler+0x118>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a3d      	ldr	r2, [pc, #244]	; (80091a0 <xPortStartScheduler+0x120>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d109      	bne.n	80090c2 <xPortStartScheduler+0x42>
 80090ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e7fe      	b.n	80090c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090c2:	4b38      	ldr	r3, [pc, #224]	; (80091a4 <xPortStartScheduler+0x124>)
 80090c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	22ff      	movs	r2, #255	; 0xff
 80090d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	4b30      	ldr	r3, [pc, #192]	; (80091a8 <xPortStartScheduler+0x128>)
 80090e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090ea:	4b30      	ldr	r3, [pc, #192]	; (80091ac <xPortStartScheduler+0x12c>)
 80090ec:	2207      	movs	r2, #7
 80090ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090f0:	e009      	b.n	8009106 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80090f2:	4b2e      	ldr	r3, [pc, #184]	; (80091ac <xPortStartScheduler+0x12c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	4a2c      	ldr	r2, [pc, #176]	; (80091ac <xPortStartScheduler+0x12c>)
 80090fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	b2db      	uxtb	r3, r3
 8009104:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009106:	78fb      	ldrb	r3, [r7, #3]
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800910e:	2b80      	cmp	r3, #128	; 0x80
 8009110:	d0ef      	beq.n	80090f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009112:	4b26      	ldr	r3, [pc, #152]	; (80091ac <xPortStartScheduler+0x12c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f1c3 0307 	rsb	r3, r3, #7
 800911a:	2b04      	cmp	r3, #4
 800911c:	d009      	beq.n	8009132 <xPortStartScheduler+0xb2>
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60bb      	str	r3, [r7, #8]
 8009130:	e7fe      	b.n	8009130 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009132:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <xPortStartScheduler+0x12c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	4a1c      	ldr	r2, [pc, #112]	; (80091ac <xPortStartScheduler+0x12c>)
 800913a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <xPortStartScheduler+0x12c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009144:	4a19      	ldr	r2, [pc, #100]	; (80091ac <xPortStartScheduler+0x12c>)
 8009146:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	b2da      	uxtb	r2, r3
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009150:	4b17      	ldr	r3, [pc, #92]	; (80091b0 <xPortStartScheduler+0x130>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a16      	ldr	r2, [pc, #88]	; (80091b0 <xPortStartScheduler+0x130>)
 8009156:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800915a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800915c:	4b14      	ldr	r3, [pc, #80]	; (80091b0 <xPortStartScheduler+0x130>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a13      	ldr	r2, [pc, #76]	; (80091b0 <xPortStartScheduler+0x130>)
 8009162:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009166:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009168:	f000 f8d6 	bl	8009318 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800916c:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <xPortStartScheduler+0x134>)
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009172:	f000 f8f5 	bl	8009360 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <xPortStartScheduler+0x138>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a0f      	ldr	r2, [pc, #60]	; (80091b8 <xPortStartScheduler+0x138>)
 800917c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009180:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009182:	f7ff ff69 	bl	8009058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009186:	f7ff fa8d 	bl	80086a4 <vTaskSwitchContext>
	prvTaskExitError();
 800918a:	f7ff ff27 	bl	8008fdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	e000ed00 	.word	0xe000ed00
 800919c:	410fc271 	.word	0x410fc271
 80091a0:	410fc270 	.word	0x410fc270
 80091a4:	e000e400 	.word	0xe000e400
 80091a8:	20000444 	.word	0x20000444
 80091ac:	20000448 	.word	0x20000448
 80091b0:	e000ed20 	.word	0xe000ed20
 80091b4:	2000000c 	.word	0x2000000c
 80091b8:	e000ef34 	.word	0xe000ef34

080091bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091d4:	4b0e      	ldr	r3, [pc, #56]	; (8009210 <vPortEnterCritical+0x54>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	4a0d      	ldr	r2, [pc, #52]	; (8009210 <vPortEnterCritical+0x54>)
 80091dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091de:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <vPortEnterCritical+0x54>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d10e      	bne.n	8009204 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <vPortEnterCritical+0x58>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d009      	beq.n	8009204 <vPortEnterCritical+0x48>
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	603b      	str	r3, [r7, #0]
 8009202:	e7fe      	b.n	8009202 <vPortEnterCritical+0x46>
	}
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	2000000c 	.word	0x2000000c
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800921e:	4b11      	ldr	r3, [pc, #68]	; (8009264 <vPortExitCritical+0x4c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <vPortExitCritical+0x22>
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	607b      	str	r3, [r7, #4]
 8009238:	e7fe      	b.n	8009238 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800923a:	4b0a      	ldr	r3, [pc, #40]	; (8009264 <vPortExitCritical+0x4c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3b01      	subs	r3, #1
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <vPortExitCritical+0x4c>)
 8009242:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009244:	4b07      	ldr	r3, [pc, #28]	; (8009264 <vPortExitCritical+0x4c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d104      	bne.n	8009256 <vPortExitCritical+0x3e>
 800924c:	2300      	movs	r3, #0
 800924e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009256:	bf00      	nop
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	2000000c 	.word	0x2000000c
	...

08009270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009270:	f3ef 8009 	mrs	r0, PSP
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <pxCurrentTCBConst>)
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	f01e 0f10 	tst.w	lr, #16
 8009280:	bf08      	it	eq
 8009282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	6010      	str	r0, [r2, #0]
 800928c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009294:	f380 8811 	msr	BASEPRI, r0
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f7ff fa00 	bl	80086a4 <vTaskSwitchContext>
 80092a4:	f04f 0000 	mov.w	r0, #0
 80092a8:	f380 8811 	msr	BASEPRI, r0
 80092ac:	bc09      	pop	{r0, r3}
 80092ae:	6819      	ldr	r1, [r3, #0]
 80092b0:	6808      	ldr	r0, [r1, #0]
 80092b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b6:	f01e 0f10 	tst.w	lr, #16
 80092ba:	bf08      	it	eq
 80092bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80092c0:	f380 8809 	msr	PSP, r0
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	f3af 8000 	nop.w

080092d0 <pxCurrentTCBConst>:
 80092d0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop

080092d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80092f0:	f7ff f920 	bl	8008534 <xTaskIncrementTick>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <SysTick_Handler+0x3c>)
 80092fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	e000ed04 	.word	0xe000ed04

08009318 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800931c:	4b0b      	ldr	r3, [pc, #44]	; (800934c <vPortSetupTimerInterrupt+0x34>)
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009322:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <vPortSetupTimerInterrupt+0x38>)
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009328:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <vPortSetupTimerInterrupt+0x3c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a0a      	ldr	r2, [pc, #40]	; (8009358 <vPortSetupTimerInterrupt+0x40>)
 800932e:	fba2 2303 	umull	r2, r3, r2, r3
 8009332:	099b      	lsrs	r3, r3, #6
 8009334:	4a09      	ldr	r2, [pc, #36]	; (800935c <vPortSetupTimerInterrupt+0x44>)
 8009336:	3b01      	subs	r3, #1
 8009338:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800933a:	4b04      	ldr	r3, [pc, #16]	; (800934c <vPortSetupTimerInterrupt+0x34>)
 800933c:	2207      	movs	r2, #7
 800933e:	601a      	str	r2, [r3, #0]
}
 8009340:	bf00      	nop
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	e000e010 	.word	0xe000e010
 8009350:	e000e018 	.word	0xe000e018
 8009354:	20000000 	.word	0x20000000
 8009358:	10624dd3 	.word	0x10624dd3
 800935c:	e000e014 	.word	0xe000e014

08009360 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009360:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009370 <vPortEnableVFP+0x10>
 8009364:	6801      	ldr	r1, [r0, #0]
 8009366:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800936a:	6001      	str	r1, [r0, #0]
 800936c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800936e:	bf00      	nop
 8009370:	e000ed88 	.word	0xe000ed88

08009374 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800937a:	f3ef 8305 	mrs	r3, IPSR
 800937e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b0f      	cmp	r3, #15
 8009384:	d913      	bls.n	80093ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009386:	4a16      	ldr	r2, [pc, #88]	; (80093e0 <vPortValidateInterruptPriority+0x6c>)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	4413      	add	r3, r2
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009390:	4b14      	ldr	r3, [pc, #80]	; (80093e4 <vPortValidateInterruptPriority+0x70>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	7afa      	ldrb	r2, [r7, #11]
 8009396:	429a      	cmp	r2, r3
 8009398:	d209      	bcs.n	80093ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e7fe      	b.n	80093ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093ae:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <vPortValidateInterruptPriority+0x74>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093b6:	4b0d      	ldr	r3, [pc, #52]	; (80093ec <vPortValidateInterruptPriority+0x78>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d909      	bls.n	80093d2 <vPortValidateInterruptPriority+0x5e>
 80093be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	e7fe      	b.n	80093d0 <vPortValidateInterruptPriority+0x5c>
	}
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	e000e3f0 	.word	0xe000e3f0
 80093e4:	20000444 	.word	0x20000444
 80093e8:	e000ed0c 	.word	0xe000ed0c
 80093ec:	20000448 	.word	0x20000448

080093f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	; 0x28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80093fc:	f7fe fff0 	bl	80083e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009400:	4b57      	ldr	r3, [pc, #348]	; (8009560 <pvPortMalloc+0x170>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009408:	f000 f90c 	bl	8009624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800940c:	4b55      	ldr	r3, [pc, #340]	; (8009564 <pvPortMalloc+0x174>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4013      	ands	r3, r2
 8009414:	2b00      	cmp	r3, #0
 8009416:	f040 808c 	bne.w	8009532 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01c      	beq.n	800945a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009420:	2208      	movs	r2, #8
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4413      	add	r3, r2
 8009426:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f003 0307 	and.w	r3, r3, #7
 800942e:	2b00      	cmp	r3, #0
 8009430:	d013      	beq.n	800945a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f023 0307 	bic.w	r3, r3, #7
 8009438:	3308      	adds	r3, #8
 800943a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <pvPortMalloc+0x6a>
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e7fe      	b.n	8009458 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d068      	beq.n	8009532 <pvPortMalloc+0x142>
 8009460:	4b41      	ldr	r3, [pc, #260]	; (8009568 <pvPortMalloc+0x178>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d863      	bhi.n	8009532 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800946a:	4b40      	ldr	r3, [pc, #256]	; (800956c <pvPortMalloc+0x17c>)
 800946c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800946e:	4b3f      	ldr	r3, [pc, #252]	; (800956c <pvPortMalloc+0x17c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009474:	e004      	b.n	8009480 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	429a      	cmp	r2, r3
 8009488:	d903      	bls.n	8009492 <pvPortMalloc+0xa2>
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f1      	bne.n	8009476 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009492:	4b33      	ldr	r3, [pc, #204]	; (8009560 <pvPortMalloc+0x170>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009498:	429a      	cmp	r2, r3
 800949a:	d04a      	beq.n	8009532 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2208      	movs	r2, #8
 80094a2:	4413      	add	r3, r2
 80094a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	1ad2      	subs	r2, r2, r3
 80094b6:	2308      	movs	r3, #8
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d91e      	bls.n	80094fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4413      	add	r3, r2
 80094c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f003 0307 	and.w	r3, r3, #7
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d009      	beq.n	80094e4 <pvPortMalloc+0xf4>
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	613b      	str	r3, [r7, #16]
 80094e2:	e7fe      	b.n	80094e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	1ad2      	subs	r2, r2, r3
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094f6:	69b8      	ldr	r0, [r7, #24]
 80094f8:	f000 f8f6 	bl	80096e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094fc:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <pvPortMalloc+0x178>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	4a18      	ldr	r2, [pc, #96]	; (8009568 <pvPortMalloc+0x178>)
 8009508:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800950a:	4b17      	ldr	r3, [pc, #92]	; (8009568 <pvPortMalloc+0x178>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4b18      	ldr	r3, [pc, #96]	; (8009570 <pvPortMalloc+0x180>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	429a      	cmp	r2, r3
 8009514:	d203      	bcs.n	800951e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <pvPortMalloc+0x178>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a15      	ldr	r2, [pc, #84]	; (8009570 <pvPortMalloc+0x180>)
 800951c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	4b10      	ldr	r3, [pc, #64]	; (8009564 <pvPortMalloc+0x174>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	431a      	orrs	r2, r3
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009532:	f7fe ff63 	bl	80083fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <pvPortMalloc+0x164>
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e7fe      	b.n	8009552 <pvPortMalloc+0x162>
	return pvReturn;
 8009554:	69fb      	ldr	r3, [r7, #28]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3728      	adds	r7, #40	; 0x28
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001bc4 	.word	0x20001bc4
 8009564:	20001bd0 	.word	0x20001bd0
 8009568:	20001bc8 	.word	0x20001bc8
 800956c:	20001bbc 	.word	0x20001bbc
 8009570:	20001bcc 	.word	0x20001bcc

08009574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d046      	beq.n	8009614 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009586:	2308      	movs	r3, #8
 8009588:	425b      	negs	r3, r3
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4413      	add	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	4b20      	ldr	r3, [pc, #128]	; (800961c <vPortFree+0xa8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4013      	ands	r3, r2
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d109      	bne.n	80095b6 <vPortFree+0x42>
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e7fe      	b.n	80095b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d009      	beq.n	80095d2 <vPortFree+0x5e>
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	60bb      	str	r3, [r7, #8]
 80095d0:	e7fe      	b.n	80095d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	4b11      	ldr	r3, [pc, #68]	; (800961c <vPortFree+0xa8>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4013      	ands	r3, r2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d019      	beq.n	8009614 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d115      	bne.n	8009614 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	4b0b      	ldr	r3, [pc, #44]	; (800961c <vPortFree+0xa8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	43db      	mvns	r3, r3
 80095f2:	401a      	ands	r2, r3
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80095f8:	f7fe fef2 	bl	80083e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	685a      	ldr	r2, [r3, #4]
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <vPortFree+0xac>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4413      	add	r3, r2
 8009606:	4a06      	ldr	r2, [pc, #24]	; (8009620 <vPortFree+0xac>)
 8009608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800960a:	6938      	ldr	r0, [r7, #16]
 800960c:	f000 f86c 	bl	80096e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009610:	f7fe fef4 	bl	80083fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009614:	bf00      	nop
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	20001bd0 	.word	0x20001bd0
 8009620:	20001bc8 	.word	0x20001bc8

08009624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800962a:	f241 7370 	movw	r3, #6000	; 0x1770
 800962e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009630:	4b27      	ldr	r3, [pc, #156]	; (80096d0 <prvHeapInit+0xac>)
 8009632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00c      	beq.n	8009658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3307      	adds	r3, #7
 8009642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0307 	bic.w	r3, r3, #7
 800964a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	4a1f      	ldr	r2, [pc, #124]	; (80096d0 <prvHeapInit+0xac>)
 8009654:	4413      	add	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800965c:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <prvHeapInit+0xb0>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009662:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <prvHeapInit+0xb0>)
 8009664:	2200      	movs	r2, #0
 8009666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	4413      	add	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009670:	2208      	movs	r2, #8
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0307 	bic.w	r3, r3, #7
 800967e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	4a15      	ldr	r2, [pc, #84]	; (80096d8 <prvHeapInit+0xb4>)
 8009684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009686:	4b14      	ldr	r3, [pc, #80]	; (80096d8 <prvHeapInit+0xb4>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2200      	movs	r2, #0
 800968c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800968e:	4b12      	ldr	r3, [pc, #72]	; (80096d8 <prvHeapInit+0xb4>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80096a4:	4b0c      	ldr	r3, [pc, #48]	; (80096d8 <prvHeapInit+0xb4>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <prvHeapInit+0xb8>)
 80096b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4a09      	ldr	r2, [pc, #36]	; (80096e0 <prvHeapInit+0xbc>)
 80096ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80096bc:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <prvHeapInit+0xc0>)
 80096be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80096c2:	601a      	str	r2, [r3, #0]
}
 80096c4:	bf00      	nop
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	2000044c 	.word	0x2000044c
 80096d4:	20001bbc 	.word	0x20001bbc
 80096d8:	20001bc4 	.word	0x20001bc4
 80096dc:	20001bcc 	.word	0x20001bcc
 80096e0:	20001bc8 	.word	0x20001bc8
 80096e4:	20001bd0 	.word	0x20001bd0

080096e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80096f0:	4b28      	ldr	r3, [pc, #160]	; (8009794 <prvInsertBlockIntoFreeList+0xac>)
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	e002      	b.n	80096fc <prvInsertBlockIntoFreeList+0x14>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	429a      	cmp	r2, r3
 8009704:	d8f7      	bhi.n	80096f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	4413      	add	r3, r2
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	429a      	cmp	r2, r3
 8009716:	d108      	bne.n	800972a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	441a      	add	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	441a      	add	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d118      	bne.n	8009770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <prvInsertBlockIntoFreeList+0xb0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d00d      	beq.n	8009766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	441a      	add	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	e008      	b.n	8009778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009766:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <prvInsertBlockIntoFreeList+0xb0>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	e003      	b.n	8009778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d002      	beq.n	8009786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20001bbc 	.word	0x20001bbc
 8009798:	20001bc4 	.word	0x20001bc4

0800979c <__errno>:
 800979c:	4b01      	ldr	r3, [pc, #4]	; (80097a4 <__errno+0x8>)
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000010 	.word	0x20000010

080097a8 <__libc_init_array>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	4e0d      	ldr	r6, [pc, #52]	; (80097e0 <__libc_init_array+0x38>)
 80097ac:	4c0d      	ldr	r4, [pc, #52]	; (80097e4 <__libc_init_array+0x3c>)
 80097ae:	1ba4      	subs	r4, r4, r6
 80097b0:	10a4      	asrs	r4, r4, #2
 80097b2:	2500      	movs	r5, #0
 80097b4:	42a5      	cmp	r5, r4
 80097b6:	d109      	bne.n	80097cc <__libc_init_array+0x24>
 80097b8:	4e0b      	ldr	r6, [pc, #44]	; (80097e8 <__libc_init_array+0x40>)
 80097ba:	4c0c      	ldr	r4, [pc, #48]	; (80097ec <__libc_init_array+0x44>)
 80097bc:	f000 fc28 	bl	800a010 <_init>
 80097c0:	1ba4      	subs	r4, r4, r6
 80097c2:	10a4      	asrs	r4, r4, #2
 80097c4:	2500      	movs	r5, #0
 80097c6:	42a5      	cmp	r5, r4
 80097c8:	d105      	bne.n	80097d6 <__libc_init_array+0x2e>
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097d0:	4798      	blx	r3
 80097d2:	3501      	adds	r5, #1
 80097d4:	e7ee      	b.n	80097b4 <__libc_init_array+0xc>
 80097d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097da:	4798      	blx	r3
 80097dc:	3501      	adds	r5, #1
 80097de:	e7f2      	b.n	80097c6 <__libc_init_array+0x1e>
 80097e0:	0800a220 	.word	0x0800a220
 80097e4:	0800a220 	.word	0x0800a220
 80097e8:	0800a220 	.word	0x0800a220
 80097ec:	0800a224 	.word	0x0800a224

080097f0 <memcpy>:
 80097f0:	b510      	push	{r4, lr}
 80097f2:	1e43      	subs	r3, r0, #1
 80097f4:	440a      	add	r2, r1
 80097f6:	4291      	cmp	r1, r2
 80097f8:	d100      	bne.n	80097fc <memcpy+0xc>
 80097fa:	bd10      	pop	{r4, pc}
 80097fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009800:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009804:	e7f7      	b.n	80097f6 <memcpy+0x6>

08009806 <memset>:
 8009806:	4402      	add	r2, r0
 8009808:	4603      	mov	r3, r0
 800980a:	4293      	cmp	r3, r2
 800980c:	d100      	bne.n	8009810 <memset+0xa>
 800980e:	4770      	bx	lr
 8009810:	f803 1b01 	strb.w	r1, [r3], #1
 8009814:	e7f9      	b.n	800980a <memset+0x4>
	...

08009818 <siprintf>:
 8009818:	b40e      	push	{r1, r2, r3}
 800981a:	b500      	push	{lr}
 800981c:	b09c      	sub	sp, #112	; 0x70
 800981e:	ab1d      	add	r3, sp, #116	; 0x74
 8009820:	9002      	str	r0, [sp, #8]
 8009822:	9006      	str	r0, [sp, #24]
 8009824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <siprintf+0x38>)
 800982a:	9107      	str	r1, [sp, #28]
 800982c:	9104      	str	r1, [sp, #16]
 800982e:	4909      	ldr	r1, [pc, #36]	; (8009854 <siprintf+0x3c>)
 8009830:	f853 2b04 	ldr.w	r2, [r3], #4
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	6800      	ldr	r0, [r0, #0]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	a902      	add	r1, sp, #8
 800983c:	f000 f866 	bl	800990c <_svfiprintf_r>
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	b01c      	add	sp, #112	; 0x70
 8009848:	f85d eb04 	ldr.w	lr, [sp], #4
 800984c:	b003      	add	sp, #12
 800984e:	4770      	bx	lr
 8009850:	20000010 	.word	0x20000010
 8009854:	ffff0208 	.word	0xffff0208

08009858 <__ssputs_r>:
 8009858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800985c:	688e      	ldr	r6, [r1, #8]
 800985e:	429e      	cmp	r6, r3
 8009860:	4682      	mov	sl, r0
 8009862:	460c      	mov	r4, r1
 8009864:	4690      	mov	r8, r2
 8009866:	4699      	mov	r9, r3
 8009868:	d837      	bhi.n	80098da <__ssputs_r+0x82>
 800986a:	898a      	ldrh	r2, [r1, #12]
 800986c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009870:	d031      	beq.n	80098d6 <__ssputs_r+0x7e>
 8009872:	6825      	ldr	r5, [r4, #0]
 8009874:	6909      	ldr	r1, [r1, #16]
 8009876:	1a6f      	subs	r7, r5, r1
 8009878:	6965      	ldr	r5, [r4, #20]
 800987a:	2302      	movs	r3, #2
 800987c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009880:	fb95 f5f3 	sdiv	r5, r5, r3
 8009884:	f109 0301 	add.w	r3, r9, #1
 8009888:	443b      	add	r3, r7
 800988a:	429d      	cmp	r5, r3
 800988c:	bf38      	it	cc
 800988e:	461d      	movcc	r5, r3
 8009890:	0553      	lsls	r3, r2, #21
 8009892:	d530      	bpl.n	80098f6 <__ssputs_r+0x9e>
 8009894:	4629      	mov	r1, r5
 8009896:	f000 fb21 	bl	8009edc <_malloc_r>
 800989a:	4606      	mov	r6, r0
 800989c:	b950      	cbnz	r0, 80098b4 <__ssputs_r+0x5c>
 800989e:	230c      	movs	r3, #12
 80098a0:	f8ca 3000 	str.w	r3, [sl]
 80098a4:	89a3      	ldrh	r3, [r4, #12]
 80098a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	f04f 30ff 	mov.w	r0, #4294967295
 80098b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b4:	463a      	mov	r2, r7
 80098b6:	6921      	ldr	r1, [r4, #16]
 80098b8:	f7ff ff9a 	bl	80097f0 <memcpy>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	6126      	str	r6, [r4, #16]
 80098ca:	6165      	str	r5, [r4, #20]
 80098cc:	443e      	add	r6, r7
 80098ce:	1bed      	subs	r5, r5, r7
 80098d0:	6026      	str	r6, [r4, #0]
 80098d2:	60a5      	str	r5, [r4, #8]
 80098d4:	464e      	mov	r6, r9
 80098d6:	454e      	cmp	r6, r9
 80098d8:	d900      	bls.n	80098dc <__ssputs_r+0x84>
 80098da:	464e      	mov	r6, r9
 80098dc:	4632      	mov	r2, r6
 80098de:	4641      	mov	r1, r8
 80098e0:	6820      	ldr	r0, [r4, #0]
 80098e2:	f000 fa93 	bl	8009e0c <memmove>
 80098e6:	68a3      	ldr	r3, [r4, #8]
 80098e8:	1b9b      	subs	r3, r3, r6
 80098ea:	60a3      	str	r3, [r4, #8]
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	441e      	add	r6, r3
 80098f0:	6026      	str	r6, [r4, #0]
 80098f2:	2000      	movs	r0, #0
 80098f4:	e7dc      	b.n	80098b0 <__ssputs_r+0x58>
 80098f6:	462a      	mov	r2, r5
 80098f8:	f000 fb4a 	bl	8009f90 <_realloc_r>
 80098fc:	4606      	mov	r6, r0
 80098fe:	2800      	cmp	r0, #0
 8009900:	d1e2      	bne.n	80098c8 <__ssputs_r+0x70>
 8009902:	6921      	ldr	r1, [r4, #16]
 8009904:	4650      	mov	r0, sl
 8009906:	f000 fa9b 	bl	8009e40 <_free_r>
 800990a:	e7c8      	b.n	800989e <__ssputs_r+0x46>

0800990c <_svfiprintf_r>:
 800990c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009910:	461d      	mov	r5, r3
 8009912:	898b      	ldrh	r3, [r1, #12]
 8009914:	061f      	lsls	r7, r3, #24
 8009916:	b09d      	sub	sp, #116	; 0x74
 8009918:	4680      	mov	r8, r0
 800991a:	460c      	mov	r4, r1
 800991c:	4616      	mov	r6, r2
 800991e:	d50f      	bpl.n	8009940 <_svfiprintf_r+0x34>
 8009920:	690b      	ldr	r3, [r1, #16]
 8009922:	b96b      	cbnz	r3, 8009940 <_svfiprintf_r+0x34>
 8009924:	2140      	movs	r1, #64	; 0x40
 8009926:	f000 fad9 	bl	8009edc <_malloc_r>
 800992a:	6020      	str	r0, [r4, #0]
 800992c:	6120      	str	r0, [r4, #16]
 800992e:	b928      	cbnz	r0, 800993c <_svfiprintf_r+0x30>
 8009930:	230c      	movs	r3, #12
 8009932:	f8c8 3000 	str.w	r3, [r8]
 8009936:	f04f 30ff 	mov.w	r0, #4294967295
 800993a:	e0c8      	b.n	8009ace <_svfiprintf_r+0x1c2>
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	6163      	str	r3, [r4, #20]
 8009940:	2300      	movs	r3, #0
 8009942:	9309      	str	r3, [sp, #36]	; 0x24
 8009944:	2320      	movs	r3, #32
 8009946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800994a:	2330      	movs	r3, #48	; 0x30
 800994c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009950:	9503      	str	r5, [sp, #12]
 8009952:	f04f 0b01 	mov.w	fp, #1
 8009956:	4637      	mov	r7, r6
 8009958:	463d      	mov	r5, r7
 800995a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800995e:	b10b      	cbz	r3, 8009964 <_svfiprintf_r+0x58>
 8009960:	2b25      	cmp	r3, #37	; 0x25
 8009962:	d13e      	bne.n	80099e2 <_svfiprintf_r+0xd6>
 8009964:	ebb7 0a06 	subs.w	sl, r7, r6
 8009968:	d00b      	beq.n	8009982 <_svfiprintf_r+0x76>
 800996a:	4653      	mov	r3, sl
 800996c:	4632      	mov	r2, r6
 800996e:	4621      	mov	r1, r4
 8009970:	4640      	mov	r0, r8
 8009972:	f7ff ff71 	bl	8009858 <__ssputs_r>
 8009976:	3001      	adds	r0, #1
 8009978:	f000 80a4 	beq.w	8009ac4 <_svfiprintf_r+0x1b8>
 800997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800997e:	4453      	add	r3, sl
 8009980:	9309      	str	r3, [sp, #36]	; 0x24
 8009982:	783b      	ldrb	r3, [r7, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 809d 	beq.w	8009ac4 <_svfiprintf_r+0x1b8>
 800998a:	2300      	movs	r3, #0
 800998c:	f04f 32ff 	mov.w	r2, #4294967295
 8009990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	9307      	str	r3, [sp, #28]
 8009998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800999c:	931a      	str	r3, [sp, #104]	; 0x68
 800999e:	462f      	mov	r7, r5
 80099a0:	2205      	movs	r2, #5
 80099a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099a6:	4850      	ldr	r0, [pc, #320]	; (8009ae8 <_svfiprintf_r+0x1dc>)
 80099a8:	f7f6 fc1a 	bl	80001e0 <memchr>
 80099ac:	9b04      	ldr	r3, [sp, #16]
 80099ae:	b9d0      	cbnz	r0, 80099e6 <_svfiprintf_r+0xda>
 80099b0:	06d9      	lsls	r1, r3, #27
 80099b2:	bf44      	itt	mi
 80099b4:	2220      	movmi	r2, #32
 80099b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099ba:	071a      	lsls	r2, r3, #28
 80099bc:	bf44      	itt	mi
 80099be:	222b      	movmi	r2, #43	; 0x2b
 80099c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099c4:	782a      	ldrb	r2, [r5, #0]
 80099c6:	2a2a      	cmp	r2, #42	; 0x2a
 80099c8:	d015      	beq.n	80099f6 <_svfiprintf_r+0xea>
 80099ca:	9a07      	ldr	r2, [sp, #28]
 80099cc:	462f      	mov	r7, r5
 80099ce:	2000      	movs	r0, #0
 80099d0:	250a      	movs	r5, #10
 80099d2:	4639      	mov	r1, r7
 80099d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099d8:	3b30      	subs	r3, #48	; 0x30
 80099da:	2b09      	cmp	r3, #9
 80099dc:	d94d      	bls.n	8009a7a <_svfiprintf_r+0x16e>
 80099de:	b1b8      	cbz	r0, 8009a10 <_svfiprintf_r+0x104>
 80099e0:	e00f      	b.n	8009a02 <_svfiprintf_r+0xf6>
 80099e2:	462f      	mov	r7, r5
 80099e4:	e7b8      	b.n	8009958 <_svfiprintf_r+0x4c>
 80099e6:	4a40      	ldr	r2, [pc, #256]	; (8009ae8 <_svfiprintf_r+0x1dc>)
 80099e8:	1a80      	subs	r0, r0, r2
 80099ea:	fa0b f000 	lsl.w	r0, fp, r0
 80099ee:	4318      	orrs	r0, r3
 80099f0:	9004      	str	r0, [sp, #16]
 80099f2:	463d      	mov	r5, r7
 80099f4:	e7d3      	b.n	800999e <_svfiprintf_r+0x92>
 80099f6:	9a03      	ldr	r2, [sp, #12]
 80099f8:	1d11      	adds	r1, r2, #4
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	9103      	str	r1, [sp, #12]
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	db01      	blt.n	8009a06 <_svfiprintf_r+0xfa>
 8009a02:	9207      	str	r2, [sp, #28]
 8009a04:	e004      	b.n	8009a10 <_svfiprintf_r+0x104>
 8009a06:	4252      	negs	r2, r2
 8009a08:	f043 0302 	orr.w	r3, r3, #2
 8009a0c:	9207      	str	r2, [sp, #28]
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	783b      	ldrb	r3, [r7, #0]
 8009a12:	2b2e      	cmp	r3, #46	; 0x2e
 8009a14:	d10c      	bne.n	8009a30 <_svfiprintf_r+0x124>
 8009a16:	787b      	ldrb	r3, [r7, #1]
 8009a18:	2b2a      	cmp	r3, #42	; 0x2a
 8009a1a:	d133      	bne.n	8009a84 <_svfiprintf_r+0x178>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	1d1a      	adds	r2, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	9203      	str	r2, [sp, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfb8      	it	lt
 8009a28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a2c:	3702      	adds	r7, #2
 8009a2e:	9305      	str	r3, [sp, #20]
 8009a30:	4d2e      	ldr	r5, [pc, #184]	; (8009aec <_svfiprintf_r+0x1e0>)
 8009a32:	7839      	ldrb	r1, [r7, #0]
 8009a34:	2203      	movs	r2, #3
 8009a36:	4628      	mov	r0, r5
 8009a38:	f7f6 fbd2 	bl	80001e0 <memchr>
 8009a3c:	b138      	cbz	r0, 8009a4e <_svfiprintf_r+0x142>
 8009a3e:	2340      	movs	r3, #64	; 0x40
 8009a40:	1b40      	subs	r0, r0, r5
 8009a42:	fa03 f000 	lsl.w	r0, r3, r0
 8009a46:	9b04      	ldr	r3, [sp, #16]
 8009a48:	4303      	orrs	r3, r0
 8009a4a:	3701      	adds	r7, #1
 8009a4c:	9304      	str	r3, [sp, #16]
 8009a4e:	7839      	ldrb	r1, [r7, #0]
 8009a50:	4827      	ldr	r0, [pc, #156]	; (8009af0 <_svfiprintf_r+0x1e4>)
 8009a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a56:	2206      	movs	r2, #6
 8009a58:	1c7e      	adds	r6, r7, #1
 8009a5a:	f7f6 fbc1 	bl	80001e0 <memchr>
 8009a5e:	2800      	cmp	r0, #0
 8009a60:	d038      	beq.n	8009ad4 <_svfiprintf_r+0x1c8>
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <_svfiprintf_r+0x1e8>)
 8009a64:	bb13      	cbnz	r3, 8009aac <_svfiprintf_r+0x1a0>
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	3307      	adds	r3, #7
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	3308      	adds	r3, #8
 8009a70:	9303      	str	r3, [sp, #12]
 8009a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a74:	444b      	add	r3, r9
 8009a76:	9309      	str	r3, [sp, #36]	; 0x24
 8009a78:	e76d      	b.n	8009956 <_svfiprintf_r+0x4a>
 8009a7a:	fb05 3202 	mla	r2, r5, r2, r3
 8009a7e:	2001      	movs	r0, #1
 8009a80:	460f      	mov	r7, r1
 8009a82:	e7a6      	b.n	80099d2 <_svfiprintf_r+0xc6>
 8009a84:	2300      	movs	r3, #0
 8009a86:	3701      	adds	r7, #1
 8009a88:	9305      	str	r3, [sp, #20]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	250a      	movs	r5, #10
 8009a8e:	4638      	mov	r0, r7
 8009a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a94:	3a30      	subs	r2, #48	; 0x30
 8009a96:	2a09      	cmp	r2, #9
 8009a98:	d903      	bls.n	8009aa2 <_svfiprintf_r+0x196>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0c8      	beq.n	8009a30 <_svfiprintf_r+0x124>
 8009a9e:	9105      	str	r1, [sp, #20]
 8009aa0:	e7c6      	b.n	8009a30 <_svfiprintf_r+0x124>
 8009aa2:	fb05 2101 	mla	r1, r5, r1, r2
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	e7f0      	b.n	8009a8e <_svfiprintf_r+0x182>
 8009aac:	ab03      	add	r3, sp, #12
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4b11      	ldr	r3, [pc, #68]	; (8009af8 <_svfiprintf_r+0x1ec>)
 8009ab4:	a904      	add	r1, sp, #16
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	f3af 8000 	nop.w
 8009abc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ac0:	4681      	mov	r9, r0
 8009ac2:	d1d6      	bne.n	8009a72 <_svfiprintf_r+0x166>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	065b      	lsls	r3, r3, #25
 8009ac8:	f53f af35 	bmi.w	8009936 <_svfiprintf_r+0x2a>
 8009acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ace:	b01d      	add	sp, #116	; 0x74
 8009ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad4:	ab03      	add	r3, sp, #12
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <_svfiprintf_r+0x1ec>)
 8009adc:	a904      	add	r1, sp, #16
 8009ade:	4640      	mov	r0, r8
 8009ae0:	f000 f882 	bl	8009be8 <_printf_i>
 8009ae4:	e7ea      	b.n	8009abc <_svfiprintf_r+0x1b0>
 8009ae6:	bf00      	nop
 8009ae8:	0800a1e4 	.word	0x0800a1e4
 8009aec:	0800a1ea 	.word	0x0800a1ea
 8009af0:	0800a1ee 	.word	0x0800a1ee
 8009af4:	00000000 	.word	0x00000000
 8009af8:	08009859 	.word	0x08009859

08009afc <_printf_common>:
 8009afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b00:	4691      	mov	r9, r2
 8009b02:	461f      	mov	r7, r3
 8009b04:	688a      	ldr	r2, [r1, #8]
 8009b06:	690b      	ldr	r3, [r1, #16]
 8009b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	bfb8      	it	lt
 8009b10:	4613      	movlt	r3, r2
 8009b12:	f8c9 3000 	str.w	r3, [r9]
 8009b16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	b112      	cbz	r2, 8009b26 <_printf_common+0x2a>
 8009b20:	3301      	adds	r3, #1
 8009b22:	f8c9 3000 	str.w	r3, [r9]
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	0699      	lsls	r1, r3, #26
 8009b2a:	bf42      	ittt	mi
 8009b2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b30:	3302      	addmi	r3, #2
 8009b32:	f8c9 3000 	strmi.w	r3, [r9]
 8009b36:	6825      	ldr	r5, [r4, #0]
 8009b38:	f015 0506 	ands.w	r5, r5, #6
 8009b3c:	d107      	bne.n	8009b4e <_printf_common+0x52>
 8009b3e:	f104 0a19 	add.w	sl, r4, #25
 8009b42:	68e3      	ldr	r3, [r4, #12]
 8009b44:	f8d9 2000 	ldr.w	r2, [r9]
 8009b48:	1a9b      	subs	r3, r3, r2
 8009b4a:	42ab      	cmp	r3, r5
 8009b4c:	dc28      	bgt.n	8009ba0 <_printf_common+0xa4>
 8009b4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b52:	6822      	ldr	r2, [r4, #0]
 8009b54:	3300      	adds	r3, #0
 8009b56:	bf18      	it	ne
 8009b58:	2301      	movne	r3, #1
 8009b5a:	0692      	lsls	r2, r2, #26
 8009b5c:	d42d      	bmi.n	8009bba <_printf_common+0xbe>
 8009b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b62:	4639      	mov	r1, r7
 8009b64:	4630      	mov	r0, r6
 8009b66:	47c0      	blx	r8
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d020      	beq.n	8009bae <_printf_common+0xb2>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	68e5      	ldr	r5, [r4, #12]
 8009b70:	f8d9 2000 	ldr.w	r2, [r9]
 8009b74:	f003 0306 	and.w	r3, r3, #6
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	bf08      	it	eq
 8009b7c:	1aad      	subeq	r5, r5, r2
 8009b7e:	68a3      	ldr	r3, [r4, #8]
 8009b80:	6922      	ldr	r2, [r4, #16]
 8009b82:	bf0c      	ite	eq
 8009b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b88:	2500      	movne	r5, #0
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	bfc4      	itt	gt
 8009b8e:	1a9b      	subgt	r3, r3, r2
 8009b90:	18ed      	addgt	r5, r5, r3
 8009b92:	f04f 0900 	mov.w	r9, #0
 8009b96:	341a      	adds	r4, #26
 8009b98:	454d      	cmp	r5, r9
 8009b9a:	d11a      	bne.n	8009bd2 <_printf_common+0xd6>
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	e008      	b.n	8009bb2 <_printf_common+0xb6>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4652      	mov	r2, sl
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	47c0      	blx	r8
 8009baa:	3001      	adds	r0, #1
 8009bac:	d103      	bne.n	8009bb6 <_printf_common+0xba>
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb6:	3501      	adds	r5, #1
 8009bb8:	e7c3      	b.n	8009b42 <_printf_common+0x46>
 8009bba:	18e1      	adds	r1, r4, r3
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	2030      	movs	r0, #48	; 0x30
 8009bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bc4:	4422      	add	r2, r4
 8009bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bce:	3302      	adds	r3, #2
 8009bd0:	e7c5      	b.n	8009b5e <_printf_common+0x62>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4639      	mov	r1, r7
 8009bd8:	4630      	mov	r0, r6
 8009bda:	47c0      	blx	r8
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d0e6      	beq.n	8009bae <_printf_common+0xb2>
 8009be0:	f109 0901 	add.w	r9, r9, #1
 8009be4:	e7d8      	b.n	8009b98 <_printf_common+0x9c>
	...

08009be8 <_printf_i>:
 8009be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	7e09      	ldrb	r1, [r1, #24]
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	296e      	cmp	r1, #110	; 0x6e
 8009bf8:	4617      	mov	r7, r2
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	4698      	mov	r8, r3
 8009bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c00:	f000 80b3 	beq.w	8009d6a <_printf_i+0x182>
 8009c04:	d822      	bhi.n	8009c4c <_printf_i+0x64>
 8009c06:	2963      	cmp	r1, #99	; 0x63
 8009c08:	d036      	beq.n	8009c78 <_printf_i+0x90>
 8009c0a:	d80a      	bhi.n	8009c22 <_printf_i+0x3a>
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	f000 80b9 	beq.w	8009d84 <_printf_i+0x19c>
 8009c12:	2958      	cmp	r1, #88	; 0x58
 8009c14:	f000 8083 	beq.w	8009d1e <_printf_i+0x136>
 8009c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c20:	e032      	b.n	8009c88 <_printf_i+0xa0>
 8009c22:	2964      	cmp	r1, #100	; 0x64
 8009c24:	d001      	beq.n	8009c2a <_printf_i+0x42>
 8009c26:	2969      	cmp	r1, #105	; 0x69
 8009c28:	d1f6      	bne.n	8009c18 <_printf_i+0x30>
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	6813      	ldr	r3, [r2, #0]
 8009c2e:	0605      	lsls	r5, r0, #24
 8009c30:	f103 0104 	add.w	r1, r3, #4
 8009c34:	d52a      	bpl.n	8009c8c <_printf_i+0xa4>
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6011      	str	r1, [r2, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	da03      	bge.n	8009c46 <_printf_i+0x5e>
 8009c3e:	222d      	movs	r2, #45	; 0x2d
 8009c40:	425b      	negs	r3, r3
 8009c42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c46:	486f      	ldr	r0, [pc, #444]	; (8009e04 <_printf_i+0x21c>)
 8009c48:	220a      	movs	r2, #10
 8009c4a:	e039      	b.n	8009cc0 <_printf_i+0xd8>
 8009c4c:	2973      	cmp	r1, #115	; 0x73
 8009c4e:	f000 809d 	beq.w	8009d8c <_printf_i+0x1a4>
 8009c52:	d808      	bhi.n	8009c66 <_printf_i+0x7e>
 8009c54:	296f      	cmp	r1, #111	; 0x6f
 8009c56:	d020      	beq.n	8009c9a <_printf_i+0xb2>
 8009c58:	2970      	cmp	r1, #112	; 0x70
 8009c5a:	d1dd      	bne.n	8009c18 <_printf_i+0x30>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	f043 0320 	orr.w	r3, r3, #32
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	e003      	b.n	8009c6e <_printf_i+0x86>
 8009c66:	2975      	cmp	r1, #117	; 0x75
 8009c68:	d017      	beq.n	8009c9a <_printf_i+0xb2>
 8009c6a:	2978      	cmp	r1, #120	; 0x78
 8009c6c:	d1d4      	bne.n	8009c18 <_printf_i+0x30>
 8009c6e:	2378      	movs	r3, #120	; 0x78
 8009c70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c74:	4864      	ldr	r0, [pc, #400]	; (8009e08 <_printf_i+0x220>)
 8009c76:	e055      	b.n	8009d24 <_printf_i+0x13c>
 8009c78:	6813      	ldr	r3, [r2, #0]
 8009c7a:	1d19      	adds	r1, r3, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6011      	str	r1, [r2, #0]
 8009c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e08c      	b.n	8009da6 <_printf_i+0x1be>
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6011      	str	r1, [r2, #0]
 8009c90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c94:	bf18      	it	ne
 8009c96:	b21b      	sxthne	r3, r3
 8009c98:	e7cf      	b.n	8009c3a <_printf_i+0x52>
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	6825      	ldr	r5, [r4, #0]
 8009c9e:	1d18      	adds	r0, r3, #4
 8009ca0:	6010      	str	r0, [r2, #0]
 8009ca2:	0628      	lsls	r0, r5, #24
 8009ca4:	d501      	bpl.n	8009caa <_printf_i+0xc2>
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	e002      	b.n	8009cb0 <_printf_i+0xc8>
 8009caa:	0668      	lsls	r0, r5, #25
 8009cac:	d5fb      	bpl.n	8009ca6 <_printf_i+0xbe>
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	4854      	ldr	r0, [pc, #336]	; (8009e04 <_printf_i+0x21c>)
 8009cb2:	296f      	cmp	r1, #111	; 0x6f
 8009cb4:	bf14      	ite	ne
 8009cb6:	220a      	movne	r2, #10
 8009cb8:	2208      	moveq	r2, #8
 8009cba:	2100      	movs	r1, #0
 8009cbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cc0:	6865      	ldr	r5, [r4, #4]
 8009cc2:	60a5      	str	r5, [r4, #8]
 8009cc4:	2d00      	cmp	r5, #0
 8009cc6:	f2c0 8095 	blt.w	8009df4 <_printf_i+0x20c>
 8009cca:	6821      	ldr	r1, [r4, #0]
 8009ccc:	f021 0104 	bic.w	r1, r1, #4
 8009cd0:	6021      	str	r1, [r4, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d13d      	bne.n	8009d52 <_printf_i+0x16a>
 8009cd6:	2d00      	cmp	r5, #0
 8009cd8:	f040 808e 	bne.w	8009df8 <_printf_i+0x210>
 8009cdc:	4665      	mov	r5, ip
 8009cde:	2a08      	cmp	r2, #8
 8009ce0:	d10b      	bne.n	8009cfa <_printf_i+0x112>
 8009ce2:	6823      	ldr	r3, [r4, #0]
 8009ce4:	07db      	lsls	r3, r3, #31
 8009ce6:	d508      	bpl.n	8009cfa <_printf_i+0x112>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	6862      	ldr	r2, [r4, #4]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	bfde      	ittt	le
 8009cf0:	2330      	movle	r3, #48	; 0x30
 8009cf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cf6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cfa:	ebac 0305 	sub.w	r3, ip, r5
 8009cfe:	6123      	str	r3, [r4, #16]
 8009d00:	f8cd 8000 	str.w	r8, [sp]
 8009d04:	463b      	mov	r3, r7
 8009d06:	aa03      	add	r2, sp, #12
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff fef6 	bl	8009afc <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d14d      	bne.n	8009db0 <_printf_i+0x1c8>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	b005      	add	sp, #20
 8009d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d1e:	4839      	ldr	r0, [pc, #228]	; (8009e04 <_printf_i+0x21c>)
 8009d20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d24:	6813      	ldr	r3, [r2, #0]
 8009d26:	6821      	ldr	r1, [r4, #0]
 8009d28:	1d1d      	adds	r5, r3, #4
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6015      	str	r5, [r2, #0]
 8009d2e:	060a      	lsls	r2, r1, #24
 8009d30:	d50b      	bpl.n	8009d4a <_printf_i+0x162>
 8009d32:	07ca      	lsls	r2, r1, #31
 8009d34:	bf44      	itt	mi
 8009d36:	f041 0120 	orrmi.w	r1, r1, #32
 8009d3a:	6021      	strmi	r1, [r4, #0]
 8009d3c:	b91b      	cbnz	r3, 8009d46 <_printf_i+0x15e>
 8009d3e:	6822      	ldr	r2, [r4, #0]
 8009d40:	f022 0220 	bic.w	r2, r2, #32
 8009d44:	6022      	str	r2, [r4, #0]
 8009d46:	2210      	movs	r2, #16
 8009d48:	e7b7      	b.n	8009cba <_printf_i+0xd2>
 8009d4a:	064d      	lsls	r5, r1, #25
 8009d4c:	bf48      	it	mi
 8009d4e:	b29b      	uxthmi	r3, r3
 8009d50:	e7ef      	b.n	8009d32 <_printf_i+0x14a>
 8009d52:	4665      	mov	r5, ip
 8009d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d58:	fb02 3311 	mls	r3, r2, r1, r3
 8009d5c:	5cc3      	ldrb	r3, [r0, r3]
 8009d5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d62:	460b      	mov	r3, r1
 8009d64:	2900      	cmp	r1, #0
 8009d66:	d1f5      	bne.n	8009d54 <_printf_i+0x16c>
 8009d68:	e7b9      	b.n	8009cde <_printf_i+0xf6>
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	6825      	ldr	r5, [r4, #0]
 8009d6e:	6961      	ldr	r1, [r4, #20]
 8009d70:	1d18      	adds	r0, r3, #4
 8009d72:	6010      	str	r0, [r2, #0]
 8009d74:	0628      	lsls	r0, r5, #24
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	d501      	bpl.n	8009d7e <_printf_i+0x196>
 8009d7a:	6019      	str	r1, [r3, #0]
 8009d7c:	e002      	b.n	8009d84 <_printf_i+0x19c>
 8009d7e:	066a      	lsls	r2, r5, #25
 8009d80:	d5fb      	bpl.n	8009d7a <_printf_i+0x192>
 8009d82:	8019      	strh	r1, [r3, #0]
 8009d84:	2300      	movs	r3, #0
 8009d86:	6123      	str	r3, [r4, #16]
 8009d88:	4665      	mov	r5, ip
 8009d8a:	e7b9      	b.n	8009d00 <_printf_i+0x118>
 8009d8c:	6813      	ldr	r3, [r2, #0]
 8009d8e:	1d19      	adds	r1, r3, #4
 8009d90:	6011      	str	r1, [r2, #0]
 8009d92:	681d      	ldr	r5, [r3, #0]
 8009d94:	6862      	ldr	r2, [r4, #4]
 8009d96:	2100      	movs	r1, #0
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f7f6 fa21 	bl	80001e0 <memchr>
 8009d9e:	b108      	cbz	r0, 8009da4 <_printf_i+0x1bc>
 8009da0:	1b40      	subs	r0, r0, r5
 8009da2:	6060      	str	r0, [r4, #4]
 8009da4:	6863      	ldr	r3, [r4, #4]
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	2300      	movs	r3, #0
 8009daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dae:	e7a7      	b.n	8009d00 <_printf_i+0x118>
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	462a      	mov	r2, r5
 8009db4:	4639      	mov	r1, r7
 8009db6:	4630      	mov	r0, r6
 8009db8:	47c0      	blx	r8
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d0aa      	beq.n	8009d14 <_printf_i+0x12c>
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	079b      	lsls	r3, r3, #30
 8009dc2:	d413      	bmi.n	8009dec <_printf_i+0x204>
 8009dc4:	68e0      	ldr	r0, [r4, #12]
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	4298      	cmp	r0, r3
 8009dca:	bfb8      	it	lt
 8009dcc:	4618      	movlt	r0, r3
 8009dce:	e7a3      	b.n	8009d18 <_printf_i+0x130>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	464a      	mov	r2, r9
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	47c0      	blx	r8
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d09a      	beq.n	8009d14 <_printf_i+0x12c>
 8009dde:	3501      	adds	r5, #1
 8009de0:	68e3      	ldr	r3, [r4, #12]
 8009de2:	9a03      	ldr	r2, [sp, #12]
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	42ab      	cmp	r3, r5
 8009de8:	dcf2      	bgt.n	8009dd0 <_printf_i+0x1e8>
 8009dea:	e7eb      	b.n	8009dc4 <_printf_i+0x1dc>
 8009dec:	2500      	movs	r5, #0
 8009dee:	f104 0919 	add.w	r9, r4, #25
 8009df2:	e7f5      	b.n	8009de0 <_printf_i+0x1f8>
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1ac      	bne.n	8009d52 <_printf_i+0x16a>
 8009df8:	7803      	ldrb	r3, [r0, #0]
 8009dfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e02:	e76c      	b.n	8009cde <_printf_i+0xf6>
 8009e04:	0800a1f5 	.word	0x0800a1f5
 8009e08:	0800a206 	.word	0x0800a206

08009e0c <memmove>:
 8009e0c:	4288      	cmp	r0, r1
 8009e0e:	b510      	push	{r4, lr}
 8009e10:	eb01 0302 	add.w	r3, r1, r2
 8009e14:	d807      	bhi.n	8009e26 <memmove+0x1a>
 8009e16:	1e42      	subs	r2, r0, #1
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	d00a      	beq.n	8009e32 <memmove+0x26>
 8009e1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e20:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e24:	e7f8      	b.n	8009e18 <memmove+0xc>
 8009e26:	4283      	cmp	r3, r0
 8009e28:	d9f5      	bls.n	8009e16 <memmove+0xa>
 8009e2a:	1881      	adds	r1, r0, r2
 8009e2c:	1ad2      	subs	r2, r2, r3
 8009e2e:	42d3      	cmn	r3, r2
 8009e30:	d100      	bne.n	8009e34 <memmove+0x28>
 8009e32:	bd10      	pop	{r4, pc}
 8009e34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e3c:	e7f7      	b.n	8009e2e <memmove+0x22>
	...

08009e40 <_free_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4605      	mov	r5, r0
 8009e44:	2900      	cmp	r1, #0
 8009e46:	d045      	beq.n	8009ed4 <_free_r+0x94>
 8009e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e4c:	1f0c      	subs	r4, r1, #4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	bfb8      	it	lt
 8009e52:	18e4      	addlt	r4, r4, r3
 8009e54:	f000 f8d2 	bl	8009ffc <__malloc_lock>
 8009e58:	4a1f      	ldr	r2, [pc, #124]	; (8009ed8 <_free_r+0x98>)
 8009e5a:	6813      	ldr	r3, [r2, #0]
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	b933      	cbnz	r3, 8009e6e <_free_r+0x2e>
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	6014      	str	r4, [r2, #0]
 8009e64:	4628      	mov	r0, r5
 8009e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6a:	f000 b8c8 	b.w	8009ffe <__malloc_unlock>
 8009e6e:	42a3      	cmp	r3, r4
 8009e70:	d90c      	bls.n	8009e8c <_free_r+0x4c>
 8009e72:	6821      	ldr	r1, [r4, #0]
 8009e74:	1862      	adds	r2, r4, r1
 8009e76:	4293      	cmp	r3, r2
 8009e78:	bf04      	itt	eq
 8009e7a:	681a      	ldreq	r2, [r3, #0]
 8009e7c:	685b      	ldreq	r3, [r3, #4]
 8009e7e:	6063      	str	r3, [r4, #4]
 8009e80:	bf04      	itt	eq
 8009e82:	1852      	addeq	r2, r2, r1
 8009e84:	6022      	streq	r2, [r4, #0]
 8009e86:	6004      	str	r4, [r0, #0]
 8009e88:	e7ec      	b.n	8009e64 <_free_r+0x24>
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	b10a      	cbz	r2, 8009e94 <_free_r+0x54>
 8009e90:	42a2      	cmp	r2, r4
 8009e92:	d9fa      	bls.n	8009e8a <_free_r+0x4a>
 8009e94:	6819      	ldr	r1, [r3, #0]
 8009e96:	1858      	adds	r0, r3, r1
 8009e98:	42a0      	cmp	r0, r4
 8009e9a:	d10b      	bne.n	8009eb4 <_free_r+0x74>
 8009e9c:	6820      	ldr	r0, [r4, #0]
 8009e9e:	4401      	add	r1, r0
 8009ea0:	1858      	adds	r0, r3, r1
 8009ea2:	4282      	cmp	r2, r0
 8009ea4:	6019      	str	r1, [r3, #0]
 8009ea6:	d1dd      	bne.n	8009e64 <_free_r+0x24>
 8009ea8:	6810      	ldr	r0, [r2, #0]
 8009eaa:	6852      	ldr	r2, [r2, #4]
 8009eac:	605a      	str	r2, [r3, #4]
 8009eae:	4401      	add	r1, r0
 8009eb0:	6019      	str	r1, [r3, #0]
 8009eb2:	e7d7      	b.n	8009e64 <_free_r+0x24>
 8009eb4:	d902      	bls.n	8009ebc <_free_r+0x7c>
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	e7d3      	b.n	8009e64 <_free_r+0x24>
 8009ebc:	6820      	ldr	r0, [r4, #0]
 8009ebe:	1821      	adds	r1, r4, r0
 8009ec0:	428a      	cmp	r2, r1
 8009ec2:	bf04      	itt	eq
 8009ec4:	6811      	ldreq	r1, [r2, #0]
 8009ec6:	6852      	ldreq	r2, [r2, #4]
 8009ec8:	6062      	str	r2, [r4, #4]
 8009eca:	bf04      	itt	eq
 8009ecc:	1809      	addeq	r1, r1, r0
 8009ece:	6021      	streq	r1, [r4, #0]
 8009ed0:	605c      	str	r4, [r3, #4]
 8009ed2:	e7c7      	b.n	8009e64 <_free_r+0x24>
 8009ed4:	bd38      	pop	{r3, r4, r5, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20001bd4 	.word	0x20001bd4

08009edc <_malloc_r>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	1ccd      	adds	r5, r1, #3
 8009ee0:	f025 0503 	bic.w	r5, r5, #3
 8009ee4:	3508      	adds	r5, #8
 8009ee6:	2d0c      	cmp	r5, #12
 8009ee8:	bf38      	it	cc
 8009eea:	250c      	movcc	r5, #12
 8009eec:	2d00      	cmp	r5, #0
 8009eee:	4606      	mov	r6, r0
 8009ef0:	db01      	blt.n	8009ef6 <_malloc_r+0x1a>
 8009ef2:	42a9      	cmp	r1, r5
 8009ef4:	d903      	bls.n	8009efe <_malloc_r+0x22>
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	6033      	str	r3, [r6, #0]
 8009efa:	2000      	movs	r0, #0
 8009efc:	bd70      	pop	{r4, r5, r6, pc}
 8009efe:	f000 f87d 	bl	8009ffc <__malloc_lock>
 8009f02:	4a21      	ldr	r2, [pc, #132]	; (8009f88 <_malloc_r+0xac>)
 8009f04:	6814      	ldr	r4, [r2, #0]
 8009f06:	4621      	mov	r1, r4
 8009f08:	b991      	cbnz	r1, 8009f30 <_malloc_r+0x54>
 8009f0a:	4c20      	ldr	r4, [pc, #128]	; (8009f8c <_malloc_r+0xb0>)
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	b91b      	cbnz	r3, 8009f18 <_malloc_r+0x3c>
 8009f10:	4630      	mov	r0, r6
 8009f12:	f000 f863 	bl	8009fdc <_sbrk_r>
 8009f16:	6020      	str	r0, [r4, #0]
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f000 f85e 	bl	8009fdc <_sbrk_r>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d124      	bne.n	8009f6e <_malloc_r+0x92>
 8009f24:	230c      	movs	r3, #12
 8009f26:	6033      	str	r3, [r6, #0]
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 f868 	bl	8009ffe <__malloc_unlock>
 8009f2e:	e7e4      	b.n	8009efa <_malloc_r+0x1e>
 8009f30:	680b      	ldr	r3, [r1, #0]
 8009f32:	1b5b      	subs	r3, r3, r5
 8009f34:	d418      	bmi.n	8009f68 <_malloc_r+0x8c>
 8009f36:	2b0b      	cmp	r3, #11
 8009f38:	d90f      	bls.n	8009f5a <_malloc_r+0x7e>
 8009f3a:	600b      	str	r3, [r1, #0]
 8009f3c:	50cd      	str	r5, [r1, r3]
 8009f3e:	18cc      	adds	r4, r1, r3
 8009f40:	4630      	mov	r0, r6
 8009f42:	f000 f85c 	bl	8009ffe <__malloc_unlock>
 8009f46:	f104 000b 	add.w	r0, r4, #11
 8009f4a:	1d23      	adds	r3, r4, #4
 8009f4c:	f020 0007 	bic.w	r0, r0, #7
 8009f50:	1ac3      	subs	r3, r0, r3
 8009f52:	d0d3      	beq.n	8009efc <_malloc_r+0x20>
 8009f54:	425a      	negs	r2, r3
 8009f56:	50e2      	str	r2, [r4, r3]
 8009f58:	e7d0      	b.n	8009efc <_malloc_r+0x20>
 8009f5a:	428c      	cmp	r4, r1
 8009f5c:	684b      	ldr	r3, [r1, #4]
 8009f5e:	bf16      	itet	ne
 8009f60:	6063      	strne	r3, [r4, #4]
 8009f62:	6013      	streq	r3, [r2, #0]
 8009f64:	460c      	movne	r4, r1
 8009f66:	e7eb      	b.n	8009f40 <_malloc_r+0x64>
 8009f68:	460c      	mov	r4, r1
 8009f6a:	6849      	ldr	r1, [r1, #4]
 8009f6c:	e7cc      	b.n	8009f08 <_malloc_r+0x2c>
 8009f6e:	1cc4      	adds	r4, r0, #3
 8009f70:	f024 0403 	bic.w	r4, r4, #3
 8009f74:	42a0      	cmp	r0, r4
 8009f76:	d005      	beq.n	8009f84 <_malloc_r+0xa8>
 8009f78:	1a21      	subs	r1, r4, r0
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f000 f82e 	bl	8009fdc <_sbrk_r>
 8009f80:	3001      	adds	r0, #1
 8009f82:	d0cf      	beq.n	8009f24 <_malloc_r+0x48>
 8009f84:	6025      	str	r5, [r4, #0]
 8009f86:	e7db      	b.n	8009f40 <_malloc_r+0x64>
 8009f88:	20001bd4 	.word	0x20001bd4
 8009f8c:	20001bd8 	.word	0x20001bd8

08009f90 <_realloc_r>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	4607      	mov	r7, r0
 8009f94:	4614      	mov	r4, r2
 8009f96:	460e      	mov	r6, r1
 8009f98:	b921      	cbnz	r1, 8009fa4 <_realloc_r+0x14>
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fa0:	f7ff bf9c 	b.w	8009edc <_malloc_r>
 8009fa4:	b922      	cbnz	r2, 8009fb0 <_realloc_r+0x20>
 8009fa6:	f7ff ff4b 	bl	8009e40 <_free_r>
 8009faa:	4625      	mov	r5, r4
 8009fac:	4628      	mov	r0, r5
 8009fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb0:	f000 f826 	bl	800a000 <_malloc_usable_size_r>
 8009fb4:	42a0      	cmp	r0, r4
 8009fb6:	d20f      	bcs.n	8009fd8 <_realloc_r+0x48>
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4638      	mov	r0, r7
 8009fbc:	f7ff ff8e 	bl	8009edc <_malloc_r>
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d0f2      	beq.n	8009fac <_realloc_r+0x1c>
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	4622      	mov	r2, r4
 8009fca:	f7ff fc11 	bl	80097f0 <memcpy>
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4638      	mov	r0, r7
 8009fd2:	f7ff ff35 	bl	8009e40 <_free_r>
 8009fd6:	e7e9      	b.n	8009fac <_realloc_r+0x1c>
 8009fd8:	4635      	mov	r5, r6
 8009fda:	e7e7      	b.n	8009fac <_realloc_r+0x1c>

08009fdc <_sbrk_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4c06      	ldr	r4, [pc, #24]	; (8009ff8 <_sbrk_r+0x1c>)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	6023      	str	r3, [r4, #0]
 8009fe8:	f7f7 ffc2 	bl	8001f70 <_sbrk>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_sbrk_r+0x1a>
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_sbrk_r+0x1a>
 8009ff4:	602b      	str	r3, [r5, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	2000238c 	.word	0x2000238c

08009ffc <__malloc_lock>:
 8009ffc:	4770      	bx	lr

08009ffe <__malloc_unlock>:
 8009ffe:	4770      	bx	lr

0800a000 <_malloc_usable_size_r>:
 800a000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a004:	1f18      	subs	r0, r3, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	bfbc      	itt	lt
 800a00a:	580b      	ldrlt	r3, [r1, r0]
 800a00c:	18c0      	addlt	r0, r0, r3
 800a00e:	4770      	bx	lr

0800a010 <_init>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr

0800a01c <_fini>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr
