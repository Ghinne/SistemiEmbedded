
GIRASOLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a318  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a62c  0800a62c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a62c  0800a62c  0001a62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a634  0800a634  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017b0  20000074  0800a6b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001824  0800a6b0  00021824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002964f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004be9  00000000  00000000  000496f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002530  00000000  00000000  0004e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022f8  00000000  00000000  00050810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002caad  00000000  00000000  00052b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c63a  00000000  00000000  0007f5b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011838f  00000000  00000000  0009bbef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3f7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a35c  00000000  00000000  001b3ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a490 	.word	0x0800a490

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a490 	.word	0x0800a490

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <panelDataInit>:
struct panelsData {
	int rightPanelValue, leftPanelValue, threshold, variation;
} pd;

// Function to initialize panel data
void panelDataInit() {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	pd.leftPanelValue = 0;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <panelDataInit+0x28>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
	pd.rightPanelValue = 0;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <panelDataInit+0x28>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	pd.threshold = 50;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <panelDataInit+0x28>)
 80005c6:	2232      	movs	r2, #50	; 0x32
 80005c8:	609a      	str	r2, [r3, #8]
	pd.variation = 50;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <panelDataInit+0x28>)
 80005cc:	2232      	movs	r2, #50	; 0x32
 80005ce:	60da      	str	r2, [r3, #12]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200016e8 	.word	0x200016e8

080005e0 <controlRWPDInit>:
struct controlRWPD {
	int nr, nw, nrW, nwW;
} cpd;

// Function to initialize control structure
void controlRWPDInit() {
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	cpd.nr = cpd.nw = cpd.nrW = cpd.nwW = 0;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <controlRWPDInit+0x2c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <controlRWPDInit+0x2c>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <controlRWPDInit+0x2c>)
 80005f0:	6093      	str	r3, [r2, #8]
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <controlRWPDInit+0x2c>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <controlRWPDInit+0x2c>)
 80005f8:	6053      	str	r3, [r2, #4]
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <controlRWPDInit+0x2c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a03      	ldr	r2, [pc, #12]	; (800060c <controlRWPDInit+0x2c>)
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20001780 	.word	0x20001780

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b5b0      	push	{r4, r5, r7, lr}
 8000612:	b0a2      	sub	sp, #136	; 0x88
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Initialize panels data structure
	panelDataInit();
 8000616:	f7ff ffcd 	bl	80005b4 <panelDataInit>
	// Initialize control data structure
	controlRWPDInit();
 800061a:	f7ff ffe1 	bl	80005e0 <controlRWPDInit>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f001 fbf0 	bl	8001e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f8b3 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 fbcd 	bl	8000dc4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800062a:	f000 fa31 	bl	8000a90 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800062e:	f000 fa67 	bl	8000b00 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000632:	f000 faa5 	bl	8000b80 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000636:	f000 fac9 	bl	8000bcc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800063a:	f000 fb35 	bl	8000ca8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800063e:	f000 fb63 	bl	8000d08 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000642:	f000 fb91 	bl	8000d68 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000646:	f000 f949 	bl	80008dc <MX_ADC1_Init>
  MX_ADC2_Init();
 800064a:	f000 f9bd 	bl	80009c8 <MX_ADC2_Init>
  MX_UART4_Init();
 800064e:	f000 fafb 	bl	8000c48 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 8000652:	4b42      	ldr	r3, [pc, #264]	; (800075c <main+0x14c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b40      	ldr	r3, [pc, #256]	; (800075c <main+0x14c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f042 0220 	orr.w	r2, r2, #32
 8000660:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_TC);
 8000662:	4b3e      	ldr	r3, [pc, #248]	; (800075c <main+0x14c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b3c      	ldr	r3, [pc, #240]	; (800075c <main+0x14c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000670:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexPD */
  osMutexDef(MutexPD);
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MutexPDHandle = osMutexCreate(osMutex(MutexPD));
 800067e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000682:	4618      	mov	r0, r3
 8000684:	f006 feff 	bl	8007486 <osMutexCreate>
 8000688:	4602      	mov	r2, r0
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <main+0x150>)
 800068c:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of PanelsDataRead */
  osSemaphoreDef(PanelsDataRead);
 800068e:	2300      	movs	r3, #0
 8000690:	67bb      	str	r3, [r7, #120]	; 0x78
 8000692:	2300      	movs	r3, #0
 8000694:	67fb      	str	r3, [r7, #124]	; 0x7c
  PanelsDataReadHandle = osSemaphoreCreate(osSemaphore(PanelsDataRead), 1);
 8000696:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f006 ff8f 	bl	80075c0 <osSemaphoreCreate>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <main+0x154>)
 80006a6:	601a      	str	r2, [r3, #0]

  /* definition and creation of PanelsDataWrite */
  osSemaphoreDef(PanelsDataWrite);
 80006a8:	2300      	movs	r3, #0
 80006aa:	673b      	str	r3, [r7, #112]	; 0x70
 80006ac:	2300      	movs	r3, #0
 80006ae:	677b      	str	r3, [r7, #116]	; 0x74
  PanelsDataWriteHandle = osSemaphoreCreate(osSemaphore(PanelsDataWrite), 1);
 80006b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006b4:	2101      	movs	r1, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 ff82 	bl	80075c0 <osSemaphoreCreate>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <main+0x158>)
 80006c0:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadPanels */
  osThreadDef(ReadPanels, StartReadPanels, osPriorityNormal, 0, 128);
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <main+0x15c>)
 80006c4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006c8:	461d      	mov	r5, r3
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadPanelsHandle = osThreadCreate(osThread(ReadPanels), NULL);
 80006d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f006 fe72 	bl	80073c6 <osThreadCreate>
 80006e2:	4602      	mov	r2, r0
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <main+0x160>)
 80006e6:	601a      	str	r2, [r3, #0]

  /* definition and creation of SerialDebug */
  osThreadDef(SerialDebug, StartSerialDebug, osPriorityNormal, 0, 128);
 80006e8:	4b22      	ldr	r3, [pc, #136]	; (8000774 <main+0x164>)
 80006ea:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006ee:	461d      	mov	r5, r3
 80006f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialDebugHandle = osThreadCreate(osThread(SerialDebug), NULL);
 80006fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f006 fe5f 	bl	80073c6 <osThreadCreate>
 8000708:	4602      	mov	r2, r0
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <main+0x168>)
 800070c:	601a      	str	r2, [r3, #0]

  /* definition and creation of LedsTask */
  osThreadDef(LedsTask, StartLedsTask, osPriorityBelowNormal, 0, 128);
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <main+0x16c>)
 8000710:	f107 041c 	add.w	r4, r7, #28
 8000714:	461d      	mov	r5, r3
 8000716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800071e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedsTaskHandle = osThreadCreate(osThread(LedsTask), NULL);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f006 fe4c 	bl	80073c6 <osThreadCreate>
 800072e:	4602      	mov	r2, r0
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <main+0x170>)
 8000732:	601a      	str	r2, [r3, #0]

  /* definition and creation of SyncButtonTask */
  osThreadDef(SyncButtonTask, StartSynkButton, osPriorityAboveNormal, 0, 128);
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <main+0x174>)
 8000736:	463c      	mov	r4, r7
 8000738:	461d      	mov	r5, r3
 800073a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SyncButtonTaskHandle = osThreadCreate(osThread(SyncButtonTask), NULL);
 8000746:	463b      	mov	r3, r7
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f006 fe3b 	bl	80073c6 <osThreadCreate>
 8000750:	4602      	mov	r2, r0
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <main+0x178>)
 8000754:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000756:	f006 fe2f 	bl	80073b8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075a:	e7fe      	b.n	800075a <main+0x14a>
 800075c:	200016fc 	.word	0x200016fc
 8000760:	20001794 	.word	0x20001794
 8000764:	2000177c 	.word	0x2000177c
 8000768:	200016f8 	.word	0x200016f8
 800076c:	0800a4b4 	.word	0x0800a4b4
 8000770:	20001790 	.word	0x20001790
 8000774:	0800a4dc 	.word	0x0800a4dc
 8000778:	20001144 	.word	0x20001144
 800077c:	0800a504 	.word	0x0800a504
 8000780:	20001600 	.word	0x20001600
 8000784:	0800a530 	.word	0x0800a530
 8000788:	20001140 	.word	0x20001140

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b0b8      	sub	sp, #224	; 0xe0
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000796:	2244      	movs	r2, #68	; 0x44
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f009 fa73 	bl	8009c86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2288      	movs	r2, #136	; 0x88
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f009 fa65 	bl	8009c86 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80007bc:	f003 fb58 	bl	8003e70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007c0:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <SystemClock_Config+0x148>)
 80007c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007c6:	4a43      	ldr	r2, [pc, #268]	; (80008d4 <SystemClock_Config+0x148>)
 80007c8:	f023 0318 	bic.w	r3, r3, #24
 80007cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007d0:	2314      	movs	r3, #20
 80007d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007e8:	2360      	movs	r3, #96	; 0x60
 80007ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000800:	2328      	movs	r3, #40	; 0x28
 8000802:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000806:	2307      	movs	r3, #7
 8000808:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fc73 	bl	8004108 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000828:	f000 fe76 	bl	8001518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800084e:	2104      	movs	r1, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f004 f809 	bl	8004868 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800085c:	f000 fe5c 	bl	8001518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <SystemClock_Config+0x14c>)
 8000862:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800086c:	2300      	movs	r3, #0
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000870:	2300      	movs	r3, #0
 8000872:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000878:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000880:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000884:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000886:	2301      	movs	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800088e:	2318      	movs	r3, #24
 8000890:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000892:	2307      	movs	r3, #7
 8000894:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800089a:	2302      	movs	r3, #2
 800089c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800089e:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80008a2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 fa14 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80008b2:	f000 fe31 	bl	8001518 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ba:	f003 faf7 	bl	8003eac <HAL_PWREx_ControlVoltageScaling>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80008c4:	f000 fe28 	bl	8001518 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008c8:	f004 fcea 	bl	80052a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008cc:	bf00      	nop
 80008ce:	37e0      	adds	r7, #224	; 0xe0
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40021000 	.word	0x40021000
 80008d8:	0001608d 	.word	0x0001608d

080008dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000900:	4a2f      	ldr	r2, [pc, #188]	; (80009c0 <MX_ADC1_Init+0xe4>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_ADC1_Init+0xe0>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000910:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_ADC1_Init+0xe0>)
 800091e:	2204      	movs	r2, #4
 8000920:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000924:	2200      	movs	r2, #0
 8000926:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_ADC1_Init+0xe0>)
 800092a:	2200      	movs	r2, #0
 800092c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000930:	2201      	movs	r2, #1
 8000932:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_ADC1_Init+0xe0>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000942:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_ADC1_Init+0xe0>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	4817      	ldr	r0, [pc, #92]	; (80009bc <MX_ADC1_Init+0xe0>)
 8000960:	f001 fc7e 	bl	8002260 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800096a:	f000 fdd5 	bl	8001518 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4810      	ldr	r0, [pc, #64]	; (80009bc <MX_ADC1_Init+0xe0>)
 800097a:	f002 fb41 	bl	8003000 <HAL_ADCEx_MultiModeConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000984:	f000 fdc8 	bl	8001518 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_ADC1_Init+0xe8>)
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098c:	2306      	movs	r3, #6
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000994:	237f      	movs	r3, #127	; 0x7f
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000998:	2304      	movs	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_ADC1_Init+0xe0>)
 80009a6:	f001 ff47 	bl	8002838 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80009b0:	f000 fdb2 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	; 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20001604 	.word	0x20001604
 80009c0:	50040000 	.word	0x50040000
 80009c4:	04300002 	.word	0x04300002

080009c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
 80009dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_ADC2_Init+0xbc>)
 80009e0:	4a29      	ldr	r2, [pc, #164]	; (8000a88 <MX_ADC2_Init+0xc0>)
 80009e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <MX_ADC2_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_ADC2_Init+0xbc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_ADC2_Init+0xbc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <MX_ADC2_Init+0xbc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fc:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_ADC2_Init+0xbc>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a40:	f001 fc0e 	bl	8002260 <HAL_ADC_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000a4a:	f000 fd65 	bl	8001518 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_ADC2_Init+0xc4>)
 8000a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a52:	2306      	movs	r3, #6
 8000a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5a:	237f      	movs	r3, #127	; 0x7f
 8000a5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_ADC2_Init+0xbc>)
 8000a6c:	f001 fee4 	bl	8002838 <HAL_ADC_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000a76:	f000 fd4f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200010dc 	.word	0x200010dc
 8000a88:	50040100 	.word	0x50040100
 8000a8c:	08600004 	.word	0x08600004

08000a90 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000a96:	4a19      	ldr	r2, [pc, #100]	; (8000afc <MX_DFSDM1_Init+0x6c>)
 8000a98:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000abe:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_DFSDM1_Init+0x68>)
 8000ae6:	f002 fc19 	bl	800331c <HAL_DFSDM_ChannelInit>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000af0:	f000 fd12 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20001024 	.word	0x20001024
 8000afc:	40016020 	.word	0x40016020

08000b00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <MX_I2C2_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <MX_I2C2_Init+0x7c>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3a:	480e      	ldr	r0, [pc, #56]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b3c:	f002 ff29 	bl	8003992 <HAL_I2C_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b46:	f000 fce7 	bl	8001518 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4809      	ldr	r0, [pc, #36]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b4e:	f002 ffaf 	bl	8003ab0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b58:	f000 fcde 	bl	8001518 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_I2C2_Init+0x74>)
 8000b60:	f002 fff1 	bl	8003b46 <HAL_I2CEx_ConfigDigitalFilter>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b6a:	f000 fcd5 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20001550 	.word	0x20001550
 8000b78:	40005800 	.word	0x40005800
 8000b7c:	10909cec 	.word	0x10909cec

08000b80 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <MX_QUADSPI_Init+0x48>)
 8000b88:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000b8c:	22ff      	movs	r2, #255	; 0xff
 8000b8e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_QUADSPI_Init+0x44>)
 8000bb0:	f003 f9e2 	bl	8003f78 <HAL_QSPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000bba:	f000 fcad 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20001798 	.word	0x20001798
 8000bc8:	a0001000 	.word	0xa0001000

08000bcc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bd0:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bd2:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <MX_SPI3_Init+0x78>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000be6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000bea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bfe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_SPI3_Init+0x74>)
 8000c2c:	f004 fd12 	bl	8005654 <HAL_SPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f000 fc6f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000159c 	.word	0x2000159c
 8000c44:	40003c00 	.word	0x40003c00

08000c48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_UART4_Init+0x5c>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_UART4_Init+0x58>)
 8000c8c:	f004 ffcc 	bl	8005c28 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c96:	f000 fc3f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200016fc 	.word	0x200016fc
 8000ca4:	40004c00 	.word	0x40004c00

08000ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <MX_USART1_UART_Init+0x5c>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART1_UART_Init+0x58>)
 8000cec:	f004 ff9c 	bl	8005c28 <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f000 fc0f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20001668 	.word	0x20001668
 8000d04:	40013800 	.word	0x40013800

08000d08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_USART3_UART_Init+0x5c>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_USART3_UART_Init+0x58>)
 8000d4c:	f004 ff6c 	bl	8005c28 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d56:	f000 fbdf 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000105c 	.word	0x2000105c
 8000d64:	40004800 	.word	0x40004800

08000d68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d76:	2206      	movs	r2, #6
 8000d78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d82:	2202      	movs	r2, #2
 8000d84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dac:	f002 ff17 	bl	8003bde <HAL_PCD_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 fbaf 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20001148 	.word	0x20001148

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4bae      	ldr	r3, [pc, #696]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4aad      	ldr	r2, [pc, #692]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4bab      	ldr	r3, [pc, #684]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4ba8      	ldr	r3, [pc, #672]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4aa7      	ldr	r2, [pc, #668]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4ba5      	ldr	r3, [pc, #660]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4ba2      	ldr	r3, [pc, #648]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4aa1      	ldr	r2, [pc, #644]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b9f      	ldr	r3, [pc, #636]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b9c      	ldr	r3, [pc, #624]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a9b      	ldr	r2, [pc, #620]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b99      	ldr	r3, [pc, #612]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b96      	ldr	r3, [pc, #600]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a95      	ldr	r2, [pc, #596]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b93      	ldr	r3, [pc, #588]	; (8001094 <MX_GPIO_Init+0x2d0>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000e58:	488f      	ldr	r0, [pc, #572]	; (8001098 <MX_GPIO_Init+0x2d4>)
 8000e5a:	f002 fd5f 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f248 1104 	movw	r1, #33028	; 0x8104
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f002 fd58 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000e72:	488a      	ldr	r0, [pc, #552]	; (800109c <MX_GPIO_Init+0x2d8>)
 8000e74:	f002 fd52 	bl	800391c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000e7e:	4888      	ldr	r0, [pc, #544]	; (80010a0 <MX_GPIO_Init+0x2dc>)
 8000e80:	f002 fd4c 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8a:	4885      	ldr	r0, [pc, #532]	; (80010a0 <MX_GPIO_Init+0x2dc>)
 8000e8c:	f002 fd46 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000e96:	4883      	ldr	r0, [pc, #524]	; (80010a4 <MX_GPIO_Init+0x2e0>)
 8000e98:	f002 fd40 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	487e      	ldr	r0, [pc, #504]	; (800109c <MX_GPIO_Init+0x2d8>)
 8000ea2:	f002 fd3b 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	487b      	ldr	r0, [pc, #492]	; (8001098 <MX_GPIO_Init+0x2d4>)
 8000eac:	f002 fd36 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000eb0:	f240 1315 	movw	r3, #277	; 0x115
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4873      	ldr	r0, [pc, #460]	; (8001098 <MX_GPIO_Init+0x2d4>)
 8000eca:	f002 fb7f 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000ece:	236a      	movs	r3, #106	; 0x6a
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	4b75      	ldr	r3, [pc, #468]	; (80010a8 <MX_GPIO_Init+0x2e4>)
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	486d      	ldr	r0, [pc, #436]	; (8001098 <MX_GPIO_Init+0x2d4>)
 8000ee2:	f002 fb73 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTBLUE_Pin */
  GPIO_InitStruct.Pin = BUTBLUE_Pin;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eec:	4b6f      	ldr	r3, [pc, #444]	; (80010ac <MX_GPIO_Init+0x2e8>)
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTBLUE_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	486a      	ldr	r0, [pc, #424]	; (80010a4 <MX_GPIO_Init+0x2e0>)
 8000efc:	f002 fb66 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000f00:	f248 1304 	movw	r3, #33028	; 0x8104
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f002 fb56 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f20:	2308      	movs	r3, #8
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f30:	2301      	movs	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f002 fb45 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000f42:	23e0      	movs	r3, #224	; 0xe0
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	2305      	movs	r3, #5
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f002 fb34 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f68:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <MX_GPIO_Init+0x2e4>)
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4849      	ldr	r0, [pc, #292]	; (800109c <MX_GPIO_Init+0x2d8>)
 8000f78:	f002 fb28 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000f7c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000f80:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4841      	ldr	r0, [pc, #260]	; (800109c <MX_GPIO_Init+0x2d8>)
 8000f96:	f002 fb19 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8000f9a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000f9e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <MX_GPIO_Init+0x2e4>)
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	483c      	ldr	r0, [pc, #240]	; (80010a0 <MX_GPIO_Init+0x2dc>)
 8000fb0:	f002 fb0c 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000fb4:	f243 0381 	movw	r3, #12417	; 0x3081
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4834      	ldr	r0, [pc, #208]	; (80010a0 <MX_GPIO_Init+0x2dc>)
 8000fce:	f002 fafd 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000fd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	482e      	ldr	r0, [pc, #184]	; (80010a4 <MX_GPIO_Init+0x2e0>)
 8000fec:	f002 faee 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ff0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_GPIO_Init+0x2e4>)
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4827      	ldr	r0, [pc, #156]	; (80010a4 <MX_GPIO_Init+0x2e0>)
 8001006:	f002 fae1 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800100a:	2302      	movs	r3, #2
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800101a:	2305      	movs	r3, #5
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	481e      	ldr	r0, [pc, #120]	; (80010a0 <MX_GPIO_Init+0x2dc>)
 8001026:	f002 fad1 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800102a:	2378      	movs	r3, #120	; 0x78
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103a:	2307      	movs	r3, #7
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4816      	ldr	r0, [pc, #88]	; (80010a0 <MX_GPIO_Init+0x2dc>)
 8001046:	f002 fac1 	bl	80035cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800104a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105c:	2304      	movs	r3, #4
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_GPIO_Init+0x2d8>)
 8001068:	f002 fab0 	bl	80035cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2105      	movs	r1, #5
 8001070:	2017      	movs	r0, #23
 8001072:	f002 f929 	bl	80032c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001076:	2017      	movs	r0, #23
 8001078:	f002 f942 	bl	8003300 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2105      	movs	r1, #5
 8001080:	2028      	movs	r0, #40	; 0x28
 8001082:	f002 f921 	bl	80032c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001086:	2028      	movs	r0, #40	; 0x28
 8001088:	f002 f93a 	bl	8003300 <HAL_NVIC_EnableIRQ>

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40021000 	.word	0x40021000
 8001098:	48001000 	.word	0x48001000
 800109c:	48000400 	.word	0x48000400
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48000800 	.word	0x48000800
 80010a8:	10110000 	.word	0x10110000
 80010ac:	10210000 	.word	0x10210000

080010b0 <startReadPD>:

/* USER CODE BEGIN 4 */

/** Function to lock panels data on read */
void startReadPD() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	// Lock mutex
	osMutexWait(MutexPDHandle, osWaitForever);
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <startReadPD+0x58>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 f9fb 	bl	80074b8 <osMutexWait>
	// Lock semaphore on read if possible
	if (!cpd.nw) {
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <startReadPD+0x5c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10a      	bne.n	80010e0 <startReadPD+0x30>
		cpd.nr++;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <startReadPD+0x5c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <startReadPD+0x5c>)
 80010d2:	6013      	str	r3, [r2, #0]
		osSemaphoreRelease(PanelsDataReadHandle);
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <startReadPD+0x60>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f006 faf3 	bl	80076c4 <osSemaphoreRelease>
 80010de:	e004      	b.n	80010ea <startReadPD+0x3a>
	} else
		cpd.nrW++;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <startReadPD+0x5c>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <startReadPD+0x5c>)
 80010e8:	6093      	str	r3, [r2, #8]

	// Release mutex
	osMutexRelease(MutexPDHandle);
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <startReadPD+0x58>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 fa30 	bl	8007554 <osMutexRelease>
	//Sem read wait
	osSemaphoreWait(PanelsDataReadHandle, osWaitForever);
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <startReadPD+0x60>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	4618      	mov	r0, r3
 80010fe:	f006 fa93 	bl	8007628 <osSemaphoreWait>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20001794 	.word	0x20001794
 800110c:	20001780 	.word	0x20001780
 8001110:	2000177c 	.word	0x2000177c

08001114 <startWritePD>:

/** Function to lock panels data on write */
void startWritePD() {
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	// Lock mutex
	osMutexWait(MutexPDHandle, osWaitForever);
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <startWritePD+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	4618      	mov	r0, r3
 8001122:	f006 f9c9 	bl	80074b8 <osMutexWait>
	// Lock semaphore on write if possible
	if (!cpd.nw && !cpd.nr && !cpd.nwW) {
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <startWritePD+0x68>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d110      	bne.n	8001150 <startWritePD+0x3c>
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <startWritePD+0x68>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10c      	bne.n	8001150 <startWritePD+0x3c>
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <startWritePD+0x68>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d108      	bne.n	8001150 <startWritePD+0x3c>
		cpd.nw = 1;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <startWritePD+0x68>)
 8001140:	2201      	movs	r2, #1
 8001142:	605a      	str	r2, [r3, #4]
		osSemaphoreRelease(PanelsDataWriteHandle);
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <startWritePD+0x6c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fabb 	bl	80076c4 <osSemaphoreRelease>
 800114e:	e004      	b.n	800115a <startWritePD+0x46>
	} else
		cpd.nwW++;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <startWritePD+0x68>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <startWritePD+0x68>)
 8001158:	60d3      	str	r3, [r2, #12]

	// Release mutex
	osMutexRelease(MutexPDHandle);
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <startWritePD+0x64>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f006 f9f8 	bl	8007554 <osMutexRelease>
	// Sem write wait
	osSemaphoreWait(PanelsDataWriteHandle, osWaitForever);
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <startWritePD+0x6c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	4618      	mov	r0, r3
 800116e:	f006 fa5b 	bl	8007628 <osSemaphoreWait>
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20001794 	.word	0x20001794
 800117c:	20001780 	.word	0x20001780
 8001180:	200016f8 	.word	0x200016f8

08001184 <endReadPD>:

/** Function to unlock panels data from read */
void endReadPD() {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	// Lock mutex
	osMutexWait(MutexPDHandle, osWaitForever);
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <endReadPD+0x7c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	4618      	mov	r0, r3
 8001192:	f006 f991 	bl	80074b8 <osMutexWait>
	// Decrease readers counter and unlock semaphore if 0
	cpd.nr--;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <endReadPD+0x80>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <endReadPD+0x80>)
 800119e:	6013      	str	r3, [r2, #0]
	if (!cpd.nr) {
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <endReadPD+0x80>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d124      	bne.n	80011f2 <endReadPD+0x6e>
		if (cpd.nwW) {
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <endReadPD+0x80>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d01c      	beq.n	80011ea <endReadPD+0x66>
			cpd.nwW--;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <endReadPD+0x80>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4a13      	ldr	r2, [pc, #76]	; (8001204 <endReadPD+0x80>)
 80011b8:	60d3      	str	r3, [r2, #12]
			cpd.nw = 1;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <endReadPD+0x80>)
 80011bc:	2201      	movs	r2, #1
 80011be:	605a      	str	r2, [r3, #4]
			osSemaphoreRelease(PanelsDataWriteHandle);
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <endReadPD+0x84>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 fa7d 	bl	80076c4 <osSemaphoreRelease>
 80011ca:	e012      	b.n	80011f2 <endReadPD+0x6e>
		} else while (cpd.nrW) {
			cpd.nrW--;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <endReadPD+0x80>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <endReadPD+0x80>)
 80011d4:	6093      	str	r3, [r2, #8]
			cpd.nr++;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <endReadPD+0x80>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4a09      	ldr	r2, [pc, #36]	; (8001204 <endReadPD+0x80>)
 80011de:	6013      	str	r3, [r2, #0]
			osSemaphoreRelease(PanelsDataReadHandle);
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <endReadPD+0x88>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 fa6d 	bl	80076c4 <osSemaphoreRelease>
		} else while (cpd.nrW) {
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <endReadPD+0x80>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1ec      	bne.n	80011cc <endReadPD+0x48>
		}
	}
	// Release mutex
	osMutexRelease(MutexPDHandle);
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <endReadPD+0x7c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 f9ac 	bl	8007554 <osMutexRelease>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20001794 	.word	0x20001794
 8001204:	20001780 	.word	0x20001780
 8001208:	200016f8 	.word	0x200016f8
 800120c:	2000177c 	.word	0x2000177c

08001210 <endWritePD>:

/** Function to unlock panels data from write */
void endWritePD() {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	// Lock mutex
	osMutexWait(MutexPDHandle, osWaitForever);
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <endWritePD+0x70>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	4618      	mov	r0, r3
 800121e:	f006 f94b 	bl	80074b8 <osMutexWait>
	// Unlock semaphore
	cpd.nw = 0;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <endWritePD+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
	if (cpd.nwW) {
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <endWritePD+0x74>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d01c      	beq.n	800126a <endWritePD+0x5a>
		cpd.nwW--;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <endWritePD+0x74>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	3b01      	subs	r3, #1
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <endWritePD+0x74>)
 8001238:	60d3      	str	r3, [r2, #12]
		cpd.nw = 1;
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <endWritePD+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	605a      	str	r2, [r3, #4]
		osSemaphoreRelease(PanelsDataWriteHandle);
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <endWritePD+0x78>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f006 fa3d 	bl	80076c4 <osSemaphoreRelease>
 800124a:	e012      	b.n	8001272 <endWritePD+0x62>
	} else while (cpd.nrW) {
		cpd.nrW--;
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <endWritePD+0x74>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	3b01      	subs	r3, #1
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <endWritePD+0x74>)
 8001254:	6093      	str	r3, [r2, #8]
		cpd.nr++;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <endWritePD+0x74>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <endWritePD+0x74>)
 800125e:	6013      	str	r3, [r2, #0]
		osSemaphoreRelease(PanelsDataReadHandle);
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <endWritePD+0x7c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f006 fa2d 	bl	80076c4 <osSemaphoreRelease>
	} else while (cpd.nrW) {
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <endWritePD+0x74>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ec      	bne.n	800124c <endWritePD+0x3c>
	}
	// Release mutex
	osMutexRelease(MutexPDHandle);
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <endWritePD+0x70>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f006 f96c 	bl	8007554 <osMutexRelease>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20001794 	.word	0x20001794
 8001284:	20001780 	.word	0x20001780
 8001288:	200016f8 	.word	0x200016f8
 800128c:	2000177c 	.word	0x2000177c

08001290 <StartReadPanels>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartReadPanels */
void StartReadPanels(void const * argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // Get right panel value
	  HAL_ADC_Start(&hadc1);
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <StartReadPanels+0x78>)
 800129a:	f001 f935 	bl	8002508 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800129e:	f04f 31ff 	mov.w	r1, #4294967295
 80012a2:	4819      	ldr	r0, [pc, #100]	; (8001308 <StartReadPanels+0x78>)
 80012a4:	f001 f9ea 	bl	800267c <HAL_ADC_PollForConversion>
	  uint16_t rightPanelValue = HAL_ADC_GetValue(&hadc1)*100/2400;
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <StartReadPanels+0x78>)
 80012aa:	f001 fab7 	bl	800281c <HAL_ADC_GetValue>
 80012ae:	4602      	mov	r2, r0
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	fb03 f302 	mul.w	r3, r3, r2
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <StartReadPanels+0x7c>)
 80012b8:	fba2 2303 	umull	r2, r3, r2, r3
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	81fb      	strh	r3, [r7, #14]

	  // Get left panel value
	  HAL_ADC_Start(&hadc2);
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <StartReadPanels+0x80>)
 80012c2:	f001 f921 	bl	8002508 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80012c6:	f04f 31ff 	mov.w	r1, #4294967295
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <StartReadPanels+0x80>)
 80012cc:	f001 f9d6 	bl	800267c <HAL_ADC_PollForConversion>
	  uint16_t leftPanelValue = HAL_ADC_GetValue(&hadc2)*100/2400;
 80012d0:	480f      	ldr	r0, [pc, #60]	; (8001310 <StartReadPanels+0x80>)
 80012d2:	f001 faa3 	bl	800281c <HAL_ADC_GetValue>
 80012d6:	4602      	mov	r2, r0
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	fb03 f302 	mul.w	r3, r3, r2
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <StartReadPanels+0x7c>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	81bb      	strh	r3, [r7, #12]

	  /** Update panel data structure values **/
	  // Lock data writes semaphore
	  startWritePD();
 80012e8:	f7ff ff14 	bl	8001114 <startWritePD>

	  // Change values
	  pd.rightPanelValue = rightPanelValue;
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <StartReadPanels+0x84>)
 80012f0:	6013      	str	r3, [r2, #0]
	  pd.leftPanelValue = leftPanelValue;
 80012f2:	89bb      	ldrh	r3, [r7, #12]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <StartReadPanels+0x84>)
 80012f6:	6053      	str	r3, [r2, #4]

	  // Unlock data writes semaphore
	  endWritePD();
 80012f8:	f7ff ff8a 	bl	8001210 <endWritePD>
	  // Delay time (msec)
	  osDelay(1000);
 80012fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001300:	f006 f8ad 	bl	800745e <osDelay>
  {
 8001304:	e7c8      	b.n	8001298 <StartReadPanels+0x8>
 8001306:	bf00      	nop
 8001308:	20001604 	.word	0x20001604
 800130c:	1b4e81b5 	.word	0x1b4e81b5
 8001310:	200010dc 	.word	0x200010dc
 8001314:	200016e8 	.word	0x200016e8

08001318 <StartSerialDebug>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialDebug */
void StartSerialDebug(void const * argument)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b093      	sub	sp, #76	; 0x4c
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
	#ifdef SERIAL
	  char msg[50];

	  /** Update panel data structure values **/
	  // Lock data reads semaphore
	  startReadPD();
 8001320:	f7ff fec6 	bl	80010b0 <startReadPD>
	  // Get data
	  sprintf(msg, "Light Panel Right = %hu\r\nLight Panel Left = %hu\r\nThr = %hu\r\nVar = %hu\r\n", pd.rightPanelValue, pd.leftPanelValue, pd.threshold, pd.variation);
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <StartSerialDebug+0xa0>)
 8001326:	6819      	ldr	r1, [r3, #0]
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <StartSerialDebug+0xa0>)
 800132a:	685c      	ldr	r4, [r3, #4]
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <StartSerialDebug+0xa0>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <StartSerialDebug+0xa0>)
 8001332:	68d2      	ldr	r2, [r2, #12]
 8001334:	f107 000c 	add.w	r0, r7, #12
 8001338:	9201      	str	r2, [sp, #4]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	4623      	mov	r3, r4
 800133e:	460a      	mov	r2, r1
 8001340:	491e      	ldr	r1, [pc, #120]	; (80013bc <StartSerialDebug+0xa4>)
 8001342:	f008 fca9 	bl	8009c98 <siprintf>
	  // Unlock data reads semaphore
	  endReadPD();
 8001346:	f7ff ff1d 	bl	8001184 <endReadPD>

	  // Print data
	  HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff3e 	bl	80001d0 <strlen>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	f107 010c 	add.w	r1, r7, #12
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	4817      	ldr	r0, [pc, #92]	; (80013c0 <StartSerialDebug+0xa8>)
 8001362:	f004 fcaf 	bl	8005cc4 <HAL_UART_Transmit>
	#endif

	#ifdef BLUETOOTH
      /** Update panel data structure values **/
      // Lock data reads semaphore
      startReadPD();
 8001366:	f7ff fea3 	bl	80010b0 <startReadPD>
      // Get data
      sprintf(msg, "Light Panel Right = %hu\r\nLight Panel Left = %hu\r\nThr = %hu\r\nVar = %hu\r\n", pd.rightPanelValue, pd.leftPanelValue, pd.threshold, pd.variation);
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <StartSerialDebug+0xa0>)
 800136c:	6819      	ldr	r1, [r3, #0]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <StartSerialDebug+0xa0>)
 8001370:	685c      	ldr	r4, [r3, #4]
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <StartSerialDebug+0xa0>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <StartSerialDebug+0xa0>)
 8001378:	68d2      	ldr	r2, [r2, #12]
 800137a:	f107 000c 	add.w	r0, r7, #12
 800137e:	9201      	str	r2, [sp, #4]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	4623      	mov	r3, r4
 8001384:	460a      	mov	r2, r1
 8001386:	490d      	ldr	r1, [pc, #52]	; (80013bc <StartSerialDebug+0xa4>)
 8001388:	f008 fc86 	bl	8009c98 <siprintf>
      // Unlock data reads semaphore
      endReadPD();
 800138c:	f7ff fefa 	bl	8001184 <endReadPD>

      // Print data
      HAL_UART_Transmit(&huart4, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff1b 	bl	80001d0 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f107 010c 	add.w	r1, r7, #12
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <StartSerialDebug+0xac>)
 80013a8:	f004 fc8c 	bl	8005cc4 <HAL_UART_Transmit>
	#endif
	// Delay time (msec)
	osDelay(3000);
 80013ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013b0:	f006 f855 	bl	800745e <osDelay>
  {
 80013b4:	e7b4      	b.n	8001320 <StartSerialDebug+0x8>
 80013b6:	bf00      	nop
 80013b8:	200016e8 	.word	0x200016e8
 80013bc:	0800a54c 	.word	0x0800a54c
 80013c0:	20001668 	.word	0x20001668
 80013c4:	200016fc 	.word	0x200016fc

080013c8 <StartLedsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedsTask */
void StartLedsTask(void const * argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedsTask */
  /* Infinite loop */
  for(;;)
  {
	  // Lock data reads semaphore
	  startReadPD();
 80013d0:	f7ff fe6e 	bl	80010b0 <startReadPD>
	  // Get data
	  int lpv = pd.leftPanelValue;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <StartLedsTask+0xc8>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 80013da:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <StartLedsTask+0xc8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 80013e0:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <StartLedsTask+0xc8>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <StartLedsTask+0xc8>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	60bb      	str	r3, [r7, #8]
	  // Unlock data reads semaphore
	  endReadPD();
 80013ec:	f7ff feca 	bl	8001184 <endReadPD>

	  // Check if light esposition is correct LED2 ON if OK else positional LEDS (BLUE or YELLOW) for directions
	  if (abs(rpv-lpv)<var || (rpv>th && lpv>th))
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bfb8      	it	lt
 80013fa:	425b      	neglt	r3, r3
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dc07      	bgt.n	8001412 <StartLedsTask+0x4a>
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	dd0a      	ble.n	8001420 <StartLedsTask+0x58>
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	429a      	cmp	r2, r3
 8001410:	dd06      	ble.n	8001420 <StartLedsTask+0x58>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001418:	481e      	ldr	r0, [pc, #120]	; (8001494 <StartLedsTask+0xcc>)
 800141a:	f002 fa7f 	bl	800391c <HAL_GPIO_WritePin>
 800141e:	e032      	b.n	8001486 <StartLedsTask+0xbe>
	  else if (abs(rpv-lpv)>var && rpv>lpv) {
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	bfb8      	it	lt
 800142a:	425b      	neglt	r3, r3
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	429a      	cmp	r2, r3
 8001430:	da10      	bge.n	8001454 <StartLedsTask+0x8c>
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	429a      	cmp	r2, r3
 8001438:	dd0c      	ble.n	8001454 <StartLedsTask+0x8c>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <StartLedsTask+0xcc>)
 8001442:	f002 fa6b 	bl	800391c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <StartLedsTask+0xd0>)
 800144e:	f002 fa65 	bl	800391c <HAL_GPIO_WritePin>
 8001452:	e018      	b.n	8001486 <StartLedsTask+0xbe>
	  } else if (abs(rpv-lpv)>var && rpv<lpv) {
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	bfb8      	it	lt
 800145e:	425b      	neglt	r3, r3
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	429a      	cmp	r2, r3
 8001464:	da0f      	bge.n	8001486 <StartLedsTask+0xbe>
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	da0b      	bge.n	8001486 <StartLedsTask+0xbe>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <StartLedsTask+0xcc>)
 8001476:	f002 fa51 	bl	800391c <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <StartLedsTask+0xd0>)
 8001482:	f002 fa4b 	bl	800391c <HAL_GPIO_WritePin>
	  }
	  // Delay time (msec)
	  osDelay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148a:	f005 ffe8 	bl	800745e <osDelay>
  {
 800148e:	e79f      	b.n	80013d0 <StartLedsTask+0x8>
 8001490:	200016e8 	.word	0x200016e8
 8001494:	48000400 	.word	0x48000400
 8001498:	48000800 	.word	0x48000800

0800149c <StartSynkButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSynkButton */
void StartSynkButton(void const * argument)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSynkButton */
  /* Infinite loop */
  for(;;)
  {
	  if (blue_button_pressed) {
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <StartSynkButton+0x50>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d019      	beq.n	80014e0 <StartSynkButton+0x44>
		  // Reset button pressed variable
		  blue_button_pressed = 0;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <StartSynkButton+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
		  // Start semaphore
		  startWritePD();
 80014b2:	f7ff fe2f 	bl	8001114 <startWritePD>
		  // Set threshold
		  pd.threshold = pd.leftPanelValue<pd.rightPanelValue?pd.leftPanelValue:pd.rightPanelValue;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <StartSynkButton+0x54>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <StartSynkButton+0x54>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4293      	cmp	r3, r2
 80014c0:	bfa8      	it	ge
 80014c2:	4613      	movge	r3, r2
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <StartSynkButton+0x54>)
 80014c6:	6093      	str	r3, [r2, #8]
		  // Set variation
		  pd.variation = abs(pd.leftPanelValue - pd.rightPanelValue);
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <StartSynkButton+0x54>)
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <StartSynkButton+0x54>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bfb8      	it	lt
 80014d6:	425b      	neglt	r3, r3
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <StartSynkButton+0x54>)
 80014da:	60d3      	str	r3, [r2, #12]
		  // Release semaphore
		  endWritePD();
 80014dc:	f7ff fe98 	bl	8001210 <endWritePD>
	  }
	  // Delay time (msec)
	  osDelay(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f005 ffbb 	bl	800745e <osDelay>
	  if (blue_button_pressed) {
 80014e8:	e7dc      	b.n	80014a4 <StartSynkButton+0x8>
 80014ea:	bf00      	nop
 80014ec:	200002ec 	.word	0x200002ec
 80014f0:	200016e8 	.word	0x200016e8

080014f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001506:	f000 fc95 	bl	8001e34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40012c00 	.word	0x40012c00

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_MspInit+0x4c>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <HAL_MspInit+0x4c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6613      	str	r3, [r2, #96]	; 0x60
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_MspInit+0x4c>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_MspInit+0x4c>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_MspInit+0x4c>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_MspInit+0x4c>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	210f      	movs	r1, #15
 8001562:	f06f 0001 	mvn.w	r0, #1
 8001566:	f001 feaf 	bl	80032c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a4b      	ldr	r2, [pc, #300]	; (80016c4 <HAL_ADC_MspInit+0x14c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d15e      	bne.n	8001658 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800159a:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_ADC_MspInit+0x150>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_ADC_MspInit+0x150>)
 80015a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015a4:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <HAL_ADC_MspInit+0x150>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a46      	ldr	r2, [pc, #280]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c4:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a40      	ldr	r2, [pc, #256]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e0:	4a3a      	ldr	r2, [pc, #232]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e8:	4b38      	ldr	r3, [pc, #224]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	4a34      	ldr	r2, [pc, #208]	; (80016cc <HAL_ADC_MspInit+0x154>)
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <HAL_ADC_MspInit+0x154>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16 
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1|ARD_A3_Pin|ARD_A2_Pin 
 800160c:	233f      	movs	r3, #63	; 0x3f
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001610:	230b      	movs	r3, #11
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	482c      	ldr	r0, [pc, #176]	; (80016d0 <HAL_ADC_MspInit+0x158>)
 8001620:	f001 ffd4 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001624:	2310      	movs	r3, #16
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001628:	230b      	movs	r3, #11
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f001 ffc7 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 800163e:	2302      	movs	r3, #2
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001642:	230b      	movs	r3, #11
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	4820      	ldr	r0, [pc, #128]	; (80016d4 <HAL_ADC_MspInit+0x15c>)
 8001652:	f001 ffbb 	bl	80035cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001656:	e031      	b.n	80016bc <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_ADC_MspInit+0x160>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12c      	bne.n	80016bc <HAL_ADC_MspInit+0x144>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_ADC_MspInit+0x150>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_ADC_MspInit+0x150>)
 800166a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_ADC_MspInit+0x150>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d10b      	bne.n	800168c <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_ADC_MspInit+0x154>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_ADC_MspInit+0x154>)
 800167a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800167e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_ADC_MspInit+0x154>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_ADC_MspInit+0x154>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_ADC_MspInit+0x154>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_ADC_MspInit+0x154>)
 800169a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016a4:	2302      	movs	r3, #2
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016a8:	230b      	movs	r3, #11
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b4:	4619      	mov	r1, r3
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <HAL_ADC_MspInit+0x158>)
 80016b8:	f001 ff88 	bl	80035cc <HAL_GPIO_Init>
}
 80016bc:	bf00      	nop
 80016be:	3738      	adds	r7, #56	; 0x38
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	50040000 	.word	0x50040000
 80016c8:	200002e4 	.word	0x200002e4
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000800 	.word	0x48000800
 80016d4:	48000400 	.word	0x48000400
 80016d8:	50040100 	.word	0x50040100

080016dc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_DFSDM_ChannelMspInit+0x7c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d128      	bne.n	800174e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_DFSDM_ChannelMspInit+0x80>)
 80016fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001706:	6613      	str	r3, [r2, #96]	; 0x60
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_DFSDM_ChannelMspInit+0x80>)
 800170a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_DFSDM_ChannelMspInit+0x80>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800172c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800173e:	2306      	movs	r3, #6
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_DFSDM_ChannelMspInit+0x84>)
 800174a:	f001 ff3f 	bl	80035cc <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002e8 	.word	0x200002e8
 800175c:	40021000 	.word	0x40021000
 8001760:	48001000 	.word	0x48001000

08001764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_I2C_MspInit+0x7c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d128      	bne.n	80017d8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_I2C_MspInit+0x80>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_I2C_MspInit+0x80>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_I2C_MspInit+0x80>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800179e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a4:	2312      	movs	r3, #18
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017b0:	2304      	movs	r3, #4
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <HAL_I2C_MspInit+0x84>)
 80017bc:	f001 ff06 	bl	80035cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_I2C_MspInit+0x80>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a07      	ldr	r2, [pc, #28]	; (80017e4 <HAL_I2C_MspInit+0x80>)
 80017c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_I2C_MspInit+0x80>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40005800 	.word	0x40005800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000400 	.word	0x48000400

080017ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a17      	ldr	r2, [pc, #92]	; (8001868 <HAL_QSPI_MspInit+0x7c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d128      	bne.n	8001860 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_QSPI_MspInit+0x80>)
 8001810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001812:	4a16      	ldr	r2, [pc, #88]	; (800186c <HAL_QSPI_MspInit+0x80>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6513      	str	r3, [r2, #80]	; 0x50
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <HAL_QSPI_MspInit+0x80>)
 800181c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_QSPI_MspInit+0x80>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <HAL_QSPI_MspInit+0x80>)
 800182c:	f043 0310 	orr.w	r3, r3, #16
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_QSPI_MspInit+0x80>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 800183e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001842:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001850:	230a      	movs	r3, #10
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_QSPI_MspInit+0x84>)
 800185c:	f001 feb6 	bl	80035cc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	a0001000 	.word	0xa0001000
 800186c:	40021000 	.word	0x40021000
 8001870:	48001000 	.word	0x48001000

08001874 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_SPI_MspInit+0x7c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d128      	bne.n	80018e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 800189c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a0:	6593      	str	r3, [r2, #88]	; 0x58
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_SPI_MspInit+0x80>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80018c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018d8:	2306      	movs	r3, #6
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <HAL_SPI_MspInit+0x84>)
 80018e4:	f001 fe72 	bl	80035cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018e8:	bf00      	nop
 80018ea:	3728      	adds	r7, #40	; 0x28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40003c00 	.word	0x40003c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000800 	.word	0x48000800

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	; 0x38
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_UART_MspInit+0x148>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d131      	bne.n	8001982 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001924:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a43      	ldr	r2, [pc, #268]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800194e:	2303      	movs	r3, #3
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800195e:	2308      	movs	r3, #8
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f001 fe2e 	bl	80035cc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2105      	movs	r1, #5
 8001974:	2034      	movs	r0, #52	; 0x34
 8001976:	f001 fca7 	bl	80032c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800197a:	2034      	movs	r0, #52	; 0x34
 800197c:	f001 fcc0 	bl	8003300 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001980:	e05b      	b.n	8001a3a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <HAL_UART_MspInit+0x150>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d128      	bne.n	80019de <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART1_CLK_ENABLE();
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001990:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001996:	6613      	str	r3, [r2, #96]	; 0x60
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	4a27      	ldr	r2, [pc, #156]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019cc:	2307      	movs	r3, #7
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	4619      	mov	r1, r3
 80019d6:	481e      	ldr	r0, [pc, #120]	; (8001a50 <HAL_UART_MspInit+0x154>)
 80019d8:	f001 fdf8 	bl	80035cc <HAL_GPIO_Init>
}
 80019dc:	e02d      	b.n	8001a3a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_UART_MspInit+0x158>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d128      	bne.n	8001a3a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f2:	6593      	str	r3, [r2, #88]	; 0x58
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 80019f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001a06:	f043 0308 	orr.w	r3, r3, #8
 8001a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_UART_MspInit+0x14c>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001a18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4808      	ldr	r0, [pc, #32]	; (8001a58 <HAL_UART_MspInit+0x15c>)
 8001a36:	f001 fdc9 	bl	80035cc <HAL_GPIO_Init>
}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40004c00 	.word	0x40004c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	48000400 	.word	0x48000400
 8001a54:	40004800 	.word	0x40004800
 8001a58:	48000c00 	.word	0x48000c00

08001a5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7c:	d154      	bne.n	8001b28 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	4a2b      	ldr	r2, [pc, #172]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f001 fd8d 	bl	80035cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001ab2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f001 fd7b 	bl	80035cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001adc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d114      	bne.n	8001b24 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001b12:	f002 fa21 	bl	8003f58 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_PCD_MspInit+0xd4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b22:	e001      	b.n	8001b28 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001b24:	f002 fa18 	bl	8003f58 <HAL_PWREx_EnableVddUSB>
}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	; 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	2019      	movs	r0, #25
 8001b4a:	f001 fbbd 	bl	80032c8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8001b4e:	2019      	movs	r0, #25
 8001b50:	f001 fbd6 	bl	8003300 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_InitTick+0x9c>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_InitTick+0x9c>)
 8001b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_InitTick+0x9c>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b6c:	f107 0210 	add.w	r2, r7, #16
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f81a 	bl	8004bb0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b7c:	f003 f802 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 8001b80:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <HAL_InitTick+0xa0>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_InitTick+0xa4>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_InitTick+0xa8>)
 8001b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_InitTick+0xa4>)
 8001b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_InitTick+0xa4>)
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_InitTick+0xa4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_InitTick+0xa4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001bb0:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <HAL_InitTick+0xa4>)
 8001bb2:	f003 fdd9 	bl	8005768 <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001bbc:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <HAL_InitTick+0xa4>)
 8001bbe:	f003 fe09 	bl	80057d4 <HAL_TIM_Base_Start_IT>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3730      	adds	r7, #48	; 0x30
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	431bde83 	.word	0x431bde83
 8001bd8:	200017dc 	.word	0x200017dc
 8001bdc:	40012c00 	.word	0x40012c00

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c18:	2020      	movs	r0, #32
 8001c1a:	f001 fe97 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001c1e:	2040      	movs	r0, #64	; 0x40
 8001c20:	f001 fe94 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c24:	2080      	movs	r0, #128	; 0x80
 8001c26:	f001 fe91 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c2e:	f001 fe8d 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c3e:	f003 fdf3 	bl	8005828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200017dc 	.word	0x200017dc

08001c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <EXTI15_10_IRQHandler+0x44>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <EXTI15_10_IRQHandler+0x16>
	  blue_button_pressed = 1; // toggle blue button pressed
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <EXTI15_10_IRQHandler+0x48>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001c62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c66:	f001 fe71 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c6e:	f001 fe6d 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c76:	f001 fe69 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c7e:	f001 fe65 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c86:	f001 fe61 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40010400 	.word	0x40010400
 8001c94:	200002ec 	.word	0x200002ec

08001c98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
  uint8_t Rx_Data[1];
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c9e:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <UART4_IRQHandler+0x48>)
 8001ca0:	f004 f9a2 	bl	8005fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  HAL_UART_Receive_IT(&huart4, Rx_Data, 1);
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <UART4_IRQHandler+0x48>)
 8001cac:	f004 f8fa 	bl	8005ea4 <HAL_UART_Receive_IT>

  if (Rx_Data[0] == 'R') {
 8001cb0:	783b      	ldrb	r3, [r7, #0]
 8001cb2:	2b52      	cmp	r3, #82	; 0x52
 8001cb4:	d110      	bne.n	8001cd8 <UART4_IRQHandler+0x40>
	  blue_button_pressed = 1;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <UART4_IRQHandler+0x4c>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
	  char* msg = "Soglia modificata!\n";
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <UART4_IRQHandler+0x50>)
 8001cbe:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit_IT(&huart4, (uint8_t *) msg, strlen(msg));
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7fe fa85 	bl	80001d0 <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <UART4_IRQHandler+0x48>)
 8001cd0:	f004 f88c 	bl	8005dec <HAL_UART_Transmit_IT>
	  Rx_Data[0] = '\0';
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	703b      	strb	r3, [r7, #0]
  }
  /* USER CODE END UART4_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200016fc 	.word	0x200016fc
 8001ce4:	200002ec 	.word	0x200002ec
 8001ce8:	0800a594 	.word	0x0800a594

08001cec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_sbrk+0x50>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x16>
		heap_end = &end;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <_sbrk+0x50>)
 8001cfe:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <_sbrk+0x54>)
 8001d00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <_sbrk+0x50>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <_sbrk+0x50>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	466a      	mov	r2, sp
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d907      	bls.n	8001d26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d16:	f007 ff81 	bl	8009c1c <__errno>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	e006      	b.n	8001d34 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <_sbrk+0x50>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <_sbrk+0x50>)
 8001d30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200002f0 	.word	0x200002f0
 8001d40:	20001828 	.word	0x20001828

08001d44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <SystemInit+0x64>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <SystemInit+0x64>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <SystemInit+0x68>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a13      	ldr	r2, [pc, #76]	; (8001dac <SystemInit+0x68>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <SystemInit+0x68>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <SystemInit+0x68>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <SystemInit+0x68>)
 8001d70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001d74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001d78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <SystemInit+0x68>)
 8001d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <SystemInit+0x68>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <SystemInit+0x68>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <SystemInit+0x68>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SystemInit+0x64>)
 8001d96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00
 8001dac:	40021000 	.word	0x40021000

08001db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001db4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001db6:	e003      	b.n	8001dc0 <LoopCopyDataInit>

08001db8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001dbc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dbe:	3104      	adds	r1, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001dc0:	480b      	ldr	r0, [pc, #44]	; (8001df0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001dc4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dc6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001dc8:	d3f6      	bcc.n	8001db8 <CopyDataInit>
	ldr	r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dcc:	e002      	b.n	8001dd4 <LoopFillZerobss>

08001dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001dd0:	f842 3b04 	str.w	r3, [r2], #4

08001dd4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <LoopForever+0x16>)
	cmp	r2, r3
 8001dd6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001dd8:	d3f9      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dda:	f7ff ffb3 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f007 ff23 	bl	8009c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de2:	f7fe fc15 	bl	8000610 <main>

08001de6 <LoopForever>:

LoopForever:
    b LoopForever
 8001de6:	e7fe      	b.n	8001de6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001dec:	0800a63c 	.word	0x0800a63c
	ldr	r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001df4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001df8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001dfc:	20001824 	.word	0x20001824

08001e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>

08001e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f001 fa50 	bl	80032b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fe8e 	bl	8001b34 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	e001      	b.n	8001e28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e24:	f7ff fb80 	bl	8001528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_IncTick+0x1c>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_IncTick+0x1c>)
 8001e44:	6013      	str	r3, [r2, #0]
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	2000181c 	.word	0x2000181c
 8001e54:	20000008 	.word	0x20000008

08001e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_GetTick+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000181c 	.word	0x2000181c

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff ffee 	bl	8001e58 <HAL_GetTick>
 8001e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d004      	beq.n	8001e94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_Delay+0x40>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e94:	bf00      	nop
 8001e96:	f7ff ffdf 	bl	8001e58 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d8f7      	bhi.n	8001e96 <HAL_Delay+0x26>
  {
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f1c:	b490      	push	{r4, r7}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	3360      	adds	r3, #96	; 0x60
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001f38:	6822      	ldr	r2, [r4, #0]
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <LL_ADC_SetOffset+0x40>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f4e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc90      	pop	{r4, r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	03fff000 	.word	0x03fff000

08001f60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f60:	b490      	push	{r4, r7}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc90      	pop	{r4, r7}
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f88:	b490      	push	{r4, r7}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3360      	adds	r3, #96	; 0x60
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc90      	pop	{r4, r7}
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fde:	b490      	push	{r4, r7}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3330      	adds	r3, #48	; 0x30
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	4413      	add	r3, r2
 8001ffc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	211f      	movs	r1, #31
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 011f 	and.w	r1, r3, #31
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	4313      	orrs	r3, r2
 8002024:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bc90      	pop	{r4, r7}
 800202e:	4770      	bx	lr

08002030 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002030:	b490      	push	{r4, r7}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3314      	adds	r3, #20
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	0e5b      	lsrs	r3, r3, #25
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0d1b      	lsrs	r3, r3, #20
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2107      	movs	r1, #7
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	401a      	ands	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0d1b      	lsrs	r3, r3, #20
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bc90      	pop	{r4, r7}
 800207e:	4770      	bx	lr

08002080 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0318 	and.w	r3, r3, #24
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020a4:	40d9      	lsrs	r1, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	400b      	ands	r3, r1
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	431a      	orrs	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	0007ffff 	.word	0x0007ffff

080020c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 031f 	and.w	r3, r3, #31
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6093      	str	r3, [r2, #8]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002138:	d101      	bne.n	800213e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800215c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002160:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002188:	d101      	bne.n	800218e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <LL_ADC_IsEnabled+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_IsEnabled+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b04      	cmp	r3, #4
 8002224:	d101      	bne.n	800222a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b08      	cmp	r3, #8
 800224a:	d101      	bne.n	8002250 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e134      	b.n	80024e4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff f975 	bl	8001578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff3f 	bl	8002124 <LL_ADC_IsDeepPowerDownEnabled>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff25 	bl	8002100 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff5a 	bl	8002174 <LL_ADC_IsInternalRegulatorEnabled>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d113      	bne.n	80022ee <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff3e 	bl	800214c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022d0:	4b86      	ldr	r3, [pc, #536]	; (80024ec <HAL_ADC_Init+0x28c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	4a86      	ldr	r2, [pc, #536]	; (80024f0 <HAL_ADC_Init+0x290>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e0:	e002      	b.n	80022e8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff3e 	bl	8002174 <LL_ADC_IsInternalRegulatorEnabled>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	f043 0210 	orr.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f043 0201 	orr.w	r2, r3, #1
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff77 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 8002324:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80cf 	bne.w	80024d2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 80cb 	bne.w	80024d2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff37 	bl	80021c4 <LL_ADC_IsEnabled>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d115      	bne.n	8002388 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800235c:	4865      	ldr	r0, [pc, #404]	; (80024f4 <HAL_ADC_Init+0x294>)
 800235e:	f7ff ff31 	bl	80021c4 <LL_ADC_IsEnabled>
 8002362:	4604      	mov	r4, r0
 8002364:	4864      	ldr	r0, [pc, #400]	; (80024f8 <HAL_ADC_Init+0x298>)
 8002366:	f7ff ff2d 	bl	80021c4 <LL_ADC_IsEnabled>
 800236a:	4603      	mov	r3, r0
 800236c:	431c      	orrs	r4, r3
 800236e:	4863      	ldr	r0, [pc, #396]	; (80024fc <HAL_ADC_Init+0x29c>)
 8002370:	f7ff ff28 	bl	80021c4 <LL_ADC_IsEnabled>
 8002374:	4603      	mov	r3, r0
 8002376:	4323      	orrs	r3, r4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4619      	mov	r1, r3
 8002382:	485f      	ldr	r0, [pc, #380]	; (8002500 <HAL_ADC_Init+0x2a0>)
 8002384:	f7ff fd96 	bl	8001eb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7e5b      	ldrb	r3, [r3, #25]
 800238c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002392:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002398:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800239e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d106      	bne.n	80023c4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	3b01      	subs	r3, #1
 80023bc:	045b      	lsls	r3, r3, #17
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	4b47      	ldr	r3, [pc, #284]	; (8002504 <HAL_ADC_Init+0x2a4>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff0a 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 80023fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff17 	bl	8002238 <LL_ADC_INJ_IsConversionOngoing>
 800240a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d13d      	bne.n	800248e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d13a      	bne.n	800248e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800241c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002424:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002434:	f023 0302 	bic.w	r3, r3, #2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	69b9      	ldr	r1, [r7, #24]
 800243e:	430b      	orrs	r3, r1
 8002440:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002448:	2b01      	cmp	r3, #1
 800244a:	d118      	bne.n	800247e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002456:	f023 0304 	bic.w	r3, r3, #4
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002462:	4311      	orrs	r1, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002468:	4311      	orrs	r1, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800246e:	430a      	orrs	r2, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	611a      	str	r2, [r3, #16]
 800247c:	e007      	b.n	800248e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10c      	bne.n	80024b0 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f023 010f 	bic.w	r1, r3, #15
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
 80024ae:	e007      	b.n	80024c0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020f 	bic.w	r2, r2, #15
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f023 0303 	bic.w	r3, r3, #3
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
 80024d0:	e007      	b.n	80024e2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3724      	adds	r7, #36	; 0x24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	20000000 	.word	0x20000000
 80024f0:	053e2d63 	.word	0x053e2d63
 80024f4:	50040000 	.word	0x50040000
 80024f8:	50040100 	.word	0x50040100
 80024fc:	50040200 	.word	0x50040200
 8002500:	50040300 	.word	0x50040300
 8002504:	fff0c007 	.word	0xfff0c007

08002508 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002510:	4857      	ldr	r0, [pc, #348]	; (8002670 <HAL_ADC_Start+0x168>)
 8002512:	f7ff fdd9 	bl	80020c8 <LL_ADC_GetMultimode>
 8002516:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe78 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 809c 	bne.w	8002662 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_ADC_Start+0x30>
 8002534:	2302      	movs	r3, #2
 8002536:	e097      	b.n	8002668 <HAL_ADC_Start+0x160>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fcdd 	bl	8002f00 <ADC_Enable>
 8002546:	4603      	mov	r3, r0
 8002548:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800254a:	7dfb      	ldrb	r3, [r7, #23]
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 8083 	bne.w	8002658 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a42      	ldr	r2, [pc, #264]	; (8002674 <HAL_ADC_Start+0x16c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d002      	beq.n	8002576 <HAL_ADC_Start+0x6e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	e000      	b.n	8002578 <HAL_ADC_Start+0x70>
 8002576:	4b40      	ldr	r3, [pc, #256]	; (8002678 <HAL_ADC_Start+0x170>)
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	4293      	cmp	r3, r2
 800257e:	d002      	beq.n	8002586 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259e:	d106      	bne.n	80025ae <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f023 0206 	bic.w	r2, r3, #6
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	659a      	str	r2, [r3, #88]	; 0x58
 80025ac:	e002      	b.n	80025b4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	221c      	movs	r2, #28
 80025ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	; (8002674 <HAL_ADC_Start+0x16c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d002      	beq.n	80025d4 <HAL_ADC_Start+0xcc>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e000      	b.n	80025d6 <HAL_ADC_Start+0xce>
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_ADC_Start+0x170>)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	4293      	cmp	r3, r2
 80025dc:	d008      	beq.n	80025f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d002      	beq.n	80025f0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d114      	bne.n	800261a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002606:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fde9 	bl	80021ea <LL_ADC_REG_StartConversion>
 8002618:	e025      	b.n	8002666 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <HAL_ADC_Start+0x16c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d002      	beq.n	8002636 <HAL_ADC_Start+0x12e>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e000      	b.n	8002638 <HAL_ADC_Start+0x130>
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <HAL_ADC_Start+0x170>)
 8002638:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00f      	beq.n	8002666 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800264e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
 8002656:	e006      	b.n	8002666 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002660:	e001      	b.n	8002666 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	50040300 	.word	0x50040300
 8002674:	50040100 	.word	0x50040100
 8002678:	50040000 	.word	0x50040000

0800267c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002686:	4862      	ldr	r0, [pc, #392]	; (8002810 <HAL_ADC_PollForConversion+0x194>)
 8002688:	f7ff fd1e 	bl	80020c8 <LL_ADC_GetMultimode>
 800268c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	2b08      	cmp	r3, #8
 8002694:	d102      	bne.n	800269c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002696:	2308      	movs	r3, #8
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	e02a      	b.n	80026f2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d002      	beq.n	80026ae <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b09      	cmp	r3, #9
 80026ac:	d111      	bne.n	80026d2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e09d      	b.n	8002808 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026cc:	2304      	movs	r3, #4
 80026ce:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026d0:	e00f      	b.n	80026f2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026d2:	484f      	ldr	r0, [pc, #316]	; (8002810 <HAL_ADC_PollForConversion+0x194>)
 80026d4:	f7ff fd06 	bl	80020e4 <LL_ADC_GetMultiDMATransfer>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f043 0220 	orr.w	r2, r3, #32
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e08c      	b.n	8002808 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026ee:	2304      	movs	r3, #4
 80026f0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026f2:	f7ff fbb1 	bl	8001e58 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026f8:	e01a      	b.n	8002730 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d016      	beq.n	8002730 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002702:	f7ff fba9 	bl	8001e58 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <HAL_ADC_PollForConversion+0x9c>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	f043 0204 	orr.w	r2, r3, #4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e06b      	b.n	8002808 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0dd      	beq.n	80026fa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fc32 	bl	8001fb8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01c      	beq.n	8002794 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7e5b      	ldrb	r3, [r3, #25]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b08      	cmp	r3, #8
 800276e:	d111      	bne.n	8002794 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_ADC_PollForConversion+0x198>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d002      	beq.n	80027a4 <HAL_ADC_PollForConversion+0x128>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_PollForConversion+0x12a>
 80027a4:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <HAL_ADC_PollForConversion+0x19c>)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d008      	beq.n	80027c0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b05      	cmp	r3, #5
 80027b8:	d002      	beq.n	80027c0 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d104      	bne.n	80027ca <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	e00c      	b.n	80027e4 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_ADC_PollForConversion+0x198>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d002      	beq.n	80027da <HAL_ADC_PollForConversion+0x15e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	e000      	b.n	80027dc <HAL_ADC_PollForConversion+0x160>
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_ADC_PollForConversion+0x19c>)
 80027dc:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d104      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2208      	movs	r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e008      	b.n	8002806 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	50040300 	.word	0x50040300
 8002814:	50040100 	.word	0x50040100
 8002818:	50040000 	.word	0x50040000

0800281c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0a6      	sub	sp, #152	; 0x98
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_ADC_ConfigChannel+0x22>
 8002856:	2302      	movs	r3, #2
 8002858:	e348      	b.n	8002eec <HAL_ADC_ConfigChannel+0x6b4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fcd3 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8329 	bne.w	8002ec6 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d824      	bhi.n	80028c6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	3b02      	subs	r3, #2
 8002882:	2b03      	cmp	r3, #3
 8002884:	d81b      	bhi.n	80028be <HAL_ADC_ConfigChannel+0x86>
 8002886:	a201      	add	r2, pc, #4	; (adr r2, 800288c <HAL_ADC_ConfigChannel+0x54>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028a5 	.word	0x080028a5
 8002894:	080028ad 	.word	0x080028ad
 8002898:	080028b5 	.word	0x080028b5
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	220c      	movs	r2, #12
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	e011      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2212      	movs	r2, #18
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	e00d      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2218      	movs	r2, #24
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e009      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2206      	movs	r2, #6
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	e000      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80028c6:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	f7ff fb82 	bl	8001fde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fc97 	bl	8002212 <LL_ADC_REG_IsConversionOngoing>
 80028e4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fca3 	bl	8002238 <LL_ADC_INJ_IsConversionOngoing>
 80028f2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 8148 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 8143 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6818      	ldr	r0, [r3, #0]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	461a      	mov	r2, r3
 8002918:	f7ff fb8a 	bl	8002030 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d00a      	beq.n	8002954 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6919      	ldr	r1, [r3, #16]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800294e:	f7ff fae5 	bl	8001f1c <LL_ADC_SetOffset>
 8002952:	e11d      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fb00 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x148>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff faf5 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	0e9b      	lsrs	r3, r3, #26
 800297a:	f003 021f 	and.w	r2, r3, #31
 800297e:	e012      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x16e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff faea 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800299c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_ConfigChannel+0x186>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	e00a      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x19c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80029cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d106      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2200      	movs	r2, #0
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fad1 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fab7 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x1da>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff faac 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	0e9b      	lsrs	r3, r3, #26
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	e010      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x1fc>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff faa1 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d105      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x214>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	e00a      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x22a>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d106      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fa8a 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fa70 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x268>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fa65 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 021f 	and.w	r2, r3, #31
 8002a9e:	e010      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x28a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fa5a 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x2a2>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0e9b      	lsrs	r3, r3, #26
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	e00a      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x2b8>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d106      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2200      	movs	r2, #0
 8002afa:	2102      	movs	r1, #2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fa43 	bl	8001f88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2103      	movs	r1, #3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fa29 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x2f6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fa1e 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b24:	4603      	mov	r3, r0
 8002b26:	0e9b      	lsrs	r3, r3, #26
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	e010      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x318>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2103      	movs	r1, #3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fa13 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x330>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	e00a      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x346>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d106      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2103      	movs	r1, #3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f9fc 	bl	8001f88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fb15 	bl	80021c4 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 810c 	bne.w	8002dba <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff fa66 	bl	8002080 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4aad      	ldr	r2, [pc, #692]	; (8002e70 <HAL_ADC_ConfigChannel+0x638>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f040 80fd 	bne.w	8002dba <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x3b0>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	bf94      	ite	ls
 8002be0:	2301      	movls	r3, #1
 8002be2:	2300      	movhi	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e012      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x3d6>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2b09      	cmp	r3, #9
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d064      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x3f6>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	3301      	adds	r3, #1
 8002c26:	069b      	lsls	r3, r3, #26
 8002c28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c2c:	e00e      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x414>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x434>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	2101      	movs	r1, #1
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	e010      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x456>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	ea42 0103 	orr.w	r1, r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x47c>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f003 021f 	and.w	r2, r3, #31
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	051b      	lsls	r3, r3, #20
 8002cb2:	e011      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4a0>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	fab3 f383 	clz	r3, r3
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	e069      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x4c0>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	069b      	lsls	r3, r3, #26
 8002cf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf6:	e00e      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x4de>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	61fb      	str	r3, [r7, #28]
  return result;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	069b      	lsls	r3, r3, #26
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x4fe>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	2101      	movs	r1, #1
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	e010      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x520>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	617b      	str	r3, [r7, #20]
  return result;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x54c>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b1e      	subs	r3, #30
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d82:	e014      	b.n	8002dae <HAL_ADC_ConfigChannel+0x576>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	60fb      	str	r3, [r7, #12]
  return result;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	3b1e      	subs	r3, #30
 8002da8:	051b      	lsls	r3, r3, #20
 8002daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dae:	430b      	orrs	r3, r1
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7ff f93b 	bl	8002030 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <HAL_ADC_ConfigChannel+0x63c>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 808c 	beq.w	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc8:	482b      	ldr	r0, [pc, #172]	; (8002e78 <HAL_ADC_ConfigChannel+0x640>)
 8002dca:	f7ff f899 	bl	8001f00 <LL_ADC_GetCommonPathInternalCh>
 8002dce:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <HAL_ADC_ConfigChannel+0x644>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d12b      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x5fc>
 8002ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d125      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a24      	ldr	r2, [pc, #144]	; (8002e80 <HAL_ADC_ConfigChannel+0x648>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x5c4>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a23      	ldr	r2, [pc, #140]	; (8002e84 <HAL_ADC_ConfigChannel+0x64c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d16e      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e04:	4619      	mov	r1, r3
 8002e06:	481c      	ldr	r0, [pc, #112]	; (8002e78 <HAL_ADC_ConfigChannel+0x640>)
 8002e08:	f7ff f867 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_ADC_ConfigChannel+0x650>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_ADC_ConfigChannel+0x654>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099a      	lsrs	r2, r3, #6
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e24:	e002      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f9      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e32:	e052      	b.n	8002eda <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_ADC_ConfigChannel+0x658>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d12a      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x65c>
 8002e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d124      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_ADC_ConfigChannel+0x648>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x626>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_ADC_ConfigChannel+0x64c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d13f      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e66:	4619      	mov	r1, r3
 8002e68:	4803      	ldr	r0, [pc, #12]	; (8002e78 <HAL_ADC_ConfigChannel+0x640>)
 8002e6a:	f7ff f836 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6e:	e036      	b.n	8002ede <HAL_ADC_ConfigChannel+0x6a6>
 8002e70:	407f0000 	.word	0x407f0000
 8002e74:	80080000 	.word	0x80080000
 8002e78:	50040300 	.word	0x50040300
 8002e7c:	c7520000 	.word	0xc7520000
 8002e80:	50040000 	.word	0x50040000
 8002e84:	50040200 	.word	0x50040200
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	053e2d63 	.word	0x053e2d63
 8002e90:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_ADC_ConfigChannel+0x6bc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d120      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_ADC_ConfigChannel+0x6c0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d115      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	480f      	ldr	r0, [pc, #60]	; (8002efc <HAL_ADC_ConfigChannel+0x6c4>)
 8002ec0:	f7ff f80b 	bl	8001eda <LL_ADC_SetCommonPathInternalCh>
 8002ec4:	e00c      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002ed8:	e002      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ede:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ee8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3798      	adds	r7, #152	; 0x98
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	80000001 	.word	0x80000001
 8002ef8:	50040000 	.word	0x50040000
 8002efc:	50040300 	.word	0x50040300

08002f00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff f959 	bl	80021c4 <LL_ADC_IsEnabled>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d146      	bne.n	8002fa6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <ADC_Enable+0xb0>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f043 0210 	orr.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e032      	b.n	8002fa8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff f928 	bl	800219c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe ff84 	bl	8001e58 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f52:	e021      	b.n	8002f98 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f933 	bl	80021c4 <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff f917 	bl	800219c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f6e:	f7fe ff73 	bl	8001e58 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d90d      	bls.n	8002f98 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f043 0210 	orr.w	r2, r3, #16
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e007      	b.n	8002fa8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d1d6      	bne.n	8002f54 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	8000003f 	.word	0x8000003f

08002fb4 <LL_ADC_IsEnabled>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <LL_ADC_IsEnabled+0x18>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <LL_ADC_IsEnabled+0x1a>
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_REG_IsConversionOngoing>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d101      	bne.n	8002ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b09f      	sub	sp, #124	; 0x7c
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800301a:	2302      	movs	r3, #2
 800301c:	e08f      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a47      	ldr	r2, [pc, #284]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d102      	bne.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003030:	4b46      	ldr	r3, [pc, #280]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	e001      	b.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	f043 0220 	orr.w	r2, r3, #32
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e072      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ffbd 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 8003060:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ffb7 	bl	8002fda <LL_ADC_REG_IsConversionOngoing>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d154      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003074:	2b00      	cmp	r3, #0
 8003076:	d151      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800307a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d02c      	beq.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003096:	035b      	lsls	r3, r3, #13
 8003098:	430b      	orrs	r3, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030a0:	4829      	ldr	r0, [pc, #164]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80030a2:	f7ff ff87 	bl	8002fb4 <LL_ADC_IsEnabled>
 80030a6:	4604      	mov	r4, r0
 80030a8:	4828      	ldr	r0, [pc, #160]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80030aa:	f7ff ff83 	bl	8002fb4 <LL_ADC_IsEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	431c      	orrs	r4, r3
 80030b2:	4828      	ldr	r0, [pc, #160]	; (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030b4:	f7ff ff7e 	bl	8002fb4 <LL_ADC_IsEnabled>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4323      	orrs	r3, r4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d137      	bne.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030c8:	f023 030f 	bic.w	r3, r3, #15
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	6811      	ldr	r1, [r2, #0]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030da:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030dc:	e028      	b.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ea:	4817      	ldr	r0, [pc, #92]	; (8003148 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80030ec:	f7ff ff62 	bl	8002fb4 <LL_ADC_IsEnabled>
 80030f0:	4604      	mov	r4, r0
 80030f2:	4816      	ldr	r0, [pc, #88]	; (800314c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80030f4:	f7ff ff5e 	bl	8002fb4 <LL_ADC_IsEnabled>
 80030f8:	4603      	mov	r3, r0
 80030fa:	431c      	orrs	r4, r3
 80030fc:	4815      	ldr	r0, [pc, #84]	; (8003154 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030fe:	f7ff ff59 	bl	8002fb4 <LL_ADC_IsEnabled>
 8003102:	4603      	mov	r3, r0
 8003104:	4323      	orrs	r3, r4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d112      	bne.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003112:	f023 030f 	bic.w	r3, r3, #15
 8003116:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003118:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800311a:	e009      	b.n	8003130 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800312e:	e000      	b.n	8003132 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003130:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800313a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800313e:	4618      	mov	r0, r3
 8003140:	377c      	adds	r7, #124	; 0x7c
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}
 8003146:	bf00      	nop
 8003148:	50040000 	.word	0x50040000
 800314c:	50040100 	.word	0x50040100
 8003150:	50040300 	.word	0x50040300
 8003154:	50040200 	.word	0x50040200

08003158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <__NVIC_SetPriorityGrouping+0x44>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003174:	4013      	ands	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800318a:	4a04      	ldr	r2, [pc, #16]	; (800319c <__NVIC_SetPriorityGrouping+0x44>)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	60d3      	str	r3, [r2, #12]
}
 8003190:	bf00      	nop
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <__NVIC_GetPriorityGrouping+0x18>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	f003 0307 	and.w	r3, r3, #7
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	db0b      	blt.n	80031e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	f003 021f 	and.w	r2, r3, #31
 80031d4:	4907      	ldr	r1, [pc, #28]	; (80031f4 <__NVIC_EnableIRQ+0x38>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2001      	movs	r0, #1
 80031de:	fa00 f202 	lsl.w	r2, r0, r2
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000e100 	.word	0xe000e100

080031f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	2b00      	cmp	r3, #0
 800320a:	db0a      	blt.n	8003222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	b2da      	uxtb	r2, r3
 8003210:	490c      	ldr	r1, [pc, #48]	; (8003244 <__NVIC_SetPriority+0x4c>)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	0112      	lsls	r2, r2, #4
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	440b      	add	r3, r1
 800321c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003220:	e00a      	b.n	8003238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4908      	ldr	r1, [pc, #32]	; (8003248 <__NVIC_SetPriority+0x50>)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	3b04      	subs	r3, #4
 8003230:	0112      	lsls	r2, r2, #4
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	440b      	add	r3, r1
 8003236:	761a      	strb	r2, [r3, #24]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000e100 	.word	0xe000e100
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f1c3 0307 	rsb	r3, r3, #7
 8003266:	2b04      	cmp	r3, #4
 8003268:	bf28      	it	cs
 800326a:	2304      	movcs	r3, #4
 800326c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3304      	adds	r3, #4
 8003272:	2b06      	cmp	r3, #6
 8003274:	d902      	bls.n	800327c <NVIC_EncodePriority+0x30>
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3b03      	subs	r3, #3
 800327a:	e000      	b.n	800327e <NVIC_EncodePriority+0x32>
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	401a      	ands	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003294:	f04f 31ff 	mov.w	r1, #4294967295
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	fa01 f303 	lsl.w	r3, r1, r3
 800329e:	43d9      	mvns	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a4:	4313      	orrs	r3, r2
         );
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3724      	adds	r7, #36	; 0x24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ff4c 	bl	8003158 <__NVIC_SetPriorityGrouping>
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032da:	f7ff ff61 	bl	80031a0 <__NVIC_GetPriorityGrouping>
 80032de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	6978      	ldr	r0, [r7, #20]
 80032e6:	f7ff ffb1 	bl	800324c <NVIC_EncodePriority>
 80032ea:	4602      	mov	r2, r0
 80032ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff80 	bl	80031f8 <__NVIC_SetPriority>
}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff54 	bl	80031bc <__NVIC_EnableIRQ>
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0ac      	b.n	8003488 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f8b2 	bl	800349c <DFSDM_GetChannelFromInstance>
 8003338:	4602      	mov	r2, r0
 800333a:	4b55      	ldr	r3, [pc, #340]	; (8003490 <HAL_DFSDM_ChannelInit+0x174>)
 800333c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e09f      	b.n	8003488 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fe f9c7 	bl	80016dc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800334e:	4b51      	ldr	r3, [pc, #324]	; (8003494 <HAL_DFSDM_ChannelInit+0x178>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4a4f      	ldr	r2, [pc, #316]	; (8003494 <HAL_DFSDM_ChannelInit+0x178>)
 8003356:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003358:	4b4e      	ldr	r3, [pc, #312]	; (8003494 <HAL_DFSDM_ChannelInit+0x178>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d125      	bne.n	80033ac <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003360:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a4c      	ldr	r2, [pc, #304]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800336a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800336c:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4948      	ldr	r1, [pc, #288]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a46      	ldr	r2, [pc, #280]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003380:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003384:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800338e:	4b42      	ldr	r3, [pc, #264]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	3b01      	subs	r3, #1
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	493f      	ldr	r1, [pc, #252]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80033a0:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a3c      	ldr	r2, [pc, #240]	; (8003498 <HAL_DFSDM_ChannelInit+0x17c>)
 80033a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033aa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80033ba:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033ca:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033d0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 020f 	bic.w	r2, r2, #15
 80033e8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003410:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 0207 	and.w	r2, r2, #7
 800343c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003468:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f810 	bl	800349c <DFSDM_GetChannelFromInstance>
 800347c:	4601      	mov	r1, r0
 800347e:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_DFSDM_ChannelInit+0x174>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200002f8 	.word	0x200002f8
 8003494:	200002f4 	.word	0x200002f4
 8003498:	40016000 	.word	0x40016000

0800349c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a20      	ldr	r2, [pc, #128]	; (8003528 <DFSDM_GetChannelFromInstance+0x8c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d102      	bne.n	80034b2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e032      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	; (800352c <DFSDM_GetChannelFromInstance+0x90>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d102      	bne.n	80034c0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	e02b      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <DFSDM_GetChannelFromInstance+0x94>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d102      	bne.n	80034ce <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80034c8:	2302      	movs	r3, #2
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e024      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a18      	ldr	r2, [pc, #96]	; (8003534 <DFSDM_GetChannelFromInstance+0x98>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d102      	bne.n	80034dc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80034d6:	2303      	movs	r3, #3
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e01d      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <DFSDM_GetChannelFromInstance+0x9c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d102      	bne.n	80034ea <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80034e4:	2304      	movs	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e016      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <DFSDM_GetChannelFromInstance+0xa0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d102      	bne.n	80034f8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80034f2:	2305      	movs	r3, #5
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e00f      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a11      	ldr	r2, [pc, #68]	; (8003540 <DFSDM_GetChannelFromInstance+0xa4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d102      	bne.n	8003506 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003500:	2306      	movs	r3, #6
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e008      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <DFSDM_GetChannelFromInstance+0xa8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d102      	bne.n	8003514 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 800350e:	2307      	movs	r3, #7
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e001      	b.n	8003518 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003518:	68fb      	ldr	r3, [r7, #12]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40016000 	.word	0x40016000
 800352c:	40016020 	.word	0x40016020
 8003530:	40016040 	.word	0x40016040
 8003534:	40016060 	.word	0x40016060
 8003538:	40016080 	.word	0x40016080
 800353c:	400160a0 	.word	0x400160a0
 8003540:	400160c0 	.word	0x400160c0
 8003544:	400160e0 	.word	0x400160e0

08003548 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d005      	beq.n	800356c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2204      	movs	r2, #4
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e029      	b.n	80035c0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 020e 	bic.w	r2, r2, #14
 800357a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	f003 021c 	and.w	r2, r3, #28
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
    }
  }
  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035da:	e17f      	b.n	80038dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2101      	movs	r1, #1
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	4013      	ands	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8171 	beq.w	80038d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x38>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b12      	cmp	r3, #18
 8003602:	d123      	bne.n	800364c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3208      	adds	r2, #8
 800360c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	220f      	movs	r2, #15
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	08da      	lsrs	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3208      	adds	r2, #8
 8003646:	6939      	ldr	r1, [r7, #16]
 8003648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4013      	ands	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0203 	and.w	r2, r3, #3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d00b      	beq.n	80036a0 <HAL_GPIO_Init+0xd4>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d007      	beq.n	80036a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003694:	2b11      	cmp	r3, #17
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b12      	cmp	r3, #18
 800369e:	d130      	bne.n	8003702 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036d6:	2201      	movs	r2, #1
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 0201 	and.w	r2, r3, #1
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	2b03      	cmp	r3, #3
 800370c:	d118      	bne.n	8003740 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003714:	2201      	movs	r2, #1
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4013      	ands	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	08db      	lsrs	r3, r3, #3
 800372a:	f003 0201 	and.w	r2, r3, #1
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2203      	movs	r2, #3
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80ac 	beq.w	80038d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_GPIO_Init+0x32c>)
 8003780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003782:	4a5d      	ldr	r2, [pc, #372]	; (80038f8 <HAL_GPIO_Init+0x32c>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6613      	str	r3, [r2, #96]	; 0x60
 800378a:	4b5b      	ldr	r3, [pc, #364]	; (80038f8 <HAL_GPIO_Init+0x32c>)
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003796:	4a59      	ldr	r2, [pc, #356]	; (80038fc <HAL_GPIO_Init+0x330>)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037c0:	d025      	beq.n	800380e <HAL_GPIO_Init+0x242>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_GPIO_Init+0x334>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01f      	beq.n	800380a <HAL_GPIO_Init+0x23e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a4d      	ldr	r2, [pc, #308]	; (8003904 <HAL_GPIO_Init+0x338>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d019      	beq.n	8003806 <HAL_GPIO_Init+0x23a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a4c      	ldr	r2, [pc, #304]	; (8003908 <HAL_GPIO_Init+0x33c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_GPIO_Init+0x236>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a4b      	ldr	r2, [pc, #300]	; (800390c <HAL_GPIO_Init+0x340>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00d      	beq.n	80037fe <HAL_GPIO_Init+0x232>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4a      	ldr	r2, [pc, #296]	; (8003910 <HAL_GPIO_Init+0x344>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_Init+0x22e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a49      	ldr	r2, [pc, #292]	; (8003914 <HAL_GPIO_Init+0x348>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_GPIO_Init+0x22a>
 80037f2:	2306      	movs	r3, #6
 80037f4:	e00c      	b.n	8003810 <HAL_GPIO_Init+0x244>
 80037f6:	2307      	movs	r3, #7
 80037f8:	e00a      	b.n	8003810 <HAL_GPIO_Init+0x244>
 80037fa:	2305      	movs	r3, #5
 80037fc:	e008      	b.n	8003810 <HAL_GPIO_Init+0x244>
 80037fe:	2304      	movs	r3, #4
 8003800:	e006      	b.n	8003810 <HAL_GPIO_Init+0x244>
 8003802:	2303      	movs	r3, #3
 8003804:	e004      	b.n	8003810 <HAL_GPIO_Init+0x244>
 8003806:	2302      	movs	r3, #2
 8003808:	e002      	b.n	8003810 <HAL_GPIO_Init+0x244>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_GPIO_Init+0x244>
 800380e:	2300      	movs	r3, #0
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	f002 0203 	and.w	r2, r2, #3
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	4093      	lsls	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003820:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_GPIO_Init+0x330>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3302      	adds	r3, #2
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800382e:	4b3a      	ldr	r3, [pc, #232]	; (8003918 <HAL_GPIO_Init+0x34c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003852:	4a31      	ldr	r2, [pc, #196]	; (8003918 <HAL_GPIO_Init+0x34c>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003858:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_GPIO_Init+0x34c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800387c:	4a26      	ldr	r2, [pc, #152]	; (8003918 <HAL_GPIO_Init+0x34c>)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_GPIO_Init+0x34c>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038a6:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_GPIO_Init+0x34c>)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <HAL_GPIO_Init+0x34c>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <HAL_GPIO_Init+0x34c>)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	3301      	adds	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f47f ae78 	bne.w	80035dc <HAL_GPIO_Init+0x10>
  }
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40010000 	.word	0x40010000
 8003900:	48000400 	.word	0x48000400
 8003904:	48000800 	.word	0x48000800
 8003908:	48000c00 	.word	0x48000c00
 800390c:	48001000 	.word	0x48001000
 8003910:	48001400 	.word	0x48001400
 8003914:	48001800 	.word	0x48001800
 8003918:	40010400 	.word	0x40010400

0800391c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
 8003928:	4613      	mov	r3, r2
 800392a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800392c:	787b      	ldrb	r3, [r7, #1]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003938:	e002      	b.n	8003940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f806 	bl	800397c <HAL_GPIO_EXTI_Callback>
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010400 	.word	0x40010400

0800397c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e081      	b.n	8003aa8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fd fed3 	bl	8001764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d107      	bne.n	8003a0c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	e006      	b.n	8003a1a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d104      	bne.n	8003a2c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a3e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	ea42 0103 	orr.w	r1, r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69d9      	ldr	r1, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d138      	bne.n	8003b38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e032      	b.n	8003b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6819      	ldr	r1, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	e000      	b.n	8003b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b38:	2302      	movs	r3, #2
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d139      	bne.n	8003bd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e033      	b.n	8003bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2224      	movs	r2, #36	; 0x24
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be0:	b08f      	sub	sp, #60	; 0x3c
 8003be2:	af0a      	add	r7, sp, #40	; 0x28
 8003be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e116      	b.n	8003e1e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd ff26 	bl	8001a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2203      	movs	r2, #3
 8003c14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f003 f96c 	bl	8006f0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	687e      	ldr	r6, [r7, #4]
 8003c3c:	466d      	mov	r5, sp
 8003c3e:	f106 0410 	add.w	r4, r6, #16
 8003c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c52:	1d33      	adds	r3, r6, #4
 8003c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c56:	6838      	ldr	r0, [r7, #0]
 8003c58:	f003 f906 	bl	8006e68 <USB_CoreInit>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0d7      	b.n	8003e1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f003 f95a 	bl	8006f2e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	e04a      	b.n	8003d16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	333d      	adds	r3, #61	; 0x3d
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	333c      	adds	r3, #60	; 0x3c
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	b298      	uxth	r0, r3
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3342      	adds	r3, #66	; 0x42
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	333f      	adds	r3, #63	; 0x3f
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3344      	adds	r3, #68	; 0x44
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3348      	adds	r3, #72	; 0x48
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3350      	adds	r3, #80	; 0x50
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	3301      	adds	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d3af      	bcc.n	8003c80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
 8003d24:	e044      	b.n	8003db0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d26:	7bfa      	ldrb	r2, [r7, #15]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	3301      	adds	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d3b5      	bcc.n	8003d26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	687e      	ldr	r6, [r7, #4]
 8003dc2:	466d      	mov	r5, sp
 8003dc4:	f106 0410 	add.w	r4, r6, #16
 8003dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dd8:	1d33      	adds	r3, r6, #4
 8003dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ddc:	6838      	ldr	r0, [r7, #0]
 8003dde:	f003 f8d1 	bl	8006f84 <USB_DevInit>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e014      	b.n	8003e1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d102      	bne.n	8003e12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f80a 	bl	8003e26 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 fa57 	bl	80072ca <USB_DevDisconnect>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	f043 0303 	orr.w	r3, r3, #3
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40007000 	.word	0x40007000

08003eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eba:	d130      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ebc:	4b23      	ldr	r3, [pc, #140]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ec8:	d038      	beq.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2232      	movs	r2, #50	; 0x32
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	4a1b      	ldr	r2, [pc, #108]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	0c9b      	lsrs	r3, r3, #18
 8003eec:	3301      	adds	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef0:	e002      	b.n	8003ef8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef8:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d102      	bne.n	8003f0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f2      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d110      	bne.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e00f      	b.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2a:	d007      	beq.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f2c:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f34:	4a05      	ldr	r2, [pc, #20]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	20000000 	.word	0x20000000
 8003f54:	431bde83 	.word	0x431bde83

08003f58 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f66:	6053      	str	r3, [r2, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40007000 	.word	0x40007000

08003f78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003f80:	f7fd ff6a 	bl	8001e58 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d101      	bne.n	8003f90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e06f      	b.n	8004070 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_QSPI_Init+0x28>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e067      	b.n	8004070 <HAL_QSPI_Init+0xf8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7fd fc15 	bl	80017ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003fc2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f858 	bl	800407c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	021a      	lsls	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f850 	bl	8004098 <QSPI_WaitFlagStateUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d131      	bne.n	8004066 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800400c:	f023 0310 	bic.w	r3, r3, #16
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6852      	ldr	r2, [r2, #4]
 8004014:	0611      	lsls	r1, r2, #24
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68d2      	ldr	r2, [r2, #12]
 800401a:	4311      	orrs	r1, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	430b      	orrs	r3, r1
 8004022:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	4b13      	ldr	r3, [pc, #76]	; (8004078 <HAL_QSPI_Init+0x100>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6912      	ldr	r2, [r2, #16]
 8004032:	0411      	lsls	r1, r2, #16
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6952      	ldr	r2, [r2, #20]
 8004038:	4311      	orrs	r1, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6992      	ldr	r2, [r2, #24]
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430b      	orrs	r3, r1
 8004046:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800406e:	7afb      	ldrb	r3, [r7, #11]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	ffe0f8fe 	.word	0xffe0f8fe

0800407c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80040a8:	e01a      	b.n	80040e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d016      	beq.n	80040e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fd fed1 	bl	8001e58 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10b      	bne.n	80040e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2204      	movs	r2, #4
 80040cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e00e      	b.n	80040fe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1d6      	bne.n	80040aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e39d      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411a:	4ba4      	ldr	r3, [pc, #656]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004124:	4ba1      	ldr	r3, [pc, #644]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80e1 	beq.w	80042fe <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <HAL_RCC_OscConfig+0x4a>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	f040 8088 	bne.w	800425a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 8084 	bne.w	800425a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004152:	4b96      	ldr	r3, [pc, #600]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e375      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1a      	ldr	r2, [r3, #32]
 800416e:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_RCC_OscConfig+0x7c>
 800417a:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004182:	e005      	b.n	8004190 <HAL_RCC_OscConfig+0x88>
 8004184:	4b89      	ldr	r3, [pc, #548]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004190:	4293      	cmp	r3, r2
 8004192:	d223      	bcs.n	80041dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fd3b 	bl	8004c14 <RCC_SetFlashLatencyFromMSIRange>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e356      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a8:	4b80      	ldr	r3, [pc, #512]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041ae:	f043 0308 	orr.w	r3, r3, #8
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b7d      	ldr	r3, [pc, #500]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	497a      	ldr	r1, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c6:	4b79      	ldr	r3, [pc, #484]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	4975      	ldr	r1, [pc, #468]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	604b      	str	r3, [r1, #4]
 80041da:	e022      	b.n	8004222 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041dc:	4b73      	ldr	r3, [pc, #460]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a72      	ldr	r2, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041e2:	f043 0308 	orr.w	r3, r3, #8
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b70      	ldr	r3, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	496d      	ldr	r1, [pc, #436]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041fa:	4b6c      	ldr	r3, [pc, #432]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	4968      	ldr	r1, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fcfe 	bl	8004c14 <RCC_SetFlashLatencyFromMSIRange>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e319      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004222:	f000 fc03 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8004226:	4601      	mov	r1, r0
 8004228:	4b60      	ldr	r3, [pc, #384]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	4a5f      	ldr	r2, [pc, #380]	; (80043b0 <HAL_RCC_OscConfig+0x2a8>)
 8004234:	5cd3      	ldrb	r3, [r2, r3]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	fa21 f303 	lsr.w	r3, r1, r3
 800423e:	4a5d      	ldr	r2, [pc, #372]	; (80043b4 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004242:	4b5d      	ldr	r3, [pc, #372]	; (80043b8 <HAL_RCC_OscConfig+0x2b0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd fc74 	bl	8001b34 <HAL_InitTick>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d052      	beq.n	80042fc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	e2fd      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d032      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004262:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a51      	ldr	r2, [pc, #324]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800426e:	f7fd fdf3 	bl	8001e58 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004276:	f7fd fdef 	bl	8001e58 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e2e6      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004288:	4b48      	ldr	r3, [pc, #288]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004294:	4b45      	ldr	r3, [pc, #276]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a44      	ldr	r2, [pc, #272]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800429a:	f043 0308 	orr.w	r3, r3, #8
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b42      	ldr	r3, [pc, #264]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	493f      	ldr	r1, [pc, #252]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b2:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	493a      	ldr	r1, [pc, #232]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
 80042c6:	e01a      	b.n	80042fe <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042c8:	4b38      	ldr	r3, [pc, #224]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a37      	ldr	r2, [pc, #220]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042d4:	f7fd fdc0 	bl	8001e58 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042dc:	f7fd fdbc 	bl	8001e58 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e2b3      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042ee:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1d4>
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d074      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x214>
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d10e      	bne.n	8004334 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	4b23      	ldr	r3, [pc, #140]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d064      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2ea>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d160      	bne.n	80043f2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e290      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x244>
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1a      	ldr	r2, [pc, #104]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0x280>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x268>
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a14      	ldr	r2, [pc, #80]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0x280>
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0d      	ldr	r2, [pc, #52]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01c      	beq.n	80043ca <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd fd62 	bl	8001e58 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004396:	e011      	b.n	80043bc <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fd fd5e 	bl	8001e58 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	; 0x64
 80043a4:	d90a      	bls.n	80043bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e255      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	0800a5b0 	.word	0x0800a5b0
 80043b4:	20000000 	.word	0x20000000
 80043b8:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043bc:	4bae      	ldr	r3, [pc, #696]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0e7      	beq.n	8004398 <HAL_RCC_OscConfig+0x290>
 80043c8:	e014      	b.n	80043f4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ca:	f7fd fd45 	bl	8001e58 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d2:	f7fd fd41 	bl	8001e58 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b64      	cmp	r3, #100	; 0x64
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e238      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043e4:	4ba4      	ldr	r3, [pc, #656]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f0      	bne.n	80043d2 <HAL_RCC_OscConfig+0x2ca>
 80043f0:	e000      	b.n	80043f4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d060      	beq.n	80044c2 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x30a>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d119      	bne.n	8004440 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004412:	4b99      	ldr	r3, [pc, #612]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x322>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e215      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	4b93      	ldr	r3, [pc, #588]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	061b      	lsls	r3, r3, #24
 8004438:	498f      	ldr	r1, [pc, #572]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443e:	e040      	b.n	80044c2 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d023      	beq.n	8004490 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004448:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a8a      	ldr	r2, [pc, #552]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800444e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fd fd00 	bl	8001e58 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fd fcfc 	bl	8001e58 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e1f3      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800446e:	4b82      	ldr	r3, [pc, #520]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b7f      	ldr	r3, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	497b      	ldr	r1, [pc, #492]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
 800448e:	e018      	b.n	80044c2 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004490:	4b79      	ldr	r3, [pc, #484]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a78      	ldr	r2, [pc, #480]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fd fcdc 	bl	8001e58 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a4:	f7fd fcd8 	bl	8001e58 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e1cf      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b6:	4b70      	ldr	r3, [pc, #448]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d03c      	beq.n	8004548 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01c      	beq.n	8004510 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d6:	4b68      	ldr	r3, [pc, #416]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80044d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044dc:	4a66      	ldr	r2, [pc, #408]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fd fcb7 	bl	8001e58 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fd fcb3 	bl	8001e58 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1aa      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004500:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ef      	beq.n	80044ee <HAL_RCC_OscConfig+0x3e6>
 800450e:	e01b      	b.n	8004548 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004516:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004518:	f023 0301 	bic.w	r3, r3, #1
 800451c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004520:	f7fd fc9a 	bl	8001e58 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004528:	f7fd fc96 	bl	8001e58 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e18d      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800453a:	4b4f      	ldr	r3, [pc, #316]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800453c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ef      	bne.n	8004528 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a5 	beq.w	80046a0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004566:	4b44      	ldr	r3, [pc, #272]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	4a43      	ldr	r2, [pc, #268]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800456c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	; 0x58
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	60bb      	str	r3, [r7, #8]
 800457c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457e:	2301      	movs	r3, #1
 8004580:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004582:	4b3e      	ldr	r3, [pc, #248]	; (800467c <HAL_RCC_OscConfig+0x574>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d118      	bne.n	80045c0 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458e:	4b3b      	ldr	r3, [pc, #236]	; (800467c <HAL_RCC_OscConfig+0x574>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a3a      	ldr	r2, [pc, #232]	; (800467c <HAL_RCC_OscConfig+0x574>)
 8004594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459a:	f7fd fc5d 	bl	8001e58 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7fd fc59 	bl	8001e58 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e150      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b4:	4b31      	ldr	r3, [pc, #196]	; (800467c <HAL_RCC_OscConfig+0x574>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d108      	bne.n	80045da <HAL_RCC_OscConfig+0x4d2>
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045d8:	e024      	b.n	8004624 <HAL_RCC_OscConfig+0x51c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d110      	bne.n	8004604 <HAL_RCC_OscConfig+0x4fc>
 80045e2:	4b25      	ldr	r3, [pc, #148]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	4a23      	ldr	r2, [pc, #140]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	4a1f      	ldr	r2, [pc, #124]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004602:	e00f      	b.n	8004624 <HAL_RCC_OscConfig+0x51c>
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460a:	4a1b      	ldr	r2, [pc, #108]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004614:	4b18      	ldr	r3, [pc, #96]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d016      	beq.n	800465a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd fc14 	bl	8001e58 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fd fc10 	bl	8001e58 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e105      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_OscConfig+0x570>)
 800464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0ed      	beq.n	8004634 <HAL_RCC_OscConfig+0x52c>
 8004658:	e019      	b.n	800468e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd fbfd 	bl	8001e58 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	e00e      	b.n	8004680 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004662:	f7fd fbf9 	bl	8001e58 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	4293      	cmp	r3, r2
 8004672:	d905      	bls.n	8004680 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e0ee      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
 8004678:	40021000 	.word	0x40021000
 800467c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004680:	4b77      	ldr	r3, [pc, #476]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e9      	bne.n	8004662 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468e:	7ffb      	ldrb	r3, [r7, #31]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004694:	4b72      	ldr	r3, [pc, #456]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	4a71      	ldr	r2, [pc, #452]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 800469a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80d5 	beq.w	8004854 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b0c      	cmp	r3, #12
 80046ae:	f000 808e 	beq.w	80047ce <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d15b      	bne.n	8004772 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b69      	ldr	r3, [pc, #420]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a68      	ldr	r2, [pc, #416]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fd fbc7 	bl	8001e58 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fd fbc3 	bl	8001e58 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0ba      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e0:	4b5f      	ldr	r3, [pc, #380]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046ec:	4b5c      	ldr	r3, [pc, #368]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <HAL_RCC_OscConfig+0x75c>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046fc:	3a01      	subs	r2, #1
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	4311      	orrs	r1, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004706:	0212      	lsls	r2, r2, #8
 8004708:	4311      	orrs	r1, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800470e:	0852      	lsrs	r2, r2, #1
 8004710:	3a01      	subs	r2, #1
 8004712:	0552      	lsls	r2, r2, #21
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800471a:	0852      	lsrs	r2, r2, #1
 800471c:	3a01      	subs	r2, #1
 800471e:	0652      	lsls	r2, r2, #25
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004726:	0912      	lsrs	r2, r2, #4
 8004728:	0452      	lsls	r2, r2, #17
 800472a:	430a      	orrs	r2, r1
 800472c:	494c      	ldr	r1, [pc, #304]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 800472e:	4313      	orrs	r3, r2
 8004730:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004732:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a4a      	ldr	r2, [pc, #296]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800473e:	4b48      	ldr	r3, [pc, #288]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4a47      	ldr	r2, [pc, #284]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004748:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fb85 	bl	8001e58 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004752:	f7fd fb81 	bl	8001e58 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e078      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004764:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCC_OscConfig+0x64a>
 8004770:	e070      	b.n	8004854 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004772:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800477e:	4b38      	ldr	r3, [pc, #224]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800478a:	4b35      	ldr	r3, [pc, #212]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	4a34      	ldr	r2, [pc, #208]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004790:	f023 0303 	bic.w	r3, r3, #3
 8004794:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004796:	4b32      	ldr	r3, [pc, #200]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a31      	ldr	r2, [pc, #196]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 800479c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80047a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fd fb57 	bl	8001e58 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fd fb53 	bl	8001e58 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e04a      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <HAL_RCC_OscConfig+0x6a6>
 80047cc:	e042      	b.n	8004854 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e03d      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80047da:	4b21      	ldr	r3, [pc, #132]	; (8004860 <HAL_RCC_OscConfig+0x758>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d130      	bne.n	8004850 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	3b01      	subs	r3, #1
 80047fa:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d127      	bne.n	8004850 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d11f      	bne.n	8004850 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800481a:	2a07      	cmp	r2, #7
 800481c:	bf14      	ite	ne
 800481e:	2201      	movne	r2, #1
 8004820:	2200      	moveq	r2, #0
 8004822:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004824:	4293      	cmp	r3, r2
 8004826:	d113      	bne.n	8004850 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	3b01      	subs	r3, #1
 8004836:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d109      	bne.n	8004850 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	085b      	lsrs	r3, r3, #1
 8004848:	3b01      	subs	r3, #1
 800484a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3720      	adds	r7, #32
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	f99d808c 	.word	0xf99d808c

08004868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0c8      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d910      	bls.n	80048ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 0207 	bic.w	r2, r3, #7
 8004892:	4961      	ldr	r1, [pc, #388]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b5f      	ldr	r3, [pc, #380]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0b0      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d04c      	beq.n	8004952 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d107      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c0:	4b56      	ldr	r3, [pc, #344]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d121      	bne.n	8004910 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e09e      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048d8:	4b50      	ldr	r3, [pc, #320]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d115      	bne.n	8004910 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e092      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f0:	4b4a      	ldr	r3, [pc, #296]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e086      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004900:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e07e      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004910:	4b42      	ldr	r3, [pc, #264]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 0203 	bic.w	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	493f      	ldr	r1, [pc, #252]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004922:	f7fd fa99 	bl	8001e58 <HAL_GetTick>
 8004926:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004928:	e00a      	b.n	8004940 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492a:	f7fd fa95 	bl	8001e58 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e066      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004940:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 020c 	and.w	r2, r3, #12
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	429a      	cmp	r2, r3
 8004950:	d1eb      	bne.n	800492a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495e:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	492c      	ldr	r1, [pc, #176]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b29      	ldr	r3, [pc, #164]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d210      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b26      	ldr	r3, [pc, #152]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 0207 	bic.w	r2, r3, #7
 8004986:	4924      	ldr	r1, [pc, #144]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_ClockConfig+0x1b0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e036      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4918      	ldr	r1, [pc, #96]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4910      	ldr	r1, [pc, #64]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049de:	f000 f825 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049e2:	4601      	mov	r1, r0
 80049e4:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_ClockConfig+0x1b4>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	fa21 f303 	lsr.w	r3, r1, r3
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049fe:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <HAL_RCC_ClockConfig+0x1c0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd f896 	bl	8001b34 <HAL_InitTick>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a0c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40022000 	.word	0x40022000
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	0800a5b0 	.word	0x0800a5b0
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b089      	sub	sp, #36	; 0x24
 8004a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a3a:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a44:	4b3a      	ldr	r3, [pc, #232]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	d121      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d11e      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a60:	4b33      	ldr	r3, [pc, #204]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a6c:	4b30      	ldr	r3, [pc, #192]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e005      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a7c:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a88:	4a2a      	ldr	r2, [pc, #168]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d102      	bne.n	8004aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aa4:	4b24      	ldr	r3, [pc, #144]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	e004      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ab0:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d133      	bne.n	8004b22 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aba:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d002      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004ace:	e005      	b.n	8004adc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ad2:	617b      	str	r3, [r7, #20]
      break;
 8004ad4:	e005      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ad6:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ad8:	617b      	str	r3, [r7, #20]
      break;
 8004ada:	e002      	b.n	8004ae2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	617b      	str	r3, [r7, #20]
      break;
 8004ae0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	3301      	adds	r3, #1
 8004aee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	fb02 f203 	mul.w	r2, r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b06:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b08:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0e5b      	lsrs	r3, r3, #25
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b22:	69bb      	ldr	r3, [r7, #24]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3724      	adds	r7, #36	; 0x24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	40021000 	.word	0x40021000
 8004b34:	0800a5c8 	.word	0x0800a5c8
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	007a1200 	.word	0x007a1200

08004b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b46:	681b      	ldr	r3, [r3, #0]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20000000 	.word	0x20000000

08004b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b5c:	f7ff fff0 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b60:	4601      	mov	r1, r0
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b6e:	5cd3      	ldrb	r3, [r2, r3]
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	0800a5c0 	.word	0x0800a5c0

08004b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b88:	f7ff ffda 	bl	8004b40 <HAL_RCC_GetHCLKFreq>
 8004b8c:	4601      	mov	r1, r0
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0adb      	lsrs	r3, r3, #11
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4a04      	ldr	r2, [pc, #16]	; (8004bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	0800a5c0 	.word	0x0800a5c0

08004bb0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	220f      	movs	r2, #15
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004bc0:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004be4:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_GetClockConfig+0x5c>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_RCC_GetClockConfig+0x60>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0207 	and.w	r2, r3, #7
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	601a      	str	r2, [r3, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40022000 	.word	0x40022000

08004c14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c2c:	f7ff f930 	bl	8003e90 <HAL_PWREx_GetVoltageRange>
 8004c30:	6178      	str	r0, [r7, #20]
 8004c32:	e014      	b.n	8004c5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c40:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c4c:	f7ff f920 	bl	8003e90 <HAL_PWREx_GetVoltageRange>
 8004c50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c64:	d10b      	bne.n	8004c7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d919      	bls.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c70:	d902      	bls.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c72:	2302      	movs	r3, #2
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e013      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c78:	2301      	movs	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	e010      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d902      	bls.n	8004c8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c84:	2303      	movs	r3, #3
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	e00a      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d102      	bne.n	8004c96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c90:	2302      	movs	r3, #2
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	e004      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b70      	cmp	r3, #112	; 0x70
 8004c9a:	d101      	bne.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 0207 	bic.w	r2, r3, #7
 8004ca8:	4909      	ldr	r1, [pc, #36]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40022000 	.word	0x40022000

08004cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cdc:	2300      	movs	r3, #0
 8004cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03f      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf8:	d01c      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfe:	d802      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d04:	e01f      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004d0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d10:	d01c      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d12:	e018      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d14:	4b85      	ldr	r3, [pc, #532]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a84      	ldr	r2, [pc, #528]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d20:	e015      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fac9 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d32:	e00c      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3320      	adds	r3, #32
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fbb0 	bl	80054a0 <RCCEx_PLLSAI2_Config>
 8004d40:	4603      	mov	r3, r0
 8004d42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d44:	e003      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	74fb      	strb	r3, [r7, #19]
      break;
 8004d4a:	e000      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d54:	4b75      	ldr	r3, [pc, #468]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d62:	4972      	ldr	r1, [pc, #456]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d6a:	e001      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6c:	7cfb      	ldrb	r3, [r7, #19]
 8004d6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d03f      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d84:	d01c      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d8a:	d802      	bhi.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004d90:	e01f      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d96:	d003      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004d98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d9c:	d01c      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004d9e:	e018      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004da0:	4b62      	ldr	r3, [pc, #392]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	4a61      	ldr	r2, [pc, #388]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004daa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dac:	e015      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa83 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dbe:	e00c      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3320      	adds	r3, #32
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fb6a 	bl	80054a0 <RCCEx_PLLSAI2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004dd0:	e003      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	74fb      	strb	r3, [r7, #19]
      break;
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004de0:	4b52      	ldr	r3, [pc, #328]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dee:	494f      	ldr	r1, [pc, #316]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004df6:	e001      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 80a0 	beq.w	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e0e:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	4a40      	ldr	r2, [pc, #256]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e30:	4b3e      	ldr	r3, [pc, #248]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e40:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3a      	ldr	r2, [pc, #232]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e4c:	f7fd f804 	bl	8001e58 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e52:	e009      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e54:	f7fd f800 	bl	8001e58 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d902      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	74fb      	strb	r3, [r7, #19]
        break;
 8004e66:	e005      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ef      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d15c      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e7a:	4b2c      	ldr	r3, [pc, #176]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01f      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d019      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e98:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ea4:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	4a20      	ldr	r2, [pc, #128]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fc ffbf 	bl	8001e58 <HAL_GetTick>
 8004eda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004edc:	e00b      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fc ffbb 	bl	8001e58 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d902      	bls.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ef4:	e006      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ec      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1a:	4904      	ldr	r1, [pc, #16]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f22:	e009      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f24:	7cfb      	ldrb	r3, [r7, #19]
 8004f26:	74bb      	strb	r3, [r7, #18]
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f38:	7c7b      	ldrb	r3, [r7, #17]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3e:	4b9e      	ldr	r3, [pc, #632]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f42:	4a9d      	ldr	r2, [pc, #628]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f56:	4b98      	ldr	r3, [pc, #608]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f023 0203 	bic.w	r2, r3, #3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	4994      	ldr	r1, [pc, #592]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f78:	4b8f      	ldr	r3, [pc, #572]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	f023 020c 	bic.w	r2, r3, #12
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	498c      	ldr	r1, [pc, #560]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f9a:	4b87      	ldr	r3, [pc, #540]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	4983      	ldr	r1, [pc, #524]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fbc:	4b7e      	ldr	r3, [pc, #504]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	497b      	ldr	r1, [pc, #492]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fde:	4b76      	ldr	r3, [pc, #472]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fec:	4972      	ldr	r1, [pc, #456]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005000:	4b6d      	ldr	r3, [pc, #436]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005006:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	496a      	ldr	r1, [pc, #424]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005022:	4b65      	ldr	r3, [pc, #404]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	4961      	ldr	r1, [pc, #388]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005044:	4b5c      	ldr	r3, [pc, #368]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005052:	4959      	ldr	r1, [pc, #356]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005074:	4950      	ldr	r1, [pc, #320]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005088:	4b4b      	ldr	r3, [pc, #300]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	4948      	ldr	r1, [pc, #288]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050aa:	4b43      	ldr	r3, [pc, #268]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b8:	493f      	ldr	r1, [pc, #252]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d028      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050cc:	4b3a      	ldr	r3, [pc, #232]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050da:	4937      	ldr	r1, [pc, #220]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ea:	d106      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050ec:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4a31      	ldr	r2, [pc, #196]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f6:	60d3      	str	r3, [r2, #12]
 80050f8:	e011      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005102:	d10c      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	2101      	movs	r1, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f8d8 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d028      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800512a:	4b23      	ldr	r3, [pc, #140]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	491f      	ldr	r1, [pc, #124]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005148:	d106      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005154:	60d3      	str	r3, [r2, #12]
 8005156:	e011      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005160:	d10c      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	3304      	adds	r3, #4
 8005166:	2101      	movs	r1, #1
 8005168:	4618      	mov	r0, r3
 800516a:	f000 f8a9 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 800516e:	4603      	mov	r3, r0
 8005170:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005172:	7cfb      	ldrb	r3, [r7, #19]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005178:	7cfb      	ldrb	r3, [r7, #19]
 800517a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d02b      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005196:	4908      	ldr	r1, [pc, #32]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051a6:	d109      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	4a02      	ldr	r2, [pc, #8]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b2:	60d3      	str	r3, [r2, #12]
 80051b4:	e014      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3304      	adds	r3, #4
 80051ca:	2101      	movs	r1, #1
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 f877 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d02f      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051ec:	4b2b      	ldr	r3, [pc, #172]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051fa:	4928      	ldr	r1, [pc, #160]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800520a:	d10d      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	2102      	movs	r1, #2
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f854 	bl	80052c0 <RCCEx_PLLSAI1_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d014      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	74bb      	strb	r3, [r7, #18]
 8005226:	e011      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800522c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005230:	d10c      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3320      	adds	r3, #32
 8005236:	2102      	movs	r1, #2
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f931 	bl	80054a0 <RCCEx_PLLSAI2_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005242:	7cfb      	ldrb	r3, [r7, #19]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005266:	490d      	ldr	r1, [pc, #52]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800528a:	4904      	ldr	r1, [pc, #16]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005292:	7cbb      	ldrb	r3, [r7, #18]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40021000 	.word	0x40021000

080052a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80052a4:	4b05      	ldr	r3, [pc, #20]	; (80052bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a04      	ldr	r2, [pc, #16]	; (80052bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6013      	str	r3, [r2, #0]
}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40021000 	.word	0x40021000

080052c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ce:	4b73      	ldr	r3, [pc, #460]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d018      	beq.n	800530c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0203 	and.w	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d10d      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
       ||
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d009      	beq.n	8005306 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052f2:	4b6a      	ldr	r3, [pc, #424]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
       ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d044      	beq.n	8005390 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
 800530a:	e041      	b.n	8005390 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d00c      	beq.n	800532e <RCCEx_PLLSAI1_Config+0x6e>
 8005314:	2b03      	cmp	r3, #3
 8005316:	d013      	beq.n	8005340 <RCCEx_PLLSAI1_Config+0x80>
 8005318:	2b01      	cmp	r3, #1
 800531a:	d120      	bne.n	800535e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800531c:	4b5f      	ldr	r3, [pc, #380]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11d      	bne.n	8005364 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800532c:	e01a      	b.n	8005364 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800532e:	4b5b      	ldr	r3, [pc, #364]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005336:	2b00      	cmp	r3, #0
 8005338:	d116      	bne.n	8005368 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533e:	e013      	b.n	8005368 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005340:	4b56      	ldr	r3, [pc, #344]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10f      	bne.n	800536c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800534c:	4b53      	ldr	r3, [pc, #332]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800535c:	e006      	b.n	800536c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	73fb      	strb	r3, [r7, #15]
      break;
 8005362:	e004      	b.n	800536e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005364:	bf00      	nop
 8005366:	e002      	b.n	800536e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005368:	bf00      	nop
 800536a:	e000      	b.n	800536e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800536c:	bf00      	nop
    }

    if(status == HAL_OK)
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005374:	4b49      	ldr	r3, [pc, #292]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	3b01      	subs	r3, #1
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	430b      	orrs	r3, r1
 800538a:	4944      	ldr	r1, [pc, #272]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d17d      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005396:	4b41      	ldr	r3, [pc, #260]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a40      	ldr	r2, [pc, #256]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 800539c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a2:	f7fc fd59 	bl	8001e58 <HAL_GetTick>
 80053a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053a8:	e009      	b.n	80053be <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053aa:	f7fc fd55 	bl	8001e58 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d902      	bls.n	80053be <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	73fb      	strb	r3, [r7, #15]
        break;
 80053bc:	e005      	b.n	80053ca <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1ef      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d160      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d111      	bne.n	80053fa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053d6:	4b31      	ldr	r3, [pc, #196]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80053de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6892      	ldr	r2, [r2, #8]
 80053e6:	0211      	lsls	r1, r2, #8
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68d2      	ldr	r2, [r2, #12]
 80053ec:	0912      	lsrs	r2, r2, #4
 80053ee:	0452      	lsls	r2, r2, #17
 80053f0:	430a      	orrs	r2, r1
 80053f2:	492a      	ldr	r1, [pc, #168]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	610b      	str	r3, [r1, #16]
 80053f8:	e027      	b.n	800544a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d112      	bne.n	8005426 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005400:	4b26      	ldr	r3, [pc, #152]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005408:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6892      	ldr	r2, [r2, #8]
 8005410:	0211      	lsls	r1, r2, #8
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6912      	ldr	r2, [r2, #16]
 8005416:	0852      	lsrs	r2, r2, #1
 8005418:	3a01      	subs	r2, #1
 800541a:	0552      	lsls	r2, r2, #21
 800541c:	430a      	orrs	r2, r1
 800541e:	491f      	ldr	r1, [pc, #124]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]
 8005424:	e011      	b.n	800544a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005426:	4b1d      	ldr	r3, [pc, #116]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800542e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6892      	ldr	r2, [r2, #8]
 8005436:	0211      	lsls	r1, r2, #8
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6952      	ldr	r2, [r2, #20]
 800543c:	0852      	lsrs	r2, r2, #1
 800543e:	3a01      	subs	r2, #1
 8005440:	0652      	lsls	r2, r2, #25
 8005442:	430a      	orrs	r2, r1
 8005444:	4915      	ldr	r1, [pc, #84]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005446:	4313      	orrs	r3, r2
 8005448:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800544a:	4b14      	ldr	r3, [pc, #80]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a13      	ldr	r2, [pc, #76]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005454:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005456:	f7fc fcff 	bl	8001e58 <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800545c:	e009      	b.n	8005472 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800545e:	f7fc fcfb 	bl	8001e58 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d902      	bls.n	8005472 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	73fb      	strb	r3, [r7, #15]
          break;
 8005470:	e005      	b.n	800547e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005472:	4b0a      	ldr	r3, [pc, #40]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0ef      	beq.n	800545e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	4903      	ldr	r1, [pc, #12]	; (800549c <RCCEx_PLLSAI1_Config+0x1dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000

080054a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ae:	4b68      	ldr	r3, [pc, #416]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d018      	beq.n	80054ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054ba:	4b65      	ldr	r3, [pc, #404]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0203 	and.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d10d      	bne.n	80054e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
       ||
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054d2:	4b5f      	ldr	r3, [pc, #380]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
       ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d044      	beq.n	8005570 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
 80054ea:	e041      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d00c      	beq.n	800550e <RCCEx_PLLSAI2_Config+0x6e>
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d013      	beq.n	8005520 <RCCEx_PLLSAI2_Config+0x80>
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d120      	bne.n	800553e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054fc:	4b54      	ldr	r3, [pc, #336]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d11d      	bne.n	8005544 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550c:	e01a      	b.n	8005544 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800550e:	4b50      	ldr	r3, [pc, #320]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005516:	2b00      	cmp	r3, #0
 8005518:	d116      	bne.n	8005548 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551e:	e013      	b.n	8005548 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005520:	4b4b      	ldr	r3, [pc, #300]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10f      	bne.n	800554c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800552c:	4b48      	ldr	r3, [pc, #288]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800553c:	e006      	b.n	800554c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	73fb      	strb	r3, [r7, #15]
      break;
 8005542:	e004      	b.n	800554e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800554c:	bf00      	nop
    }

    if(status == HAL_OK)
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10d      	bne.n	8005570 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005554:	4b3e      	ldr	r3, [pc, #248]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	3b01      	subs	r3, #1
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	430b      	orrs	r3, r1
 800556a:	4939      	ldr	r1, [pc, #228]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 800556c:	4313      	orrs	r3, r2
 800556e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d167      	bne.n	8005646 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005576:	4b36      	ldr	r3, [pc, #216]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a35      	ldr	r2, [pc, #212]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 800557c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005582:	f7fc fc69 	bl	8001e58 <HAL_GetTick>
 8005586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005588:	e009      	b.n	800559e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800558a:	f7fc fc65 	bl	8001e58 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d902      	bls.n	800559e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	73fb      	strb	r3, [r7, #15]
        break;
 800559c:	e005      	b.n	80055aa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800559e:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1ef      	bne.n	800558a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d14a      	bne.n	8005646 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d111      	bne.n	80055da <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6892      	ldr	r2, [r2, #8]
 80055c6:	0211      	lsls	r1, r2, #8
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	68d2      	ldr	r2, [r2, #12]
 80055cc:	0912      	lsrs	r2, r2, #4
 80055ce:	0452      	lsls	r2, r2, #17
 80055d0:	430a      	orrs	r2, r1
 80055d2:	491f      	ldr	r1, [pc, #124]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	614b      	str	r3, [r1, #20]
 80055d8:	e011      	b.n	80055fe <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055da:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6892      	ldr	r2, [r2, #8]
 80055ea:	0211      	lsls	r1, r2, #8
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6912      	ldr	r2, [r2, #16]
 80055f0:	0852      	lsrs	r2, r2, #1
 80055f2:	3a01      	subs	r2, #1
 80055f4:	0652      	lsls	r2, r2, #25
 80055f6:	430a      	orrs	r2, r1
 80055f8:	4915      	ldr	r1, [pc, #84]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80055fe:	4b14      	ldr	r3, [pc, #80]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005608:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560a:	f7fc fc25 	bl	8001e58 <HAL_GetTick>
 800560e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005610:	e009      	b.n	8005626 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005612:	f7fc fc21 	bl	8001e58 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d902      	bls.n	8005626 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	73fb      	strb	r3, [r7, #15]
          break;
 8005624:	e005      	b.n	8005632 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005626:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0ef      	beq.n	8005612 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d106      	bne.n	8005646 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005642:	4313      	orrs	r3, r2
 8005644:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000

08005654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e07c      	b.n	8005760 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fc f8f7 	bl	8001874 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a6:	d902      	bls.n	80056ae <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e002      	b.n	80056b4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056bc:	d007      	beq.n	80056ce <HAL_SPI_Init+0x7a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056c6:	d002      	beq.n	80056ce <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056de:	d903      	bls.n	80056e8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	631a      	str	r2, [r3, #48]	; 0x30
 80056e6:	e002      	b.n	80056ee <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	ea42 0103 	orr.w	r1, r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	f003 0204 	and.w	r2, r3, #4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	ea42 0103 	orr.w	r1, r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	430a      	orrs	r2, r1
 800574e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e01d      	b.n	80057b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f815 	bl	80057be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f000 f986 	bl	8005ab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <HAL_TIM_Base_Start_IT+0x50>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d00b      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x42>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d007      	beq.n	8005816 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	00010007 	.word	0x00010007

08005828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b02      	cmp	r3, #2
 800583c:	d122      	bne.n	8005884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b02      	cmp	r3, #2
 800584a:	d11b      	bne.n	8005884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0202 	mvn.w	r2, #2
 8005854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f905 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 8005870:	e005      	b.n	800587e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8f7 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f908 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b04      	cmp	r3, #4
 8005890:	d122      	bne.n	80058d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b04      	cmp	r3, #4
 800589e:	d11b      	bne.n	80058d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0204 	mvn.w	r2, #4
 80058a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f8db 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8cd 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f8de 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d122      	bne.n	800592c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d11b      	bne.n	800592c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0208 	mvn.w	r2, #8
 80058fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8b1 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 8005918:	e005      	b.n	8005926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8a3 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f8b4 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b10      	cmp	r3, #16
 8005938:	d122      	bne.n	8005980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b10      	cmp	r3, #16
 8005946:	d11b      	bne.n	8005980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f06f 0210 	mvn.w	r2, #16
 8005950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2208      	movs	r2, #8
 8005956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f887 	bl	8005a7a <HAL_TIM_IC_CaptureCallback>
 800596c:	e005      	b.n	800597a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f879 	bl	8005a66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f88a 	bl	8005a8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d10e      	bne.n	80059ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	d107      	bne.n	80059ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0201 	mvn.w	r2, #1
 80059a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb fda4 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b80      	cmp	r3, #128	; 0x80
 80059b8:	d10e      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c4:	2b80      	cmp	r3, #128	; 0x80
 80059c6:	d107      	bne.n	80059d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f914 	bl	8005c00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e6:	d10e      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b80      	cmp	r3, #128	; 0x80
 80059f4:	d107      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f907 	bl	8005c14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d10e      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b40      	cmp	r3, #64	; 0x40
 8005a20:	d107      	bne.n	8005a32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f838 	bl	8005aa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	d10e      	bne.n	8005a5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d107      	bne.n	8005a5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f06f 0220 	mvn.w	r2, #32
 8005a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f8c7 	bl	8005bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d013      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad6:	d00f      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <TIM_Base_SetConfig+0x118>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00b      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3c      	ldr	r2, [pc, #240]	; (8005bd4 <TIM_Base_SetConfig+0x11c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3b      	ldr	r2, [pc, #236]	; (8005bd8 <TIM_Base_SetConfig+0x120>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3a      	ldr	r2, [pc, #232]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d108      	bne.n	8005b0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2f      	ldr	r2, [pc, #188]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01f      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b18:	d01b      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2c      	ldr	r2, [pc, #176]	; (8005bd0 <TIM_Base_SetConfig+0x118>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d017      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2b      	ldr	r2, [pc, #172]	; (8005bd4 <TIM_Base_SetConfig+0x11c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <TIM_Base_SetConfig+0x120>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00f      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <TIM_Base_SetConfig+0x128>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <TIM_Base_SetConfig+0x12c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <TIM_Base_SetConfig+0x130>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d108      	bne.n	8005b64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <TIM_Base_SetConfig+0x114>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <TIM_Base_SetConfig+0x124>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a11      	ldr	r2, [pc, #68]	; (8005be0 <TIM_Base_SetConfig+0x128>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <TIM_Base_SetConfig+0x12c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0xf8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <TIM_Base_SetConfig+0x130>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d103      	bne.n	8005bb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	615a      	str	r2, [r3, #20]
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40013400 	.word	0x40013400
 8005be0:	40014000 	.word	0x40014000
 8005be4:	40014400 	.word	0x40014400
 8005be8:	40014800 	.word	0x40014800

08005bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e040      	b.n	8005cbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fb fe56 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	; 0x24
 8005c54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fb0c 	bl	8006284 <UART_SetConfig>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e022      	b.n	8005cbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d002      	beq.n	8005c84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fe48 	bl	8006914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fecf 	bl	8006a58 <UART_CheckIdleState>
 8005cba:	4603      	mov	r3, r0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	; 0x28
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	f040 8081 	bne.w	8005de0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_Transmit+0x26>
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e079      	b.n	8005de2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Transmit+0x38>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e072      	b.n	8005de2 <HAL_UART_Transmit+0x11e>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2221      	movs	r2, #33	; 0x21
 8005d0e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005d10:	f7fc f8a2 	bl	8001e58 <HAL_GetTick>
 8005d14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	88fa      	ldrh	r2, [r7, #6]
 8005d22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	d108      	bne.n	8005d42 <HAL_UART_Transmit+0x7e>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	e003      	b.n	8005d4a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d4a:	e02d      	b.n	8005da8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2200      	movs	r2, #0
 8005d54:	2180      	movs	r1, #128	; 0x80
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fec3 	bl	8006ae2 <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e03d      	b.n	8005de2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	881a      	ldrh	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d78:	b292      	uxth	r2, r2
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	3302      	adds	r3, #2
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	e008      	b.n	8005d96 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	781a      	ldrb	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	b292      	uxth	r2, r2
 8005d8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1cb      	bne.n	8005d4c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2140      	movs	r1, #64	; 0x40
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fe8f 	bl	8006ae2 <UART_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e009      	b.n	8005de2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e000      	b.n	8005de2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
  }
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d144      	bne.n	8005e8c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_UART_Transmit_IT+0x22>
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e03d      	b.n	8005e8e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_UART_Transmit_IT+0x34>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e036      	b.n	8005e8e <HAL_UART_Transmit_IT+0xa2>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	88fa      	ldrh	r2, [r7, #6]
 8005e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2221      	movs	r2, #33	; 0x21
 8005e4e:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e58:	d107      	bne.n	8005e6a <HAL_UART_Transmit_IT+0x7e>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a0d      	ldr	r2, [pc, #52]	; (8005e9c <HAL_UART_Transmit_IT+0xb0>)
 8005e66:	665a      	str	r2, [r3, #100]	; 0x64
 8005e68:	e002      	b.n	8005e70 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <HAL_UART_Transmit_IT+0xb4>)
 8005e6e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e86:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e000      	b.n	8005e8e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8005e8c:	2302      	movs	r3, #2
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	08006c53 	.word	0x08006c53
 8005ea0:	08006bdf 	.word	0x08006bdf

08005ea4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	f040 808a 	bne.w	8005fd0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_UART_Receive_IT+0x24>
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e082      	b.n	8005fd2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Receive_IT+0x36>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e07b      	b.n	8005fd2 <HAL_UART_Receive_IT+0x12e>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f06:	d10e      	bne.n	8005f26 <HAL_UART_Receive_IT+0x82>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_UART_Receive_IT+0x78>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f1a:	e02d      	b.n	8005f78 <HAL_UART_Receive_IT+0xd4>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	22ff      	movs	r2, #255	; 0xff
 8005f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f24:	e028      	b.n	8005f78 <HAL_UART_Receive_IT+0xd4>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10d      	bne.n	8005f4a <HAL_UART_Receive_IT+0xa6>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <HAL_UART_Receive_IT+0x9c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	22ff      	movs	r2, #255	; 0xff
 8005f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f3e:	e01b      	b.n	8005f78 <HAL_UART_Receive_IT+0xd4>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	227f      	movs	r2, #127	; 0x7f
 8005f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f48:	e016      	b.n	8005f78 <HAL_UART_Receive_IT+0xd4>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f52:	d10d      	bne.n	8005f70 <HAL_UART_Receive_IT+0xcc>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <HAL_UART_Receive_IT+0xc2>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	227f      	movs	r2, #127	; 0x7f
 8005f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f64:	e008      	b.n	8005f78 <HAL_UART_Receive_IT+0xd4>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	223f      	movs	r2, #63	; 0x3f
 8005f6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f6e:	e003      	b.n	8005f78 <HAL_UART_Receive_IT+0xd4>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2222      	movs	r2, #34	; 0x22
 8005f82:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9c:	d107      	bne.n	8005fae <HAL_UART_Receive_IT+0x10a>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d103      	bne.n	8005fae <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a0d      	ldr	r2, [pc, #52]	; (8005fe0 <HAL_UART_Receive_IT+0x13c>)
 8005faa:	661a      	str	r2, [r3, #96]	; 0x60
 8005fac:	e002      	b.n	8005fb4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <HAL_UART_Receive_IT+0x140>)
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005fca:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e000      	b.n	8005fd2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8005fd0:	2302      	movs	r3, #2
  }
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	08006dab 	.word	0x08006dab
 8005fe4:	08006d01 	.word	0x08006d01

08005fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d113      	bne.n	800603e <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80ff 	beq.w	8006232 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
      }
      return;
 800603c:	e0f9      	b.n	8006232 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80c1 	beq.w	80061c8 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80b6 	beq.w	80061c8 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00e      	beq.n	8006084 <HAL_UART_IRQHandler+0x9c>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2201      	movs	r2, #1
 8006076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800607c:	f043 0201 	orr.w	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <HAL_UART_IRQHandler+0xc4>
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2202      	movs	r2, #2
 800609e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	f043 0204 	orr.w	r2, r3, #4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00e      	beq.n	80060d4 <HAL_UART_IRQHandler+0xec>
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2204      	movs	r2, #4
 80060c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060cc:	f043 0202 	orr.w	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d013      	beq.n	8006106 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2208      	movs	r2, #8
 80060f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060fe:	f043 0208 	orr.w	r2, r3, #8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8093 	beq.w	8006236 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00c      	beq.n	8006134 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006138:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d004      	beq.n	8006152 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800614e:	2b00      	cmp	r3, #0
 8006150:	d031      	beq.n	80061b6 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fd0d 	bl	8006b72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d123      	bne.n	80061ae <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006174:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d013      	beq.n	80061a6 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006182:	4a30      	ldr	r2, [pc, #192]	; (8006244 <HAL_UART_IRQHandler+0x25c>)
 8006184:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800618a:	4618      	mov	r0, r3
 800618c:	f7fd f9dc 	bl	8003548 <HAL_DMA_Abort_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d016      	beq.n	80061c4 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80061a0:	4610      	mov	r0, r2
 80061a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	e00e      	b.n	80061c4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f862 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	e00a      	b.n	80061c4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f85e 	bl	8006270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b4:	e006      	b.n	80061c4 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f85a 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80061c2:	e038      	b.n	8006236 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c4:	bf00      	nop
    return;
 80061c6:	e036      	b.n	8006236 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00d      	beq.n	80061ee <HAL_UART_IRQHandler+0x206>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fe34 	bl	8006e54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061ec:	e026      	b.n	800623c <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006206:	2b00      	cmp	r3, #0
 8006208:	d017      	beq.n	800623a <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
    }
    return;
 8006212:	e012      	b.n	800623a <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00e      	beq.n	800623c <HAL_UART_IRQHandler+0x254>
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fd50 	bl	8006cce <UART_EndTransmit_IT>
    return;
 800622e:	bf00      	nop
 8006230:	e004      	b.n	800623c <HAL_UART_IRQHandler+0x254>
      return;
 8006232:	bf00      	nop
 8006234:	e002      	b.n	800623c <HAL_UART_IRQHandler+0x254>
    return;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <HAL_UART_IRQHandler+0x254>
    return;
 800623a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	08006bb3 	.word	0x08006bb3

08006248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006284:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006288:	b088      	sub	sp, #32
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4bac      	ldr	r3, [pc, #688]	; (800656c <UART_SetConfig+0x2e8>)
 80062ba:	4013      	ands	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6812      	ldr	r2, [r2, #0]
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	430b      	orrs	r3, r1
 80062c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4aa2      	ldr	r2, [pc, #648]	; (8006570 <UART_SetConfig+0x2ec>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	430a      	orrs	r2, r1
 8006308:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a99      	ldr	r2, [pc, #612]	; (8006574 <UART_SetConfig+0x2f0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d121      	bne.n	8006358 <UART_SetConfig+0xd4>
 8006314:	4b98      	ldr	r3, [pc, #608]	; (8006578 <UART_SetConfig+0x2f4>)
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b03      	cmp	r3, #3
 8006320:	d816      	bhi.n	8006350 <UART_SetConfig+0xcc>
 8006322:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0xa4>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	08006339 	.word	0x08006339
 800632c:	08006345 	.word	0x08006345
 8006330:	0800633f 	.word	0x0800633f
 8006334:	0800634b 	.word	0x0800634b
 8006338:	2301      	movs	r3, #1
 800633a:	76fb      	strb	r3, [r7, #27]
 800633c:	e0e8      	b.n	8006510 <UART_SetConfig+0x28c>
 800633e:	2302      	movs	r3, #2
 8006340:	76fb      	strb	r3, [r7, #27]
 8006342:	e0e5      	b.n	8006510 <UART_SetConfig+0x28c>
 8006344:	2304      	movs	r3, #4
 8006346:	76fb      	strb	r3, [r7, #27]
 8006348:	e0e2      	b.n	8006510 <UART_SetConfig+0x28c>
 800634a:	2308      	movs	r3, #8
 800634c:	76fb      	strb	r3, [r7, #27]
 800634e:	e0df      	b.n	8006510 <UART_SetConfig+0x28c>
 8006350:	2310      	movs	r3, #16
 8006352:	76fb      	strb	r3, [r7, #27]
 8006354:	bf00      	nop
 8006356:	e0db      	b.n	8006510 <UART_SetConfig+0x28c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a87      	ldr	r2, [pc, #540]	; (800657c <UART_SetConfig+0x2f8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d134      	bne.n	80063cc <UART_SetConfig+0x148>
 8006362:	4b85      	ldr	r3, [pc, #532]	; (8006578 <UART_SetConfig+0x2f4>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b0c      	cmp	r3, #12
 800636e:	d829      	bhi.n	80063c4 <UART_SetConfig+0x140>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <UART_SetConfig+0xf4>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080063c5 	.word	0x080063c5
 8006380:	080063c5 	.word	0x080063c5
 8006384:	080063c5 	.word	0x080063c5
 8006388:	080063b9 	.word	0x080063b9
 800638c:	080063c5 	.word	0x080063c5
 8006390:	080063c5 	.word	0x080063c5
 8006394:	080063c5 	.word	0x080063c5
 8006398:	080063b3 	.word	0x080063b3
 800639c:	080063c5 	.word	0x080063c5
 80063a0:	080063c5 	.word	0x080063c5
 80063a4:	080063c5 	.word	0x080063c5
 80063a8:	080063bf 	.word	0x080063bf
 80063ac:	2300      	movs	r3, #0
 80063ae:	76fb      	strb	r3, [r7, #27]
 80063b0:	e0ae      	b.n	8006510 <UART_SetConfig+0x28c>
 80063b2:	2302      	movs	r3, #2
 80063b4:	76fb      	strb	r3, [r7, #27]
 80063b6:	e0ab      	b.n	8006510 <UART_SetConfig+0x28c>
 80063b8:	2304      	movs	r3, #4
 80063ba:	76fb      	strb	r3, [r7, #27]
 80063bc:	e0a8      	b.n	8006510 <UART_SetConfig+0x28c>
 80063be:	2308      	movs	r3, #8
 80063c0:	76fb      	strb	r3, [r7, #27]
 80063c2:	e0a5      	b.n	8006510 <UART_SetConfig+0x28c>
 80063c4:	2310      	movs	r3, #16
 80063c6:	76fb      	strb	r3, [r7, #27]
 80063c8:	bf00      	nop
 80063ca:	e0a1      	b.n	8006510 <UART_SetConfig+0x28c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6b      	ldr	r2, [pc, #428]	; (8006580 <UART_SetConfig+0x2fc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d120      	bne.n	8006418 <UART_SetConfig+0x194>
 80063d6:	4b68      	ldr	r3, [pc, #416]	; (8006578 <UART_SetConfig+0x2f4>)
 80063d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d00f      	beq.n	8006404 <UART_SetConfig+0x180>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d802      	bhi.n	80063ee <UART_SetConfig+0x16a>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <UART_SetConfig+0x174>
 80063ec:	e010      	b.n	8006410 <UART_SetConfig+0x18c>
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d005      	beq.n	80063fe <UART_SetConfig+0x17a>
 80063f2:	2b30      	cmp	r3, #48	; 0x30
 80063f4:	d009      	beq.n	800640a <UART_SetConfig+0x186>
 80063f6:	e00b      	b.n	8006410 <UART_SetConfig+0x18c>
 80063f8:	2300      	movs	r3, #0
 80063fa:	76fb      	strb	r3, [r7, #27]
 80063fc:	e088      	b.n	8006510 <UART_SetConfig+0x28c>
 80063fe:	2302      	movs	r3, #2
 8006400:	76fb      	strb	r3, [r7, #27]
 8006402:	e085      	b.n	8006510 <UART_SetConfig+0x28c>
 8006404:	2304      	movs	r3, #4
 8006406:	76fb      	strb	r3, [r7, #27]
 8006408:	e082      	b.n	8006510 <UART_SetConfig+0x28c>
 800640a:	2308      	movs	r3, #8
 800640c:	76fb      	strb	r3, [r7, #27]
 800640e:	e07f      	b.n	8006510 <UART_SetConfig+0x28c>
 8006410:	2310      	movs	r3, #16
 8006412:	76fb      	strb	r3, [r7, #27]
 8006414:	bf00      	nop
 8006416:	e07b      	b.n	8006510 <UART_SetConfig+0x28c>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a59      	ldr	r2, [pc, #356]	; (8006584 <UART_SetConfig+0x300>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d120      	bne.n	8006464 <UART_SetConfig+0x1e0>
 8006422:	4b55      	ldr	r3, [pc, #340]	; (8006578 <UART_SetConfig+0x2f4>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d00f      	beq.n	8006450 <UART_SetConfig+0x1cc>
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d802      	bhi.n	800643a <UART_SetConfig+0x1b6>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <UART_SetConfig+0x1c0>
 8006438:	e010      	b.n	800645c <UART_SetConfig+0x1d8>
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d005      	beq.n	800644a <UART_SetConfig+0x1c6>
 800643e:	2bc0      	cmp	r3, #192	; 0xc0
 8006440:	d009      	beq.n	8006456 <UART_SetConfig+0x1d2>
 8006442:	e00b      	b.n	800645c <UART_SetConfig+0x1d8>
 8006444:	2300      	movs	r3, #0
 8006446:	76fb      	strb	r3, [r7, #27]
 8006448:	e062      	b.n	8006510 <UART_SetConfig+0x28c>
 800644a:	2302      	movs	r3, #2
 800644c:	76fb      	strb	r3, [r7, #27]
 800644e:	e05f      	b.n	8006510 <UART_SetConfig+0x28c>
 8006450:	2304      	movs	r3, #4
 8006452:	76fb      	strb	r3, [r7, #27]
 8006454:	e05c      	b.n	8006510 <UART_SetConfig+0x28c>
 8006456:	2308      	movs	r3, #8
 8006458:	76fb      	strb	r3, [r7, #27]
 800645a:	e059      	b.n	8006510 <UART_SetConfig+0x28c>
 800645c:	2310      	movs	r3, #16
 800645e:	76fb      	strb	r3, [r7, #27]
 8006460:	bf00      	nop
 8006462:	e055      	b.n	8006510 <UART_SetConfig+0x28c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a47      	ldr	r2, [pc, #284]	; (8006588 <UART_SetConfig+0x304>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d124      	bne.n	80064b8 <UART_SetConfig+0x234>
 800646e:	4b42      	ldr	r3, [pc, #264]	; (8006578 <UART_SetConfig+0x2f4>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647c:	d012      	beq.n	80064a4 <UART_SetConfig+0x220>
 800647e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006482:	d802      	bhi.n	800648a <UART_SetConfig+0x206>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <UART_SetConfig+0x214>
 8006488:	e012      	b.n	80064b0 <UART_SetConfig+0x22c>
 800648a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800648e:	d006      	beq.n	800649e <UART_SetConfig+0x21a>
 8006490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006494:	d009      	beq.n	80064aa <UART_SetConfig+0x226>
 8006496:	e00b      	b.n	80064b0 <UART_SetConfig+0x22c>
 8006498:	2300      	movs	r3, #0
 800649a:	76fb      	strb	r3, [r7, #27]
 800649c:	e038      	b.n	8006510 <UART_SetConfig+0x28c>
 800649e:	2302      	movs	r3, #2
 80064a0:	76fb      	strb	r3, [r7, #27]
 80064a2:	e035      	b.n	8006510 <UART_SetConfig+0x28c>
 80064a4:	2304      	movs	r3, #4
 80064a6:	76fb      	strb	r3, [r7, #27]
 80064a8:	e032      	b.n	8006510 <UART_SetConfig+0x28c>
 80064aa:	2308      	movs	r3, #8
 80064ac:	76fb      	strb	r3, [r7, #27]
 80064ae:	e02f      	b.n	8006510 <UART_SetConfig+0x28c>
 80064b0:	2310      	movs	r3, #16
 80064b2:	76fb      	strb	r3, [r7, #27]
 80064b4:	bf00      	nop
 80064b6:	e02b      	b.n	8006510 <UART_SetConfig+0x28c>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2c      	ldr	r2, [pc, #176]	; (8006570 <UART_SetConfig+0x2ec>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d124      	bne.n	800650c <UART_SetConfig+0x288>
 80064c2:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <UART_SetConfig+0x2f4>)
 80064c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d0:	d012      	beq.n	80064f8 <UART_SetConfig+0x274>
 80064d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d6:	d802      	bhi.n	80064de <UART_SetConfig+0x25a>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <UART_SetConfig+0x268>
 80064dc:	e012      	b.n	8006504 <UART_SetConfig+0x280>
 80064de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e2:	d006      	beq.n	80064f2 <UART_SetConfig+0x26e>
 80064e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e8:	d009      	beq.n	80064fe <UART_SetConfig+0x27a>
 80064ea:	e00b      	b.n	8006504 <UART_SetConfig+0x280>
 80064ec:	2300      	movs	r3, #0
 80064ee:	76fb      	strb	r3, [r7, #27]
 80064f0:	e00e      	b.n	8006510 <UART_SetConfig+0x28c>
 80064f2:	2302      	movs	r3, #2
 80064f4:	76fb      	strb	r3, [r7, #27]
 80064f6:	e00b      	b.n	8006510 <UART_SetConfig+0x28c>
 80064f8:	2304      	movs	r3, #4
 80064fa:	76fb      	strb	r3, [r7, #27]
 80064fc:	e008      	b.n	8006510 <UART_SetConfig+0x28c>
 80064fe:	2308      	movs	r3, #8
 8006500:	76fb      	strb	r3, [r7, #27]
 8006502:	e005      	b.n	8006510 <UART_SetConfig+0x28c>
 8006504:	2310      	movs	r3, #16
 8006506:	76fb      	strb	r3, [r7, #27]
 8006508:	bf00      	nop
 800650a:	e001      	b.n	8006510 <UART_SetConfig+0x28c>
 800650c:	2310      	movs	r3, #16
 800650e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a16      	ldr	r2, [pc, #88]	; (8006570 <UART_SetConfig+0x2ec>)
 8006516:	4293      	cmp	r3, r2
 8006518:	f040 80fa 	bne.w	8006710 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800651c:	7efb      	ldrb	r3, [r7, #27]
 800651e:	2b08      	cmp	r3, #8
 8006520:	d836      	bhi.n	8006590 <UART_SetConfig+0x30c>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0x2a4>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006591 	.word	0x08006591
 8006530:	08006555 	.word	0x08006555
 8006534:	08006591 	.word	0x08006591
 8006538:	0800655b 	.word	0x0800655b
 800653c:	08006591 	.word	0x08006591
 8006540:	08006591 	.word	0x08006591
 8006544:	08006591 	.word	0x08006591
 8006548:	08006563 	.word	0x08006563
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fe fb04 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8006550:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006552:	e020      	b.n	8006596 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <UART_SetConfig+0x308>)
 8006556:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006558:	e01d      	b.n	8006596 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800655a:	f7fe fa67 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 800655e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006560:	e019      	b.n	8006596 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006566:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006568:	e015      	b.n	8006596 <UART_SetConfig+0x312>
 800656a:	bf00      	nop
 800656c:	efff69f3 	.word	0xefff69f3
 8006570:	40008000 	.word	0x40008000
 8006574:	40013800 	.word	0x40013800
 8006578:	40021000 	.word	0x40021000
 800657c:	40004400 	.word	0x40004400
 8006580:	40004800 	.word	0x40004800
 8006584:	40004c00 	.word	0x40004c00
 8006588:	40005000 	.word	0x40005000
 800658c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	74fb      	strb	r3, [r7, #19]
        break;
 8006594:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 81ac 	beq.w	80068f6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	4413      	add	r3, r2
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d305      	bcc.n	80065ba <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d902      	bls.n	80065c0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	74fb      	strb	r3, [r7, #19]
 80065be:	e19a      	b.n	80068f6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80065c0:	7efb      	ldrb	r3, [r7, #27]
 80065c2:	2b08      	cmp	r3, #8
 80065c4:	f200 8091 	bhi.w	80066ea <UART_SetConfig+0x466>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <UART_SetConfig+0x34c>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	080066eb 	.word	0x080066eb
 80065d8:	08006641 	.word	0x08006641
 80065dc:	080066eb 	.word	0x080066eb
 80065e0:	08006675 	.word	0x08006675
 80065e4:	080066eb 	.word	0x080066eb
 80065e8:	080066eb 	.word	0x080066eb
 80065ec:	080066eb 	.word	0x080066eb
 80065f0:	080066c1 	.word	0x080066c1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80065f4:	f7fe fab0 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 80065f8:	4603      	mov	r3, r0
 80065fa:	4619      	mov	r1, r3
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	f04f 0400 	mov.w	r4, #0
 8006608:	0214      	lsls	r4, r2, #8
 800660a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800660e:	020b      	lsls	r3, r1, #8
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6852      	ldr	r2, [r2, #4]
 8006614:	0852      	lsrs	r2, r2, #1
 8006616:	4611      	mov	r1, r2
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	eb13 0b01 	adds.w	fp, r3, r1
 8006620:	eb44 0c02 	adc.w	ip, r4, r2
 8006624:	4658      	mov	r0, fp
 8006626:	4661      	mov	r1, ip
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f04f 0400 	mov.w	r4, #0
 8006630:	461a      	mov	r2, r3
 8006632:	4623      	mov	r3, r4
 8006634:	f7f9 fe24 	bl	8000280 <__aeabi_uldivmod>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800663e:	e057      	b.n	80066f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	f04f 0400 	mov.w	r4, #0
 800664a:	49b1      	ldr	r1, [pc, #708]	; (8006910 <UART_SetConfig+0x68c>)
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	eb13 0b01 	adds.w	fp, r3, r1
 8006654:	eb44 0c02 	adc.w	ip, r4, r2
 8006658:	4658      	mov	r0, fp
 800665a:	4661      	mov	r1, ip
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	461a      	mov	r2, r3
 8006666:	4623      	mov	r3, r4
 8006668:	f7f9 fe0a 	bl	8000280 <__aeabi_uldivmod>
 800666c:	4603      	mov	r3, r0
 800666e:	460c      	mov	r4, r1
 8006670:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006672:	e03d      	b.n	80066f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006674:	f7fe f9da 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 8006678:	4603      	mov	r3, r0
 800667a:	4619      	mov	r1, r3
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	f04f 0400 	mov.w	r4, #0
 8006688:	0214      	lsls	r4, r2, #8
 800668a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800668e:	020b      	lsls	r3, r1, #8
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6852      	ldr	r2, [r2, #4]
 8006694:	0852      	lsrs	r2, r2, #1
 8006696:	4611      	mov	r1, r2
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	eb13 0b01 	adds.w	fp, r3, r1
 80066a0:	eb44 0c02 	adc.w	ip, r4, r2
 80066a4:	4658      	mov	r0, fp
 80066a6:	4661      	mov	r1, ip
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f04f 0400 	mov.w	r4, #0
 80066b0:	461a      	mov	r2, r3
 80066b2:	4623      	mov	r3, r4
 80066b4:	f7f9 fde4 	bl	8000280 <__aeabi_uldivmod>
 80066b8:	4603      	mov	r3, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80066be:	e017      	b.n	80066f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	085b      	lsrs	r3, r3, #1
 80066c6:	f04f 0400 	mov.w	r4, #0
 80066ca:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80066ce:	f144 0100 	adc.w	r1, r4, #0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f04f 0400 	mov.w	r4, #0
 80066da:	461a      	mov	r2, r3
 80066dc:	4623      	mov	r3, r4
 80066de:	f7f9 fdcf 	bl	8000280 <__aeabi_uldivmod>
 80066e2:	4603      	mov	r3, r0
 80066e4:	460c      	mov	r4, r1
 80066e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80066e8:	e002      	b.n	80066f0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	74fb      	strb	r3, [r7, #19]
            break;
 80066ee:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066f6:	d308      	bcc.n	800670a <UART_SetConfig+0x486>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fe:	d204      	bcs.n	800670a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e0f5      	b.n	80068f6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	74fb      	strb	r3, [r7, #19]
 800670e:	e0f2      	b.n	80068f6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006718:	d17f      	bne.n	800681a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800671a:	7efb      	ldrb	r3, [r7, #27]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d85c      	bhi.n	80067da <UART_SetConfig+0x556>
 8006720:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x4a4>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800674d 	.word	0x0800674d
 800672c:	0800676b 	.word	0x0800676b
 8006730:	08006789 	.word	0x08006789
 8006734:	080067db 	.word	0x080067db
 8006738:	080067a5 	.word	0x080067a5
 800673c:	080067db 	.word	0x080067db
 8006740:	080067db 	.word	0x080067db
 8006744:	080067db 	.word	0x080067db
 8006748:	080067c3 	.word	0x080067c3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800674c:	f7fe fa04 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8006750:	4603      	mov	r3, r0
 8006752:	005a      	lsls	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	441a      	add	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	b29b      	uxth	r3, r3
 8006766:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006768:	e03a      	b.n	80067e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800676a:	f7fe fa0b 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 800676e:	4603      	mov	r3, r0
 8006770:	005a      	lsls	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	441a      	add	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	b29b      	uxth	r3, r3
 8006784:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006786:	e02b      	b.n	80067e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006792:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6852      	ldr	r2, [r2, #4]
 800679a:	fbb3 f3f2 	udiv	r3, r3, r2
 800679e:	b29b      	uxth	r3, r3
 80067a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067a2:	e01d      	b.n	80067e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80067a4:	f7fe f942 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80067a8:	4603      	mov	r3, r0
 80067aa:	005a      	lsls	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	085b      	lsrs	r3, r3, #1
 80067b2:	441a      	add	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067bc:	b29b      	uxth	r3, r3
 80067be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067c0:	e00e      	b.n	80067e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067d8:	e002      	b.n	80067e0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	74fb      	strb	r3, [r7, #19]
        break;
 80067de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d916      	bls.n	8006814 <UART_SetConfig+0x590>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ec:	d212      	bcs.n	8006814 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f023 030f 	bic.w	r3, r3, #15
 80067f6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	b29a      	uxth	r2, r3
 8006804:	897b      	ldrh	r3, [r7, #10]
 8006806:	4313      	orrs	r3, r2
 8006808:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	897a      	ldrh	r2, [r7, #10]
 8006810:	60da      	str	r2, [r3, #12]
 8006812:	e070      	b.n	80068f6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	74fb      	strb	r3, [r7, #19]
 8006818:	e06d      	b.n	80068f6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800681a:	7efb      	ldrb	r3, [r7, #27]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d859      	bhi.n	80068d4 <UART_SetConfig+0x650>
 8006820:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <UART_SetConfig+0x5a4>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006869 	.word	0x08006869
 8006830:	08006885 	.word	0x08006885
 8006834:	080068d5 	.word	0x080068d5
 8006838:	080068a1 	.word	0x080068a1
 800683c:	080068d5 	.word	0x080068d5
 8006840:	080068d5 	.word	0x080068d5
 8006844:	080068d5 	.word	0x080068d5
 8006848:	080068bd 	.word	0x080068bd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800684c:	f7fe f984 	bl	8004b58 <HAL_RCC_GetPCLK1Freq>
 8006850:	4602      	mov	r2, r0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006862:	b29b      	uxth	r3, r3
 8006864:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006866:	e038      	b.n	80068da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006868:	f7fe f98c 	bl	8004b84 <HAL_RCC_GetPCLK2Freq>
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	085b      	lsrs	r3, r3, #1
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	fbb2 f3f3 	udiv	r3, r2, r3
 800687e:	b29b      	uxth	r3, r3
 8006880:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006882:	e02a      	b.n	80068da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800688e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6852      	ldr	r2, [r2, #4]
 8006896:	fbb3 f3f2 	udiv	r3, r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800689e:	e01c      	b.n	80068da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80068a0:	f7fe f8c4 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80068a4:	4602      	mov	r2, r0
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	441a      	add	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068ba:	e00e      	b.n	80068da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	085b      	lsrs	r3, r3, #1
 80068c2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068d2:	e002      	b.n	80068da <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	74fb      	strb	r3, [r7, #19]
        break;
 80068d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b0f      	cmp	r3, #15
 80068de:	d908      	bls.n	80068f2 <UART_SetConfig+0x66e>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e6:	d204      	bcs.n	80068f2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	60da      	str	r2, [r3, #12]
 80068f0:	e001      	b.n	80068f6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006902:	7cfb      	ldrb	r3, [r7, #19]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800690e:	bf00      	nop
 8006910:	f4240000 	.word	0xf4240000

08006914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00a      	beq.n	8006960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a12:	d10a      	bne.n	8006a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006a66:	f7fb f9f7 	bl	8001e58 <HAL_GetTick>
 8006a6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d10e      	bne.n	8006a98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f82a 	bl	8006ae2 <UART_WaitOnFlagUntilTimeout>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e020      	b.n	8006ada <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d10e      	bne.n	8006ac4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f814 	bl	8006ae2 <UART_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e00a      	b.n	8006ada <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	603b      	str	r3, [r7, #0]
 8006aee:	4613      	mov	r3, r2
 8006af0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af2:	e02a      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d026      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afc:	f7fb f9ac 	bl	8001e58 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d302      	bcc.n	8006b12 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d11b      	bne.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e00f      	b.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4013      	ands	r3, r2
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d0c5      	beq.n	8006af4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b88:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0201 	bic.w	r2, r2, #1
 8006b98:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7ff fb4d 	bl	8006270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bea:	2b21      	cmp	r3, #33	; 0x21
 8006bec:	d12b      	bne.n	8006c46 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d110      	bne.n	8006c1c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c18:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006c1a:	e014      	b.n	8006c46 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c20:	781a      	ldrb	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	b292      	uxth	r2, r2
 8006c28:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5e:	2b21      	cmp	r3, #33	; 0x21
 8006c60:	d12f      	bne.n	8006cc2 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d110      	bne.n	8006c90 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c7c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c8c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006c8e:	e018      	b.n	8006cc2 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c94:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	881a      	ldrh	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca2:	b292      	uxth	r2, r2
 8006ca4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006caa:	1c9a      	adds	r2, r3, #2
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006cc2:	bf00      	nop
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff faa8 	bl	8006248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d14:	2b22      	cmp	r3, #34	; 0x22
 8006d16:	d13a      	bne.n	8006d8e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d1e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d20:	89bb      	ldrh	r3, [r7, #12]
 8006d22:	b2d9      	uxtb	r1, r3
 8006d24:	89fb      	ldrh	r3, [r7, #14]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2c:	400a      	ands	r2, r1
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d123      	bne.n	8006da2 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0201 	bic.w	r2, r2, #1
 8006d78:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fa68 	bl	800625c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d8c:	e009      	b.n	8006da2 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	8b1b      	ldrh	r3, [r3, #24]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0208 	orr.w	r2, r2, #8
 8006d9e:	b292      	uxth	r2, r2
 8006da0:	831a      	strh	r2, [r3, #24]
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006db8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dbe:	2b22      	cmp	r3, #34	; 0x22
 8006dc0:	d13a      	bne.n	8006e38 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006dc8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dd0:	89ba      	ldrh	r2, [r7, #12]
 8006dd2:	89fb      	ldrh	r3, [r7, #14]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d123      	bne.n	8006e4c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e12:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff fa13 	bl	800625c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e36:	e009      	b.n	8006e4c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	8b1b      	ldrh	r3, [r3, #24]
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0208 	orr.w	r2, r2, #8
 8006e48:	b292      	uxth	r2, r2
 8006e4a:	831a      	strh	r2, [r3, #24]
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e68:	b084      	sub	sp, #16
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	f107 001c 	add.w	r0, r7, #28
 8006e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d122      	bne.n	8006ec6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d105      	bne.n	8006eba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa1e 	bl	80072fc <USB_CoreReset>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
 8006ec4:	e01a      	b.n	8006efc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa12 	bl	80072fc <USB_CoreReset>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	639a      	str	r2, [r3, #56]	; 0x38
 8006eee:	e005      	b.n	8006efc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f08:	b004      	add	sp, #16
 8006f0a:	4770      	bx	lr

08006f0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f023 0201 	bic.w	r2, r3, #1
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d106      	bne.n	8006f5a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60da      	str	r2, [r3, #12]
 8006f58:	e00b      	b.n	8006f72 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d106      	bne.n	8006f6e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]
 8006f6c:	e001      	b.n	8006f72 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e003      	b.n	8006f7a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006f72:	2032      	movs	r0, #50	; 0x32
 8006f74:	f7fa ff7c 	bl	8001e70 <HAL_Delay>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f84:	b084      	sub	sp, #16
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e009      	b.n	8006fb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3340      	adds	r3, #64	; 0x40
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b0e      	cmp	r3, #14
 8006fbc:	d9f2      	bls.n	8006fa4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d112      	bne.n	8006fea <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e005      	b.n	8006ff6 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007008:	4619      	mov	r1, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	461a      	mov	r2, r3
 8007012:	680b      	ldr	r3, [r1, #0]
 8007014:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007016:	2103      	movs	r1, #3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f93d 	bl	8007298 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800701e:	2110      	movs	r1, #16
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f8f1 	bl	8007208 <USB_FlushTxFifo>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f90f 	bl	8007254 <USB_FlushRxFifo>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	461a      	mov	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	461a      	mov	r2, r3
 8007054:	2300      	movs	r3, #0
 8007056:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	461a      	mov	r2, r3
 8007060:	2300      	movs	r3, #0
 8007062:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007064:	2300      	movs	r3, #0
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	e043      	b.n	80070f2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800707c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007080:	d118      	bne.n	80070b4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10a      	bne.n	800709e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007094:	461a      	mov	r2, r3
 8007096:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	e013      	b.n	80070c6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070aa:	461a      	mov	r2, r3
 80070ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	e008      	b.n	80070c6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	461a      	mov	r2, r3
 80070c2:	2300      	movs	r3, #0
 80070c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	461a      	mov	r2, r3
 80070d4:	2300      	movs	r3, #0
 80070d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	461a      	mov	r2, r3
 80070e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	3301      	adds	r3, #1
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d3b7      	bcc.n	800706a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	e043      	b.n	8007188 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007116:	d118      	bne.n	800714a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712a:	461a      	mov	r2, r3
 800712c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	e013      	b.n	800715c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	461a      	mov	r2, r3
 8007142:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e008      	b.n	800715c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007156:	461a      	mov	r2, r3
 8007158:	2300      	movs	r3, #0
 800715a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	461a      	mov	r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717a:	461a      	mov	r2, r3
 800717c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007180:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3301      	adds	r3, #1
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	429a      	cmp	r2, r3
 800718e:	d3b7      	bcc.n	8007100 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f043 0210 	orr.w	r2, r3, #16
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <USB_DevInit+0x280>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	f043 0208 	orr.w	r2, r3, #8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d107      	bne.n	80071f2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ea:	f043 0304 	orr.w	r3, r3, #4
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071fe:	b004      	add	sp, #16
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	803c3800 	.word	0x803c3800

08007208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	f043 0220 	orr.w	r2, r3, #32
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4a09      	ldr	r2, [pc, #36]	; (8007250 <USB_FlushTxFifo+0x48>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e006      	b.n	8007242 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	691b      	ldr	r3, [r3, #16]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b20      	cmp	r3, #32
 800723e:	d0f0      	beq.n	8007222 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	00030d40 	.word	0x00030d40

08007254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2210      	movs	r2, #16
 8007264:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a09      	ldr	r2, [pc, #36]	; (8007294 <USB_FlushRxFifo+0x40>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d901      	bls.n	8007278 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e006      	b.n	8007286 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b10      	cmp	r3, #16
 8007282:	d0f0      	beq.n	8007266 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	00030d40 	.word	0x00030d40

08007298 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b8:	4313      	orrs	r3, r2
 80072ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e4:	f043 0302 	orr.w	r3, r3, #2
 80072e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80072ea:	2003      	movs	r0, #3
 80072ec:	f7fa fdc0 	bl	8001e70 <HAL_Delay>

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a13      	ldr	r2, [pc, #76]	; (8007360 <USB_CoreReset+0x64>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e01b      	b.n	8007352 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	daf2      	bge.n	8007308 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f043 0201 	orr.w	r2, r3, #1
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3301      	adds	r3, #1
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a09      	ldr	r2, [pc, #36]	; (8007360 <USB_CoreReset+0x64>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d0f0      	beq.n	8007332 <USB_CoreReset+0x36>

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	00030d40 	.word	0x00030d40

08007364 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007376:	2b84      	cmp	r3, #132	; 0x84
 8007378:	d005      	beq.n	8007386 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800737a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4413      	add	r3, r2
 8007382:	3303      	adds	r3, #3
 8007384:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007386:	68fb      	ldr	r3, [r7, #12]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800739a:	f3ef 8305 	mrs	r3, IPSR
 800739e:	607b      	str	r3, [r7, #4]
  return(result);
 80073a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf14      	ite	ne
 80073a6:	2301      	movne	r3, #1
 80073a8:	2300      	moveq	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80073bc:	f001 f9dc 	bl	8008778 <vTaskStartScheduler>
  
  return osOK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80073c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c8:	b089      	sub	sp, #36	; 0x24
 80073ca:	af04      	add	r7, sp, #16
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d020      	beq.n	800741a <osThreadCreate+0x54>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01c      	beq.n	800741a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685c      	ldr	r4, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681d      	ldr	r5, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691e      	ldr	r6, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff ffb6 	bl	8007364 <makeFreeRtosPriority>
 80073f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007402:	9202      	str	r2, [sp, #8]
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	9100      	str	r1, [sp, #0]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	4632      	mov	r2, r6
 800740c:	4629      	mov	r1, r5
 800740e:	4620      	mov	r0, r4
 8007410:	f000 fff7 	bl	8008402 <xTaskCreateStatic>
 8007414:	4603      	mov	r3, r0
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	e01c      	b.n	8007454 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685c      	ldr	r4, [r3, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007426:	b29e      	uxth	r6, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ff98 	bl	8007364 <makeFreeRtosPriority>
 8007434:	4602      	mov	r2, r0
 8007436:	f107 030c 	add.w	r3, r7, #12
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	9200      	str	r2, [sp, #0]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	4632      	mov	r2, r6
 8007442:	4629      	mov	r1, r5
 8007444:	4620      	mov	r0, r4
 8007446:	f001 f835 	bl	80084b4 <xTaskCreate>
 800744a:	4603      	mov	r3, r0
 800744c:	2b01      	cmp	r3, #1
 800744e:	d001      	beq.n	8007454 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007450:	2300      	movs	r3, #0
 8007452:	e000      	b.n	8007456 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007454:	68fb      	ldr	r3, [r7, #12]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800745e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <osDelay+0x16>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	e000      	b.n	8007476 <osDelay+0x18>
 8007474:	2301      	movs	r3, #1
 8007476:	4618      	mov	r0, r3
 8007478:	f001 f94a 	bl	8008710 <vTaskDelay>
  
  return osOK;
 800747c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	4619      	mov	r1, r3
 800749c:	2001      	movs	r0, #1
 800749e:	f000 fb63 	bl	8007b68 <xQueueCreateMutexStatic>
 80074a2:	4603      	mov	r3, r0
 80074a4:	e003      	b.n	80074ae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80074a6:	2001      	movs	r0, #1
 80074a8:	f000 fb46 	bl	8007b38 <xQueueCreateMutex>
 80074ac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <osMutexWait+0x18>
    return osErrorParameter;
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	e03a      	b.n	8007546 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d103      	bne.n	80074e4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80074dc:	f04f 33ff 	mov.w	r3, #4294967295
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	e009      	b.n	80074f8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d006      	beq.n	80074f8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <osMutexWait+0x40>
      ticks = 1;
 80074f4:	2301      	movs	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80074f8:	f7ff ff4c 	bl	8007394 <inHandlerMode>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d017      	beq.n	8007532 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007502:	f107 0308 	add.w	r3, r7, #8
 8007506:	461a      	mov	r2, r3
 8007508:	2100      	movs	r1, #0
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fdd4 	bl	80080b8 <xQueueReceiveFromISR>
 8007510:	4603      	mov	r3, r0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d001      	beq.n	800751a <osMutexWait+0x62>
      return osErrorOS;
 8007516:	23ff      	movs	r3, #255	; 0xff
 8007518:	e015      	b.n	8007546 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d011      	beq.n	8007544 <osMutexWait+0x8c>
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <osMutexWait+0x98>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	e008      	b.n	8007544 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fcb7 	bl	8007ea8 <xQueueSemaphoreTake>
 800753a:	4603      	mov	r3, r0
 800753c:	2b01      	cmp	r3, #1
 800753e:	d001      	beq.n	8007544 <osMutexWait+0x8c>
    return osErrorOS;
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	e000      	b.n	8007546 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007564:	f7ff ff16 	bl	8007394 <inHandlerMode>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d016      	beq.n	800759c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800756e:	f107 0308 	add.w	r3, r7, #8
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fc0d 	bl	8007d94 <xQueueGiveFromISR>
 800757a:	4603      	mov	r3, r0
 800757c:	2b01      	cmp	r3, #1
 800757e:	d001      	beq.n	8007584 <osMutexRelease+0x30>
      return osErrorOS;
 8007580:	23ff      	movs	r3, #255	; 0xff
 8007582:	e017      	b.n	80075b4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d013      	beq.n	80075b2 <osMutexRelease+0x5e>
 800758a:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <osMutexRelease+0x68>)
 800758c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	e00a      	b.n	80075b2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800759c:	2300      	movs	r3, #0
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fafc 	bl	8007ba0 <xQueueGenericSend>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d001      	beq.n	80075b2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80075ae:	23ff      	movs	r3, #255	; 0xff
 80075b0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80075b2:	68fb      	ldr	r3, [r7, #12]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	e000ed04 	.word	0xe000ed04

080075c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af02      	add	r7, sp, #8
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d010      	beq.n	80075f4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10b      	bne.n	80075f0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	2303      	movs	r3, #3
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	2100      	movs	r1, #0
 80075e6:	2001      	movs	r0, #1
 80075e8:	f000 f9be 	bl	8007968 <xQueueGenericCreateStatic>
 80075ec:	4603      	mov	r3, r0
 80075ee:	e016      	b.n	800761e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	e014      	b.n	800761e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d110      	bne.n	800761c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80075fa:	2203      	movs	r2, #3
 80075fc:	2100      	movs	r1, #0
 80075fe:	2001      	movs	r0, #1
 8007600:	f000 fa24 	bl	8007a4c <xQueueGenericCreate>
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <osSemaphoreCreate+0x58>
 800760c:	2300      	movs	r3, #0
 800760e:	2200      	movs	r2, #0
 8007610:	2100      	movs	r1, #0
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fac4 	bl	8007ba0 <xQueueGenericSend>
      return sema;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	e000      	b.n	800761e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800761c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800763c:	2380      	movs	r3, #128	; 0x80
 800763e:	e03a      	b.n	80076b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d103      	bne.n	8007654 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800764c:	f04f 33ff 	mov.w	r3, #4294967295
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	e009      	b.n	8007668 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d006      	beq.n	8007668 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <osSemaphoreWait+0x40>
      ticks = 1;
 8007664:	2301      	movs	r3, #1
 8007666:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007668:	f7ff fe94 	bl	8007394 <inHandlerMode>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d017      	beq.n	80076a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007672:	f107 0308 	add.w	r3, r7, #8
 8007676:	461a      	mov	r2, r3
 8007678:	2100      	movs	r1, #0
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fd1c 	bl	80080b8 <xQueueReceiveFromISR>
 8007680:	4603      	mov	r3, r0
 8007682:	2b01      	cmp	r3, #1
 8007684:	d001      	beq.n	800768a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007686:	23ff      	movs	r3, #255	; 0xff
 8007688:	e015      	b.n	80076b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d011      	beq.n	80076b4 <osSemaphoreWait+0x8c>
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <osSemaphoreWait+0x98>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	e008      	b.n	80076b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fbff 	bl	8007ea8 <xQueueSemaphoreTake>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d001      	beq.n	80076b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80076b0:	23ff      	movs	r3, #255	; 0xff
 80076b2:	e000      	b.n	80076b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80076d4:	f7ff fe5e 	bl	8007394 <inHandlerMode>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80076de:	f107 0308 	add.w	r3, r7, #8
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fb55 	bl	8007d94 <xQueueGiveFromISR>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d001      	beq.n	80076f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80076f0:	23ff      	movs	r3, #255	; 0xff
 80076f2:	e017      	b.n	8007724 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d013      	beq.n	8007722 <osSemaphoreRelease+0x5e>
 80076fa:	4b0c      	ldr	r3, [pc, #48]	; (800772c <osSemaphoreRelease+0x68>)
 80076fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	e00a      	b.n	8007722 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	2100      	movs	r1, #0
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa44 	bl	8007ba0 <xQueueGenericSend>
 8007718:	4603      	mov	r3, r0
 800771a:	2b01      	cmp	r3, #1
 800771c:	d001      	beq.n	8007722 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800771e:	23ff      	movs	r3, #255	; 0xff
 8007720:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0208 	add.w	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f04f 32ff 	mov.w	r2, #4294967295
 8007748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f103 0208 	add.w	r2, r3, #8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f103 0208 	add.w	r2, r3, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	601a      	str	r2, [r3, #0]
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d103      	bne.n	80077f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e00c      	b.n	800780c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3308      	adds	r3, #8
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e002      	b.n	8007800 <vListInsert+0x2e>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	429a      	cmp	r2, r3
 800780a:	d2f6      	bcs.n	80077fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	601a      	str	r2, [r3, #0]
}
 8007838:	bf00      	nop
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	6892      	ldr	r2, [r2, #8]
 800785a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6852      	ldr	r2, [r2, #4]
 8007864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d103      	bne.n	8007878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	1e5a      	subs	r2, r3, #1
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d109      	bne.n	80078c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	60bb      	str	r3, [r7, #8]
 80078be:	e7fe      	b.n	80078be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80078c0:	f001 febc 	bl	800963c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078cc:	68f9      	ldr	r1, [r7, #12]
 80078ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	441a      	add	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f0:	3b01      	subs	r3, #1
 80078f2:	68f9      	ldr	r1, [r7, #12]
 80078f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078f6:	fb01 f303 	mul.w	r3, r1, r3
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	22ff      	movs	r2, #255	; 0xff
 8007904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	22ff      	movs	r2, #255	; 0xff
 800790c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d114      	bne.n	8007940 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01a      	beq.n	8007954 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3310      	adds	r3, #16
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f96a 	bl	8008bfc <xTaskRemoveFromEventList>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d012      	beq.n	8007954 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800792e:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <xQueueGenericReset+0xcc>)
 8007930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	e009      	b.n	8007954 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3310      	adds	r3, #16
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff fef3 	bl	8007730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff feee 	bl	8007730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007954:	f001 fea0 	bl	8009698 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007958:	2301      	movs	r3, #1
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	e000ed04 	.word	0xe000ed04

08007968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08e      	sub	sp, #56	; 0x38
 800796c:	af02      	add	r7, sp, #8
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d109      	bne.n	8007990 <xQueueGenericCreateStatic+0x28>
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
 800798e:	e7fe      	b.n	800798e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <xQueueGenericCreateStatic+0x42>
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	e7fe      	b.n	80079a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <xQueueGenericCreateStatic+0x4e>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <xQueueGenericCreateStatic+0x52>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <xQueueGenericCreateStatic+0x54>
 80079ba:	2300      	movs	r3, #0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d109      	bne.n	80079d4 <xQueueGenericCreateStatic+0x6c>
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	e7fe      	b.n	80079d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d102      	bne.n	80079e0 <xQueueGenericCreateStatic+0x78>
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <xQueueGenericCreateStatic+0x7c>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e000      	b.n	80079e6 <xQueueGenericCreateStatic+0x7e>
 80079e4:	2300      	movs	r3, #0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <xQueueGenericCreateStatic+0x96>
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	e7fe      	b.n	80079fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079fe:	2348      	movs	r3, #72	; 0x48
 8007a00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b48      	cmp	r3, #72	; 0x48
 8007a06:	d009      	beq.n	8007a1c <xQueueGenericCreateStatic+0xb4>
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	e7fe      	b.n	8007a1a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00d      	beq.n	8007a42 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4613      	mov	r3, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f842 	bl	8007ac6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3730      	adds	r7, #48	; 0x30
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <xQueueGenericCreate+0x28>
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	e7fe      	b.n	8007a72 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d102      	bne.n	8007a80 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
 8007a7e:	e004      	b.n	8007a8a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	fb02 f303 	mul.w	r3, r2, r3
 8007a88:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	3348      	adds	r3, #72	; 0x48
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 feee 	bl	8009870 <pvPortMalloc>
 8007a94:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00f      	beq.n	8007abc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	3348      	adds	r3, #72	; 0x48
 8007aa0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aaa:	79fa      	ldrb	r2, [r7, #7]
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f805 	bl	8007ac6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007abc:	69bb      	ldr	r3, [r7, #24]
	}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d103      	bne.n	8007ae2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e002      	b.n	8007ae8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007af4:	2101      	movs	r1, #1
 8007af6:	69b8      	ldr	r0, [r7, #24]
 8007af8:	f7ff fece 	bl	8007898 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00e      	beq.n	8007b30 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f838 	bl	8007ba0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b42:	2301      	movs	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6939      	ldr	r1, [r7, #16]
 8007b50:	6978      	ldr	r0, [r7, #20]
 8007b52:	f7ff ff7b 	bl	8007a4c <xQueueGenericCreate>
 8007b56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7ff ffd3 	bl	8007b04 <prvInitialiseMutex>

		return pxNewQueue;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	6939      	ldr	r1, [r7, #16]
 8007b86:	6978      	ldr	r0, [r7, #20]
 8007b88:	f7ff feee 	bl	8007968 <xQueueGenericCreateStatic>
 8007b8c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff ffb8 	bl	8007b04 <prvInitialiseMutex>

		return pxNewQueue;
 8007b94:	68fb      	ldr	r3, [r7, #12]
	}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08e      	sub	sp, #56	; 0x38
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d109      	bne.n	8007bd0 <xQueueGenericSend+0x30>
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bce:	e7fe      	b.n	8007bce <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <xQueueGenericSend+0x3e>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <xQueueGenericSend+0x42>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <xQueueGenericSend+0x44>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <xQueueGenericSend+0x5c>
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bfa:	e7fe      	b.n	8007bfa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d103      	bne.n	8007c0a <xQueueGenericSend+0x6a>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <xQueueGenericSend+0x6e>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <xQueueGenericSend+0x70>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <xQueueGenericSend+0x88>
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	623b      	str	r3, [r7, #32]
 8007c26:	e7fe      	b.n	8007c26 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c28:	f001 f9a4 	bl	8008f74 <xTaskGetSchedulerState>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d102      	bne.n	8007c38 <xQueueGenericSend+0x98>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <xQueueGenericSend+0x9c>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <xQueueGenericSend+0x9e>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <xQueueGenericSend+0xb6>
 8007c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	e7fe      	b.n	8007c54 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c56:	f001 fcf1 	bl	800963c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d302      	bcc.n	8007c6c <xQueueGenericSend+0xcc>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d129      	bne.n	8007cc0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c72:	f000 fab6 	bl	80081e2 <prvCopyDataToQueue>
 8007c76:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d010      	beq.n	8007ca2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	3324      	adds	r3, #36	; 0x24
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 ffb9 	bl	8008bfc <xTaskRemoveFromEventList>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d013      	beq.n	8007cb8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c90:	4b3f      	ldr	r3, [pc, #252]	; (8007d90 <xQueueGenericSend+0x1f0>)
 8007c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	e00a      	b.n	8007cb8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d007      	beq.n	8007cb8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ca8:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <xQueueGenericSend+0x1f0>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cb8:	f001 fcee 	bl	8009698 <vPortExitCritical>
				return pdPASS;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e063      	b.n	8007d88 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d103      	bne.n	8007cce <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cc6:	f001 fce7 	bl	8009698 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e05c      	b.n	8007d88 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cd4:	f107 0314 	add.w	r3, r7, #20
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fff1 	bl	8008cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ce2:	f001 fcd9 	bl	8009698 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ce6:	f000 fda5 	bl	8008834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cea:	f001 fca7 	bl	800963c <vPortEnterCritical>
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cf4:	b25b      	sxtb	r3, r3
 8007cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfa:	d103      	bne.n	8007d04 <xQueueGenericSend+0x164>
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d0a:	b25b      	sxtb	r3, r3
 8007d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d10:	d103      	bne.n	8007d1a <xQueueGenericSend+0x17a>
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d1a:	f001 fcbd 	bl	8009698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d1e:	1d3a      	adds	r2, r7, #4
 8007d20:	f107 0314 	add.w	r3, r7, #20
 8007d24:	4611      	mov	r1, r2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 ffe0 	bl	8008cec <xTaskCheckForTimeOut>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d124      	bne.n	8007d7c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d34:	f000 fb4d 	bl	80083d2 <prvIsQueueFull>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d018      	beq.n	8007d70 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	3310      	adds	r3, #16
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 ff34 	bl	8008bb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d4e:	f000 fad8 	bl	8008302 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d52:	f000 fd7d 	bl	8008850 <xTaskResumeAll>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f47f af7c 	bne.w	8007c56 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007d5e:	4b0c      	ldr	r3, [pc, #48]	; (8007d90 <xQueueGenericSend+0x1f0>)
 8007d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	e772      	b.n	8007c56 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d72:	f000 fac6 	bl	8008302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d76:	f000 fd6b 	bl	8008850 <xTaskResumeAll>
 8007d7a:	e76c      	b.n	8007c56 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d7e:	f000 fac0 	bl	8008302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d82:	f000 fd65 	bl	8008850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d86:	2300      	movs	r3, #0
		}
	}
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3738      	adds	r7, #56	; 0x38
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08e      	sub	sp, #56	; 0x38
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d109      	bne.n	8007dbc <xQueueGiveFromISR+0x28>
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	623b      	str	r3, [r7, #32]
 8007dba:	e7fe      	b.n	8007dba <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d009      	beq.n	8007dd8 <xQueueGiveFromISR+0x44>
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	61fb      	str	r3, [r7, #28]
 8007dd6:	e7fe      	b.n	8007dd6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <xQueueGiveFromISR+0x54>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <xQueueGiveFromISR+0x58>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <xQueueGiveFromISR+0x5a>
 8007dec:	2300      	movs	r3, #0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <xQueueGiveFromISR+0x72>
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	61bb      	str	r3, [r7, #24]
 8007e04:	e7fe      	b.n	8007e04 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e06:	f001 fcf5 	bl	80097f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e0a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	617a      	str	r2, [r7, #20]
 8007e20:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d22b      	bcs.n	8007e8e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d112      	bne.n	8007e78 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d016      	beq.n	8007e88 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	3324      	adds	r3, #36	; 0x24
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fecc 	bl	8008bfc <xTaskRemoveFromEventList>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00e      	beq.n	8007e88 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2201      	movs	r2, #1
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	e007      	b.n	8007e88 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	b25a      	sxtb	r2, r3
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8c:	e001      	b.n	8007e92 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	637b      	str	r3, [r7, #52]	; 0x34
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3738      	adds	r7, #56	; 0x38
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08e      	sub	sp, #56	; 0x38
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	623b      	str	r3, [r7, #32]
 8007ed6:	e7fe      	b.n	8007ed6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <xQueueSemaphoreTake+0x4c>
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	e7fe      	b.n	8007ef2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef4:	f001 f83e 	bl	8008f74 <xTaskGetSchedulerState>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <xQueueSemaphoreTake+0x5c>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <xQueueSemaphoreTake+0x60>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <xQueueSemaphoreTake+0x62>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <xQueueSemaphoreTake+0x7a>
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	e7fe      	b.n	8007f20 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f22:	f001 fb8b 	bl	800963c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d024      	beq.n	8007f7c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	1e5a      	subs	r2, r3, #1
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d104      	bne.n	8007f4c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007f42:	f001 f9dd 	bl	8009300 <pvTaskIncrementMutexHeldCount>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	3310      	adds	r3, #16
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fe4f 	bl	8008bfc <xTaskRemoveFromEventList>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f64:	4b53      	ldr	r3, [pc, #332]	; (80080b4 <xQueueSemaphoreTake+0x20c>)
 8007f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f74:	f001 fb90 	bl	8009698 <vPortExitCritical>
				return pdPASS;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e096      	b.n	80080aa <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d110      	bne.n	8007fa4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d009      	beq.n	8007f9c <xQueueSemaphoreTake+0xf4>
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	e7fe      	b.n	8007f9a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f9c:	f001 fb7c 	bl	8009698 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e082      	b.n	80080aa <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007faa:	f107 030c 	add.w	r3, r7, #12
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fe86 	bl	8008cc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fb8:	f001 fb6e 	bl	8009698 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fbc:	f000 fc3a 	bl	8008834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fc0:	f001 fb3c 	bl	800963c <vPortEnterCritical>
 8007fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d103      	bne.n	8007fda <xQueueSemaphoreTake+0x132>
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d103      	bne.n	8007ff0 <xQueueSemaphoreTake+0x148>
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff0:	f001 fb52 	bl	8009698 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ff4:	463a      	mov	r2, r7
 8007ff6:	f107 030c 	add.w	r3, r7, #12
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fe75 	bl	8008cec <xTaskCheckForTimeOut>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d132      	bne.n	800806e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008008:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800800a:	f000 f9cc 	bl	80083a6 <prvIsQueueEmpty>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d026      	beq.n	8008062 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d109      	bne.n	8008030 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800801c:	f001 fb0e 	bl	800963c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	4618      	mov	r0, r3
 8008026:	f000 ffc3 	bl	8008fb0 <xTaskPriorityInherit>
 800802a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800802c:	f001 fb34 	bl	8009698 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	3324      	adds	r3, #36	; 0x24
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f000 fdbb 	bl	8008bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800803e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008040:	f000 f95f 	bl	8008302 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008044:	f000 fc04 	bl	8008850 <xTaskResumeAll>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	f47f af69 	bne.w	8007f22 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008050:	4b18      	ldr	r3, [pc, #96]	; (80080b4 <xQueueSemaphoreTake+0x20c>)
 8008052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	e75f      	b.n	8007f22 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008064:	f000 f94d 	bl	8008302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008068:	f000 fbf2 	bl	8008850 <xTaskResumeAll>
 800806c:	e759      	b.n	8007f22 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800806e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008070:	f000 f947 	bl	8008302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008074:	f000 fbec 	bl	8008850 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008078:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800807a:	f000 f994 	bl	80083a6 <prvIsQueueEmpty>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f43f af4e 	beq.w	8007f22 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800808c:	f001 fad6 	bl	800963c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008092:	f000 f88e 	bl	80081b2 <prvGetDisinheritPriorityAfterTimeout>
 8008096:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 f890 	bl	80091c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80080a4:	f001 faf8 	bl	8009698 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3738      	adds	r7, #56	; 0x38
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08e      	sub	sp, #56	; 0x38
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d109      	bne.n	80080e2 <xQueueReceiveFromISR+0x2a>
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	623b      	str	r3, [r7, #32]
 80080e0:	e7fe      	b.n	80080e0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <xQueueReceiveFromISR+0x38>
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <xQueueReceiveFromISR+0x3c>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <xQueueReceiveFromISR+0x3e>
 80080f4:	2300      	movs	r3, #0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d109      	bne.n	800810e <xQueueReceiveFromISR+0x56>
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e7fe      	b.n	800810c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800810e:	f001 fb71 	bl	80097f4 <vPortValidateInterruptPriority>
	__asm volatile
 8008112:	f3ef 8211 	mrs	r2, BASEPRI
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	61ba      	str	r2, [r7, #24]
 8008128:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800812a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800812e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	2b00      	cmp	r3, #0
 8008138:	d02f      	beq.n	800819a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f000 f8b5 	bl	80082b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814e:	1e5a      	subs	r2, r3, #1
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008154:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d112      	bne.n	8008184 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d016      	beq.n	8008194 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	3310      	adds	r3, #16
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fd46 	bl	8008bfc <xTaskRemoveFromEventList>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00e      	beq.n	8008194 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	e007      	b.n	8008194 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008188:	3301      	adds	r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	b25a      	sxtb	r2, r3
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	e001      	b.n	800819e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3738      	adds	r7, #56	; 0x38
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d006      	beq.n	80081d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f1c3 0307 	rsb	r3, r3, #7
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e001      	b.n	80081d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081d4:	68fb      	ldr	r3, [r7, #12]
	}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b086      	sub	sp, #24
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10d      	bne.n	800821c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d14d      	bne.n	80082a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 ff55 	bl	80090bc <xTaskPriorityDisinherit>
 8008212:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	605a      	str	r2, [r3, #4]
 800821a:	e043      	b.n	80082a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d119      	bne.n	8008256 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6898      	ldr	r0, [r3, #8]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	461a      	mov	r2, r3
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	f001 fd1f 	bl	8009c70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	689a      	ldr	r2, [r3, #8]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	441a      	add	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	429a      	cmp	r2, r3
 800824a:	d32b      	bcc.n	80082a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	609a      	str	r2, [r3, #8]
 8008254:	e026      	b.n	80082a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	68d8      	ldr	r0, [r3, #12]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	461a      	mov	r2, r3
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	f001 fd05 	bl	8009c70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826e:	425b      	negs	r3, r3
 8008270:	441a      	add	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	429a      	cmp	r2, r3
 8008280:	d207      	bcs.n	8008292 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	425b      	negs	r3, r3
 800828c:	441a      	add	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d105      	bne.n	80082a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082ac:	697b      	ldr	r3, [r7, #20]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d018      	beq.n	80082fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d0:	441a      	add	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d303      	bcc.n	80082ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68d9      	ldr	r1, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	461a      	mov	r2, r3
 80082f4:	6838      	ldr	r0, [r7, #0]
 80082f6:	f001 fcbb 	bl	8009c70 <memcpy>
	}
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800830a:	f001 f997 	bl	800963c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008314:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008316:	e011      	b.n	800833c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	2b00      	cmp	r3, #0
 800831e:	d012      	beq.n	8008346 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3324      	adds	r3, #36	; 0x24
 8008324:	4618      	mov	r0, r3
 8008326:	f000 fc69 	bl	8008bfc <xTaskRemoveFromEventList>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008330:	f000 fd3c 	bl	8008dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	3b01      	subs	r3, #1
 8008338:	b2db      	uxtb	r3, r3
 800833a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800833c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dce9      	bgt.n	8008318 <prvUnlockQueue+0x16>
 8008344:	e000      	b.n	8008348 <prvUnlockQueue+0x46>
					break;
 8008346:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	22ff      	movs	r2, #255	; 0xff
 800834c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008350:	f001 f9a2 	bl	8009698 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008354:	f001 f972 	bl	800963c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800835e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008360:	e011      	b.n	8008386 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d012      	beq.n	8008390 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	3310      	adds	r3, #16
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fc44 	bl	8008bfc <xTaskRemoveFromEventList>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800837a:	f000 fd17 	bl	8008dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	3b01      	subs	r3, #1
 8008382:	b2db      	uxtb	r3, r3
 8008384:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800838a:	2b00      	cmp	r3, #0
 800838c:	dce9      	bgt.n	8008362 <prvUnlockQueue+0x60>
 800838e:	e000      	b.n	8008392 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008390:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	22ff      	movs	r2, #255	; 0xff
 8008396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800839a:	f001 f97d 	bl	8009698 <vPortExitCritical>
}
 800839e:	bf00      	nop
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083ae:	f001 f945 	bl	800963c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083ba:	2301      	movs	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e001      	b.n	80083c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083c4:	f001 f968 	bl	8009698 <vPortExitCritical>

	return xReturn;
 80083c8:	68fb      	ldr	r3, [r7, #12]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083da:	f001 f92f 	bl	800963c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d102      	bne.n	80083f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	e001      	b.n	80083f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083f0:	2300      	movs	r3, #0
 80083f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083f4:	f001 f950 	bl	8009698 <vPortExitCritical>

	return xReturn;
 80083f8:	68fb      	ldr	r3, [r7, #12]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008402:	b580      	push	{r7, lr}
 8008404:	b08e      	sub	sp, #56	; 0x38
 8008406:	af04      	add	r7, sp, #16
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
 800840e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008412:	2b00      	cmp	r3, #0
 8008414:	d109      	bne.n	800842a <xTaskCreateStatic+0x28>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	623b      	str	r3, [r7, #32]
 8008428:	e7fe      	b.n	8008428 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	2b00      	cmp	r3, #0
 800842e:	d109      	bne.n	8008444 <xTaskCreateStatic+0x42>
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	61fb      	str	r3, [r7, #28]
 8008442:	e7fe      	b.n	8008442 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008444:	2354      	movs	r3, #84	; 0x54
 8008446:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	2b54      	cmp	r3, #84	; 0x54
 800844c:	d009      	beq.n	8008462 <xTaskCreateStatic+0x60>
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	61bb      	str	r3, [r7, #24]
 8008460:	e7fe      	b.n	8008460 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01e      	beq.n	80084a6 <xTaskCreateStatic+0xa4>
 8008468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01b      	beq.n	80084a6 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008476:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008480:	2300      	movs	r3, #0
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	9302      	str	r3, [sp, #8]
 8008488:	f107 0314 	add.w	r3, r7, #20
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 f850 	bl	800853e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800849e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084a0:	f000 f8cc 	bl	800863c <prvAddNewTaskToReadyList>
 80084a4:	e001      	b.n	80084aa <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084aa:	697b      	ldr	r3, [r7, #20]
	}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3728      	adds	r7, #40	; 0x28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b08c      	sub	sp, #48	; 0x30
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	4613      	mov	r3, r2
 80084c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f9d1 	bl	8009870 <pvPortMalloc>
 80084ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80084d6:	2054      	movs	r0, #84	; 0x54
 80084d8:	f001 f9ca 	bl	8009870 <pvPortMalloc>
 80084dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	631a      	str	r2, [r3, #48]	; 0x30
 80084ea:	e005      	b.n	80084f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084ec:	6978      	ldr	r0, [r7, #20]
 80084ee:	f001 fa81 	bl	80099f4 <vPortFree>
 80084f2:	e001      	b.n	80084f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d017      	beq.n	800852e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008506:	88fa      	ldrh	r2, [r7, #6]
 8008508:	2300      	movs	r3, #0
 800850a:	9303      	str	r3, [sp, #12]
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	9302      	str	r3, [sp, #8]
 8008510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	9300      	str	r3, [sp, #0]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f80e 	bl	800853e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008522:	69f8      	ldr	r0, [r7, #28]
 8008524:	f000 f88a 	bl	800863c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008528:	2301      	movs	r3, #1
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e002      	b.n	8008534 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800852e:	f04f 33ff 	mov.w	r3, #4294967295
 8008532:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008534:	69bb      	ldr	r3, [r7, #24]
	}
 8008536:	4618      	mov	r0, r3
 8008538:	3720      	adds	r7, #32
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b088      	sub	sp, #32
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008556:	3b01      	subs	r3, #1
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	f023 0307 	bic.w	r3, r3, #7
 8008564:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f003 0307 	and.w	r3, r3, #7
 800856c:	2b00      	cmp	r3, #0
 800856e:	d009      	beq.n	8008584 <prvInitialiseNewTask+0x46>
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e7fe      	b.n	8008582 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008584:	2300      	movs	r3, #0
 8008586:	61fb      	str	r3, [r7, #28]
 8008588:	e012      	b.n	80085b0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	7819      	ldrb	r1, [r3, #0]
 8008592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	4413      	add	r3, r2
 8008598:	3334      	adds	r3, #52	; 0x34
 800859a:	460a      	mov	r2, r1
 800859c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	4413      	add	r3, r2
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d006      	beq.n	80085b8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	3301      	adds	r3, #1
 80085ae:	61fb      	str	r3, [r7, #28]
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	2b0f      	cmp	r3, #15
 80085b4:	d9e9      	bls.n	800858a <prvInitialiseNewTask+0x4c>
 80085b6:	e000      	b.n	80085ba <prvInitialiseNewTask+0x7c>
		{
			break;
 80085b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c4:	2b06      	cmp	r3, #6
 80085c6:	d901      	bls.n	80085cc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085c8:	2306      	movs	r3, #6
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	2200      	movs	r2, #0
 80085dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	3304      	adds	r3, #4
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff f8c4 	bl	8007770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	3318      	adds	r3, #24
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7ff f8bf 	bl	8007770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	f1c3 0207 	rsb	r2, r3, #7
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008606:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2200      	movs	r2, #0
 800860c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	68f9      	ldr	r1, [r7, #12]
 800861a:	69b8      	ldr	r0, [r7, #24]
 800861c:	f000 feea 	bl	80093f4 <pxPortInitialiseStack>
 8008620:	4602      	mov	r2, r0
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008632:	bf00      	nop
 8008634:	3720      	adds	r7, #32
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008644:	f000 fffa 	bl	800963c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008648:	4b2a      	ldr	r3, [pc, #168]	; (80086f4 <prvAddNewTaskToReadyList+0xb8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	4a29      	ldr	r2, [pc, #164]	; (80086f4 <prvAddNewTaskToReadyList+0xb8>)
 8008650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008652:	4b29      	ldr	r3, [pc, #164]	; (80086f8 <prvAddNewTaskToReadyList+0xbc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800865a:	4a27      	ldr	r2, [pc, #156]	; (80086f8 <prvAddNewTaskToReadyList+0xbc>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008660:	4b24      	ldr	r3, [pc, #144]	; (80086f4 <prvAddNewTaskToReadyList+0xb8>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d110      	bne.n	800868a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008668:	f000 fbc4 	bl	8008df4 <prvInitialiseTaskLists>
 800866c:	e00d      	b.n	800868a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800866e:	4b23      	ldr	r3, [pc, #140]	; (80086fc <prvAddNewTaskToReadyList+0xc0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008676:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <prvAddNewTaskToReadyList+0xbc>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	429a      	cmp	r2, r3
 8008682:	d802      	bhi.n	800868a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008684:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <prvAddNewTaskToReadyList+0xbc>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800868a:	4b1d      	ldr	r3, [pc, #116]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3301      	adds	r3, #1
 8008690:	4a1b      	ldr	r2, [pc, #108]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 8008692:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	2201      	movs	r2, #1
 800869a:	409a      	lsls	r2, r3
 800869c:	4b19      	ldr	r3, [pc, #100]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4a15      	ldr	r2, [pc, #84]	; (8008708 <prvAddNewTaskToReadyList+0xcc>)
 80086b4:	441a      	add	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3304      	adds	r3, #4
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f7ff f864 	bl	800778a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086c2:	f000 ffe9 	bl	8009698 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086c6:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <prvAddNewTaskToReadyList+0xc0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086ce:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <prvAddNewTaskToReadyList+0xbc>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	429a      	cmp	r2, r3
 80086da:	d207      	bcs.n	80086ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <prvAddNewTaskToReadyList+0xd0>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ec:	bf00      	nop
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000418 	.word	0x20000418
 80086f8:	20000318 	.word	0x20000318
 80086fc:	20000424 	.word	0x20000424
 8008700:	20000434 	.word	0x20000434
 8008704:	20000420 	.word	0x20000420
 8008708:	2000031c 	.word	0x2000031c
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d016      	beq.n	8008750 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008722:	4b13      	ldr	r3, [pc, #76]	; (8008770 <vTaskDelay+0x60>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <vTaskDelay+0x2e>
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	60bb      	str	r3, [r7, #8]
 800873c:	e7fe      	b.n	800873c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800873e:	f000 f879 	bl	8008834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008742:	2100      	movs	r1, #0
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fdef 	bl	8009328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800874a:	f000 f881 	bl	8008850 <xTaskResumeAll>
 800874e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d107      	bne.n	8008766 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008756:	4b07      	ldr	r3, [pc, #28]	; (8008774 <vTaskDelay+0x64>)
 8008758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000440 	.word	0x20000440
 8008774:	e000ed04 	.word	0xe000ed04

08008778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b08a      	sub	sp, #40	; 0x28
 800877c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800877e:	2300      	movs	r3, #0
 8008780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008782:	2300      	movs	r3, #0
 8008784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008786:	463a      	mov	r2, r7
 8008788:	1d39      	adds	r1, r7, #4
 800878a:	f107 0308 	add.w	r3, r7, #8
 800878e:	4618      	mov	r0, r3
 8008790:	f7f7 fef6 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	9202      	str	r2, [sp, #8]
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	2300      	movs	r3, #0
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	460a      	mov	r2, r1
 80087a6:	491d      	ldr	r1, [pc, #116]	; (800881c <vTaskStartScheduler+0xa4>)
 80087a8:	481d      	ldr	r0, [pc, #116]	; (8008820 <vTaskStartScheduler+0xa8>)
 80087aa:	f7ff fe2a 	bl	8008402 <xTaskCreateStatic>
 80087ae:	4602      	mov	r2, r0
 80087b0:	4b1c      	ldr	r3, [pc, #112]	; (8008824 <vTaskStartScheduler+0xac>)
 80087b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087b4:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <vTaskStartScheduler+0xac>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087bc:	2301      	movs	r3, #1
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	e001      	b.n	80087c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d115      	bne.n	80087f8 <vTaskStartScheduler+0x80>
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087de:	4b12      	ldr	r3, [pc, #72]	; (8008828 <vTaskStartScheduler+0xb0>)
 80087e0:	f04f 32ff 	mov.w	r2, #4294967295
 80087e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087e6:	4b11      	ldr	r3, [pc, #68]	; (800882c <vTaskStartScheduler+0xb4>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80087ec:	4b10      	ldr	r3, [pc, #64]	; (8008830 <vTaskStartScheduler+0xb8>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087f2:	f000 fe85 	bl	8009500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087f6:	e00d      	b.n	8008814 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fe:	d109      	bne.n	8008814 <vTaskStartScheduler+0x9c>
 8008800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	e7fe      	b.n	8008812 <vTaskStartScheduler+0x9a>
}
 8008814:	bf00      	nop
 8008816:	3718      	adds	r7, #24
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	0800a5a8 	.word	0x0800a5a8
 8008820:	08008dc5 	.word	0x08008dc5
 8008824:	2000043c 	.word	0x2000043c
 8008828:	20000438 	.word	0x20000438
 800882c:	20000424 	.word	0x20000424
 8008830:	2000041c 	.word	0x2000041c

08008834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008834:	b480      	push	{r7}
 8008836:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008838:	4b04      	ldr	r3, [pc, #16]	; (800884c <vTaskSuspendAll+0x18>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3301      	adds	r3, #1
 800883e:	4a03      	ldr	r2, [pc, #12]	; (800884c <vTaskSuspendAll+0x18>)
 8008840:	6013      	str	r3, [r2, #0]
}
 8008842:	bf00      	nop
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20000440 	.word	0x20000440

08008850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800885a:	2300      	movs	r3, #0
 800885c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800885e:	4b41      	ldr	r3, [pc, #260]	; (8008964 <xTaskResumeAll+0x114>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d109      	bne.n	800887a <xTaskResumeAll+0x2a>
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	e7fe      	b.n	8008878 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800887a:	f000 fedf 	bl	800963c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800887e:	4b39      	ldr	r3, [pc, #228]	; (8008964 <xTaskResumeAll+0x114>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3b01      	subs	r3, #1
 8008884:	4a37      	ldr	r2, [pc, #220]	; (8008964 <xTaskResumeAll+0x114>)
 8008886:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008888:	4b36      	ldr	r3, [pc, #216]	; (8008964 <xTaskResumeAll+0x114>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d161      	bne.n	8008954 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008890:	4b35      	ldr	r3, [pc, #212]	; (8008968 <xTaskResumeAll+0x118>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d05d      	beq.n	8008954 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008898:	e02e      	b.n	80088f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800889a:	4b34      	ldr	r3, [pc, #208]	; (800896c <xTaskResumeAll+0x11c>)
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3318      	adds	r3, #24
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe ffcc 	bl	8007844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7fe ffc7 	bl	8007844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	2201      	movs	r2, #1
 80088bc:	409a      	lsls	r2, r3
 80088be:	4b2c      	ldr	r3, [pc, #176]	; (8008970 <xTaskResumeAll+0x120>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	4a2a      	ldr	r2, [pc, #168]	; (8008970 <xTaskResumeAll+0x120>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4a27      	ldr	r2, [pc, #156]	; (8008974 <xTaskResumeAll+0x124>)
 80088d6:	441a      	add	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7fe ff53 	bl	800778a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e8:	4b23      	ldr	r3, [pc, #140]	; (8008978 <xTaskResumeAll+0x128>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d302      	bcc.n	80088f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80088f2:	4b22      	ldr	r3, [pc, #136]	; (800897c <xTaskResumeAll+0x12c>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088f8:	4b1c      	ldr	r3, [pc, #112]	; (800896c <xTaskResumeAll+0x11c>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1cc      	bne.n	800889a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008906:	f000 fb0f 	bl	8008f28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800890a:	4b1d      	ldr	r3, [pc, #116]	; (8008980 <xTaskResumeAll+0x130>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d010      	beq.n	8008938 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008916:	f000 f837 	bl	8008988 <xTaskIncrementTick>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008920:	4b16      	ldr	r3, [pc, #88]	; (800897c <xTaskResumeAll+0x12c>)
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3b01      	subs	r3, #1
 800892a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f1      	bne.n	8008916 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008932:	4b13      	ldr	r3, [pc, #76]	; (8008980 <xTaskResumeAll+0x130>)
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008938:	4b10      	ldr	r3, [pc, #64]	; (800897c <xTaskResumeAll+0x12c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d009      	beq.n	8008954 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008940:	2301      	movs	r3, #1
 8008942:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008944:	4b0f      	ldr	r3, [pc, #60]	; (8008984 <xTaskResumeAll+0x134>)
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008954:	f000 fea0 	bl	8009698 <vPortExitCritical>

	return xAlreadyYielded;
 8008958:	68bb      	ldr	r3, [r7, #8]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000440 	.word	0x20000440
 8008968:	20000418 	.word	0x20000418
 800896c:	200003d8 	.word	0x200003d8
 8008970:	20000420 	.word	0x20000420
 8008974:	2000031c 	.word	0x2000031c
 8008978:	20000318 	.word	0x20000318
 800897c:	2000042c 	.word	0x2000042c
 8008980:	20000428 	.word	0x20000428
 8008984:	e000ed04 	.word	0xe000ed04

08008988 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008992:	4b50      	ldr	r3, [pc, #320]	; (8008ad4 <xTaskIncrementTick+0x14c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f040 808c 	bne.w	8008ab4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800899c:	4b4e      	ldr	r3, [pc, #312]	; (8008ad8 <xTaskIncrementTick+0x150>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3301      	adds	r3, #1
 80089a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80089a4:	4a4c      	ldr	r2, [pc, #304]	; (8008ad8 <xTaskIncrementTick+0x150>)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d11f      	bne.n	80089f0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80089b0:	4b4a      	ldr	r3, [pc, #296]	; (8008adc <xTaskIncrementTick+0x154>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <xTaskIncrementTick+0x46>
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	e7fe      	b.n	80089cc <xTaskIncrementTick+0x44>
 80089ce:	4b43      	ldr	r3, [pc, #268]	; (8008adc <xTaskIncrementTick+0x154>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <xTaskIncrementTick+0x158>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a40      	ldr	r2, [pc, #256]	; (8008adc <xTaskIncrementTick+0x154>)
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	4a40      	ldr	r2, [pc, #256]	; (8008ae0 <xTaskIncrementTick+0x158>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	4b40      	ldr	r3, [pc, #256]	; (8008ae4 <xTaskIncrementTick+0x15c>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3301      	adds	r3, #1
 80089e8:	4a3e      	ldr	r2, [pc, #248]	; (8008ae4 <xTaskIncrementTick+0x15c>)
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	f000 fa9c 	bl	8008f28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089f0:	4b3d      	ldr	r3, [pc, #244]	; (8008ae8 <xTaskIncrementTick+0x160>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d34d      	bcc.n	8008a96 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089fa:	4b38      	ldr	r3, [pc, #224]	; (8008adc <xTaskIncrementTick+0x154>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <xTaskIncrementTick+0x80>
 8008a04:	2301      	movs	r3, #1
 8008a06:	e000      	b.n	8008a0a <xTaskIncrementTick+0x82>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d004      	beq.n	8008a18 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a0e:	4b36      	ldr	r3, [pc, #216]	; (8008ae8 <xTaskIncrementTick+0x160>)
 8008a10:	f04f 32ff 	mov.w	r2, #4294967295
 8008a14:	601a      	str	r2, [r3, #0]
					break;
 8008a16:	e03e      	b.n	8008a96 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a18:	4b30      	ldr	r3, [pc, #192]	; (8008adc <xTaskIncrementTick+0x154>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a28:	693a      	ldr	r2, [r7, #16]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d203      	bcs.n	8008a38 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a30:	4a2d      	ldr	r2, [pc, #180]	; (8008ae8 <xTaskIncrementTick+0x160>)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6013      	str	r3, [r2, #0]
						break;
 8008a36:	e02e      	b.n	8008a96 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fe ff01 	bl	8007844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d004      	beq.n	8008a54 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3318      	adds	r3, #24
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe fef8 	bl	8007844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	2201      	movs	r2, #1
 8008a5a:	409a      	lsls	r2, r3
 8008a5c:	4b23      	ldr	r3, [pc, #140]	; (8008aec <xTaskIncrementTick+0x164>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	4a22      	ldr	r2, [pc, #136]	; (8008aec <xTaskIncrementTick+0x164>)
 8008a64:	6013      	str	r3, [r2, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <xTaskIncrementTick+0x168>)
 8008a74:	441a      	add	r2, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fe fe84 	bl	800778a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <xTaskIncrementTick+0x16c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d3b4      	bcc.n	80089fa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a94:	e7b1      	b.n	80089fa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a96:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <xTaskIncrementTick+0x16c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4914      	ldr	r1, [pc, #80]	; (8008af0 <xTaskIncrementTick+0x168>)
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d907      	bls.n	8008abe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	e004      	b.n	8008abe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008ab4:	4b10      	ldr	r3, [pc, #64]	; (8008af8 <xTaskIncrementTick+0x170>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	4a0f      	ldr	r2, [pc, #60]	; (8008af8 <xTaskIncrementTick+0x170>)
 8008abc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008abe:	4b0f      	ldr	r3, [pc, #60]	; (8008afc <xTaskIncrementTick+0x174>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008aca:	697b      	ldr	r3, [r7, #20]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	20000440 	.word	0x20000440
 8008ad8:	2000041c 	.word	0x2000041c
 8008adc:	200003d0 	.word	0x200003d0
 8008ae0:	200003d4 	.word	0x200003d4
 8008ae4:	20000430 	.word	0x20000430
 8008ae8:	20000438 	.word	0x20000438
 8008aec:	20000420 	.word	0x20000420
 8008af0:	2000031c 	.word	0x2000031c
 8008af4:	20000318 	.word	0x20000318
 8008af8:	20000428 	.word	0x20000428
 8008afc:	2000042c 	.word	0x2000042c

08008b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b06:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <vTaskSwitchContext+0xa0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d003      	beq.n	8008b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b0e:	4b25      	ldr	r3, [pc, #148]	; (8008ba4 <vTaskSwitchContext+0xa4>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b14:	e03e      	b.n	8008b94 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008b16:	4b23      	ldr	r3, [pc, #140]	; (8008ba4 <vTaskSwitchContext+0xa4>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b1c:	4b22      	ldr	r3, [pc, #136]	; (8008ba8 <vTaskSwitchContext+0xa8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	fab3 f383 	clz	r3, r3
 8008b28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b2a:	7afb      	ldrb	r3, [r7, #11]
 8008b2c:	f1c3 031f 	rsb	r3, r3, #31
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	491e      	ldr	r1, [pc, #120]	; (8008bac <vTaskSwitchContext+0xac>)
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d109      	bne.n	8008b5a <vTaskSwitchContext+0x5a>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	607b      	str	r3, [r7, #4]
 8008b58:	e7fe      	b.n	8008b58 <vTaskSwitchContext+0x58>
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4a11      	ldr	r2, [pc, #68]	; (8008bac <vTaskSwitchContext+0xac>)
 8008b66:	4413      	add	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d104      	bne.n	8008b8a <vTaskSwitchContext+0x8a>
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	605a      	str	r2, [r3, #4]
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	4a07      	ldr	r2, [pc, #28]	; (8008bb0 <vTaskSwitchContext+0xb0>)
 8008b92:	6013      	str	r3, [r2, #0]
}
 8008b94:	bf00      	nop
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20000440 	.word	0x20000440
 8008ba4:	2000042c 	.word	0x2000042c
 8008ba8:	20000420 	.word	0x20000420
 8008bac:	2000031c 	.word	0x2000031c
 8008bb0:	20000318 	.word	0x20000318

08008bb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d109      	bne.n	8008bd8 <vTaskPlaceOnEventList+0x24>
 8008bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	e7fe      	b.n	8008bd6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bd8:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <vTaskPlaceOnEventList+0x44>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3318      	adds	r3, #24
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fe fdf6 	bl	80077d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008be6:	2101      	movs	r1, #1
 8008be8:	6838      	ldr	r0, [r7, #0]
 8008bea:	f000 fb9d 	bl	8009328 <prvAddCurrentTaskToDelayedList>
}
 8008bee:	bf00      	nop
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000318 	.word	0x20000318

08008bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d109      	bne.n	8008c26 <xTaskRemoveFromEventList+0x2a>
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e7fe      	b.n	8008c24 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	3318      	adds	r3, #24
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fe0a 	bl	8007844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c30:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <xTaskRemoveFromEventList+0xac>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d11c      	bne.n	8008c72 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe fe01 	bl	8007844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	2201      	movs	r2, #1
 8008c48:	409a      	lsls	r2, r3
 8008c4a:	4b18      	ldr	r3, [pc, #96]	; (8008cac <xTaskRemoveFromEventList+0xb0>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	4a16      	ldr	r2, [pc, #88]	; (8008cac <xTaskRemoveFromEventList+0xb0>)
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <xTaskRemoveFromEventList+0xb4>)
 8008c62:	441a      	add	r2, r3
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f7fe fd8d 	bl	800778a <vListInsertEnd>
 8008c70:	e005      	b.n	8008c7e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3318      	adds	r3, #24
 8008c76:	4619      	mov	r1, r3
 8008c78:	480e      	ldr	r0, [pc, #56]	; (8008cb4 <xTaskRemoveFromEventList+0xb8>)
 8008c7a:	f7fe fd86 	bl	800778a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c82:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <xTaskRemoveFromEventList+0xbc>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d905      	bls.n	8008c98 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c90:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <xTaskRemoveFromEventList+0xc0>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	e001      	b.n	8008c9c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008c9c:	697b      	ldr	r3, [r7, #20]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000440 	.word	0x20000440
 8008cac:	20000420 	.word	0x20000420
 8008cb0:	2000031c 	.word	0x2000031c
 8008cb4:	200003d8 	.word	0x200003d8
 8008cb8:	20000318 	.word	0x20000318
 8008cbc:	2000042c 	.word	0x2000042c

08008cc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cc8:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <vTaskInternalSetTimeOutState+0x24>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <vTaskInternalSetTimeOutState+0x28>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	605a      	str	r2, [r3, #4]
}
 8008cd8:	bf00      	nop
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	20000430 	.word	0x20000430
 8008ce8:	2000041c 	.word	0x2000041c

08008cec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d109      	bne.n	8008d10 <xTaskCheckForTimeOut+0x24>
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	e7fe      	b.n	8008d0e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <xTaskCheckForTimeOut+0x3e>
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e7fe      	b.n	8008d28 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008d2a:	f000 fc87 	bl	800963c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d2e:	4b1d      	ldr	r3, [pc, #116]	; (8008da4 <xTaskCheckForTimeOut+0xb8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d46:	d102      	bne.n	8008d4e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61fb      	str	r3, [r7, #28]
 8008d4c:	e023      	b.n	8008d96 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <xTaskCheckForTimeOut+0xbc>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d007      	beq.n	8008d6a <xTaskCheckForTimeOut+0x7e>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d302      	bcc.n	8008d6a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d64:	2301      	movs	r3, #1
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	e015      	b.n	8008d96 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d20b      	bcs.n	8008d8c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ff9d 	bl	8008cc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d86:	2300      	movs	r3, #0
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	e004      	b.n	8008d96 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d92:	2301      	movs	r3, #1
 8008d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d96:	f000 fc7f 	bl	8009698 <vPortExitCritical>

	return xReturn;
 8008d9a:	69fb      	ldr	r3, [r7, #28]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	2000041c 	.word	0x2000041c
 8008da8:	20000430 	.word	0x20000430

08008dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008db0:	4b03      	ldr	r3, [pc, #12]	; (8008dc0 <vTaskMissedYield+0x14>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	601a      	str	r2, [r3, #0]
}
 8008db6:	bf00      	nop
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	2000042c 	.word	0x2000042c

08008dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dcc:	f000 f852 	bl	8008e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dd0:	4b06      	ldr	r3, [pc, #24]	; (8008dec <prvIdleTask+0x28>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d9f9      	bls.n	8008dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008dd8:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <prvIdleTask+0x2c>)
 8008dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008de8:	e7f0      	b.n	8008dcc <prvIdleTask+0x8>
 8008dea:	bf00      	nop
 8008dec:	2000031c 	.word	0x2000031c
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	607b      	str	r3, [r7, #4]
 8008dfe:	e00c      	b.n	8008e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4a12      	ldr	r2, [pc, #72]	; (8008e54 <prvInitialiseTaskLists+0x60>)
 8008e0c:	4413      	add	r3, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fc8e 	bl	8007730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3301      	adds	r3, #1
 8008e18:	607b      	str	r3, [r7, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b06      	cmp	r3, #6
 8008e1e:	d9ef      	bls.n	8008e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e20:	480d      	ldr	r0, [pc, #52]	; (8008e58 <prvInitialiseTaskLists+0x64>)
 8008e22:	f7fe fc85 	bl	8007730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e26:	480d      	ldr	r0, [pc, #52]	; (8008e5c <prvInitialiseTaskLists+0x68>)
 8008e28:	f7fe fc82 	bl	8007730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e2c:	480c      	ldr	r0, [pc, #48]	; (8008e60 <prvInitialiseTaskLists+0x6c>)
 8008e2e:	f7fe fc7f 	bl	8007730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e32:	480c      	ldr	r0, [pc, #48]	; (8008e64 <prvInitialiseTaskLists+0x70>)
 8008e34:	f7fe fc7c 	bl	8007730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e38:	480b      	ldr	r0, [pc, #44]	; (8008e68 <prvInitialiseTaskLists+0x74>)
 8008e3a:	f7fe fc79 	bl	8007730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e3e:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <prvInitialiseTaskLists+0x78>)
 8008e40:	4a05      	ldr	r2, [pc, #20]	; (8008e58 <prvInitialiseTaskLists+0x64>)
 8008e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e44:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <prvInitialiseTaskLists+0x7c>)
 8008e46:	4a05      	ldr	r2, [pc, #20]	; (8008e5c <prvInitialiseTaskLists+0x68>)
 8008e48:	601a      	str	r2, [r3, #0]
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	2000031c 	.word	0x2000031c
 8008e58:	200003a8 	.word	0x200003a8
 8008e5c:	200003bc 	.word	0x200003bc
 8008e60:	200003d8 	.word	0x200003d8
 8008e64:	200003ec 	.word	0x200003ec
 8008e68:	20000404 	.word	0x20000404
 8008e6c:	200003d0 	.word	0x200003d0
 8008e70:	200003d4 	.word	0x200003d4

08008e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e7a:	e019      	b.n	8008eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e7c:	f000 fbde 	bl	800963c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008e80:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <prvCheckTasksWaitingTermination+0x4c>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fcd9 	bl	8007844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e92:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <prvCheckTasksWaitingTermination+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <prvCheckTasksWaitingTermination+0x50>)
 8008e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <prvCheckTasksWaitingTermination+0x54>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	4a09      	ldr	r2, [pc, #36]	; (8008ec8 <prvCheckTasksWaitingTermination+0x54>)
 8008ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ea6:	f000 fbf7 	bl	8009698 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f80e 	bl	8008ecc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eb0:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <prvCheckTasksWaitingTermination+0x54>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e1      	bne.n	8008e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008eb8:	bf00      	nop
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	200003ec 	.word	0x200003ec
 8008ec4:	20000418 	.word	0x20000418
 8008ec8:	20000400 	.word	0x20000400

08008ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d108      	bne.n	8008ef0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fd86 	bl	80099f4 <vPortFree>
				vPortFree( pxTCB );
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fd83 	bl	80099f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008eee:	e017      	b.n	8008f20 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d103      	bne.n	8008f02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fd7a 	bl	80099f4 <vPortFree>
	}
 8008f00:	e00e      	b.n	8008f20 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d009      	beq.n	8008f20 <prvDeleteTCB+0x54>
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e7fe      	b.n	8008f1e <prvDeleteTCB+0x52>
	}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f2e:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <prvResetNextTaskUnblockTime+0x44>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <prvResetNextTaskUnblockTime+0x14>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e000      	b.n	8008f3e <prvResetNextTaskUnblockTime+0x16>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <prvResetNextTaskUnblockTime+0x48>)
 8008f44:	f04f 32ff 	mov.w	r2, #4294967295
 8008f48:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f4a:	e008      	b.n	8008f5e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f4c:	4b07      	ldr	r3, [pc, #28]	; (8008f6c <prvResetNextTaskUnblockTime+0x44>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	4a05      	ldr	r2, [pc, #20]	; (8008f70 <prvResetNextTaskUnblockTime+0x48>)
 8008f5c:	6013      	str	r3, [r2, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	200003d0 	.word	0x200003d0
 8008f70:	20000438 	.word	0x20000438

08008f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f7a:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <xTaskGetSchedulerState+0x34>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f82:	2301      	movs	r3, #1
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	e008      	b.n	8008f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f88:	4b08      	ldr	r3, [pc, #32]	; (8008fac <xTaskGetSchedulerState+0x38>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f90:	2302      	movs	r3, #2
 8008f92:	607b      	str	r3, [r7, #4]
 8008f94:	e001      	b.n	8008f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f96:	2300      	movs	r3, #0
 8008f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f9a:	687b      	ldr	r3, [r7, #4]
	}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20000424 	.word	0x20000424
 8008fac:	20000440 	.word	0x20000440

08008fb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d06e      	beq.n	80090a4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fca:	4b39      	ldr	r3, [pc, #228]	; (80090b0 <xTaskPriorityInherit+0x100>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d25e      	bcs.n	8009092 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	db06      	blt.n	8008fea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fdc:	4b34      	ldr	r3, [pc, #208]	; (80090b0 <xTaskPriorityInherit+0x100>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	f1c3 0207 	rsb	r2, r3, #7
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	6959      	ldr	r1, [r3, #20]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4a2e      	ldr	r2, [pc, #184]	; (80090b4 <xTaskPriorityInherit+0x104>)
 8008ffc:	4413      	add	r3, r2
 8008ffe:	4299      	cmp	r1, r3
 8009000:	d101      	bne.n	8009006 <xTaskPriorityInherit+0x56>
 8009002:	2301      	movs	r3, #1
 8009004:	e000      	b.n	8009008 <xTaskPriorityInherit+0x58>
 8009006:	2300      	movs	r3, #0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d03a      	beq.n	8009082 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	3304      	adds	r3, #4
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fc17 	bl	8007844 <uxListRemove>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d115      	bne.n	8009048 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4924      	ldr	r1, [pc, #144]	; (80090b4 <xTaskPriorityInherit+0x104>)
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <xTaskPriorityInherit+0x98>
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	2201      	movs	r2, #1
 8009038:	fa02 f303 	lsl.w	r3, r2, r3
 800903c:	43da      	mvns	r2, r3
 800903e:	4b1e      	ldr	r3, [pc, #120]	; (80090b8 <xTaskPriorityInherit+0x108>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4013      	ands	r3, r2
 8009044:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <xTaskPriorityInherit+0x108>)
 8009046:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009048:	4b19      	ldr	r3, [pc, #100]	; (80090b0 <xTaskPriorityInherit+0x100>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	2201      	movs	r2, #1
 8009058:	409a      	lsls	r2, r3
 800905a:	4b17      	ldr	r3, [pc, #92]	; (80090b8 <xTaskPriorityInherit+0x108>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4313      	orrs	r3, r2
 8009060:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <xTaskPriorityInherit+0x108>)
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4a10      	ldr	r2, [pc, #64]	; (80090b4 <xTaskPriorityInherit+0x104>)
 8009072:	441a      	add	r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	3304      	adds	r3, #4
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7fe fb85 	bl	800778a <vListInsertEnd>
 8009080:	e004      	b.n	800908c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009082:	4b0b      	ldr	r3, [pc, #44]	; (80090b0 <xTaskPriorityInherit+0x100>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	e008      	b.n	80090a4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009096:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <xTaskPriorityInherit+0x100>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	429a      	cmp	r2, r3
 800909e:	d201      	bcs.n	80090a4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80090a0:	2301      	movs	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090a4:	68fb      	ldr	r3, [r7, #12]
	}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000318 	.word	0x20000318
 80090b4:	2000031c 	.word	0x2000031c
 80090b8:	20000420 	.word	0x20000420

080090bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d06c      	beq.n	80091ac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090d2:	4b39      	ldr	r3, [pc, #228]	; (80091b8 <xTaskPriorityDisinherit+0xfc>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d009      	beq.n	80090f0 <xTaskPriorityDisinherit+0x34>
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	e7fe      	b.n	80090ee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <xTaskPriorityDisinherit+0x50>
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	60bb      	str	r3, [r7, #8]
 800910a:	e7fe      	b.n	800910a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009110:	1e5a      	subs	r2, r3, #1
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911e:	429a      	cmp	r2, r3
 8009120:	d044      	beq.n	80091ac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009126:	2b00      	cmp	r3, #0
 8009128:	d140      	bne.n	80091ac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3304      	adds	r3, #4
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fb88 	bl	8007844 <uxListRemove>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d115      	bne.n	8009166 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800913e:	491f      	ldr	r1, [pc, #124]	; (80091bc <xTaskPriorityDisinherit+0x100>)
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	440b      	add	r3, r1
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <xTaskPriorityDisinherit+0xaa>
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	2201      	movs	r2, #1
 8009156:	fa02 f303 	lsl.w	r3, r2, r3
 800915a:	43da      	mvns	r2, r3
 800915c:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <xTaskPriorityDisinherit+0x104>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4013      	ands	r3, r2
 8009162:	4a17      	ldr	r2, [pc, #92]	; (80091c0 <xTaskPriorityDisinherit+0x104>)
 8009164:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	f1c3 0207 	rsb	r2, r3, #7
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	2201      	movs	r2, #1
 8009180:	409a      	lsls	r2, r3
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <xTaskPriorityDisinherit+0x104>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4313      	orrs	r3, r2
 8009188:	4a0d      	ldr	r2, [pc, #52]	; (80091c0 <xTaskPriorityDisinherit+0x104>)
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4a08      	ldr	r2, [pc, #32]	; (80091bc <xTaskPriorityDisinherit+0x100>)
 800919a:	441a      	add	r2, r3
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	3304      	adds	r3, #4
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f7fe faf1 	bl	800778a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091a8:	2301      	movs	r3, #1
 80091aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091ac:	697b      	ldr	r3, [r7, #20]
	}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000318 	.word	0x20000318
 80091bc:	2000031c 	.word	0x2000031c
 80091c0:	20000420 	.word	0x20000420

080091c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80091d2:	2301      	movs	r3, #1
 80091d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8086 	beq.w	80092ea <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <vTaskPriorityDisinheritAfterTimeout+0x36>
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e7fe      	b.n	80091f8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d902      	bls.n	800920a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	e002      	b.n	8009210 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009210:	69bb      	ldr	r3, [r7, #24]
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	69fa      	ldr	r2, [r7, #28]
 8009216:	429a      	cmp	r2, r3
 8009218:	d067      	beq.n	80092ea <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	429a      	cmp	r2, r3
 8009222:	d162      	bne.n	80092ea <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009224:	4b33      	ldr	r3, [pc, #204]	; (80092f4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	429a      	cmp	r2, r3
 800922c:	d109      	bne.n	8009242 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	60bb      	str	r3, [r7, #8]
 8009240:	e7fe      	b.n	8009240 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	db04      	blt.n	8009260 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	f1c3 0207 	rsb	r2, r3, #7
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	6959      	ldr	r1, [r3, #20]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4a22      	ldr	r2, [pc, #136]	; (80092f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009270:	4413      	add	r3, r2
 8009272:	4299      	cmp	r1, r3
 8009274:	d101      	bne.n	800927a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8009276:	2301      	movs	r3, #1
 8009278:	e000      	b.n	800927c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800927a:	2300      	movs	r3, #0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d034      	beq.n	80092ea <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	3304      	adds	r3, #4
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe fadd 	bl	8007844 <uxListRemove>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d115      	bne.n	80092bc <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009294:	4918      	ldr	r1, [pc, #96]	; (80092f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	2201      	movs	r2, #1
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	43da      	mvns	r2, r3
 80092b2:	4b12      	ldr	r3, [pc, #72]	; (80092fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4013      	ands	r3, r2
 80092b8:	4a10      	ldr	r2, [pc, #64]	; (80092fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092ba:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	2201      	movs	r2, #1
 80092c2:	409a      	lsls	r2, r3
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	4a0c      	ldr	r2, [pc, #48]	; (80092fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80092cc:	6013      	str	r3, [r2, #0]
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d2:	4613      	mov	r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4a07      	ldr	r2, [pc, #28]	; (80092f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80092dc:	441a      	add	r2, r3
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7fe fa50 	bl	800778a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092ea:	bf00      	nop
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000318 	.word	0x20000318
 80092f8:	2000031c 	.word	0x2000031c
 80092fc:	20000420 	.word	0x20000420

08009300 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009304:	4b07      	ldr	r3, [pc, #28]	; (8009324 <pvTaskIncrementMutexHeldCount+0x24>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800930c:	4b05      	ldr	r3, [pc, #20]	; (8009324 <pvTaskIncrementMutexHeldCount+0x24>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009312:	3201      	adds	r2, #1
 8009314:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009316:	4b03      	ldr	r3, [pc, #12]	; (8009324 <pvTaskIncrementMutexHeldCount+0x24>)
 8009318:	681b      	ldr	r3, [r3, #0]
	}
 800931a:	4618      	mov	r0, r3
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	20000318 	.word	0x20000318

08009328 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009332:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009338:	4b28      	ldr	r3, [pc, #160]	; (80093dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3304      	adds	r3, #4
 800933e:	4618      	mov	r0, r3
 8009340:	f7fe fa80 	bl	8007844 <uxListRemove>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800934a:	4b24      	ldr	r3, [pc, #144]	; (80093dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	2201      	movs	r2, #1
 8009352:	fa02 f303 	lsl.w	r3, r2, r3
 8009356:	43da      	mvns	r2, r3
 8009358:	4b21      	ldr	r3, [pc, #132]	; (80093e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4013      	ands	r3, r2
 800935e:	4a20      	ldr	r2, [pc, #128]	; (80093e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009360:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009368:	d10a      	bne.n	8009380 <prvAddCurrentTaskToDelayedList+0x58>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d007      	beq.n	8009380 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009370:	4b1a      	ldr	r3, [pc, #104]	; (80093dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3304      	adds	r3, #4
 8009376:	4619      	mov	r1, r3
 8009378:	481a      	ldr	r0, [pc, #104]	; (80093e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800937a:	f7fe fa06 	bl	800778a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800937e:	e026      	b.n	80093ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009388:	4b14      	ldr	r3, [pc, #80]	; (80093dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	429a      	cmp	r2, r3
 8009396:	d209      	bcs.n	80093ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009398:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3304      	adds	r3, #4
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f7fe fa14 	bl	80077d2 <vListInsert>
}
 80093aa:	e010      	b.n	80093ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ac:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f7fe fa0a 	bl	80077d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093be:	4b0c      	ldr	r3, [pc, #48]	; (80093f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d202      	bcs.n	80093ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80093c8:	4a09      	ldr	r2, [pc, #36]	; (80093f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6013      	str	r3, [r2, #0]
}
 80093ce:	bf00      	nop
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	2000041c 	.word	0x2000041c
 80093dc:	20000318 	.word	0x20000318
 80093e0:	20000420 	.word	0x20000420
 80093e4:	20000404 	.word	0x20000404
 80093e8:	200003d4 	.word	0x200003d4
 80093ec:	200003d0 	.word	0x200003d0
 80093f0:	20000438 	.word	0x20000438

080093f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3b04      	subs	r3, #4
 8009404:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800940c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3b04      	subs	r3, #4
 8009412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f023 0201 	bic.w	r2, r3, #1
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3b04      	subs	r3, #4
 8009422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009424:	4a0c      	ldr	r2, [pc, #48]	; (8009458 <pxPortInitialiseStack+0x64>)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3b14      	subs	r3, #20
 800942e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3b04      	subs	r3, #4
 800943a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f06f 0202 	mvn.w	r2, #2
 8009442:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3b20      	subs	r3, #32
 8009448:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800944a:	68fb      	ldr	r3, [r7, #12]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	0800945d 	.word	0x0800945d

0800945c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009466:	4b11      	ldr	r3, [pc, #68]	; (80094ac <prvTaskExitError+0x50>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946e:	d009      	beq.n	8009484 <prvTaskExitError+0x28>
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	e7fe      	b.n	8009482 <prvTaskExitError+0x26>
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009496:	bf00      	nop
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0fc      	beq.n	8009498 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	2000000c 	.word	0x2000000c

080094b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <pxCurrentTCBConst2>)
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	6808      	ldr	r0, [r1, #0]
 80094b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	f380 8809 	msr	PSP, r0
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f380 8811 	msr	BASEPRI, r0
 80094ca:	4770      	bx	lr
 80094cc:	f3af 8000 	nop.w

080094d0 <pxCurrentTCBConst2>:
 80094d0:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop

080094d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094d8:	4808      	ldr	r0, [pc, #32]	; (80094fc <prvPortStartFirstTask+0x24>)
 80094da:	6800      	ldr	r0, [r0, #0]
 80094dc:	6800      	ldr	r0, [r0, #0]
 80094de:	f380 8808 	msr	MSP, r0
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8814 	msr	CONTROL, r0
 80094ea:	b662      	cpsie	i
 80094ec:	b661      	cpsie	f
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	df00      	svc	0
 80094f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094fa:	bf00      	nop
 80094fc:	e000ed08 	.word	0xe000ed08

08009500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009506:	4b44      	ldr	r3, [pc, #272]	; (8009618 <xPortStartScheduler+0x118>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a44      	ldr	r2, [pc, #272]	; (800961c <xPortStartScheduler+0x11c>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d109      	bne.n	8009524 <xPortStartScheduler+0x24>
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	e7fe      	b.n	8009522 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009524:	4b3c      	ldr	r3, [pc, #240]	; (8009618 <xPortStartScheduler+0x118>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a3d      	ldr	r2, [pc, #244]	; (8009620 <xPortStartScheduler+0x120>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d109      	bne.n	8009542 <xPortStartScheduler+0x42>
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	60fb      	str	r3, [r7, #12]
 8009540:	e7fe      	b.n	8009540 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009542:	4b38      	ldr	r3, [pc, #224]	; (8009624 <xPortStartScheduler+0x124>)
 8009544:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	22ff      	movs	r2, #255	; 0xff
 8009552:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800955c:	78fb      	ldrb	r3, [r7, #3]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009564:	b2da      	uxtb	r2, r3
 8009566:	4b30      	ldr	r3, [pc, #192]	; (8009628 <xPortStartScheduler+0x128>)
 8009568:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800956a:	4b30      	ldr	r3, [pc, #192]	; (800962c <xPortStartScheduler+0x12c>)
 800956c:	2207      	movs	r2, #7
 800956e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009570:	e009      	b.n	8009586 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009572:	4b2e      	ldr	r3, [pc, #184]	; (800962c <xPortStartScheduler+0x12c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3b01      	subs	r3, #1
 8009578:	4a2c      	ldr	r2, [pc, #176]	; (800962c <xPortStartScheduler+0x12c>)
 800957a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	005b      	lsls	r3, r3, #1
 8009582:	b2db      	uxtb	r3, r3
 8009584:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958e:	2b80      	cmp	r3, #128	; 0x80
 8009590:	d0ef      	beq.n	8009572 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009592:	4b26      	ldr	r3, [pc, #152]	; (800962c <xPortStartScheduler+0x12c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f1c3 0307 	rsb	r3, r3, #7
 800959a:	2b04      	cmp	r3, #4
 800959c:	d009      	beq.n	80095b2 <xPortStartScheduler+0xb2>
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	60bb      	str	r3, [r7, #8]
 80095b0:	e7fe      	b.n	80095b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095b2:	4b1e      	ldr	r3, [pc, #120]	; (800962c <xPortStartScheduler+0x12c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	4a1c      	ldr	r2, [pc, #112]	; (800962c <xPortStartScheduler+0x12c>)
 80095ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <xPortStartScheduler+0x12c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095c4:	4a19      	ldr	r2, [pc, #100]	; (800962c <xPortStartScheduler+0x12c>)
 80095c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095d0:	4b17      	ldr	r3, [pc, #92]	; (8009630 <xPortStartScheduler+0x130>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a16      	ldr	r2, [pc, #88]	; (8009630 <xPortStartScheduler+0x130>)
 80095d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095dc:	4b14      	ldr	r3, [pc, #80]	; (8009630 <xPortStartScheduler+0x130>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a13      	ldr	r2, [pc, #76]	; (8009630 <xPortStartScheduler+0x130>)
 80095e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095e8:	f000 f8d6 	bl	8009798 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095ec:	4b11      	ldr	r3, [pc, #68]	; (8009634 <xPortStartScheduler+0x134>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095f2:	f000 f8f5 	bl	80097e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095f6:	4b10      	ldr	r3, [pc, #64]	; (8009638 <xPortStartScheduler+0x138>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a0f      	ldr	r2, [pc, #60]	; (8009638 <xPortStartScheduler+0x138>)
 80095fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009600:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009602:	f7ff ff69 	bl	80094d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009606:	f7ff fa7b 	bl	8008b00 <vTaskSwitchContext>
	prvTaskExitError();
 800960a:	f7ff ff27 	bl	800945c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	e000ed00 	.word	0xe000ed00
 800961c:	410fc271 	.word	0x410fc271
 8009620:	410fc270 	.word	0x410fc270
 8009624:	e000e400 	.word	0xe000e400
 8009628:	20000444 	.word	0x20000444
 800962c:	20000448 	.word	0x20000448
 8009630:	e000ed20 	.word	0xe000ed20
 8009634:	2000000c 	.word	0x2000000c
 8009638:	e000ef34 	.word	0xe000ef34

0800963c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009654:	4b0e      	ldr	r3, [pc, #56]	; (8009690 <vPortEnterCritical+0x54>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3301      	adds	r3, #1
 800965a:	4a0d      	ldr	r2, [pc, #52]	; (8009690 <vPortEnterCritical+0x54>)
 800965c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <vPortEnterCritical+0x54>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d10e      	bne.n	8009684 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009666:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <vPortEnterCritical+0x58>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <vPortEnterCritical+0x48>
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
 8009680:	603b      	str	r3, [r7, #0]
 8009682:	e7fe      	b.n	8009682 <vPortEnterCritical+0x46>
	}
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	2000000c 	.word	0x2000000c
 8009694:	e000ed04 	.word	0xe000ed04

08009698 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800969e:	4b11      	ldr	r3, [pc, #68]	; (80096e4 <vPortExitCritical+0x4c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d109      	bne.n	80096ba <vPortExitCritical+0x22>
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	e7fe      	b.n	80096b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80096ba:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <vPortExitCritical+0x4c>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3b01      	subs	r3, #1
 80096c0:	4a08      	ldr	r2, [pc, #32]	; (80096e4 <vPortExitCritical+0x4c>)
 80096c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <vPortExitCritical+0x4c>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <vPortExitCritical+0x3e>
 80096cc:	2300      	movs	r3, #0
 80096ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	2000000c 	.word	0x2000000c
	...

080096f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096f0:	f3ef 8009 	mrs	r0, PSP
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	4b15      	ldr	r3, [pc, #84]	; (8009750 <pxCurrentTCBConst>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	f01e 0f10 	tst.w	lr, #16
 8009700:	bf08      	it	eq
 8009702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	6010      	str	r0, [r2, #0]
 800970c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009714:	f380 8811 	msr	BASEPRI, r0
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f7ff f9ee 	bl	8008b00 <vTaskSwitchContext>
 8009724:	f04f 0000 	mov.w	r0, #0
 8009728:	f380 8811 	msr	BASEPRI, r0
 800972c:	bc09      	pop	{r0, r3}
 800972e:	6819      	ldr	r1, [r3, #0]
 8009730:	6808      	ldr	r0, [r1, #0]
 8009732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009736:	f01e 0f10 	tst.w	lr, #16
 800973a:	bf08      	it	eq
 800973c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009740:	f380 8809 	msr	PSP, r0
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	f3af 8000 	nop.w

08009750 <pxCurrentTCBConst>:
 8009750:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop

08009758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009770:	f7ff f90a 	bl	8008988 <xTaskIncrementTick>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800977a:	4b06      	ldr	r3, [pc, #24]	; (8009794 <SysTick_Handler+0x3c>)
 800977c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	2300      	movs	r3, #0
 8009784:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800979c:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <vPortSetupTimerInterrupt+0x34>)
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097a2:	4b0b      	ldr	r3, [pc, #44]	; (80097d0 <vPortSetupTimerInterrupt+0x38>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097a8:	4b0a      	ldr	r3, [pc, #40]	; (80097d4 <vPortSetupTimerInterrupt+0x3c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a0a      	ldr	r2, [pc, #40]	; (80097d8 <vPortSetupTimerInterrupt+0x40>)
 80097ae:	fba2 2303 	umull	r2, r3, r2, r3
 80097b2:	099b      	lsrs	r3, r3, #6
 80097b4:	4a09      	ldr	r2, [pc, #36]	; (80097dc <vPortSetupTimerInterrupt+0x44>)
 80097b6:	3b01      	subs	r3, #1
 80097b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097ba:	4b04      	ldr	r3, [pc, #16]	; (80097cc <vPortSetupTimerInterrupt+0x34>)
 80097bc:	2207      	movs	r2, #7
 80097be:	601a      	str	r2, [r3, #0]
}
 80097c0:	bf00      	nop
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	e000e010 	.word	0xe000e010
 80097d0:	e000e018 	.word	0xe000e018
 80097d4:	20000000 	.word	0x20000000
 80097d8:	10624dd3 	.word	0x10624dd3
 80097dc:	e000e014 	.word	0xe000e014

080097e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097f0 <vPortEnableVFP+0x10>
 80097e4:	6801      	ldr	r1, [r0, #0]
 80097e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097ea:	6001      	str	r1, [r0, #0]
 80097ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097ee:	bf00      	nop
 80097f0:	e000ed88 	.word	0xe000ed88

080097f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097fa:	f3ef 8305 	mrs	r3, IPSR
 80097fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b0f      	cmp	r3, #15
 8009804:	d913      	bls.n	800982e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009806:	4a16      	ldr	r2, [pc, #88]	; (8009860 <vPortValidateInterruptPriority+0x6c>)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009810:	4b14      	ldr	r3, [pc, #80]	; (8009864 <vPortValidateInterruptPriority+0x70>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	7afa      	ldrb	r2, [r7, #11]
 8009816:	429a      	cmp	r2, r3
 8009818:	d209      	bcs.n	800982e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	607b      	str	r3, [r7, #4]
 800982c:	e7fe      	b.n	800982c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800982e:	4b0e      	ldr	r3, [pc, #56]	; (8009868 <vPortValidateInterruptPriority+0x74>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009836:	4b0d      	ldr	r3, [pc, #52]	; (800986c <vPortValidateInterruptPriority+0x78>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d909      	bls.n	8009852 <vPortValidateInterruptPriority+0x5e>
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	e7fe      	b.n	8009850 <vPortValidateInterruptPriority+0x5c>
	}
 8009852:	bf00      	nop
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	e000e3f0 	.word	0xe000e3f0
 8009864:	20000444 	.word	0x20000444
 8009868:	e000ed0c 	.word	0xe000ed0c
 800986c:	20000448 	.word	0x20000448

08009870 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08a      	sub	sp, #40	; 0x28
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009878:	2300      	movs	r3, #0
 800987a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800987c:	f7fe ffda 	bl	8008834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009880:	4b57      	ldr	r3, [pc, #348]	; (80099e0 <pvPortMalloc+0x170>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009888:	f000 f90c 	bl	8009aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800988c:	4b55      	ldr	r3, [pc, #340]	; (80099e4 <pvPortMalloc+0x174>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4013      	ands	r3, r2
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 808c 	bne.w	80099b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d01c      	beq.n	80098da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80098a0:	2208      	movs	r2, #8
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4413      	add	r3, r2
 80098a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f003 0307 	and.w	r3, r3, #7
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d013      	beq.n	80098da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	3308      	adds	r3, #8
 80098ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f003 0307 	and.w	r3, r3, #7
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <pvPortMalloc+0x6a>
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	e7fe      	b.n	80098d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d068      	beq.n	80099b2 <pvPortMalloc+0x142>
 80098e0:	4b41      	ldr	r3, [pc, #260]	; (80099e8 <pvPortMalloc+0x178>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d863      	bhi.n	80099b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098ea:	4b40      	ldr	r3, [pc, #256]	; (80099ec <pvPortMalloc+0x17c>)
 80098ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098ee:	4b3f      	ldr	r3, [pc, #252]	; (80099ec <pvPortMalloc+0x17c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098f4:	e004      	b.n	8009900 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d903      	bls.n	8009912 <pvPortMalloc+0xa2>
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1f1      	bne.n	80098f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009912:	4b33      	ldr	r3, [pc, #204]	; (80099e0 <pvPortMalloc+0x170>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009918:	429a      	cmp	r2, r3
 800991a:	d04a      	beq.n	80099b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2208      	movs	r2, #8
 8009922:	4413      	add	r3, r2
 8009924:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	6a3b      	ldr	r3, [r7, #32]
 800992c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	1ad2      	subs	r2, r2, r3
 8009936:	2308      	movs	r3, #8
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	429a      	cmp	r2, r3
 800993c:	d91e      	bls.n	800997c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800993e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4413      	add	r3, r2
 8009944:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	f003 0307 	and.w	r3, r3, #7
 800994c:	2b00      	cmp	r3, #0
 800994e:	d009      	beq.n	8009964 <pvPortMalloc+0xf4>
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	613b      	str	r3, [r7, #16]
 8009962:	e7fe      	b.n	8009962 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	1ad2      	subs	r2, r2, r3
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009976:	69b8      	ldr	r0, [r7, #24]
 8009978:	f000 f8f6 	bl	8009b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800997c:	4b1a      	ldr	r3, [pc, #104]	; (80099e8 <pvPortMalloc+0x178>)
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	4a18      	ldr	r2, [pc, #96]	; (80099e8 <pvPortMalloc+0x178>)
 8009988:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800998a:	4b17      	ldr	r3, [pc, #92]	; (80099e8 <pvPortMalloc+0x178>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	4b18      	ldr	r3, [pc, #96]	; (80099f0 <pvPortMalloc+0x180>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	429a      	cmp	r2, r3
 8009994:	d203      	bcs.n	800999e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <pvPortMalloc+0x178>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a15      	ldr	r2, [pc, #84]	; (80099f0 <pvPortMalloc+0x180>)
 800999c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	4b10      	ldr	r3, [pc, #64]	; (80099e4 <pvPortMalloc+0x174>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	431a      	orrs	r2, r3
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	2200      	movs	r2, #0
 80099b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099b2:	f7fe ff4d 	bl	8008850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d009      	beq.n	80099d4 <pvPortMalloc+0x164>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	e7fe      	b.n	80099d2 <pvPortMalloc+0x162>
	return pvReturn;
 80099d4:	69fb      	ldr	r3, [r7, #28]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3728      	adds	r7, #40	; 0x28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	2000100c 	.word	0x2000100c
 80099e4:	20001018 	.word	0x20001018
 80099e8:	20001010 	.word	0x20001010
 80099ec:	20001004 	.word	0x20001004
 80099f0:	20001014 	.word	0x20001014

080099f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d046      	beq.n	8009a94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a06:	2308      	movs	r3, #8
 8009a08:	425b      	negs	r3, r3
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	4b20      	ldr	r3, [pc, #128]	; (8009a9c <vPortFree+0xa8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <vPortFree+0x42>
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e7fe      	b.n	8009a34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d009      	beq.n	8009a52 <vPortFree+0x5e>
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	60bb      	str	r3, [r7, #8]
 8009a50:	e7fe      	b.n	8009a50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <vPortFree+0xa8>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d019      	beq.n	8009a94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d115      	bne.n	8009a94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <vPortFree+0xa8>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	43db      	mvns	r3, r3
 8009a72:	401a      	ands	r2, r3
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a78:	f7fe fedc 	bl	8008834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	4b07      	ldr	r3, [pc, #28]	; (8009aa0 <vPortFree+0xac>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4413      	add	r3, r2
 8009a86:	4a06      	ldr	r2, [pc, #24]	; (8009aa0 <vPortFree+0xac>)
 8009a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a8a:	6938      	ldr	r0, [r7, #16]
 8009a8c:	f000 f86c 	bl	8009b68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a90:	f7fe fede 	bl	8008850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a94:	bf00      	nop
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20001018 	.word	0x20001018
 8009aa0:	20001010 	.word	0x20001010

08009aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aaa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ab0:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <prvHeapInit+0xac>)
 8009ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00c      	beq.n	8009ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3307      	adds	r3, #7
 8009ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	4a1f      	ldr	r2, [pc, #124]	; (8009b50 <prvHeapInit+0xac>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009adc:	4a1d      	ldr	r2, [pc, #116]	; (8009b54 <prvHeapInit+0xb0>)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	; (8009b54 <prvHeapInit+0xb0>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	4413      	add	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009af0:	2208      	movs	r2, #8
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4a15      	ldr	r2, [pc, #84]	; (8009b58 <prvHeapInit+0xb4>)
 8009b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <prvHeapInit+0xb4>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b0e:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <prvHeapInit+0xb4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	1ad2      	subs	r2, r2, r3
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <prvHeapInit+0xb4>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <prvHeapInit+0xb8>)
 8009b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4a09      	ldr	r2, [pc, #36]	; (8009b60 <prvHeapInit+0xbc>)
 8009b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b3c:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <prvHeapInit+0xc0>)
 8009b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b42:	601a      	str	r2, [r3, #0]
}
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	2000044c 	.word	0x2000044c
 8009b54:	20001004 	.word	0x20001004
 8009b58:	2000100c 	.word	0x2000100c
 8009b5c:	20001014 	.word	0x20001014
 8009b60:	20001010 	.word	0x20001010
 8009b64:	20001018 	.word	0x20001018

08009b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b70:	4b28      	ldr	r3, [pc, #160]	; (8009c14 <prvInsertBlockIntoFreeList+0xac>)
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	e002      	b.n	8009b7c <prvInsertBlockIntoFreeList+0x14>
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d8f7      	bhi.n	8009b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	4413      	add	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d108      	bne.n	8009baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	441a      	add	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	441a      	add	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d118      	bne.n	8009bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <prvInsertBlockIntoFreeList+0xb0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d00d      	beq.n	8009be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	441a      	add	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	e008      	b.n	8009bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009be6:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <prvInsertBlockIntoFreeList+0xb0>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	e003      	b.n	8009bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d002      	beq.n	8009c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c06:	bf00      	nop
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	20001004 	.word	0x20001004
 8009c18:	2000100c 	.word	0x2000100c

08009c1c <__errno>:
 8009c1c:	4b01      	ldr	r3, [pc, #4]	; (8009c24 <__errno+0x8>)
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	20000010 	.word	0x20000010

08009c28 <__libc_init_array>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4e0d      	ldr	r6, [pc, #52]	; (8009c60 <__libc_init_array+0x38>)
 8009c2c:	4c0d      	ldr	r4, [pc, #52]	; (8009c64 <__libc_init_array+0x3c>)
 8009c2e:	1ba4      	subs	r4, r4, r6
 8009c30:	10a4      	asrs	r4, r4, #2
 8009c32:	2500      	movs	r5, #0
 8009c34:	42a5      	cmp	r5, r4
 8009c36:	d109      	bne.n	8009c4c <__libc_init_array+0x24>
 8009c38:	4e0b      	ldr	r6, [pc, #44]	; (8009c68 <__libc_init_array+0x40>)
 8009c3a:	4c0c      	ldr	r4, [pc, #48]	; (8009c6c <__libc_init_array+0x44>)
 8009c3c:	f000 fc28 	bl	800a490 <_init>
 8009c40:	1ba4      	subs	r4, r4, r6
 8009c42:	10a4      	asrs	r4, r4, #2
 8009c44:	2500      	movs	r5, #0
 8009c46:	42a5      	cmp	r5, r4
 8009c48:	d105      	bne.n	8009c56 <__libc_init_array+0x2e>
 8009c4a:	bd70      	pop	{r4, r5, r6, pc}
 8009c4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c50:	4798      	blx	r3
 8009c52:	3501      	adds	r5, #1
 8009c54:	e7ee      	b.n	8009c34 <__libc_init_array+0xc>
 8009c56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c5a:	4798      	blx	r3
 8009c5c:	3501      	adds	r5, #1
 8009c5e:	e7f2      	b.n	8009c46 <__libc_init_array+0x1e>
 8009c60:	0800a634 	.word	0x0800a634
 8009c64:	0800a634 	.word	0x0800a634
 8009c68:	0800a634 	.word	0x0800a634
 8009c6c:	0800a638 	.word	0x0800a638

08009c70 <memcpy>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	1e43      	subs	r3, r0, #1
 8009c74:	440a      	add	r2, r1
 8009c76:	4291      	cmp	r1, r2
 8009c78:	d100      	bne.n	8009c7c <memcpy+0xc>
 8009c7a:	bd10      	pop	{r4, pc}
 8009c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c84:	e7f7      	b.n	8009c76 <memcpy+0x6>

08009c86 <memset>:
 8009c86:	4402      	add	r2, r0
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d100      	bne.n	8009c90 <memset+0xa>
 8009c8e:	4770      	bx	lr
 8009c90:	f803 1b01 	strb.w	r1, [r3], #1
 8009c94:	e7f9      	b.n	8009c8a <memset+0x4>
	...

08009c98 <siprintf>:
 8009c98:	b40e      	push	{r1, r2, r3}
 8009c9a:	b500      	push	{lr}
 8009c9c:	b09c      	sub	sp, #112	; 0x70
 8009c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8009ca0:	9002      	str	r0, [sp, #8]
 8009ca2:	9006      	str	r0, [sp, #24]
 8009ca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ca8:	4809      	ldr	r0, [pc, #36]	; (8009cd0 <siprintf+0x38>)
 8009caa:	9107      	str	r1, [sp, #28]
 8009cac:	9104      	str	r1, [sp, #16]
 8009cae:	4909      	ldr	r1, [pc, #36]	; (8009cd4 <siprintf+0x3c>)
 8009cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb4:	9105      	str	r1, [sp, #20]
 8009cb6:	6800      	ldr	r0, [r0, #0]
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	a902      	add	r1, sp, #8
 8009cbc:	f000 f866 	bl	8009d8c <_svfiprintf_r>
 8009cc0:	9b02      	ldr	r3, [sp, #8]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	b01c      	add	sp, #112	; 0x70
 8009cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ccc:	b003      	add	sp, #12
 8009cce:	4770      	bx	lr
 8009cd0:	20000010 	.word	0x20000010
 8009cd4:	ffff0208 	.word	0xffff0208

08009cd8 <__ssputs_r>:
 8009cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cdc:	688e      	ldr	r6, [r1, #8]
 8009cde:	429e      	cmp	r6, r3
 8009ce0:	4682      	mov	sl, r0
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	4690      	mov	r8, r2
 8009ce6:	4699      	mov	r9, r3
 8009ce8:	d837      	bhi.n	8009d5a <__ssputs_r+0x82>
 8009cea:	898a      	ldrh	r2, [r1, #12]
 8009cec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cf0:	d031      	beq.n	8009d56 <__ssputs_r+0x7e>
 8009cf2:	6825      	ldr	r5, [r4, #0]
 8009cf4:	6909      	ldr	r1, [r1, #16]
 8009cf6:	1a6f      	subs	r7, r5, r1
 8009cf8:	6965      	ldr	r5, [r4, #20]
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d00:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d04:	f109 0301 	add.w	r3, r9, #1
 8009d08:	443b      	add	r3, r7
 8009d0a:	429d      	cmp	r5, r3
 8009d0c:	bf38      	it	cc
 8009d0e:	461d      	movcc	r5, r3
 8009d10:	0553      	lsls	r3, r2, #21
 8009d12:	d530      	bpl.n	8009d76 <__ssputs_r+0x9e>
 8009d14:	4629      	mov	r1, r5
 8009d16:	f000 fb21 	bl	800a35c <_malloc_r>
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	b950      	cbnz	r0, 8009d34 <__ssputs_r+0x5c>
 8009d1e:	230c      	movs	r3, #12
 8009d20:	f8ca 3000 	str.w	r3, [sl]
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d2a:	81a3      	strh	r3, [r4, #12]
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d34:	463a      	mov	r2, r7
 8009d36:	6921      	ldr	r1, [r4, #16]
 8009d38:	f7ff ff9a 	bl	8009c70 <memcpy>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d46:	81a3      	strh	r3, [r4, #12]
 8009d48:	6126      	str	r6, [r4, #16]
 8009d4a:	6165      	str	r5, [r4, #20]
 8009d4c:	443e      	add	r6, r7
 8009d4e:	1bed      	subs	r5, r5, r7
 8009d50:	6026      	str	r6, [r4, #0]
 8009d52:	60a5      	str	r5, [r4, #8]
 8009d54:	464e      	mov	r6, r9
 8009d56:	454e      	cmp	r6, r9
 8009d58:	d900      	bls.n	8009d5c <__ssputs_r+0x84>
 8009d5a:	464e      	mov	r6, r9
 8009d5c:	4632      	mov	r2, r6
 8009d5e:	4641      	mov	r1, r8
 8009d60:	6820      	ldr	r0, [r4, #0]
 8009d62:	f000 fa93 	bl	800a28c <memmove>
 8009d66:	68a3      	ldr	r3, [r4, #8]
 8009d68:	1b9b      	subs	r3, r3, r6
 8009d6a:	60a3      	str	r3, [r4, #8]
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	441e      	add	r6, r3
 8009d70:	6026      	str	r6, [r4, #0]
 8009d72:	2000      	movs	r0, #0
 8009d74:	e7dc      	b.n	8009d30 <__ssputs_r+0x58>
 8009d76:	462a      	mov	r2, r5
 8009d78:	f000 fb4a 	bl	800a410 <_realloc_r>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d1e2      	bne.n	8009d48 <__ssputs_r+0x70>
 8009d82:	6921      	ldr	r1, [r4, #16]
 8009d84:	4650      	mov	r0, sl
 8009d86:	f000 fa9b 	bl	800a2c0 <_free_r>
 8009d8a:	e7c8      	b.n	8009d1e <__ssputs_r+0x46>

08009d8c <_svfiprintf_r>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	461d      	mov	r5, r3
 8009d92:	898b      	ldrh	r3, [r1, #12]
 8009d94:	061f      	lsls	r7, r3, #24
 8009d96:	b09d      	sub	sp, #116	; 0x74
 8009d98:	4680      	mov	r8, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	d50f      	bpl.n	8009dc0 <_svfiprintf_r+0x34>
 8009da0:	690b      	ldr	r3, [r1, #16]
 8009da2:	b96b      	cbnz	r3, 8009dc0 <_svfiprintf_r+0x34>
 8009da4:	2140      	movs	r1, #64	; 0x40
 8009da6:	f000 fad9 	bl	800a35c <_malloc_r>
 8009daa:	6020      	str	r0, [r4, #0]
 8009dac:	6120      	str	r0, [r4, #16]
 8009dae:	b928      	cbnz	r0, 8009dbc <_svfiprintf_r+0x30>
 8009db0:	230c      	movs	r3, #12
 8009db2:	f8c8 3000 	str.w	r3, [r8]
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dba:	e0c8      	b.n	8009f4e <_svfiprintf_r+0x1c2>
 8009dbc:	2340      	movs	r3, #64	; 0x40
 8009dbe:	6163      	str	r3, [r4, #20]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc4:	2320      	movs	r3, #32
 8009dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dca:	2330      	movs	r3, #48	; 0x30
 8009dcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dd0:	9503      	str	r5, [sp, #12]
 8009dd2:	f04f 0b01 	mov.w	fp, #1
 8009dd6:	4637      	mov	r7, r6
 8009dd8:	463d      	mov	r5, r7
 8009dda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dde:	b10b      	cbz	r3, 8009de4 <_svfiprintf_r+0x58>
 8009de0:	2b25      	cmp	r3, #37	; 0x25
 8009de2:	d13e      	bne.n	8009e62 <_svfiprintf_r+0xd6>
 8009de4:	ebb7 0a06 	subs.w	sl, r7, r6
 8009de8:	d00b      	beq.n	8009e02 <_svfiprintf_r+0x76>
 8009dea:	4653      	mov	r3, sl
 8009dec:	4632      	mov	r2, r6
 8009dee:	4621      	mov	r1, r4
 8009df0:	4640      	mov	r0, r8
 8009df2:	f7ff ff71 	bl	8009cd8 <__ssputs_r>
 8009df6:	3001      	adds	r0, #1
 8009df8:	f000 80a4 	beq.w	8009f44 <_svfiprintf_r+0x1b8>
 8009dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfe:	4453      	add	r3, sl
 8009e00:	9309      	str	r3, [sp, #36]	; 0x24
 8009e02:	783b      	ldrb	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 809d 	beq.w	8009f44 <_svfiprintf_r+0x1b8>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	9307      	str	r3, [sp, #28]
 8009e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8009e1e:	462f      	mov	r7, r5
 8009e20:	2205      	movs	r2, #5
 8009e22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e26:	4850      	ldr	r0, [pc, #320]	; (8009f68 <_svfiprintf_r+0x1dc>)
 8009e28:	f7f6 f9da 	bl	80001e0 <memchr>
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	b9d0      	cbnz	r0, 8009e66 <_svfiprintf_r+0xda>
 8009e30:	06d9      	lsls	r1, r3, #27
 8009e32:	bf44      	itt	mi
 8009e34:	2220      	movmi	r2, #32
 8009e36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e3a:	071a      	lsls	r2, r3, #28
 8009e3c:	bf44      	itt	mi
 8009e3e:	222b      	movmi	r2, #43	; 0x2b
 8009e40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e44:	782a      	ldrb	r2, [r5, #0]
 8009e46:	2a2a      	cmp	r2, #42	; 0x2a
 8009e48:	d015      	beq.n	8009e76 <_svfiprintf_r+0xea>
 8009e4a:	9a07      	ldr	r2, [sp, #28]
 8009e4c:	462f      	mov	r7, r5
 8009e4e:	2000      	movs	r0, #0
 8009e50:	250a      	movs	r5, #10
 8009e52:	4639      	mov	r1, r7
 8009e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e58:	3b30      	subs	r3, #48	; 0x30
 8009e5a:	2b09      	cmp	r3, #9
 8009e5c:	d94d      	bls.n	8009efa <_svfiprintf_r+0x16e>
 8009e5e:	b1b8      	cbz	r0, 8009e90 <_svfiprintf_r+0x104>
 8009e60:	e00f      	b.n	8009e82 <_svfiprintf_r+0xf6>
 8009e62:	462f      	mov	r7, r5
 8009e64:	e7b8      	b.n	8009dd8 <_svfiprintf_r+0x4c>
 8009e66:	4a40      	ldr	r2, [pc, #256]	; (8009f68 <_svfiprintf_r+0x1dc>)
 8009e68:	1a80      	subs	r0, r0, r2
 8009e6a:	fa0b f000 	lsl.w	r0, fp, r0
 8009e6e:	4318      	orrs	r0, r3
 8009e70:	9004      	str	r0, [sp, #16]
 8009e72:	463d      	mov	r5, r7
 8009e74:	e7d3      	b.n	8009e1e <_svfiprintf_r+0x92>
 8009e76:	9a03      	ldr	r2, [sp, #12]
 8009e78:	1d11      	adds	r1, r2, #4
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	9103      	str	r1, [sp, #12]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	db01      	blt.n	8009e86 <_svfiprintf_r+0xfa>
 8009e82:	9207      	str	r2, [sp, #28]
 8009e84:	e004      	b.n	8009e90 <_svfiprintf_r+0x104>
 8009e86:	4252      	negs	r2, r2
 8009e88:	f043 0302 	orr.w	r3, r3, #2
 8009e8c:	9207      	str	r2, [sp, #28]
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	783b      	ldrb	r3, [r7, #0]
 8009e92:	2b2e      	cmp	r3, #46	; 0x2e
 8009e94:	d10c      	bne.n	8009eb0 <_svfiprintf_r+0x124>
 8009e96:	787b      	ldrb	r3, [r7, #1]
 8009e98:	2b2a      	cmp	r3, #42	; 0x2a
 8009e9a:	d133      	bne.n	8009f04 <_svfiprintf_r+0x178>
 8009e9c:	9b03      	ldr	r3, [sp, #12]
 8009e9e:	1d1a      	adds	r2, r3, #4
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	9203      	str	r2, [sp, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	bfb8      	it	lt
 8009ea8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eac:	3702      	adds	r7, #2
 8009eae:	9305      	str	r3, [sp, #20]
 8009eb0:	4d2e      	ldr	r5, [pc, #184]	; (8009f6c <_svfiprintf_r+0x1e0>)
 8009eb2:	7839      	ldrb	r1, [r7, #0]
 8009eb4:	2203      	movs	r2, #3
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f7f6 f992 	bl	80001e0 <memchr>
 8009ebc:	b138      	cbz	r0, 8009ece <_svfiprintf_r+0x142>
 8009ebe:	2340      	movs	r3, #64	; 0x40
 8009ec0:	1b40      	subs	r0, r0, r5
 8009ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ec6:	9b04      	ldr	r3, [sp, #16]
 8009ec8:	4303      	orrs	r3, r0
 8009eca:	3701      	adds	r7, #1
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	7839      	ldrb	r1, [r7, #0]
 8009ed0:	4827      	ldr	r0, [pc, #156]	; (8009f70 <_svfiprintf_r+0x1e4>)
 8009ed2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed6:	2206      	movs	r2, #6
 8009ed8:	1c7e      	adds	r6, r7, #1
 8009eda:	f7f6 f981 	bl	80001e0 <memchr>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d038      	beq.n	8009f54 <_svfiprintf_r+0x1c8>
 8009ee2:	4b24      	ldr	r3, [pc, #144]	; (8009f74 <_svfiprintf_r+0x1e8>)
 8009ee4:	bb13      	cbnz	r3, 8009f2c <_svfiprintf_r+0x1a0>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	3307      	adds	r3, #7
 8009eea:	f023 0307 	bic.w	r3, r3, #7
 8009eee:	3308      	adds	r3, #8
 8009ef0:	9303      	str	r3, [sp, #12]
 8009ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef4:	444b      	add	r3, r9
 8009ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef8:	e76d      	b.n	8009dd6 <_svfiprintf_r+0x4a>
 8009efa:	fb05 3202 	mla	r2, r5, r2, r3
 8009efe:	2001      	movs	r0, #1
 8009f00:	460f      	mov	r7, r1
 8009f02:	e7a6      	b.n	8009e52 <_svfiprintf_r+0xc6>
 8009f04:	2300      	movs	r3, #0
 8009f06:	3701      	adds	r7, #1
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	250a      	movs	r5, #10
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f14:	3a30      	subs	r2, #48	; 0x30
 8009f16:	2a09      	cmp	r2, #9
 8009f18:	d903      	bls.n	8009f22 <_svfiprintf_r+0x196>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0c8      	beq.n	8009eb0 <_svfiprintf_r+0x124>
 8009f1e:	9105      	str	r1, [sp, #20]
 8009f20:	e7c6      	b.n	8009eb0 <_svfiprintf_r+0x124>
 8009f22:	fb05 2101 	mla	r1, r5, r1, r2
 8009f26:	2301      	movs	r3, #1
 8009f28:	4607      	mov	r7, r0
 8009f2a:	e7f0      	b.n	8009f0e <_svfiprintf_r+0x182>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4622      	mov	r2, r4
 8009f32:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <_svfiprintf_r+0x1ec>)
 8009f34:	a904      	add	r1, sp, #16
 8009f36:	4640      	mov	r0, r8
 8009f38:	f3af 8000 	nop.w
 8009f3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f40:	4681      	mov	r9, r0
 8009f42:	d1d6      	bne.n	8009ef2 <_svfiprintf_r+0x166>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	065b      	lsls	r3, r3, #25
 8009f48:	f53f af35 	bmi.w	8009db6 <_svfiprintf_r+0x2a>
 8009f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4e:	b01d      	add	sp, #116	; 0x74
 8009f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f54:	ab03      	add	r3, sp, #12
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4622      	mov	r2, r4
 8009f5a:	4b07      	ldr	r3, [pc, #28]	; (8009f78 <_svfiprintf_r+0x1ec>)
 8009f5c:	a904      	add	r1, sp, #16
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f000 f882 	bl	800a068 <_printf_i>
 8009f64:	e7ea      	b.n	8009f3c <_svfiprintf_r+0x1b0>
 8009f66:	bf00      	nop
 8009f68:	0800a5f8 	.word	0x0800a5f8
 8009f6c:	0800a5fe 	.word	0x0800a5fe
 8009f70:	0800a602 	.word	0x0800a602
 8009f74:	00000000 	.word	0x00000000
 8009f78:	08009cd9 	.word	0x08009cd9

08009f7c <_printf_common>:
 8009f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	4691      	mov	r9, r2
 8009f82:	461f      	mov	r7, r3
 8009f84:	688a      	ldr	r2, [r1, #8]
 8009f86:	690b      	ldr	r3, [r1, #16]
 8009f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	bfb8      	it	lt
 8009f90:	4613      	movlt	r3, r2
 8009f92:	f8c9 3000 	str.w	r3, [r9]
 8009f96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	b112      	cbz	r2, 8009fa6 <_printf_common+0x2a>
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	f8c9 3000 	str.w	r3, [r9]
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	0699      	lsls	r1, r3, #26
 8009faa:	bf42      	ittt	mi
 8009fac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009fb0:	3302      	addmi	r3, #2
 8009fb2:	f8c9 3000 	strmi.w	r3, [r9]
 8009fb6:	6825      	ldr	r5, [r4, #0]
 8009fb8:	f015 0506 	ands.w	r5, r5, #6
 8009fbc:	d107      	bne.n	8009fce <_printf_common+0x52>
 8009fbe:	f104 0a19 	add.w	sl, r4, #25
 8009fc2:	68e3      	ldr	r3, [r4, #12]
 8009fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fc8:	1a9b      	subs	r3, r3, r2
 8009fca:	42ab      	cmp	r3, r5
 8009fcc:	dc28      	bgt.n	800a020 <_printf_common+0xa4>
 8009fce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fd2:	6822      	ldr	r2, [r4, #0]
 8009fd4:	3300      	adds	r3, #0
 8009fd6:	bf18      	it	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	0692      	lsls	r2, r2, #26
 8009fdc:	d42d      	bmi.n	800a03a <_printf_common+0xbe>
 8009fde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	47c0      	blx	r8
 8009fe8:	3001      	adds	r0, #1
 8009fea:	d020      	beq.n	800a02e <_printf_common+0xb2>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	68e5      	ldr	r5, [r4, #12]
 8009ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ff4:	f003 0306 	and.w	r3, r3, #6
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	bf08      	it	eq
 8009ffc:	1aad      	subeq	r5, r5, r2
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	6922      	ldr	r2, [r4, #16]
 800a002:	bf0c      	ite	eq
 800a004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a008:	2500      	movne	r5, #0
 800a00a:	4293      	cmp	r3, r2
 800a00c:	bfc4      	itt	gt
 800a00e:	1a9b      	subgt	r3, r3, r2
 800a010:	18ed      	addgt	r5, r5, r3
 800a012:	f04f 0900 	mov.w	r9, #0
 800a016:	341a      	adds	r4, #26
 800a018:	454d      	cmp	r5, r9
 800a01a:	d11a      	bne.n	800a052 <_printf_common+0xd6>
 800a01c:	2000      	movs	r0, #0
 800a01e:	e008      	b.n	800a032 <_printf_common+0xb6>
 800a020:	2301      	movs	r3, #1
 800a022:	4652      	mov	r2, sl
 800a024:	4639      	mov	r1, r7
 800a026:	4630      	mov	r0, r6
 800a028:	47c0      	blx	r8
 800a02a:	3001      	adds	r0, #1
 800a02c:	d103      	bne.n	800a036 <_printf_common+0xba>
 800a02e:	f04f 30ff 	mov.w	r0, #4294967295
 800a032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a036:	3501      	adds	r5, #1
 800a038:	e7c3      	b.n	8009fc2 <_printf_common+0x46>
 800a03a:	18e1      	adds	r1, r4, r3
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	2030      	movs	r0, #48	; 0x30
 800a040:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a044:	4422      	add	r2, r4
 800a046:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a04a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a04e:	3302      	adds	r3, #2
 800a050:	e7c5      	b.n	8009fde <_printf_common+0x62>
 800a052:	2301      	movs	r3, #1
 800a054:	4622      	mov	r2, r4
 800a056:	4639      	mov	r1, r7
 800a058:	4630      	mov	r0, r6
 800a05a:	47c0      	blx	r8
 800a05c:	3001      	adds	r0, #1
 800a05e:	d0e6      	beq.n	800a02e <_printf_common+0xb2>
 800a060:	f109 0901 	add.w	r9, r9, #1
 800a064:	e7d8      	b.n	800a018 <_printf_common+0x9c>
	...

0800a068 <_printf_i>:
 800a068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a06c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a070:	460c      	mov	r4, r1
 800a072:	7e09      	ldrb	r1, [r1, #24]
 800a074:	b085      	sub	sp, #20
 800a076:	296e      	cmp	r1, #110	; 0x6e
 800a078:	4617      	mov	r7, r2
 800a07a:	4606      	mov	r6, r0
 800a07c:	4698      	mov	r8, r3
 800a07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a080:	f000 80b3 	beq.w	800a1ea <_printf_i+0x182>
 800a084:	d822      	bhi.n	800a0cc <_printf_i+0x64>
 800a086:	2963      	cmp	r1, #99	; 0x63
 800a088:	d036      	beq.n	800a0f8 <_printf_i+0x90>
 800a08a:	d80a      	bhi.n	800a0a2 <_printf_i+0x3a>
 800a08c:	2900      	cmp	r1, #0
 800a08e:	f000 80b9 	beq.w	800a204 <_printf_i+0x19c>
 800a092:	2958      	cmp	r1, #88	; 0x58
 800a094:	f000 8083 	beq.w	800a19e <_printf_i+0x136>
 800a098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a09c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0a0:	e032      	b.n	800a108 <_printf_i+0xa0>
 800a0a2:	2964      	cmp	r1, #100	; 0x64
 800a0a4:	d001      	beq.n	800a0aa <_printf_i+0x42>
 800a0a6:	2969      	cmp	r1, #105	; 0x69
 800a0a8:	d1f6      	bne.n	800a098 <_printf_i+0x30>
 800a0aa:	6820      	ldr	r0, [r4, #0]
 800a0ac:	6813      	ldr	r3, [r2, #0]
 800a0ae:	0605      	lsls	r5, r0, #24
 800a0b0:	f103 0104 	add.w	r1, r3, #4
 800a0b4:	d52a      	bpl.n	800a10c <_printf_i+0xa4>
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6011      	str	r1, [r2, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	da03      	bge.n	800a0c6 <_printf_i+0x5e>
 800a0be:	222d      	movs	r2, #45	; 0x2d
 800a0c0:	425b      	negs	r3, r3
 800a0c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a0c6:	486f      	ldr	r0, [pc, #444]	; (800a284 <_printf_i+0x21c>)
 800a0c8:	220a      	movs	r2, #10
 800a0ca:	e039      	b.n	800a140 <_printf_i+0xd8>
 800a0cc:	2973      	cmp	r1, #115	; 0x73
 800a0ce:	f000 809d 	beq.w	800a20c <_printf_i+0x1a4>
 800a0d2:	d808      	bhi.n	800a0e6 <_printf_i+0x7e>
 800a0d4:	296f      	cmp	r1, #111	; 0x6f
 800a0d6:	d020      	beq.n	800a11a <_printf_i+0xb2>
 800a0d8:	2970      	cmp	r1, #112	; 0x70
 800a0da:	d1dd      	bne.n	800a098 <_printf_i+0x30>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	f043 0320 	orr.w	r3, r3, #32
 800a0e2:	6023      	str	r3, [r4, #0]
 800a0e4:	e003      	b.n	800a0ee <_printf_i+0x86>
 800a0e6:	2975      	cmp	r1, #117	; 0x75
 800a0e8:	d017      	beq.n	800a11a <_printf_i+0xb2>
 800a0ea:	2978      	cmp	r1, #120	; 0x78
 800a0ec:	d1d4      	bne.n	800a098 <_printf_i+0x30>
 800a0ee:	2378      	movs	r3, #120	; 0x78
 800a0f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0f4:	4864      	ldr	r0, [pc, #400]	; (800a288 <_printf_i+0x220>)
 800a0f6:	e055      	b.n	800a1a4 <_printf_i+0x13c>
 800a0f8:	6813      	ldr	r3, [r2, #0]
 800a0fa:	1d19      	adds	r1, r3, #4
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6011      	str	r1, [r2, #0]
 800a100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a108:	2301      	movs	r3, #1
 800a10a:	e08c      	b.n	800a226 <_printf_i+0x1be>
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6011      	str	r1, [r2, #0]
 800a110:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a114:	bf18      	it	ne
 800a116:	b21b      	sxthne	r3, r3
 800a118:	e7cf      	b.n	800a0ba <_printf_i+0x52>
 800a11a:	6813      	ldr	r3, [r2, #0]
 800a11c:	6825      	ldr	r5, [r4, #0]
 800a11e:	1d18      	adds	r0, r3, #4
 800a120:	6010      	str	r0, [r2, #0]
 800a122:	0628      	lsls	r0, r5, #24
 800a124:	d501      	bpl.n	800a12a <_printf_i+0xc2>
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	e002      	b.n	800a130 <_printf_i+0xc8>
 800a12a:	0668      	lsls	r0, r5, #25
 800a12c:	d5fb      	bpl.n	800a126 <_printf_i+0xbe>
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	4854      	ldr	r0, [pc, #336]	; (800a284 <_printf_i+0x21c>)
 800a132:	296f      	cmp	r1, #111	; 0x6f
 800a134:	bf14      	ite	ne
 800a136:	220a      	movne	r2, #10
 800a138:	2208      	moveq	r2, #8
 800a13a:	2100      	movs	r1, #0
 800a13c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a140:	6865      	ldr	r5, [r4, #4]
 800a142:	60a5      	str	r5, [r4, #8]
 800a144:	2d00      	cmp	r5, #0
 800a146:	f2c0 8095 	blt.w	800a274 <_printf_i+0x20c>
 800a14a:	6821      	ldr	r1, [r4, #0]
 800a14c:	f021 0104 	bic.w	r1, r1, #4
 800a150:	6021      	str	r1, [r4, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d13d      	bne.n	800a1d2 <_printf_i+0x16a>
 800a156:	2d00      	cmp	r5, #0
 800a158:	f040 808e 	bne.w	800a278 <_printf_i+0x210>
 800a15c:	4665      	mov	r5, ip
 800a15e:	2a08      	cmp	r2, #8
 800a160:	d10b      	bne.n	800a17a <_printf_i+0x112>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	07db      	lsls	r3, r3, #31
 800a166:	d508      	bpl.n	800a17a <_printf_i+0x112>
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	bfde      	ittt	le
 800a170:	2330      	movle	r3, #48	; 0x30
 800a172:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a176:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a17a:	ebac 0305 	sub.w	r3, ip, r5
 800a17e:	6123      	str	r3, [r4, #16]
 800a180:	f8cd 8000 	str.w	r8, [sp]
 800a184:	463b      	mov	r3, r7
 800a186:	aa03      	add	r2, sp, #12
 800a188:	4621      	mov	r1, r4
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff fef6 	bl	8009f7c <_printf_common>
 800a190:	3001      	adds	r0, #1
 800a192:	d14d      	bne.n	800a230 <_printf_i+0x1c8>
 800a194:	f04f 30ff 	mov.w	r0, #4294967295
 800a198:	b005      	add	sp, #20
 800a19a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a19e:	4839      	ldr	r0, [pc, #228]	; (800a284 <_printf_i+0x21c>)
 800a1a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1a4:	6813      	ldr	r3, [r2, #0]
 800a1a6:	6821      	ldr	r1, [r4, #0]
 800a1a8:	1d1d      	adds	r5, r3, #4
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6015      	str	r5, [r2, #0]
 800a1ae:	060a      	lsls	r2, r1, #24
 800a1b0:	d50b      	bpl.n	800a1ca <_printf_i+0x162>
 800a1b2:	07ca      	lsls	r2, r1, #31
 800a1b4:	bf44      	itt	mi
 800a1b6:	f041 0120 	orrmi.w	r1, r1, #32
 800a1ba:	6021      	strmi	r1, [r4, #0]
 800a1bc:	b91b      	cbnz	r3, 800a1c6 <_printf_i+0x15e>
 800a1be:	6822      	ldr	r2, [r4, #0]
 800a1c0:	f022 0220 	bic.w	r2, r2, #32
 800a1c4:	6022      	str	r2, [r4, #0]
 800a1c6:	2210      	movs	r2, #16
 800a1c8:	e7b7      	b.n	800a13a <_printf_i+0xd2>
 800a1ca:	064d      	lsls	r5, r1, #25
 800a1cc:	bf48      	it	mi
 800a1ce:	b29b      	uxthmi	r3, r3
 800a1d0:	e7ef      	b.n	800a1b2 <_printf_i+0x14a>
 800a1d2:	4665      	mov	r5, ip
 800a1d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1d8:	fb02 3311 	mls	r3, r2, r1, r3
 800a1dc:	5cc3      	ldrb	r3, [r0, r3]
 800a1de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	2900      	cmp	r1, #0
 800a1e6:	d1f5      	bne.n	800a1d4 <_printf_i+0x16c>
 800a1e8:	e7b9      	b.n	800a15e <_printf_i+0xf6>
 800a1ea:	6813      	ldr	r3, [r2, #0]
 800a1ec:	6825      	ldr	r5, [r4, #0]
 800a1ee:	6961      	ldr	r1, [r4, #20]
 800a1f0:	1d18      	adds	r0, r3, #4
 800a1f2:	6010      	str	r0, [r2, #0]
 800a1f4:	0628      	lsls	r0, r5, #24
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	d501      	bpl.n	800a1fe <_printf_i+0x196>
 800a1fa:	6019      	str	r1, [r3, #0]
 800a1fc:	e002      	b.n	800a204 <_printf_i+0x19c>
 800a1fe:	066a      	lsls	r2, r5, #25
 800a200:	d5fb      	bpl.n	800a1fa <_printf_i+0x192>
 800a202:	8019      	strh	r1, [r3, #0]
 800a204:	2300      	movs	r3, #0
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	4665      	mov	r5, ip
 800a20a:	e7b9      	b.n	800a180 <_printf_i+0x118>
 800a20c:	6813      	ldr	r3, [r2, #0]
 800a20e:	1d19      	adds	r1, r3, #4
 800a210:	6011      	str	r1, [r2, #0]
 800a212:	681d      	ldr	r5, [r3, #0]
 800a214:	6862      	ldr	r2, [r4, #4]
 800a216:	2100      	movs	r1, #0
 800a218:	4628      	mov	r0, r5
 800a21a:	f7f5 ffe1 	bl	80001e0 <memchr>
 800a21e:	b108      	cbz	r0, 800a224 <_printf_i+0x1bc>
 800a220:	1b40      	subs	r0, r0, r5
 800a222:	6060      	str	r0, [r4, #4]
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	6123      	str	r3, [r4, #16]
 800a228:	2300      	movs	r3, #0
 800a22a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a22e:	e7a7      	b.n	800a180 <_printf_i+0x118>
 800a230:	6923      	ldr	r3, [r4, #16]
 800a232:	462a      	mov	r2, r5
 800a234:	4639      	mov	r1, r7
 800a236:	4630      	mov	r0, r6
 800a238:	47c0      	blx	r8
 800a23a:	3001      	adds	r0, #1
 800a23c:	d0aa      	beq.n	800a194 <_printf_i+0x12c>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	079b      	lsls	r3, r3, #30
 800a242:	d413      	bmi.n	800a26c <_printf_i+0x204>
 800a244:	68e0      	ldr	r0, [r4, #12]
 800a246:	9b03      	ldr	r3, [sp, #12]
 800a248:	4298      	cmp	r0, r3
 800a24a:	bfb8      	it	lt
 800a24c:	4618      	movlt	r0, r3
 800a24e:	e7a3      	b.n	800a198 <_printf_i+0x130>
 800a250:	2301      	movs	r3, #1
 800a252:	464a      	mov	r2, r9
 800a254:	4639      	mov	r1, r7
 800a256:	4630      	mov	r0, r6
 800a258:	47c0      	blx	r8
 800a25a:	3001      	adds	r0, #1
 800a25c:	d09a      	beq.n	800a194 <_printf_i+0x12c>
 800a25e:	3501      	adds	r5, #1
 800a260:	68e3      	ldr	r3, [r4, #12]
 800a262:	9a03      	ldr	r2, [sp, #12]
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	42ab      	cmp	r3, r5
 800a268:	dcf2      	bgt.n	800a250 <_printf_i+0x1e8>
 800a26a:	e7eb      	b.n	800a244 <_printf_i+0x1dc>
 800a26c:	2500      	movs	r5, #0
 800a26e:	f104 0919 	add.w	r9, r4, #25
 800a272:	e7f5      	b.n	800a260 <_printf_i+0x1f8>
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1ac      	bne.n	800a1d2 <_printf_i+0x16a>
 800a278:	7803      	ldrb	r3, [r0, #0]
 800a27a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a27e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a282:	e76c      	b.n	800a15e <_printf_i+0xf6>
 800a284:	0800a609 	.word	0x0800a609
 800a288:	0800a61a 	.word	0x0800a61a

0800a28c <memmove>:
 800a28c:	4288      	cmp	r0, r1
 800a28e:	b510      	push	{r4, lr}
 800a290:	eb01 0302 	add.w	r3, r1, r2
 800a294:	d807      	bhi.n	800a2a6 <memmove+0x1a>
 800a296:	1e42      	subs	r2, r0, #1
 800a298:	4299      	cmp	r1, r3
 800a29a:	d00a      	beq.n	800a2b2 <memmove+0x26>
 800a29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a2a4:	e7f8      	b.n	800a298 <memmove+0xc>
 800a2a6:	4283      	cmp	r3, r0
 800a2a8:	d9f5      	bls.n	800a296 <memmove+0xa>
 800a2aa:	1881      	adds	r1, r0, r2
 800a2ac:	1ad2      	subs	r2, r2, r3
 800a2ae:	42d3      	cmn	r3, r2
 800a2b0:	d100      	bne.n	800a2b4 <memmove+0x28>
 800a2b2:	bd10      	pop	{r4, pc}
 800a2b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a2bc:	e7f7      	b.n	800a2ae <memmove+0x22>
	...

0800a2c0 <_free_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	d045      	beq.n	800a354 <_free_r+0x94>
 800a2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2cc:	1f0c      	subs	r4, r1, #4
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bfb8      	it	lt
 800a2d2:	18e4      	addlt	r4, r4, r3
 800a2d4:	f000 f8d2 	bl	800a47c <__malloc_lock>
 800a2d8:	4a1f      	ldr	r2, [pc, #124]	; (800a358 <_free_r+0x98>)
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	4610      	mov	r0, r2
 800a2de:	b933      	cbnz	r3, 800a2ee <_free_r+0x2e>
 800a2e0:	6063      	str	r3, [r4, #4]
 800a2e2:	6014      	str	r4, [r2, #0]
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ea:	f000 b8c8 	b.w	800a47e <__malloc_unlock>
 800a2ee:	42a3      	cmp	r3, r4
 800a2f0:	d90c      	bls.n	800a30c <_free_r+0x4c>
 800a2f2:	6821      	ldr	r1, [r4, #0]
 800a2f4:	1862      	adds	r2, r4, r1
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	bf04      	itt	eq
 800a2fa:	681a      	ldreq	r2, [r3, #0]
 800a2fc:	685b      	ldreq	r3, [r3, #4]
 800a2fe:	6063      	str	r3, [r4, #4]
 800a300:	bf04      	itt	eq
 800a302:	1852      	addeq	r2, r2, r1
 800a304:	6022      	streq	r2, [r4, #0]
 800a306:	6004      	str	r4, [r0, #0]
 800a308:	e7ec      	b.n	800a2e4 <_free_r+0x24>
 800a30a:	4613      	mov	r3, r2
 800a30c:	685a      	ldr	r2, [r3, #4]
 800a30e:	b10a      	cbz	r2, 800a314 <_free_r+0x54>
 800a310:	42a2      	cmp	r2, r4
 800a312:	d9fa      	bls.n	800a30a <_free_r+0x4a>
 800a314:	6819      	ldr	r1, [r3, #0]
 800a316:	1858      	adds	r0, r3, r1
 800a318:	42a0      	cmp	r0, r4
 800a31a:	d10b      	bne.n	800a334 <_free_r+0x74>
 800a31c:	6820      	ldr	r0, [r4, #0]
 800a31e:	4401      	add	r1, r0
 800a320:	1858      	adds	r0, r3, r1
 800a322:	4282      	cmp	r2, r0
 800a324:	6019      	str	r1, [r3, #0]
 800a326:	d1dd      	bne.n	800a2e4 <_free_r+0x24>
 800a328:	6810      	ldr	r0, [r2, #0]
 800a32a:	6852      	ldr	r2, [r2, #4]
 800a32c:	605a      	str	r2, [r3, #4]
 800a32e:	4401      	add	r1, r0
 800a330:	6019      	str	r1, [r3, #0]
 800a332:	e7d7      	b.n	800a2e4 <_free_r+0x24>
 800a334:	d902      	bls.n	800a33c <_free_r+0x7c>
 800a336:	230c      	movs	r3, #12
 800a338:	602b      	str	r3, [r5, #0]
 800a33a:	e7d3      	b.n	800a2e4 <_free_r+0x24>
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	1821      	adds	r1, r4, r0
 800a340:	428a      	cmp	r2, r1
 800a342:	bf04      	itt	eq
 800a344:	6811      	ldreq	r1, [r2, #0]
 800a346:	6852      	ldreq	r2, [r2, #4]
 800a348:	6062      	str	r2, [r4, #4]
 800a34a:	bf04      	itt	eq
 800a34c:	1809      	addeq	r1, r1, r0
 800a34e:	6021      	streq	r1, [r4, #0]
 800a350:	605c      	str	r4, [r3, #4]
 800a352:	e7c7      	b.n	800a2e4 <_free_r+0x24>
 800a354:	bd38      	pop	{r3, r4, r5, pc}
 800a356:	bf00      	nop
 800a358:	2000101c 	.word	0x2000101c

0800a35c <_malloc_r>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	1ccd      	adds	r5, r1, #3
 800a360:	f025 0503 	bic.w	r5, r5, #3
 800a364:	3508      	adds	r5, #8
 800a366:	2d0c      	cmp	r5, #12
 800a368:	bf38      	it	cc
 800a36a:	250c      	movcc	r5, #12
 800a36c:	2d00      	cmp	r5, #0
 800a36e:	4606      	mov	r6, r0
 800a370:	db01      	blt.n	800a376 <_malloc_r+0x1a>
 800a372:	42a9      	cmp	r1, r5
 800a374:	d903      	bls.n	800a37e <_malloc_r+0x22>
 800a376:	230c      	movs	r3, #12
 800a378:	6033      	str	r3, [r6, #0]
 800a37a:	2000      	movs	r0, #0
 800a37c:	bd70      	pop	{r4, r5, r6, pc}
 800a37e:	f000 f87d 	bl	800a47c <__malloc_lock>
 800a382:	4a21      	ldr	r2, [pc, #132]	; (800a408 <_malloc_r+0xac>)
 800a384:	6814      	ldr	r4, [r2, #0]
 800a386:	4621      	mov	r1, r4
 800a388:	b991      	cbnz	r1, 800a3b0 <_malloc_r+0x54>
 800a38a:	4c20      	ldr	r4, [pc, #128]	; (800a40c <_malloc_r+0xb0>)
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	b91b      	cbnz	r3, 800a398 <_malloc_r+0x3c>
 800a390:	4630      	mov	r0, r6
 800a392:	f000 f863 	bl	800a45c <_sbrk_r>
 800a396:	6020      	str	r0, [r4, #0]
 800a398:	4629      	mov	r1, r5
 800a39a:	4630      	mov	r0, r6
 800a39c:	f000 f85e 	bl	800a45c <_sbrk_r>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d124      	bne.n	800a3ee <_malloc_r+0x92>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	6033      	str	r3, [r6, #0]
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 f868 	bl	800a47e <__malloc_unlock>
 800a3ae:	e7e4      	b.n	800a37a <_malloc_r+0x1e>
 800a3b0:	680b      	ldr	r3, [r1, #0]
 800a3b2:	1b5b      	subs	r3, r3, r5
 800a3b4:	d418      	bmi.n	800a3e8 <_malloc_r+0x8c>
 800a3b6:	2b0b      	cmp	r3, #11
 800a3b8:	d90f      	bls.n	800a3da <_malloc_r+0x7e>
 800a3ba:	600b      	str	r3, [r1, #0]
 800a3bc:	50cd      	str	r5, [r1, r3]
 800a3be:	18cc      	adds	r4, r1, r3
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 f85c 	bl	800a47e <__malloc_unlock>
 800a3c6:	f104 000b 	add.w	r0, r4, #11
 800a3ca:	1d23      	adds	r3, r4, #4
 800a3cc:	f020 0007 	bic.w	r0, r0, #7
 800a3d0:	1ac3      	subs	r3, r0, r3
 800a3d2:	d0d3      	beq.n	800a37c <_malloc_r+0x20>
 800a3d4:	425a      	negs	r2, r3
 800a3d6:	50e2      	str	r2, [r4, r3]
 800a3d8:	e7d0      	b.n	800a37c <_malloc_r+0x20>
 800a3da:	428c      	cmp	r4, r1
 800a3dc:	684b      	ldr	r3, [r1, #4]
 800a3de:	bf16      	itet	ne
 800a3e0:	6063      	strne	r3, [r4, #4]
 800a3e2:	6013      	streq	r3, [r2, #0]
 800a3e4:	460c      	movne	r4, r1
 800a3e6:	e7eb      	b.n	800a3c0 <_malloc_r+0x64>
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	6849      	ldr	r1, [r1, #4]
 800a3ec:	e7cc      	b.n	800a388 <_malloc_r+0x2c>
 800a3ee:	1cc4      	adds	r4, r0, #3
 800a3f0:	f024 0403 	bic.w	r4, r4, #3
 800a3f4:	42a0      	cmp	r0, r4
 800a3f6:	d005      	beq.n	800a404 <_malloc_r+0xa8>
 800a3f8:	1a21      	subs	r1, r4, r0
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f000 f82e 	bl	800a45c <_sbrk_r>
 800a400:	3001      	adds	r0, #1
 800a402:	d0cf      	beq.n	800a3a4 <_malloc_r+0x48>
 800a404:	6025      	str	r5, [r4, #0]
 800a406:	e7db      	b.n	800a3c0 <_malloc_r+0x64>
 800a408:	2000101c 	.word	0x2000101c
 800a40c:	20001020 	.word	0x20001020

0800a410 <_realloc_r>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	4607      	mov	r7, r0
 800a414:	4614      	mov	r4, r2
 800a416:	460e      	mov	r6, r1
 800a418:	b921      	cbnz	r1, 800a424 <_realloc_r+0x14>
 800a41a:	4611      	mov	r1, r2
 800a41c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a420:	f7ff bf9c 	b.w	800a35c <_malloc_r>
 800a424:	b922      	cbnz	r2, 800a430 <_realloc_r+0x20>
 800a426:	f7ff ff4b 	bl	800a2c0 <_free_r>
 800a42a:	4625      	mov	r5, r4
 800a42c:	4628      	mov	r0, r5
 800a42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a430:	f000 f826 	bl	800a480 <_malloc_usable_size_r>
 800a434:	42a0      	cmp	r0, r4
 800a436:	d20f      	bcs.n	800a458 <_realloc_r+0x48>
 800a438:	4621      	mov	r1, r4
 800a43a:	4638      	mov	r0, r7
 800a43c:	f7ff ff8e 	bl	800a35c <_malloc_r>
 800a440:	4605      	mov	r5, r0
 800a442:	2800      	cmp	r0, #0
 800a444:	d0f2      	beq.n	800a42c <_realloc_r+0x1c>
 800a446:	4631      	mov	r1, r6
 800a448:	4622      	mov	r2, r4
 800a44a:	f7ff fc11 	bl	8009c70 <memcpy>
 800a44e:	4631      	mov	r1, r6
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff ff35 	bl	800a2c0 <_free_r>
 800a456:	e7e9      	b.n	800a42c <_realloc_r+0x1c>
 800a458:	4635      	mov	r5, r6
 800a45a:	e7e7      	b.n	800a42c <_realloc_r+0x1c>

0800a45c <_sbrk_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4c06      	ldr	r4, [pc, #24]	; (800a478 <_sbrk_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4605      	mov	r5, r0
 800a464:	4608      	mov	r0, r1
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	f7f7 fc40 	bl	8001cec <_sbrk>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_sbrk_r+0x1a>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	b103      	cbz	r3, 800a476 <_sbrk_r+0x1a>
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20001820 	.word	0x20001820

0800a47c <__malloc_lock>:
 800a47c:	4770      	bx	lr

0800a47e <__malloc_unlock>:
 800a47e:	4770      	bx	lr

0800a480 <_malloc_usable_size_r>:
 800a480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a484:	1f18      	subs	r0, r3, #4
 800a486:	2b00      	cmp	r3, #0
 800a488:	bfbc      	itt	lt
 800a48a:	580b      	ldrlt	r3, [r1, r0]
 800a48c:	18c0      	addlt	r0, r0, r3
 800a48e:	4770      	bx	lr

0800a490 <_init>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	bf00      	nop
 800a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a496:	bc08      	pop	{r3}
 800a498:	469e      	mov	lr, r3
 800a49a:	4770      	bx	lr

0800a49c <_fini>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr
