
TESTSEMAFORI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007594  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007724  08007724  00017724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078f0  080078f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080078f0  080078f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f8  080078f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f8  080078f8  000178f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078fc  080078fc  000178fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016a4  20000010  08007910  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  08007910  000216b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227ad  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f58  00000000  00000000  000427ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f60  00000000  00000000  00046748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d88  00000000  00000000  000486a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e79  00000000  00000000  0004a430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017366  00000000  00000000  000742a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010327e  00000000  00000000  0008b60f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e88d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008704  00000000  00000000  0018e908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800770c 	.word	0x0800770c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800770c 	.word	0x0800770c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b098      	sub	sp, #96	; 0x60
 8000518:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 f824 	bl	8001566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f867 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fa8f 	bl	8000a44 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000526:	f000 f8f3 	bl	8000710 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800052a:	f000 f929 	bl	8000780 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800052e:	f000 f967 	bl	8000800 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000532:	f000 f98b 	bl	800084c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000536:	f000 f9c7 	bl	80008c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800053a:	f000 fa25 	bl	8000988 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800053e:	f000 fa53 	bl	80009e8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f9f1 	bl	8000928 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Semaphore */
  osSemaphoreDef(Semaphore);
 8000546:	2300      	movs	r3, #0
 8000548:	65bb      	str	r3, [r7, #88]	; 0x58
 800054a:	2300      	movs	r3, #0
 800054c:	65fb      	str	r3, [r7, #92]	; 0x5c
  SemaphoreHandle = osSemaphoreCreate(osSemaphore(Semaphore), 1);
 800054e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000552:	2101      	movs	r1, #1
 8000554:	4618      	mov	r0, r3
 8000556:	f004 fdc0 	bl	80050da <osSemaphoreCreate>
 800055a:	4602      	mov	r2, r0
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <main+0xc0>)
 800055e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of HighTask */
  osThreadDef(HighTask, StartHighTask, osPriorityHigh, 0, 128);
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <main+0xc4>)
 8000562:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HighTaskHandle = osThreadCreate(osThread(HighTask), NULL);
 8000574:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f004 fd4d 	bl	800501a <osThreadCreate>
 8000580:	4602      	mov	r2, r0
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <main+0xc8>)
 8000584:	601a      	str	r2, [r3, #0]

  /* definition and creation of LowTask */
  osThreadDef(LowTask, StartLowTask, osPriorityBelowNormal, 0, 128);
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0xcc>)
 8000588:	f107 0420 	add.w	r4, r7, #32
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LowTaskHandle = osThreadCreate(osThread(LowTask), NULL);
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fd3a 	bl	800501a <osThreadCreate>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <main+0xd0>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of NormalTask */
  osThreadDef(NormalTask, StartNormalTask, osPriorityNormal, 0, 128);
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <main+0xd4>)
 80005ae:	1d3c      	adds	r4, r7, #4
 80005b0:	461d      	mov	r5, r3
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  NormalTaskHandle = osThreadCreate(osThread(NormalTask), NULL);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 fd29 	bl	800501a <osThreadCreate>
 80005c8:	4602      	mov	r2, r0
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <main+0xd8>)
 80005cc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ce:	f004 fd1d 	bl	800500c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <main+0xbe>
 80005d4:	20000fe8 	.word	0x20000fe8
 80005d8:	08007730 	.word	0x08007730
 80005dc:	20000fe4 	.word	0x20000fe4
 80005e0:	08007754 	.word	0x08007754
 80005e4:	200015a4 	.word	0x200015a4
 80005e8:	0800777c 	.word	0x0800777c
 80005ec:	200015a8 	.word	0x200015a8

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0b8      	sub	sp, #224	; 0xe0
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f007 f87b 	bl	80076fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2288      	movs	r2, #136	; 0x88
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f007 f86d 	bl	80076fa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	2303      	movs	r3, #3
 8000636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000640:	2314      	movs	r3, #20
 8000642:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000646:	2307      	movs	r3, #7
 8000648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800065c:	4618      	mov	r0, r3
 800065e:	f001 ff55 	bl	800250c <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000668:	f000 fc52 	bl	8000f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2303      	movs	r3, #3
 8000674:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800068e:	2104      	movs	r1, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f002 faeb 	bl	8002c6c <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800069c:	f000 fc38 	bl	8000f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <SystemClock_Config+0x11c>)
 80006a2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006be:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80006c0:	2303      	movs	r3, #3
 80006c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80006c8:	230c      	movs	r3, #12
 80006ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006dc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fcf9 	bl	80030d8 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80006ec:	f000 fc10 	bl	8000f10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f4:	f001 fddc 	bl	80022b0 <HAL_PWREx_ControlVoltageScaling>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80006fe:	f000 fc07 	bl	8000f10 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	37e0      	adds	r7, #224	; 0xe0
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	00012087 	.word	0x00012087

08000710 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000716:	4a19      	ldr	r2, [pc, #100]	; (800077c <MX_DFSDM1_Init+0x6c>)
 8000718:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800071c:	2201      	movs	r2, #1
 800071e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000728:	2202      	movs	r2, #2
 800072a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800073a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000748:	2204      	movs	r2, #4
 800074a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000754:	2201      	movs	r2, #1
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000766:	f001 f839 	bl	80017dc <HAL_DFSDM_ChannelInit>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000770:	f000 fbce 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000fac 	.word	0x20000fac
 800077c:	40016020 	.word	0x40016020

08000780 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C2_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C2_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C2_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007bc:	f001 fafc 	bl	8001db8 <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 fba3 	bl	8000f10 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007ce:	f001 fb82 	bl	8001ed6 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 fb9a 	bl	8000f10 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007e0:	f001 fbc4 	bl	8001f6c <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 fb91 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20001474 	.word	0x20001474
 80007f8:	40005800 	.word	0x40005800
 80007fc:	10909cec 	.word	0x10909cec

08000800 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_QUADSPI_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_QUADSPI_Init+0x44>)
 800080c:	22ff      	movs	r2, #255	; 0xff
 800080e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000812:	2201      	movs	r2, #1
 8000814:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_QUADSPI_Init+0x44>)
 800081e:	2201      	movs	r2, #1
 8000820:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_QUADSPI_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000830:	f001 fda4 	bl	800237c <HAL_QSPI_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800083a:	f000 fb69 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000162c 	.word	0x2000162c
 8000848:	a0001000 	.word	0xa0001000

0800084c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_SPI3_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000866:	f44f 7240 	mov.w	r2, #768	; 0x300
 800086a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI3_Init+0x74>)
 800087a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI3_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI3_Init+0x74>)
 800089a:	2207      	movs	r2, #7
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI3_Init+0x74>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_SPI3_Init+0x74>)
 80008ac:	f003 f8c4 	bl	8003a38 <HAL_SPI_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fb2b 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200014c0 	.word	0x200014c0
 80008c4:	40003c00 	.word	0x40003c00

080008c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART1_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART1_UART_Init+0x58>)
 800090c:	f003 fb7e 	bl	800400c <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 fafb 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20001524 	.word	0x20001524
 8000924:	40013800 	.word	0x40013800

08000928 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART2_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART2_UART_Init+0x58>)
 800096c:	f003 fb4e 	bl	800400c <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 facb 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200015ac 	.word	0x200015ac
 8000984:	40004400 	.word	0x40004400

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_USART3_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009cc:	f003 fb1e 	bl	800400c <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 fa9b 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000fec 	.word	0x20000fec
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2206      	movs	r2, #6
 80009f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2c:	f001 faea 	bl	8002004 <HAL_PCD_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 fa6b 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000106c 	.word	0x2000106c

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	4bb9      	ldr	r3, [pc, #740]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4ab8      	ldr	r2, [pc, #736]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4bb6      	ldr	r3, [pc, #728]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4bb3      	ldr	r3, [pc, #716]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4ab2      	ldr	r2, [pc, #712]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4bb0      	ldr	r3, [pc, #704]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	4bad      	ldr	r3, [pc, #692]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4aac      	ldr	r2, [pc, #688]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4baa      	ldr	r3, [pc, #680]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4ba7      	ldr	r3, [pc, #668]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4aa6      	ldr	r2, [pc, #664]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4ba4      	ldr	r3, [pc, #656]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4ba1      	ldr	r3, [pc, #644]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4aa0      	ldr	r2, [pc, #640]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b9e      	ldr	r3, [pc, #632]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	4b9b      	ldr	r3, [pc, #620]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a9a      	ldr	r2, [pc, #616]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b98      	ldr	r3, [pc, #608]	; (8000d40 <MX_GPIO_Init+0x2fc>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000af0:	4894      	ldr	r0, [pc, #592]	; (8000d44 <MX_GPIO_Init+0x300>)
 8000af2:	f001 f949 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f248 1104 	movw	r1, #33028	; 0x8104
 8000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b00:	f001 f942 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000b04:	2200      	movs	r2, #0
 8000b06:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b0a:	488f      	ldr	r0, [pc, #572]	; (8000d48 <MX_GPIO_Init+0x304>)
 8000b0c:	f001 f93c 	bl	8001d88 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b16:	488d      	ldr	r0, [pc, #564]	; (8000d4c <MX_GPIO_Init+0x308>)
 8000b18:	f001 f936 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	488a      	ldr	r0, [pc, #552]	; (8000d4c <MX_GPIO_Init+0x308>)
 8000b24:	f001 f930 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b2e:	4888      	ldr	r0, [pc, #544]	; (8000d50 <MX_GPIO_Init+0x30c>)
 8000b30:	f001 f92a 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2120      	movs	r1, #32
 8000b38:	4883      	ldr	r0, [pc, #524]	; (8000d48 <MX_GPIO_Init+0x304>)
 8000b3a:	f001 f925 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2101      	movs	r1, #1
 8000b42:	4880      	ldr	r0, [pc, #512]	; (8000d44 <MX_GPIO_Init+0x300>)
 8000b44:	f001 f920 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b48:	f240 1315 	movw	r3, #277	; 0x115
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4878      	ldr	r0, [pc, #480]	; (8000d44 <MX_GPIO_Init+0x300>)
 8000b62:	f000 ff51 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b66:	236a      	movs	r3, #106	; 0x6a
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6a:	4b7a      	ldr	r3, [pc, #488]	; (8000d54 <MX_GPIO_Init+0x310>)
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4872      	ldr	r0, [pc, #456]	; (8000d44 <MX_GPIO_Init+0x300>)
 8000b7a:	f000 ff45 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	486f      	ldr	r0, [pc, #444]	; (8000d50 <MX_GPIO_Init+0x30c>)
 8000b94:	f000 ff38 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8000b98:	233f      	movs	r3, #63	; 0x3f
 8000b9a:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4869      	ldr	r0, [pc, #420]	; (8000d50 <MX_GPIO_Init+0x30c>)
 8000bac:	f000 ff2c 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f000 ff1b 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000bd2:	f248 1304 	movw	r3, #33028	; 0x8104
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f000 ff0b 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f000 fefa 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c14:	2310      	movs	r3, #16
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c18:	230b      	movs	r3, #11
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f000 feed 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c2e:	23e0      	movs	r3, #224	; 0xe0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4c:	f000 fedc 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c54:	4b3f      	ldr	r3, [pc, #252]	; (8000d54 <MX_GPIO_Init+0x310>)
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4839      	ldr	r0, [pc, #228]	; (8000d48 <MX_GPIO_Init+0x304>)
 8000c64:	f000 fed0 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4833      	ldr	r0, [pc, #204]	; (8000d48 <MX_GPIO_Init+0x304>)
 8000c7c:	f000 fec4 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8000c80:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c84:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	482b      	ldr	r0, [pc, #172]	; (8000d48 <MX_GPIO_Init+0x304>)
 8000c9a:	f000 feb5 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8000c9e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ca2:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	; (8000d54 <MX_GPIO_Init+0x310>)
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4826      	ldr	r0, [pc, #152]	; (8000d4c <MX_GPIO_Init+0x308>)
 8000cb4:	f000 fea8 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000cb8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481e      	ldr	r0, [pc, #120]	; (8000d4c <MX_GPIO_Init+0x308>)
 8000cd2:	f000 fe99 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000cd6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	4818      	ldr	r0, [pc, #96]	; (8000d50 <MX_GPIO_Init+0x30c>)
 8000cf0:	f000 fe8a 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cf4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_GPIO_Init+0x310>)
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <MX_GPIO_Init+0x30c>)
 8000d0a:	f000 fe7d 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <MX_GPIO_Init+0x308>)
 8000d2a:	f000 fe6d 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	e00b      	b.n	8000d58 <MX_GPIO_Init+0x314>
 8000d40:	40021000 	.word	0x40021000
 8000d44:	48001000 	.word	0x48001000
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	48000c00 	.word	0x48000c00
 8000d50:	48000800 	.word	0x48000800
 8000d54:	10110000 	.word	0x10110000
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <MX_GPIO_Init+0x330>)
 8000d66:	f000 fe4f 	bl	8001a08 <HAL_GPIO_Init>

}
 8000d6a:	bf00      	nop
 8000d6c:	3730      	adds	r7, #48	; 0x30
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	48000400 	.word	0x48000400

08000d78 <StartHighTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartHighTask */
void StartHighTask(void const * argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	char *str1 = "Entered HighTask\n";
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <StartHighTask+0x74>)
 8000d82:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen(str1), 100);
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f7ff fa23 	bl	80001d0 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	2364      	movs	r3, #100	; 0x64
 8000d90:	6979      	ldr	r1, [r7, #20]
 8000d92:	4817      	ldr	r0, [pc, #92]	; (8000df0 <StartHighTask+0x78>)
 8000d94:	f003 f988 	bl	80040a8 <HAL_UART_Transmit>

	osSemaphoreWait(SemaphoreHandle, osWaitForever); // Wait forever until semaphore available
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <StartHighTask+0x7c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 f9cd 	bl	8005140 <osSemaphoreWait>

	char *str3 = "Semaphore acquired by High\n";
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <StartHighTask+0x80>)
 8000da8:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart1, (uint8_t *) str3, strlen(str3), 100);
 8000daa:	6938      	ldr	r0, [r7, #16]
 8000dac:	f7ff fa10 	bl	80001d0 <strlen>
 8000db0:	4603      	mov	r3, r0
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	2364      	movs	r3, #100	; 0x64
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <StartHighTask+0x78>)
 8000dba:	f003 f975 	bl	80040a8 <HAL_UART_Transmit>

	char *str2 = "Leaving HighTask and releasing the semaphore\n\n";
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <StartHighTask+0x84>)
 8000dc0:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen(str2), 100);
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f7ff fa04 	bl	80001d0 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	2364      	movs	r3, #100	; 0x64
 8000dce:	68f9      	ldr	r1, [r7, #12]
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <StartHighTask+0x78>)
 8000dd2:	f003 f969 	bl	80040a8 <HAL_UART_Transmit>

    osSemaphoreRelease(SemaphoreHandle);
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <StartHighTask+0x7c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f004 f9fe 	bl	80051dc <osSemaphoreRelease>

    osDelay(500);
 8000de0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de4:	f004 f965 	bl	80050b2 <osDelay>
  {
 8000de8:	e7ca      	b.n	8000d80 <StartHighTask+0x8>
 8000dea:	bf00      	nop
 8000dec:	08007798 	.word	0x08007798
 8000df0:	20001524 	.word	0x20001524
 8000df4:	20000fe8 	.word	0x20000fe8
 8000df8:	080077ac 	.word	0x080077ac
 8000dfc:	080077c8 	.word	0x080077c8

08000e00 <StartLowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLowTask */
void StartLowTask(void const * argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLowTask */
  /* Infinite loop */
  for(;;)
  {
	char *str1 = "Entered LowTask\n";
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <StartLowTask+0x44>)
 8000e0a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen(str1), 100);
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff f9df 	bl	80001d0 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	2364      	movs	r3, #100	; 0x64
 8000e18:	68f9      	ldr	r1, [r7, #12]
 8000e1a:	480b      	ldr	r0, [pc, #44]	; (8000e48 <StartLowTask+0x48>)
 8000e1c:	f003 f944 	bl	80040a8 <HAL_UART_Transmit>
	char *str2 = "Leaving LowTask\n\n";
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <StartLowTask+0x4c>)
 8000e22:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen(str2), 100);
 8000e24:	68b8      	ldr	r0, [r7, #8]
 8000e26:	f7ff f9d3 	bl	80001d0 <strlen>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	2364      	movs	r3, #100	; 0x64
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <StartLowTask+0x48>)
 8000e34:	f003 f938 	bl	80040a8 <HAL_UART_Transmit>
    osDelay(500);
 8000e38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3c:	f004 f939 	bl	80050b2 <osDelay>
  {
 8000e40:	e7e2      	b.n	8000e08 <StartLowTask+0x8>
 8000e42:	bf00      	nop
 8000e44:	080077f8 	.word	0x080077f8
 8000e48:	20001524 	.word	0x20001524
 8000e4c:	0800780c 	.word	0x0800780c

08000e50 <StartNormalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartNormalTask */
void StartNormalTask(void const * argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartNormalTask */
  /* Infinite loop */
  for(;;)
  {
	char *str1 = "Entered NormalTask and wait for semaphore\n";
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <StartNormalTask+0x84>)
 8000e5a:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart1, (uint8_t *) str1, strlen(str1), 100);
 8000e5c:	6978      	ldr	r0, [r7, #20]
 8000e5e:	f7ff f9b7 	bl	80001d0 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	2364      	movs	r3, #100	; 0x64
 8000e68:	6979      	ldr	r1, [r7, #20]
 8000e6a:	481b      	ldr	r0, [pc, #108]	; (8000ed8 <StartNormalTask+0x88>)
 8000e6c:	f003 f91c 	bl	80040a8 <HAL_UART_Transmit>

	osSemaphoreWait(SemaphoreHandle, osWaitForever); // Wait forever until semaphore available
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <StartNormalTask+0x8c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f004 f961 	bl	8005140 <osSemaphoreWait>

	char *str3 = "Semaphore acquired by Normal\n";
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <StartNormalTask+0x90>)
 8000e80:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart1, (uint8_t *) str3, strlen(str3), 100);
 8000e82:	6938      	ldr	r0, [r7, #16]
 8000e84:	f7ff f9a4 	bl	80001d0 <strlen>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	2364      	movs	r3, #100	; 0x64
 8000e8e:	6939      	ldr	r1, [r7, #16]
 8000e90:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <StartNormalTask+0x88>)
 8000e92:	f003 f909 	bl	80040a8 <HAL_UART_Transmit>

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)); // Wait button press
 8000e96:	bf00      	nop
 8000e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9c:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <StartNormalTask+0x94>)
 8000e9e:	f000 ff5b 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f7      	bne.n	8000e98 <StartNormalTask+0x48>

	char *str2 = "Leaving NormalTask and releasing the Semaphore\n\n";
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <StartNormalTask+0x98>)
 8000eaa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t *) str2, strlen(str2), 100);
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f7ff f98f 	bl	80001d0 <strlen>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <StartNormalTask+0x88>)
 8000ebc:	f003 f8f4 	bl	80040a8 <HAL_UART_Transmit>

    osSemaphoreRelease(SemaphoreHandle);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <StartNormalTask+0x8c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 f989 	bl	80051dc <osSemaphoreRelease>

    osDelay(500);
 8000eca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ece:	f004 f8f0 	bl	80050b2 <osDelay>
  {
 8000ed2:	e7c1      	b.n	8000e58 <StartNormalTask+0x8>
 8000ed4:	08007820 	.word	0x08007820
 8000ed8:	20001524 	.word	0x20001524
 8000edc:	20000fe8 	.word	0x20000fe8
 8000ee0:	0800784c 	.word	0x0800784c
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	0800786c 	.word	0x0800786c

08000eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efe:	f000 fb4b 	bl	8001598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40012c00 	.word	0x40012c00

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4a10      	ldr	r2, [pc, #64]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210f      	movs	r1, #15
 8000f5a:	f06f 0001 	mvn.w	r0, #1
 8000f5e:	f000 fc13 	bl	8001788 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d128      	bne.n	8000fe2 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000fc0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000fde:	f000 fd13 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000280 	.word	0x20000280
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48001000 	.word	0x48001000

08000ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_I2C_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d128      	bne.n	800106c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_I2C_MspInit+0x80>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_I2C_MspInit+0x80>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_I2C_MspInit+0x80>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001032:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001044:	2304      	movs	r3, #4
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	480b      	ldr	r0, [pc, #44]	; (800107c <HAL_I2C_MspInit+0x84>)
 8001050:	f000 fcda 	bl	8001a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_I2C_MspInit+0x80>)
 8001056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_I2C_MspInit+0x80>)
 800105a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105e:	6593      	str	r3, [r2, #88]	; 0x58
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_I2C_MspInit+0x80>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40005800 	.word	0x40005800
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400

08001080 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_QSPI_MspInit+0x7c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d128      	bne.n	80010f4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_QSPI_MspInit+0x80>)
 80010a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <HAL_QSPI_MspInit+0x80>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6513      	str	r3, [r2, #80]	; 0x50
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <HAL_QSPI_MspInit+0x80>)
 80010b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_QSPI_MspInit+0x80>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_QSPI_MspInit+0x80>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_QSPI_MspInit+0x80>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 80010d2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80010d6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010e4:	230a      	movs	r3, #10
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_QSPI_MspInit+0x84>)
 80010f0:	f000 fc8a 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	a0001000 	.word	0xa0001000
 8001100:	40021000 	.word	0x40021000
 8001104:	48001000 	.word	0x48001000

08001108 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_SPI_MspInit+0x7c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d128      	bne.n	800117c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_SPI_MspInit+0x80>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	4a16      	ldr	r2, [pc, #88]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001134:	6593      	str	r3, [r2, #88]	; 0x58
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_SPI_MspInit+0x80>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800115a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800116c:	2306      	movs	r3, #6
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_SPI_MspInit+0x84>)
 8001178:	f000 fc46 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40003c00 	.word	0x40003c00
 8001188:	40021000 	.word	0x40021000
 800118c:	48000800 	.word	0x48000800

08001190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a45      	ldr	r2, [pc, #276]	; (80012c4 <HAL_UART_MspInit+0x134>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d128      	bne.n	8001204 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b2:	4b45      	ldr	r3, [pc, #276]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	4a44      	ldr	r2, [pc, #272]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6613      	str	r3, [r2, #96]	; 0x60
 80011be:	4b42      	ldr	r3, [pc, #264]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a3e      	ldr	r2, [pc, #248]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <HAL_UART_MspInit+0x138>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80011e2:	23c0      	movs	r3, #192	; 0xc0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f2:	2307      	movs	r3, #7
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4619      	mov	r1, r3
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <HAL_UART_MspInit+0x13c>)
 80011fe:	f000 fc03 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001202:	e05b      	b.n	80012bc <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a31      	ldr	r2, [pc, #196]	; (80012d0 <HAL_UART_MspInit+0x140>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d128      	bne.n	8001260 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	4a2d      	ldr	r2, [pc, #180]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	6593      	str	r3, [r2, #88]	; 0x58
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_UART_MspInit+0x138>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <HAL_UART_MspInit+0x138>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800123e:	2378      	movs	r3, #120	; 0x78
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800124e:	2307      	movs	r3, #7
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	481e      	ldr	r0, [pc, #120]	; (80012d4 <HAL_UART_MspInit+0x144>)
 800125a:	f000 fbd5 	bl	8001a08 <HAL_GPIO_Init>
}
 800125e:	e02d      	b.n	80012bc <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_UART_MspInit+0x148>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d128      	bne.n	80012bc <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_UART_MspInit+0x138>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_UART_MspInit+0x138>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800129a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ac:	2307      	movs	r3, #7
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <HAL_UART_MspInit+0x144>)
 80012b8:	f000 fba6 	bl	8001a08 <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	40004400 	.word	0x40004400
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	40004800 	.word	0x40004800

080012dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fc:	d154      	bne.n	80013a8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f000 fb6b 	bl	8001a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001332:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001344:	230a      	movs	r3, #10
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f000 fb59 	bl	8001a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 800135c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d114      	bne.n	80013a4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	6593      	str	r3, [r2, #88]	; 0x58
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001392:	f000 ffe3 	bl	800235c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <HAL_PCD_MspInit+0xd4>)
 800139c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80013a2:	e001      	b.n	80013a8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80013a4:	f000 ffda 	bl	800235c <HAL_PWREx_EnableVddUSB>
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	2019      	movs	r0, #25
 80013ca:	f000 f9dd 	bl	8001788 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80013ce:	2019      	movs	r0, #25
 80013d0:	f000 f9f6 	bl	80017c0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_InitTick+0x9c>)
 80013d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <HAL_InitTick+0x9c>)
 80013da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013de:	6613      	str	r3, [r2, #96]	; 0x60
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_InitTick+0x9c>)
 80013e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ec:	f107 0210 	add.w	r2, r7, #16
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fddc 	bl	8002fb4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013fc:	f001 fdc4 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 8001400:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001404:	4a13      	ldr	r2, [pc, #76]	; (8001454 <HAL_InitTick+0xa0>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	3b01      	subs	r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_InitTick+0xa4>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_InitTick+0xa8>)
 8001414:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <HAL_InitTick+0xa4>)
 8001418:	f240 32e7 	movw	r2, #999	; 0x3e7
 800141c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_InitTick+0xa4>)
 8001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001422:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_InitTick+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_InitTick+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <HAL_InitTick+0xa4>)
 8001432:	f002 fb8b 	bl	8003b4c <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_InitTick+0xa4>)
 800143e:	f002 fbbb 	bl	8003bb8 <HAL_TIM_Base_Start_IT>
 8001442:	4603      	mov	r3, r0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3730      	adds	r7, #48	; 0x30
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40021000 	.word	0x40021000
 8001454:	431bde83 	.word	0x431bde83
 8001458:	20001670 	.word	0x20001670
 800145c:	40012c00 	.word	0x40012c00

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800149a:	f002 fbb7 	bl	8003c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20001670 	.word	0x20001670

080014a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <SystemInit+0x64>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a16      	ldr	r2, [pc, #88]	; (800150c <SystemInit+0x64>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <SystemInit+0x68>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a13      	ldr	r2, [pc, #76]	; (8001510 <SystemInit+0x68>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <SystemInit+0x68>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <SystemInit+0x68>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <SystemInit+0x68>)
 80014d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <SystemInit+0x68>)
 80014e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <SystemInit+0x68>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <SystemInit+0x68>)
 80014ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <SystemInit+0x68>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <SystemInit+0x64>)
 80014fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	40021000 	.word	0x40021000

08001514 <Reset_Handler>:
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800154c <LoopForever+0x2>
 8001518:	2100      	movs	r1, #0
 800151a:	e003      	b.n	8001524 <LoopCopyDataInit>

0800151c <CopyDataInit>:
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <LoopForever+0x6>)
 800151e:	585b      	ldr	r3, [r3, r1]
 8001520:	5043      	str	r3, [r0, r1]
 8001522:	3104      	adds	r1, #4

08001524 <LoopCopyDataInit>:
 8001524:	480b      	ldr	r0, [pc, #44]	; (8001554 <LoopForever+0xa>)
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <LoopForever+0xe>)
 8001528:	1842      	adds	r2, r0, r1
 800152a:	429a      	cmp	r2, r3
 800152c:	d3f6      	bcc.n	800151c <CopyDataInit>
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <LoopForever+0x12>)
 8001530:	e002      	b.n	8001538 <LoopFillZerobss>

08001532 <FillZerobss>:
 8001532:	2300      	movs	r3, #0
 8001534:	f842 3b04 	str.w	r3, [r2], #4

08001538 <LoopFillZerobss>:
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <LoopForever+0x16>)
 800153a:	429a      	cmp	r2, r3
 800153c:	d3f9      	bcc.n	8001532 <FillZerobss>
 800153e:	f7ff ffb3 	bl	80014a8 <SystemInit>
 8001542:	f006 f8ab 	bl	800769c <__libc_init_array>
 8001546:	f7fe ffe5 	bl	8000514 <main>

0800154a <LoopForever>:
 800154a:	e7fe      	b.n	800154a <LoopForever>
 800154c:	20018000 	.word	0x20018000
 8001550:	08007900 	.word	0x08007900
 8001554:	20000000 	.word	0x20000000
 8001558:	20000010 	.word	0x20000010
 800155c:	20000010 	.word	0x20000010
 8001560:	200016b4 	.word	0x200016b4

08001564 <ADC1_2_IRQHandler>:
 8001564:	e7fe      	b.n	8001564 <ADC1_2_IRQHandler>

08001566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f8fe 	bl	8001772 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff ff1c 	bl	80013b4 <HAL_InitTick>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e001      	b.n	800158c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001588:	f7ff fcca 	bl	8000f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158c:	79fb      	ldrb	r3, [r7, #7]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x1c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_IncTick+0x20>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_IncTick+0x1c>)
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	200016b0 	.word	0x200016b0
 80015b8:	20000008 	.word	0x20000008

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200016b0 	.word	0x200016b0

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d004      	beq.n	80015f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_Delay+0x40>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015f8:	bf00      	nop
 80015fa:	f7ff ffdf 	bl	80015bc <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	429a      	cmp	r2, r3
 8001608:	d8f7      	bhi.n	80015fa <HAL_Delay+0x26>
  {
  }
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008

08001618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff4c 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800179a:	f7ff ff61 	bl	8001660 <__NVIC_GetPriorityGrouping>
 800179e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	6978      	ldr	r0, [r7, #20]
 80017a6:	f7ff ffb1 	bl	800170c <NVIC_EncodePriority>
 80017aa:	4602      	mov	r2, r0
 80017ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff80 	bl	80016b8 <__NVIC_SetPriority>
}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff54 	bl	800167c <__NVIC_EnableIRQ>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0ac      	b.n	8001948 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f8b2 	bl	800195c <DFSDM_GetChannelFromInstance>
 80017f8:	4602      	mov	r2, r0
 80017fa:	4b55      	ldr	r3, [pc, #340]	; (8001950 <HAL_DFSDM_ChannelInit+0x174>)
 80017fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e09f      	b.n	8001948 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fbb1 	bl	8000f70 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_DFSDM_ChannelInit+0x178>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	4a4f      	ldr	r2, [pc, #316]	; (8001954 <HAL_DFSDM_ChannelInit+0x178>)
 8001816:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001818:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <HAL_DFSDM_ChannelInit+0x178>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d125      	bne.n	800186c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001820:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 8001826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800182a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800182c:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4948      	ldr	r1, [pc, #288]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a46      	ldr	r2, [pc, #280]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 8001840:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001844:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d108      	bne.n	8001860 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	3b01      	subs	r3, #1
 8001858:	041b      	lsls	r3, r3, #16
 800185a:	493f      	ldr	r1, [pc, #252]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001860:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a3c      	ldr	r2, [pc, #240]	; (8001958 <HAL_DFSDM_ChannelInit+0x17c>)
 8001866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800186a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800187a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800188a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001890:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 020f 	bic.w	r2, r2, #15
 80018a8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80018d0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	3b01      	subs	r3, #1
 80018e2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f002 0207 	and.w	r2, r2, #7
 80018fc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001928:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f810 	bl	800195c <DFSDM_GetChannelFromInstance>
 800193c:	4601      	mov	r1, r0
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_DFSDM_ChannelInit+0x174>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000288 	.word	0x20000288
 8001954:	20000284 	.word	0x20000284
 8001958:	40016000 	.word	0x40016000

0800195c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a20      	ldr	r2, [pc, #128]	; (80019e8 <DFSDM_GetChannelFromInstance+0x8c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d102      	bne.n	8001972 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e032      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <DFSDM_GetChannelFromInstance+0x90>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d102      	bne.n	8001980 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800197a:	2301      	movs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e02b      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a1b      	ldr	r2, [pc, #108]	; (80019f0 <DFSDM_GetChannelFromInstance+0x94>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d102      	bne.n	800198e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001988:	2302      	movs	r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e024      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <DFSDM_GetChannelFromInstance+0x98>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d102      	bne.n	800199c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8001996:	2303      	movs	r3, #3
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	e01d      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a16      	ldr	r2, [pc, #88]	; (80019f8 <DFSDM_GetChannelFromInstance+0x9c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d102      	bne.n	80019aa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80019a4:	2304      	movs	r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e016      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <DFSDM_GetChannelFromInstance+0xa0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d102      	bne.n	80019b8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80019b2:	2305      	movs	r3, #5
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e00f      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <DFSDM_GetChannelFromInstance+0xa4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d102      	bne.n	80019c6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80019c0:	2306      	movs	r3, #6
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e008      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <DFSDM_GetChannelFromInstance+0xa8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d102      	bne.n	80019d4 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 80019ce:	2307      	movs	r3, #7
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e001      	b.n	80019d8 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80019d8:	68fb      	ldr	r3, [r7, #12]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40016000 	.word	0x40016000
 80019ec:	40016020 	.word	0x40016020
 80019f0:	40016040 	.word	0x40016040
 80019f4:	40016060 	.word	0x40016060
 80019f8:	40016080 	.word	0x40016080
 80019fc:	400160a0 	.word	0x400160a0
 8001a00:	400160c0 	.word	0x400160c0
 8001a04:	400160e0 	.word	0x400160e0

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e17f      	b.n	8001d18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8171 	beq.w	8001d12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x38>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b12      	cmp	r3, #18
 8001a3e:	d123      	bne.n	8001a88 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	220f      	movs	r2, #15
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	08da      	lsrs	r2, r3, #3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3208      	adds	r2, #8
 8001a82:	6939      	ldr	r1, [r7, #16]
 8001a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d00b      	beq.n	8001adc <HAL_GPIO_Init+0xd4>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d007      	beq.n	8001adc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ad0:	2b11      	cmp	r3, #17
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b12      	cmp	r3, #18
 8001ada:	d130      	bne.n	8001b3e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b12:	2201      	movs	r2, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	f003 0201 	and.w	r2, r3, #1
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d118      	bne.n	8001b7c <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80ac 	beq.w	8001d12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_GPIO_Init+0x32c>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_GPIO_Init+0x32c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc6:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_GPIO_Init+0x32c>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd2:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <HAL_GPIO_Init+0x330>)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfc:	d025      	beq.n	8001c4a <HAL_GPIO_Init+0x242>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <HAL_GPIO_Init+0x334>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <HAL_GPIO_Init+0x23e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_GPIO_Init+0x338>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d019      	beq.n	8001c42 <HAL_GPIO_Init+0x23a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_GPIO_Init+0x33c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x236>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_GPIO_Init+0x340>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x232>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <HAL_GPIO_Init+0x344>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x22e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <HAL_GPIO_Init+0x348>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x22a>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e00c      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c32:	2307      	movs	r3, #7
 8001c34:	e00a      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x244>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c5c:	4936      	ldr	r1, [pc, #216]	; (8001d38 <HAL_GPIO_Init+0x330>)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c8e:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c94:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_GPIO_Init+0x34c>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f47f ae78 	bne.w	8001a18 <HAL_GPIO_Init+0x10>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	48000800 	.word	0x48000800
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	48001000 	.word	0x48001000
 8001d4c:	48001400 	.word	0x48001400
 8001d50:	48001800 	.word	0x48001800
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da4:	e002      	b.n	8001dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e081      	b.n	8001ece <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d106      	bne.n	8001de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f90a 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2224      	movs	r2, #36	; 0x24
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e006      	b.n	8001e40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d104      	bne.n	8001e52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e64:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e74:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	ea42 0103 	orr.w	r1, r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	021a      	lsls	r2, r3, #8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69d9      	ldr	r1, [r3, #28]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d138      	bne.n	8001f5e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e032      	b.n	8001f60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2224      	movs	r2, #36	; 0x24
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f28:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
  }
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d139      	bne.n	8001ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e033      	b.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
  }
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	b08f      	sub	sp, #60	; 0x3c
 8002008:	af0a      	add	r7, sp, #40	; 0x28
 800200a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e116      	b.n	8002244 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff f953 	bl	80012dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2203      	movs	r2, #3
 800203a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f002 fd84 	bl	8004b62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	687e      	ldr	r6, [r7, #4]
 8002062:	466d      	mov	r5, sp
 8002064:	f106 0410 	add.w	r4, r6, #16
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002074:	e885 0003 	stmia.w	r5, {r0, r1}
 8002078:	1d33      	adds	r3, r6, #4
 800207a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800207c:	6838      	ldr	r0, [r7, #0]
 800207e:	f002 fd1e 	bl	8004abe <USB_CoreInit>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0d7      	b.n	8002244 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fd72 	bl	8004b84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e04a      	b.n	800213c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	333d      	adds	r3, #61	; 0x3d
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	333c      	adds	r3, #60	; 0x3c
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	b298      	uxth	r0, r3
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	3342      	adds	r3, #66	; 0x42
 80020e2:	4602      	mov	r2, r0
 80020e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	333f      	adds	r3, #63	; 0x3f
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020fa:	7bfa      	ldrb	r2, [r7, #15]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3344      	adds	r3, #68	; 0x44
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3348      	adds	r3, #72	; 0x48
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3350      	adds	r3, #80	; 0x50
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	3301      	adds	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3af      	bcc.n	80020a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e044      	b.n	80021d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	1a9b      	subs	r3, r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	3301      	adds	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	7bfa      	ldrb	r2, [r7, #15]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3b5      	bcc.n	800214c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	603b      	str	r3, [r7, #0]
 80021e6:	687e      	ldr	r6, [r7, #4]
 80021e8:	466d      	mov	r5, sp
 80021ea:	f106 0410 	add.w	r4, r6, #16
 80021ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80021fe:	1d33      	adds	r3, r6, #4
 8002200:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f002 fce8 	bl	8004bd8 <USB_DevInit>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e014      	b.n	8002244 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f80a 	bl	800224c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fe6e 	bl	8004f1e <USB_DevDisconnect>

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800224c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	f043 0303 	orr.w	r3, r3, #3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_PWREx_GetVoltageRange+0x18>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007000 	.word	0x40007000

080022b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d130      	bne.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022cc:	d038      	beq.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d6:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2232      	movs	r2, #50	; 0x32
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	4a1b      	ldr	r2, [pc, #108]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9b      	lsrs	r3, r3, #18
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f4:	e002      	b.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	3b01      	subs	r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d102      	bne.n	8002310 <HAL_PWREx_ControlVoltageScaling+0x60>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f2      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d110      	bne.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e00f      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d007      	beq.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000
 8002354:	20000000 	.word	0x20000000
 8002358:	431bde83 	.word	0x431bde83

0800235c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800236a:	6053      	str	r3, [r2, #4]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff f91a 	bl	80015bc <HAL_GetTick>
 8002388:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e06f      	b.n	8002474 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_QSPI_Init+0x28>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e067      	b.n	8002474 <HAL_QSPI_Init+0xf8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10b      	bne.n	80023d0 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe fe5d 	bl	8001080 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80023c6:	f241 3188 	movw	r1, #5000	; 0x1388
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f858 	bl	8002480 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	3b01      	subs	r3, #1
 80023e0:	021a      	lsls	r2, r3, #8
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	2120      	movs	r1, #32
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f850 	bl	800249c <QSPI_WaitFlagStateUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002400:	7afb      	ldrb	r3, [r7, #11]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d131      	bne.n	800246a <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002410:	f023 0310 	bic.w	r3, r3, #16
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6852      	ldr	r2, [r2, #4]
 8002418:	0611      	lsls	r1, r2, #24
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	4311      	orrs	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_QSPI_Init+0x100>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6912      	ldr	r2, [r2, #16]
 8002436:	0411      	lsls	r1, r2, #16
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6952      	ldr	r2, [r2, #20]
 800243c:	4311      	orrs	r1, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6992      	ldr	r2, [r2, #24]
 8002442:	4311      	orrs	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002472:	7afb      	ldrb	r3, [r7, #11]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffe0f8fe 	.word	0xffe0f8fe

08002480 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024ac:	e01a      	b.n	80024e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d016      	beq.n	80024e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7ff f881 	bl	80015bc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2204      	movs	r2, #4
 80024d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	f043 0201 	orr.w	r2, r3, #1
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e00e      	b.n	8002502 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf14      	ite	ne
 80024f2:	2301      	movne	r3, #1
 80024f4:	2300      	moveq	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1d6      	bne.n	80024ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e39d      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251e:	4ba4      	ldr	r3, [pc, #656]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002528:	4ba1      	ldr	r3, [pc, #644]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80e1 	beq.w	8002702 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_RCC_OscConfig+0x4a>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	f040 8088 	bne.w	800265e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b01      	cmp	r3, #1
 8002552:	f040 8084 	bne.w	800265e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002556:	4b96      	ldr	r3, [pc, #600]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x62>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e375      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	4b8f      	ldr	r3, [pc, #572]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_RCC_OscConfig+0x7c>
 800257e:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002586:	e005      	b.n	8002594 <HAL_RCC_OscConfig+0x88>
 8002588:	4b89      	ldr	r3, [pc, #548]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002594:	4293      	cmp	r3, r2
 8002596:	d223      	bcs.n	80025e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fd3b 	bl	8003018 <RCC_SetFlashLatencyFromMSIRange>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e356      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ac:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7f      	ldr	r2, [pc, #508]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025b2:	f043 0308 	orr.w	r3, r3, #8
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b7d      	ldr	r3, [pc, #500]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	497a      	ldr	r1, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ca:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	4975      	ldr	r1, [pc, #468]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
 80025de:	e022      	b.n	8002626 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e0:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a72      	ldr	r2, [pc, #456]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025e6:	f043 0308 	orr.w	r3, r3, #8
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	496d      	ldr	r1, [pc, #436]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fe:	4b6c      	ldr	r3, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	4968      	ldr	r1, [pc, #416]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fcfe 	bl	8003018 <RCC_SetFlashLatencyFromMSIRange>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e319      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002626:	f000 fc03 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 800262a:	4601      	mov	r1, r0
 800262c:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a5f      	ldr	r2, [pc, #380]	; (80027b4 <HAL_RCC_OscConfig+0x2a8>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	fa21 f303 	lsr.w	r3, r1, r3
 8002642:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002646:	4b5d      	ldr	r3, [pc, #372]	; (80027bc <HAL_RCC_OscConfig+0x2b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe feb2 	bl	80013b4 <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
 8002652:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d052      	beq.n	8002700 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	e2fd      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d032      	beq.n	80026cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002666:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a51      	ldr	r2, [pc, #324]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002672:	f7fe ffa3 	bl	80015bc <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800267a:	f7fe ff9f 	bl	80015bc <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e2e6      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800268c:	4b48      	ldr	r3, [pc, #288]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a44      	ldr	r2, [pc, #272]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800269e:	f043 0308 	orr.w	r3, r3, #8
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	493f      	ldr	r1, [pc, #252]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	493a      	ldr	r1, [pc, #232]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
 80026ca:	e01a      	b.n	8002702 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d8:	f7fe ff70 	bl	80015bc <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e0:	f7fe ff6c 	bl	80015bc <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e2b3      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1d4>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d074      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x214>
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d10e      	bne.n	8002738 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d064      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2ea>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d160      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e290      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x244>
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0x280>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x268>
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x280>
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_RCC_OscConfig+0x2a4>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01c      	beq.n	80027ce <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe ff12 	bl	80015bc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800279a:	e011      	b.n	80027c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe ff0e 	bl	80015bc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d90a      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e255      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	080078a8 	.word	0x080078a8
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c0:	4bae      	ldr	r3, [pc, #696]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0e7      	beq.n	800279c <HAL_RCC_OscConfig+0x290>
 80027cc:	e014      	b.n	80027f8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe fef5 	bl	80015bc <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d6:	f7fe fef1 	bl	80015bc <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e238      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e8:	4ba4      	ldr	r3, [pc, #656]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2ca>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d060      	beq.n	80028c6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x30a>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d119      	bne.n	8002844 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002816:	4b99      	ldr	r3, [pc, #612]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x322>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e215      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b93      	ldr	r3, [pc, #588]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	498f      	ldr	r1, [pc, #572]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002842:	e040      	b.n	80028c6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b8b      	ldr	r3, [pc, #556]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a8a      	ldr	r2, [pc, #552]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe feb0 	bl	80015bc <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7fe feac 	bl	80015bc <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1f3      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002872:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b7f      	ldr	r3, [pc, #508]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	061b      	lsls	r3, r3, #24
 800288c:	497b      	ldr	r1, [pc, #492]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002894:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a78      	ldr	r2, [pc, #480]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 800289a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fe8c 	bl	80015bc <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7fe fe88 	bl	80015bc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1cf      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ba:	4b70      	ldr	r3, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d03c      	beq.n	800294c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01c      	beq.n	8002914 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e0:	4a66      	ldr	r2, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7fe fe67 	bl	80015bc <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe fe63 	bl	80015bc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1aa      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002904:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0ef      	beq.n	80028f2 <HAL_RCC_OscConfig+0x3e6>
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291a:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fe4a 	bl	80015bc <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe fe46 	bl	80015bc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e18d      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800293e:	4b4f      	ldr	r3, [pc, #316]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ef      	bne.n	800292c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80a5 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <HAL_RCC_OscConfig+0x574>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_OscConfig+0x574>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <HAL_RCC_OscConfig+0x574>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7fe fe0d 	bl	80015bc <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7fe fe09 	bl	80015bc <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e150      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b8:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_RCC_OscConfig+0x574>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d108      	bne.n	80029de <HAL_RCC_OscConfig+0x4d2>
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029dc:	e024      	b.n	8002a28 <HAL_RCC_OscConfig+0x51c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d110      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4fc>
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	4a23      	ldr	r2, [pc, #140]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a06:	e00f      	b.n	8002a28 <HAL_RCC_OscConfig+0x51c>
 8002a08:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d016      	beq.n	8002a5e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fdc4 	bl	80015bc <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fdc0 	bl	80015bc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e105      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_OscConfig+0x570>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ed      	beq.n	8002a38 <HAL_RCC_OscConfig+0x52c>
 8002a5c:	e019      	b.n	8002a92 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fdad 	bl	80015bc <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a64:	e00e      	b.n	8002a84 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fda9 	bl	80015bc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d905      	bls.n	8002a84 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0ee      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a84:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e9      	bne.n	8002a66 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a98:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	4a71      	ldr	r2, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80d5 	beq.w	8002c58 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b0c      	cmp	r3, #12
 8002ab2:	f000 808e 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d15b      	bne.n	8002b76 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b69      	ldr	r3, [pc, #420]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a68      	ldr	r2, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fd77 	bl	80015bc <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad2:	f7fe fd73 	bl	80015bc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e0ba      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af0:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <HAL_RCC_OscConfig+0x75c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b00:	3a01      	subs	r2, #1
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	4311      	orrs	r1, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b0a:	0212      	lsls	r2, r2, #8
 8002b0c:	4311      	orrs	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b12:	0852      	lsrs	r2, r2, #1
 8002b14:	3a01      	subs	r2, #1
 8002b16:	0552      	lsls	r2, r2, #21
 8002b18:	4311      	orrs	r1, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b1e:	0852      	lsrs	r2, r2, #1
 8002b20:	3a01      	subs	r2, #1
 8002b22:	0652      	lsls	r2, r2, #25
 8002b24:	4311      	orrs	r1, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b2a:	0912      	lsrs	r2, r2, #4
 8002b2c:	0452      	lsls	r2, r2, #17
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	494c      	ldr	r1, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b36:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b40:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b42:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a47      	ldr	r2, [pc, #284]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fd35 	bl	80015bc <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7fe fd31 	bl	80015bc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e078      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b68:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x64a>
 8002b74:	e070      	b.n	8002c58 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3a      	ldr	r2, [pc, #232]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b82:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b8e:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b94:	f023 0303 	bic.w	r3, r3, #3
 8002b98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002ba0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe fd07 	bl	80015bc <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7fe fd03 	bl	80015bc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e04a      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x6a6>
 8002bd0:	e042      	b.n	8002c58 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e03d      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002bde:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_RCC_OscConfig+0x758>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0203 	and.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d130      	bne.n	8002c54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d127      	bne.n	8002c54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d11f      	bne.n	8002c54 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c1e:	2a07      	cmp	r2, #7
 8002c20:	bf14      	ite	ne
 8002c22:	2201      	movne	r2, #1
 8002c24:	2200      	moveq	r2, #0
 8002c26:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d113      	bne.n	8002c54 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	f99d808c 	.word	0xf99d808c

08002c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0c8      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d910      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 0207 	bic.w	r2, r3, #7
 8002c96:	4961      	ldr	r1, [pc, #388]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0b0      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d04c      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc4:	4b56      	ldr	r3, [pc, #344]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d121      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e09e      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cdc:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d115      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e092      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e086      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e07e      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 0203 	bic.w	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	493f      	ldr	r1, [pc, #252]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d26:	f7fe fc49 	bl	80015bc <HAL_GetTick>
 8002d2a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2e:	f7fe fc45 	bl	80015bc <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e066      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 020c 	and.w	r2, r3, #12
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d1eb      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	492c      	ldr	r1, [pc, #176]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d210      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0207 	bic.w	r2, r3, #7
 8002d8a:	4924      	ldr	r1, [pc, #144]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <HAL_RCC_ClockConfig+0x1b0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e036      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4918      	ldr	r1, [pc, #96]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d009      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4910      	ldr	r1, [pc, #64]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002de2:	f000 f825 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002de6:	4601      	mov	r1, r0
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_RCC_ClockConfig+0x1b4>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	4a0c      	ldr	r2, [pc, #48]	; (8002e24 <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fad4 	bl	80013b4 <HAL_InitTick>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e10:	7afb      	ldrb	r3, [r7, #11]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40022000 	.word	0x40022000
 8002e20:	40021000 	.word	0x40021000
 8002e24:	080078a8 	.word	0x080078a8
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e48:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d11e      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e64:	4b33      	ldr	r3, [pc, #204]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e70:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e76:	0a1b      	lsrs	r3, r3, #8
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	e005      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e80:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e8c:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d102      	bne.n	8002eae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	e004      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d101      	bne.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb4:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d133      	bne.n	8002f26 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0xa4>
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0xaa>
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ed6:	617b      	str	r3, [r7, #20]
      break;
 8002ed8:	e005      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x110>)
 8002edc:	617b      	str	r3, [r7, #20]
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	617b      	str	r3, [r7, #20]
      break;
 8002ee4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	fb02 f203 	mul.w	r2, r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0e5b      	lsrs	r3, r3, #25
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f26:	69bb      	ldr	r3, [r7, #24]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3724      	adds	r7, #36	; 0x24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40021000 	.word	0x40021000
 8002f38:	080078c0 	.word	0x080078c0
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	007a1200 	.word	0x007a1200

08002f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000000 	.word	0x20000000

08002f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f60:	f7ff fff0 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f64:	4601      	mov	r1, r0
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	080078b8 	.word	0x080078b8

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f8c:	f7ff ffda 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f90:	4601      	mov	r1, r0
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	0adb      	lsrs	r3, r3, #11
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	080078b8 	.word	0x080078b8

08002fb4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	220f      	movs	r2, #15
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_GetClockConfig+0x5c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCC_GetClockConfig+0x60>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0207 	and.w	r2, r3, #7
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	40022000 	.word	0x40022000

08003018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003020:	2300      	movs	r3, #0
 8003022:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003024:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003030:	f7ff f930 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 8003034:	6178      	str	r0, [r7, #20]
 8003036:	e014      	b.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003042:	6593      	str	r3, [r2, #88]	; 0x58
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003050:	f7ff f920 	bl	8002294 <HAL_PWREx_GetVoltageRange>
 8003054:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003060:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003068:	d10b      	bne.n	8003082 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b80      	cmp	r3, #128	; 0x80
 800306e:	d919      	bls.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2ba0      	cmp	r3, #160	; 0xa0
 8003074:	d902      	bls.n	800307c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003076:	2302      	movs	r3, #2
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e013      	b.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	e010      	b.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d902      	bls.n	800308e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003088:	2303      	movs	r3, #3
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e00a      	b.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b80      	cmp	r3, #128	; 0x80
 8003092:	d102      	bne.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003094:	2302      	movs	r3, #2
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e004      	b.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b70      	cmp	r3, #112	; 0x70
 800309e:	d101      	bne.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030a0:	2301      	movs	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 0207 	bic.w	r2, r3, #7
 80030ac:	4909      	ldr	r1, [pc, #36]	; (80030d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d001      	beq.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40022000 	.word	0x40022000

080030d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030e0:	2300      	movs	r3, #0
 80030e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030e4:	2300      	movs	r3, #0
 80030e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d03f      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fc:	d01c      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80030fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003102:	d802      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003108:	e01f      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800310a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800310e:	d003      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003110:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003114:	d01c      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003116:	e018      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003118:	4b85      	ldr	r3, [pc, #532]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a84      	ldr	r2, [pc, #528]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003122:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003124:	e015      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fab9 	bl	80036a4 <RCCEx_PLLSAI1_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003136:	e00c      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3320      	adds	r3, #32
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fba0 	bl	8003884 <RCCEx_PLLSAI2_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	74fb      	strb	r3, [r7, #19]
      break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003158:	4b75      	ldr	r3, [pc, #468]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003166:	4972      	ldr	r1, [pc, #456]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800316e:	e001      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d03f      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003188:	d01c      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800318a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800318e:	d802      	bhi.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003194:	e01f      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800319a:	d003      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800319c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031a0:	d01c      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80031a2:	e018      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031a4:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a61      	ldr	r2, [pc, #388]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b0:	e015      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa73 	bl	80036a4 <RCCEx_PLLSAI1_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c2:	e00c      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3320      	adds	r3, #32
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fb5a 	bl	8003884 <RCCEx_PLLSAI2_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	74fb      	strb	r3, [r7, #19]
      break;
 80031da:	e000      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10b      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031e4:	4b52      	ldr	r3, [pc, #328]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f2:	494f      	ldr	r1, [pc, #316]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031fa:	e001      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80a0 	beq.w	800334e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003212:	4b47      	ldr	r3, [pc, #284]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003222:	2300      	movs	r3, #0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00d      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b41      	ldr	r3, [pc, #260]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	4a40      	ldr	r2, [pc, #256]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003232:	6593      	str	r3, [r2, #88]	; 0x58
 8003234:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003240:	2301      	movs	r3, #1
 8003242:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003244:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003250:	f7fe f9b4 	bl	80015bc <HAL_GetTick>
 8003254:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003256:	e009      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003258:	f7fe f9b0 	bl	80015bc <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d902      	bls.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	74fb      	strb	r3, [r7, #19]
        break;
 800326a:	e005      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0ef      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d15c      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003288:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01f      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	d019      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800329c:	4b24      	ldr	r3, [pc, #144]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032a8:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a20      	ldr	r2, [pc, #128]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe f96f 	bl	80015bc <HAL_GetTick>
 80032de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e0:	e00b      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe f96b 	bl	80015bc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d902      	bls.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	74fb      	strb	r3, [r7, #19]
            break;
 80032f8:	e006      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0ec      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10c      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003326:	e009      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
 800332c:	e006      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800333c:	7c7b      	ldrb	r3, [r7, #17]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d105      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003342:	4b9e      	ldr	r3, [pc, #632]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	4a9d      	ldr	r2, [pc, #628]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335a:	4b98      	ldr	r3, [pc, #608]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f023 0203 	bic.w	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	4994      	ldr	r1, [pc, #592]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 020c 	bic.w	r2, r3, #12
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	498c      	ldr	r1, [pc, #560]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800339e:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	4983      	ldr	r1, [pc, #524]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c0:	4b7e      	ldr	r3, [pc, #504]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	497b      	ldr	r1, [pc, #492]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e2:	4b76      	ldr	r3, [pc, #472]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f0:	4972      	ldr	r1, [pc, #456]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003404:	4b6d      	ldr	r3, [pc, #436]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	496a      	ldr	r1, [pc, #424]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003426:	4b65      	ldr	r3, [pc, #404]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	4961      	ldr	r1, [pc, #388]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003448:	4b5c      	ldr	r3, [pc, #368]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	4959      	ldr	r1, [pc, #356]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800346a:	4b54      	ldr	r3, [pc, #336]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800346c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003470:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	4950      	ldr	r1, [pc, #320]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800348c:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	4948      	ldr	r1, [pc, #288]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	493f      	ldr	r1, [pc, #252]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d028      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034d0:	4b3a      	ldr	r3, [pc, #232]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034de:	4937      	ldr	r1, [pc, #220]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ee:	d106      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f0:	4b32      	ldr	r3, [pc, #200]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a31      	ldr	r2, [pc, #196]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fa:	60d3      	str	r3, [r2, #12]
 80034fc:	e011      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003502:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003506:	d10c      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f8c8 	bl	80036a4 <RCCEx_PLLSAI1_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003518:	7cfb      	ldrb	r3, [r7, #19]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d028      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	491f      	ldr	r1, [pc, #124]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354c:	d106      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800354e:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003558:	60d3      	str	r3, [r2, #12]
 800355a:	e011      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3304      	adds	r3, #4
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f899 	bl	80036a4 <RCCEx_PLLSAI1_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d02b      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359a:	4908      	ldr	r1, [pc, #32]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035aa:	d109      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a02      	ldr	r2, [pc, #8]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b6:	60d3      	str	r3, [r2, #12]
 80035b8:	e014      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2101      	movs	r1, #1
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f867 	bl	80036a4 <RCCEx_PLLSAI1_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02f      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f0:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fe:	4928      	ldr	r1, [pc, #160]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800360a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360e:	d10d      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f844 	bl	80036a4 <RCCEx_PLLSAI1_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d014      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003626:	7cfb      	ldrb	r3, [r7, #19]
 8003628:	74bb      	strb	r3, [r7, #18]
 800362a:	e011      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003634:	d10c      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3320      	adds	r3, #32
 800363a:	2102      	movs	r1, #2
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f921 	bl	8003884 <RCCEx_PLLSAI2_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800366a:	490d      	ldr	r1, [pc, #52]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368e:	4904      	ldr	r1, [pc, #16]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003696:	7cbb      	ldrb	r3, [r7, #18]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000

080036a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036b2:	4b73      	ldr	r3, [pc, #460]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d018      	beq.n	80036f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036be:	4b70      	ldr	r3, [pc, #448]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0203 	and.w	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d10d      	bne.n	80036ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
       ||
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036d6:	4b6a      	ldr	r3, [pc, #424]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
       ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d044      	beq.n	8003774 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
 80036ee:	e041      	b.n	8003774 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d00c      	beq.n	8003712 <RCCEx_PLLSAI1_Config+0x6e>
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d013      	beq.n	8003724 <RCCEx_PLLSAI1_Config+0x80>
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d120      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003700:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11d      	bne.n	8003748 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e01a      	b.n	8003748 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003712:	4b5b      	ldr	r3, [pc, #364]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003722:	e013      	b.n	800374c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003724:	4b56      	ldr	r3, [pc, #344]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10f      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003740:	e006      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      break;
 8003746:	e004      	b.n	8003752 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003748:	bf00      	nop
 800374a:	e002      	b.n	8003752 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800374c:	bf00      	nop
 800374e:	e000      	b.n	8003752 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003750:	bf00      	nop
    }

    if(status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10d      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003758:	4b49      	ldr	r3, [pc, #292]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	3b01      	subs	r3, #1
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	430b      	orrs	r3, r1
 800376e:	4944      	ldr	r1, [pc, #272]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d17d      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800377a:	4b41      	ldr	r3, [pc, #260]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a40      	ldr	r2, [pc, #256]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003786:	f7fd ff19 	bl	80015bc <HAL_GetTick>
 800378a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378c:	e009      	b.n	80037a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800378e:	f7fd ff15 	bl	80015bc <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d902      	bls.n	80037a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	73fb      	strb	r3, [r7, #15]
        break;
 80037a0:	e005      	b.n	80037ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a2:	4b37      	ldr	r3, [pc, #220]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1ef      	bne.n	800378e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d160      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d111      	bne.n	80037de <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ba:	4b31      	ldr	r3, [pc, #196]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	0211      	lsls	r1, r2, #8
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	68d2      	ldr	r2, [r2, #12]
 80037d0:	0912      	lsrs	r2, r2, #4
 80037d2:	0452      	lsls	r2, r2, #17
 80037d4:	430a      	orrs	r2, r1
 80037d6:	492a      	ldr	r1, [pc, #168]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	610b      	str	r3, [r1, #16]
 80037dc:	e027      	b.n	800382e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d112      	bne.n	800380a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e4:	4b26      	ldr	r3, [pc, #152]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6912      	ldr	r2, [r2, #16]
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	3a01      	subs	r2, #1
 80037fe:	0552      	lsls	r2, r2, #21
 8003800:	430a      	orrs	r2, r1
 8003802:	491f      	ldr	r1, [pc, #124]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	610b      	str	r3, [r1, #16]
 8003808:	e011      	b.n	800382e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003812:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6892      	ldr	r2, [r2, #8]
 800381a:	0211      	lsls	r1, r2, #8
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6952      	ldr	r2, [r2, #20]
 8003820:	0852      	lsrs	r2, r2, #1
 8003822:	3a01      	subs	r2, #1
 8003824:	0652      	lsls	r2, r2, #25
 8003826:	430a      	orrs	r2, r1
 8003828:	4915      	ldr	r1, [pc, #84]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003838:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fd febf 	bl	80015bc <HAL_GetTick>
 800383e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003840:	e009      	b.n	8003856 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003842:	f7fd febb 	bl	80015bc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d902      	bls.n	8003856 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	73fb      	strb	r3, [r7, #15]
          break;
 8003854:	e005      	b.n	8003862 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ef      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d106      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	4903      	ldr	r1, [pc, #12]	; (8003880 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003876:	7bfb      	ldrb	r3, [r7, #15]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40021000 	.word	0x40021000

08003884 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003892:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10d      	bne.n	80038ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
       ||
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038b6:	4b5f      	ldr	r3, [pc, #380]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
       ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d044      	beq.n	8003954 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	e041      	b.n	8003954 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d00c      	beq.n	80038f2 <RCCEx_PLLSAI2_Config+0x6e>
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d013      	beq.n	8003904 <RCCEx_PLLSAI2_Config+0x80>
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d120      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e0:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11d      	bne.n	8003928 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f0:	e01a      	b.n	8003928 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f2:	4b50      	ldr	r3, [pc, #320]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003902:	e013      	b.n	800392c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003904:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10f      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003910:	4b48      	ldr	r3, [pc, #288]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003920:	e006      	b.n	8003930 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
      break;
 8003926:	e004      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003928:	bf00      	nop
 800392a:	e002      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800392c:	bf00      	nop
 800392e:	e000      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003930:	bf00      	nop
    }

    if(status == HAL_OK)
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003938:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	3b01      	subs	r3, #1
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	430b      	orrs	r3, r1
 800394e:	4939      	ldr	r1, [pc, #228]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d167      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a35      	ldr	r2, [pc, #212]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003966:	f7fd fe29 	bl	80015bc <HAL_GetTick>
 800396a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800396c:	e009      	b.n	8003982 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800396e:	f7fd fe25 	bl	80015bc <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d902      	bls.n	8003982 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	73fb      	strb	r3, [r7, #15]
        break;
 8003980:	e005      	b.n	800398e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ef      	bne.n	800396e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d14a      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d111      	bne.n	80039be <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	0211      	lsls	r1, r2, #8
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68d2      	ldr	r2, [r2, #12]
 80039b0:	0912      	lsrs	r2, r2, #4
 80039b2:	0452      	lsls	r2, r2, #17
 80039b4:	430a      	orrs	r2, r1
 80039b6:	491f      	ldr	r1, [pc, #124]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	614b      	str	r3, [r1, #20]
 80039bc:	e011      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6892      	ldr	r2, [r2, #8]
 80039ce:	0211      	lsls	r1, r2, #8
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6912      	ldr	r2, [r2, #16]
 80039d4:	0852      	lsrs	r2, r2, #1
 80039d6:	3a01      	subs	r2, #1
 80039d8:	0652      	lsls	r2, r2, #25
 80039da:	430a      	orrs	r2, r1
 80039dc:	4915      	ldr	r1, [pc, #84]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ee:	f7fd fde5 	bl	80015bc <HAL_GetTick>
 80039f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039f4:	e009      	b.n	8003a0a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039f6:	f7fd fde1 	bl	80015bc <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d902      	bls.n	8003a0a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	73fb      	strb	r3, [r7, #15]
          break;
 8003a08:	e005      	b.n	8003a16 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ef      	beq.n	80039f6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	4903      	ldr	r1, [pc, #12]	; (8003a34 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000

08003a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07c      	b.n	8003b44 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d106      	bne.n	8003a6a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd fb4f 	bl	8001108 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a8a:	d902      	bls.n	8003a92 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	e002      	b.n	8003a98 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aa0:	d007      	beq.n	8003ab2 <HAL_SPI_Init+0x7a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aaa:	d002      	beq.n	8003ab2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac2:	d903      	bls.n	8003acc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8003aca:	e002      	b.n	8003ad2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	ea42 0103 	orr.w	r1, r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	f003 0204 	and.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	ea42 0103 	orr.w	r1, r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e01d      	b.n	8003b9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f815 	bl	8003ba2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4610      	mov	r0, r2
 8003b8c:	f000 f986 	bl	8003e9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_TIM_Base_Start_IT+0x50>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d00b      	beq.n	8003bfa <HAL_TIM_Base_Start_IT+0x42>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d007      	beq.n	8003bfa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	00010007 	.word	0x00010007

08003c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0202 	mvn.w	r2, #2
 8003c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f905 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8f7 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f908 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0204 	mvn.w	r2, #4
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2202      	movs	r2, #2
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f8db 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8cd 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f8de 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0208 	mvn.w	r2, #8
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8b1 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8a3 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8b4 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0210 	mvn.w	r2, #16
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f887 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f879 	bl	8003e4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f88a 	bl	8003e72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0201 	mvn.w	r2, #1
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd f8ae 	bl	8000eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f914 	bl	8003fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d10e      	bne.n	8003dea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd6:	2b80      	cmp	r3, #128	; 0x80
 8003dd8:	d107      	bne.n	8003dea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f907 	bl	8003ff8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d10e      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d107      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f838 	bl	8003e86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d10e      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d107      	bne.n	8003e42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f06f 0220 	mvn.w	r2, #32
 8003e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f8c7 	bl	8003fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a40      	ldr	r2, [pc, #256]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d00f      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a3c      	ldr	r2, [pc, #240]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3b      	ldr	r2, [pc, #236]	; (8003fbc <TIM_Base_SetConfig+0x120>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3a      	ldr	r2, [pc, #232]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01f      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d01b      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2c      	ldr	r2, [pc, #176]	; (8003fb4 <TIM_Base_SetConfig+0x118>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d017      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2b      	ldr	r2, [pc, #172]	; (8003fb8 <TIM_Base_SetConfig+0x11c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <TIM_Base_SetConfig+0x120>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <TIM_Base_SetConfig+0x128>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <TIM_Base_SetConfig+0x12c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0x9a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <TIM_Base_SetConfig+0x130>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a10      	ldr	r2, [pc, #64]	; (8003fb0 <TIM_Base_SetConfig+0x114>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00f      	beq.n	8003f94 <TIM_Base_SetConfig+0xf8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <TIM_Base_SetConfig+0x124>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <TIM_Base_SetConfig+0xf8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <TIM_Base_SetConfig+0x128>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <TIM_Base_SetConfig+0xf8>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a10      	ldr	r2, [pc, #64]	; (8003fc8 <TIM_Base_SetConfig+0x12c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_Base_SetConfig+0xf8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <TIM_Base_SetConfig+0x130>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d103      	bne.n	8003f9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	615a      	str	r2, [r3, #20]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40014400 	.word	0x40014400
 8003fcc:	40014800 	.word	0x40014800

08003fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e040      	b.n	80040a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd f8ae 	bl	8001190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8c0 	bl	80041d0 <UART_SetConfig>
 8004050:	4603      	mov	r3, r0
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e022      	b.n	80040a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fbfc 	bl	8004860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fc83 	bl	80049a4 <UART_CheckIdleState>
 800409e:	4603      	mov	r3, r0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040bc:	2b20      	cmp	r3, #32
 80040be:	f040 8081 	bne.w	80041c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <HAL_UART_Transmit+0x26>
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e079      	b.n	80041c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_UART_Transmit+0x38>
 80040dc:	2302      	movs	r3, #2
 80040de:	e072      	b.n	80041c6 <HAL_UART_Transmit+0x11e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2221      	movs	r2, #33	; 0x21
 80040f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80040f4:	f7fd fa62 	bl	80015bc <HAL_GetTick>
 80040f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	88fa      	ldrh	r2, [r7, #6]
 80040fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	88fa      	ldrh	r2, [r7, #6]
 8004106:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004112:	d108      	bne.n	8004126 <HAL_UART_Transmit+0x7e>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	e003      	b.n	800412e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800412e:	e02d      	b.n	800418c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2200      	movs	r2, #0
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fc77 	bl	8004a2e <UART_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e03d      	b.n	80041c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	881a      	ldrh	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800415c:	b292      	uxth	r2, r2
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	3302      	adds	r3, #2
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e008      	b.n	800417a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	b292      	uxth	r2, r2
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1cb      	bne.n	8004130 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fc43 	bl	8004a2e <UART_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e009      	b.n	80041c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e000      	b.n	80041c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80041d4:	b088      	sub	sp, #32
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4bac      	ldr	r3, [pc, #688]	; (80044b8 <UART_SetConfig+0x2e8>)
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	69f9      	ldr	r1, [r7, #28]
 800420e:	430b      	orrs	r3, r1
 8004210:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4aa2      	ldr	r2, [pc, #648]	; (80044bc <UART_SetConfig+0x2ec>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	4313      	orrs	r3, r2
 8004240:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a99      	ldr	r2, [pc, #612]	; (80044c0 <UART_SetConfig+0x2f0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d121      	bne.n	80042a4 <UART_SetConfig+0xd4>
 8004260:	4b98      	ldr	r3, [pc, #608]	; (80044c4 <UART_SetConfig+0x2f4>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b03      	cmp	r3, #3
 800426c:	d816      	bhi.n	800429c <UART_SetConfig+0xcc>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0xa4>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	08004285 	.word	0x08004285
 8004278:	08004291 	.word	0x08004291
 800427c:	0800428b 	.word	0x0800428b
 8004280:	08004297 	.word	0x08004297
 8004284:	2301      	movs	r3, #1
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e0e8      	b.n	800445c <UART_SetConfig+0x28c>
 800428a:	2302      	movs	r3, #2
 800428c:	76fb      	strb	r3, [r7, #27]
 800428e:	e0e5      	b.n	800445c <UART_SetConfig+0x28c>
 8004290:	2304      	movs	r3, #4
 8004292:	76fb      	strb	r3, [r7, #27]
 8004294:	e0e2      	b.n	800445c <UART_SetConfig+0x28c>
 8004296:	2308      	movs	r3, #8
 8004298:	76fb      	strb	r3, [r7, #27]
 800429a:	e0df      	b.n	800445c <UART_SetConfig+0x28c>
 800429c:	2310      	movs	r3, #16
 800429e:	76fb      	strb	r3, [r7, #27]
 80042a0:	bf00      	nop
 80042a2:	e0db      	b.n	800445c <UART_SetConfig+0x28c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a87      	ldr	r2, [pc, #540]	; (80044c8 <UART_SetConfig+0x2f8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d134      	bne.n	8004318 <UART_SetConfig+0x148>
 80042ae:	4b85      	ldr	r3, [pc, #532]	; (80044c4 <UART_SetConfig+0x2f4>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d829      	bhi.n	8004310 <UART_SetConfig+0x140>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0xf4>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	08004311 	.word	0x08004311
 80042cc:	08004311 	.word	0x08004311
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004305 	.word	0x08004305
 80042d8:	08004311 	.word	0x08004311
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004311 	.word	0x08004311
 80042e4:	080042ff 	.word	0x080042ff
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004311 	.word	0x08004311
 80042f0:	08004311 	.word	0x08004311
 80042f4:	0800430b 	.word	0x0800430b
 80042f8:	2300      	movs	r3, #0
 80042fa:	76fb      	strb	r3, [r7, #27]
 80042fc:	e0ae      	b.n	800445c <UART_SetConfig+0x28c>
 80042fe:	2302      	movs	r3, #2
 8004300:	76fb      	strb	r3, [r7, #27]
 8004302:	e0ab      	b.n	800445c <UART_SetConfig+0x28c>
 8004304:	2304      	movs	r3, #4
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e0a8      	b.n	800445c <UART_SetConfig+0x28c>
 800430a:	2308      	movs	r3, #8
 800430c:	76fb      	strb	r3, [r7, #27]
 800430e:	e0a5      	b.n	800445c <UART_SetConfig+0x28c>
 8004310:	2310      	movs	r3, #16
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	bf00      	nop
 8004316:	e0a1      	b.n	800445c <UART_SetConfig+0x28c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6b      	ldr	r2, [pc, #428]	; (80044cc <UART_SetConfig+0x2fc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d120      	bne.n	8004364 <UART_SetConfig+0x194>
 8004322:	4b68      	ldr	r3, [pc, #416]	; (80044c4 <UART_SetConfig+0x2f4>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800432c:	2b10      	cmp	r3, #16
 800432e:	d00f      	beq.n	8004350 <UART_SetConfig+0x180>
 8004330:	2b10      	cmp	r3, #16
 8004332:	d802      	bhi.n	800433a <UART_SetConfig+0x16a>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <UART_SetConfig+0x174>
 8004338:	e010      	b.n	800435c <UART_SetConfig+0x18c>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d005      	beq.n	800434a <UART_SetConfig+0x17a>
 800433e:	2b30      	cmp	r3, #48	; 0x30
 8004340:	d009      	beq.n	8004356 <UART_SetConfig+0x186>
 8004342:	e00b      	b.n	800435c <UART_SetConfig+0x18c>
 8004344:	2300      	movs	r3, #0
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	e088      	b.n	800445c <UART_SetConfig+0x28c>
 800434a:	2302      	movs	r3, #2
 800434c:	76fb      	strb	r3, [r7, #27]
 800434e:	e085      	b.n	800445c <UART_SetConfig+0x28c>
 8004350:	2304      	movs	r3, #4
 8004352:	76fb      	strb	r3, [r7, #27]
 8004354:	e082      	b.n	800445c <UART_SetConfig+0x28c>
 8004356:	2308      	movs	r3, #8
 8004358:	76fb      	strb	r3, [r7, #27]
 800435a:	e07f      	b.n	800445c <UART_SetConfig+0x28c>
 800435c:	2310      	movs	r3, #16
 800435e:	76fb      	strb	r3, [r7, #27]
 8004360:	bf00      	nop
 8004362:	e07b      	b.n	800445c <UART_SetConfig+0x28c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a59      	ldr	r2, [pc, #356]	; (80044d0 <UART_SetConfig+0x300>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d120      	bne.n	80043b0 <UART_SetConfig+0x1e0>
 800436e:	4b55      	ldr	r3, [pc, #340]	; (80044c4 <UART_SetConfig+0x2f4>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d00f      	beq.n	800439c <UART_SetConfig+0x1cc>
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d802      	bhi.n	8004386 <UART_SetConfig+0x1b6>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <UART_SetConfig+0x1c0>
 8004384:	e010      	b.n	80043a8 <UART_SetConfig+0x1d8>
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d005      	beq.n	8004396 <UART_SetConfig+0x1c6>
 800438a:	2bc0      	cmp	r3, #192	; 0xc0
 800438c:	d009      	beq.n	80043a2 <UART_SetConfig+0x1d2>
 800438e:	e00b      	b.n	80043a8 <UART_SetConfig+0x1d8>
 8004390:	2300      	movs	r3, #0
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	e062      	b.n	800445c <UART_SetConfig+0x28c>
 8004396:	2302      	movs	r3, #2
 8004398:	76fb      	strb	r3, [r7, #27]
 800439a:	e05f      	b.n	800445c <UART_SetConfig+0x28c>
 800439c:	2304      	movs	r3, #4
 800439e:	76fb      	strb	r3, [r7, #27]
 80043a0:	e05c      	b.n	800445c <UART_SetConfig+0x28c>
 80043a2:	2308      	movs	r3, #8
 80043a4:	76fb      	strb	r3, [r7, #27]
 80043a6:	e059      	b.n	800445c <UART_SetConfig+0x28c>
 80043a8:	2310      	movs	r3, #16
 80043aa:	76fb      	strb	r3, [r7, #27]
 80043ac:	bf00      	nop
 80043ae:	e055      	b.n	800445c <UART_SetConfig+0x28c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a47      	ldr	r2, [pc, #284]	; (80044d4 <UART_SetConfig+0x304>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d124      	bne.n	8004404 <UART_SetConfig+0x234>
 80043ba:	4b42      	ldr	r3, [pc, #264]	; (80044c4 <UART_SetConfig+0x2f4>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c8:	d012      	beq.n	80043f0 <UART_SetConfig+0x220>
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ce:	d802      	bhi.n	80043d6 <UART_SetConfig+0x206>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <UART_SetConfig+0x214>
 80043d4:	e012      	b.n	80043fc <UART_SetConfig+0x22c>
 80043d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043da:	d006      	beq.n	80043ea <UART_SetConfig+0x21a>
 80043dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e0:	d009      	beq.n	80043f6 <UART_SetConfig+0x226>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x22c>
 80043e4:	2300      	movs	r3, #0
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e038      	b.n	800445c <UART_SetConfig+0x28c>
 80043ea:	2302      	movs	r3, #2
 80043ec:	76fb      	strb	r3, [r7, #27]
 80043ee:	e035      	b.n	800445c <UART_SetConfig+0x28c>
 80043f0:	2304      	movs	r3, #4
 80043f2:	76fb      	strb	r3, [r7, #27]
 80043f4:	e032      	b.n	800445c <UART_SetConfig+0x28c>
 80043f6:	2308      	movs	r3, #8
 80043f8:	76fb      	strb	r3, [r7, #27]
 80043fa:	e02f      	b.n	800445c <UART_SetConfig+0x28c>
 80043fc:	2310      	movs	r3, #16
 80043fe:	76fb      	strb	r3, [r7, #27]
 8004400:	bf00      	nop
 8004402:	e02b      	b.n	800445c <UART_SetConfig+0x28c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <UART_SetConfig+0x2ec>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d124      	bne.n	8004458 <UART_SetConfig+0x288>
 800440e:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <UART_SetConfig+0x2f4>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441c:	d012      	beq.n	8004444 <UART_SetConfig+0x274>
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	d802      	bhi.n	800442a <UART_SetConfig+0x25a>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <UART_SetConfig+0x268>
 8004428:	e012      	b.n	8004450 <UART_SetConfig+0x280>
 800442a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442e:	d006      	beq.n	800443e <UART_SetConfig+0x26e>
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004434:	d009      	beq.n	800444a <UART_SetConfig+0x27a>
 8004436:	e00b      	b.n	8004450 <UART_SetConfig+0x280>
 8004438:	2300      	movs	r3, #0
 800443a:	76fb      	strb	r3, [r7, #27]
 800443c:	e00e      	b.n	800445c <UART_SetConfig+0x28c>
 800443e:	2302      	movs	r3, #2
 8004440:	76fb      	strb	r3, [r7, #27]
 8004442:	e00b      	b.n	800445c <UART_SetConfig+0x28c>
 8004444:	2304      	movs	r3, #4
 8004446:	76fb      	strb	r3, [r7, #27]
 8004448:	e008      	b.n	800445c <UART_SetConfig+0x28c>
 800444a:	2308      	movs	r3, #8
 800444c:	76fb      	strb	r3, [r7, #27]
 800444e:	e005      	b.n	800445c <UART_SetConfig+0x28c>
 8004450:	2310      	movs	r3, #16
 8004452:	76fb      	strb	r3, [r7, #27]
 8004454:	bf00      	nop
 8004456:	e001      	b.n	800445c <UART_SetConfig+0x28c>
 8004458:	2310      	movs	r3, #16
 800445a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a16      	ldr	r2, [pc, #88]	; (80044bc <UART_SetConfig+0x2ec>)
 8004462:	4293      	cmp	r3, r2
 8004464:	f040 80fa 	bne.w	800465c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004468:	7efb      	ldrb	r3, [r7, #27]
 800446a:	2b08      	cmp	r3, #8
 800446c:	d836      	bhi.n	80044dc <UART_SetConfig+0x30c>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <UART_SetConfig+0x2a4>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	08004499 	.word	0x08004499
 8004478:	080044dd 	.word	0x080044dd
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044dd 	.word	0x080044dd
 8004484:	080044a7 	.word	0x080044a7
 8004488:	080044dd 	.word	0x080044dd
 800448c:	080044dd 	.word	0x080044dd
 8004490:	080044dd 	.word	0x080044dd
 8004494:	080044af 	.word	0x080044af
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004498:	f7fe fd60 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 800449c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800449e:	e020      	b.n	80044e2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <UART_SetConfig+0x308>)
 80044a2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044a4:	e01d      	b.n	80044e2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe fcc3 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80044aa:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044ac:	e019      	b.n	80044e2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80044ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044b2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044b4:	e015      	b.n	80044e2 <UART_SetConfig+0x312>
 80044b6:	bf00      	nop
 80044b8:	efff69f3 	.word	0xefff69f3
 80044bc:	40008000 	.word	0x40008000
 80044c0:	40013800 	.word	0x40013800
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40004400 	.word	0x40004400
 80044cc:	40004800 	.word	0x40004800
 80044d0:	40004c00 	.word	0x40004c00
 80044d4:	40005000 	.word	0x40005000
 80044d8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	74fb      	strb	r3, [r7, #19]
        break;
 80044e0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 81ac 	beq.w	8004842 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d305      	bcc.n	8004506 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	429a      	cmp	r2, r3
 8004504:	d902      	bls.n	800450c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	74fb      	strb	r3, [r7, #19]
 800450a:	e19a      	b.n	8004842 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800450c:	7efb      	ldrb	r3, [r7, #27]
 800450e:	2b08      	cmp	r3, #8
 8004510:	f200 8091 	bhi.w	8004636 <UART_SetConfig+0x466>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0x34c>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004541 	.word	0x08004541
 8004520:	08004637 	.word	0x08004637
 8004524:	0800458d 	.word	0x0800458d
 8004528:	08004637 	.word	0x08004637
 800452c:	080045c1 	.word	0x080045c1
 8004530:	08004637 	.word	0x08004637
 8004534:	08004637 	.word	0x08004637
 8004538:	08004637 	.word	0x08004637
 800453c:	0800460d 	.word	0x0800460d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004540:	f7fe fd0c 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 8004544:	4603      	mov	r3, r0
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	f04f 0400 	mov.w	r4, #0
 8004554:	0214      	lsls	r4, r2, #8
 8004556:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800455a:	020b      	lsls	r3, r1, #8
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6852      	ldr	r2, [r2, #4]
 8004560:	0852      	lsrs	r2, r2, #1
 8004562:	4611      	mov	r1, r2
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	eb13 0b01 	adds.w	fp, r3, r1
 800456c:	eb44 0c02 	adc.w	ip, r4, r2
 8004570:	4658      	mov	r0, fp
 8004572:	4661      	mov	r1, ip
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	461a      	mov	r2, r3
 800457e:	4623      	mov	r3, r4
 8004580:	f7fb fe2e 	bl	80001e0 <__aeabi_uldivmod>
 8004584:	4603      	mov	r3, r0
 8004586:	460c      	mov	r4, r1
 8004588:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800458a:	e057      	b.n	800463c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	f04f 0400 	mov.w	r4, #0
 8004596:	49b1      	ldr	r1, [pc, #708]	; (800485c <UART_SetConfig+0x68c>)
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	eb13 0b01 	adds.w	fp, r3, r1
 80045a0:	eb44 0c02 	adc.w	ip, r4, r2
 80045a4:	4658      	mov	r0, fp
 80045a6:	4661      	mov	r1, ip
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	461a      	mov	r2, r3
 80045b2:	4623      	mov	r3, r4
 80045b4:	f7fb fe14 	bl	80001e0 <__aeabi_uldivmod>
 80045b8:	4603      	mov	r3, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045be:	e03d      	b.n	800463c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045c0:	f7fe fc36 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4619      	mov	r1, r3
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	f04f 0400 	mov.w	r4, #0
 80045d4:	0214      	lsls	r4, r2, #8
 80045d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80045da:	020b      	lsls	r3, r1, #8
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6852      	ldr	r2, [r2, #4]
 80045e0:	0852      	lsrs	r2, r2, #1
 80045e2:	4611      	mov	r1, r2
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	eb13 0b01 	adds.w	fp, r3, r1
 80045ec:	eb44 0c02 	adc.w	ip, r4, r2
 80045f0:	4658      	mov	r0, fp
 80045f2:	4661      	mov	r1, ip
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f04f 0400 	mov.w	r4, #0
 80045fc:	461a      	mov	r2, r3
 80045fe:	4623      	mov	r3, r4
 8004600:	f7fb fdee 	bl	80001e0 <__aeabi_uldivmod>
 8004604:	4603      	mov	r3, r0
 8004606:	460c      	mov	r4, r1
 8004608:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800460a:	e017      	b.n	800463c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	f04f 0400 	mov.w	r4, #0
 8004616:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800461a:	f144 0100 	adc.w	r1, r4, #0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f04f 0400 	mov.w	r4, #0
 8004626:	461a      	mov	r2, r3
 8004628:	4623      	mov	r3, r4
 800462a:	f7fb fdd9 	bl	80001e0 <__aeabi_uldivmod>
 800462e:	4603      	mov	r3, r0
 8004630:	460c      	mov	r4, r1
 8004632:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004634:	e002      	b.n	800463c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	74fb      	strb	r3, [r7, #19]
            break;
 800463a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d308      	bcc.n	8004656 <UART_SetConfig+0x486>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464a:	d204      	bcs.n	8004656 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e0f5      	b.n	8004842 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	74fb      	strb	r3, [r7, #19]
 800465a:	e0f2      	b.n	8004842 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d17f      	bne.n	8004766 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004666:	7efb      	ldrb	r3, [r7, #27]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d85c      	bhi.n	8004726 <UART_SetConfig+0x556>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x4a4>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004699 	.word	0x08004699
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046d5 	.word	0x080046d5
 8004680:	08004727 	.word	0x08004727
 8004684:	080046f1 	.word	0x080046f1
 8004688:	08004727 	.word	0x08004727
 800468c:	08004727 	.word	0x08004727
 8004690:	08004727 	.word	0x08004727
 8004694:	0800470f 	.word	0x0800470f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004698:	f7fe fc60 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 800469c:	4603      	mov	r3, r0
 800469e:	005a      	lsls	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	441a      	add	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046b4:	e03a      	b.n	800472c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046b6:	f7fe fc67 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 80046ba:	4603      	mov	r3, r0
 80046bc:	005a      	lsls	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046d2:	e02b      	b.n	800472c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80046de:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6852      	ldr	r2, [r2, #4]
 80046e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046ee:	e01d      	b.n	800472c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046f0:	f7fe fb9e 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80046f4:	4603      	mov	r3, r0
 80046f6:	005a      	lsls	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	441a      	add	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	b29b      	uxth	r3, r3
 800470a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800470c:	e00e      	b.n	800472c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	b29b      	uxth	r3, r3
 8004722:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004724:	e002      	b.n	800472c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	74fb      	strb	r3, [r7, #19]
        break;
 800472a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b0f      	cmp	r3, #15
 8004730:	d916      	bls.n	8004760 <UART_SetConfig+0x590>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d212      	bcs.n	8004760 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	b29b      	uxth	r3, r3
 800473e:	f023 030f 	bic.w	r3, r3, #15
 8004742:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	b29a      	uxth	r2, r3
 8004750:	897b      	ldrh	r3, [r7, #10]
 8004752:	4313      	orrs	r3, r2
 8004754:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	897a      	ldrh	r2, [r7, #10]
 800475c:	60da      	str	r2, [r3, #12]
 800475e:	e070      	b.n	8004842 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	74fb      	strb	r3, [r7, #19]
 8004764:	e06d      	b.n	8004842 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004766:	7efb      	ldrb	r3, [r7, #27]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d859      	bhi.n	8004820 <UART_SetConfig+0x650>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x5a4>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	08004799 	.word	0x08004799
 8004778:	080047b5 	.word	0x080047b5
 800477c:	080047d1 	.word	0x080047d1
 8004780:	08004821 	.word	0x08004821
 8004784:	080047ed 	.word	0x080047ed
 8004788:	08004821 	.word	0x08004821
 800478c:	08004821 	.word	0x08004821
 8004790:	08004821 	.word	0x08004821
 8004794:	08004809 	.word	0x08004809
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004798:	f7fe fbe0 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	441a      	add	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047b2:	e038      	b.n	8004826 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80047b4:	f7fe fbe8 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047ce:	e02a      	b.n	8004826 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80047da:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6852      	ldr	r2, [r2, #4]
 80047e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047ea:	e01c      	b.n	8004826 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80047ec:	f7fe fb20 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	b29b      	uxth	r3, r3
 8004804:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004806:	e00e      	b.n	8004826 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800481e:	e002      	b.n	8004826 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	74fb      	strb	r3, [r7, #19]
        break;
 8004824:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b0f      	cmp	r3, #15
 800482a:	d908      	bls.n	800483e <UART_SetConfig+0x66e>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004832:	d204      	bcs.n	800483e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	60da      	str	r2, [r3, #12]
 800483c:	e001      	b.n	8004842 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800484e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800485a:	bf00      	nop
 800485c:	f4240000 	.word	0xf4240000

08004860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01a      	beq.n	8004976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d10a      	bne.n	8004976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049b2:	f7fc fe03 	bl	80015bc <HAL_GetTick>
 80049b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d10e      	bne.n	80049e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f82a 	bl	8004a2e <UART_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e020      	b.n	8004a26 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d10e      	bne.n	8004a10 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f814 	bl	8004a2e <UART_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e00a      	b.n	8004a26 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3e:	e02a      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d026      	beq.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a48:	f7fc fdb8 	bl	80015bc <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d302      	bcc.n	8004a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11b      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a6c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2220      	movs	r2, #32
 8004a82:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e00f      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0c5      	beq.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004abe:	b084      	sub	sp, #16
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	f107 001c 	add.w	r0, r7, #28
 8004acc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d122      	bne.n	8004b1c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d105      	bne.n	8004b10 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fa1d 	bl	8004f50 <USB_CoreReset>
 8004b16:	4603      	mov	r3, r0
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	e01a      	b.n	8004b52 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fa11 	bl	8004f50 <USB_CoreReset>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
 8004b44:	e005      	b.n	8004b52 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b5e:	b004      	add	sp, #16
 8004b60:	4770      	bx	lr

08004b62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d106      	bne.n	8004bb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	e00b      	b.n	8004bc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	e001      	b.n	8004bc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e003      	b.n	8004bd0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004bc8:	2032      	movs	r0, #50	; 0x32
 8004bca:	f7fc fd03 	bl	80015d4 <HAL_Delay>

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bd8:	b084      	sub	sp, #16
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	e009      	b.n	8004c0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	3340      	adds	r3, #64	; 0x40
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	2200      	movs	r2, #0
 8004c04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0e      	cmp	r3, #14
 8004c10:	d9f2      	bls.n	8004bf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d112      	bne.n	8004c3e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	e005      	b.n	8004c4a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c50:	461a      	mov	r2, r3
 8004c52:	2300      	movs	r3, #0
 8004c54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c64:	461a      	mov	r2, r3
 8004c66:	680b      	ldr	r3, [r1, #0]
 8004c68:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c6a:	2103      	movs	r1, #3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f93d 	bl	8004eec <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c72:	2110      	movs	r1, #16
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f8f1 	bl	8004e5c <USB_FlushTxFifo>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f90f 	bl	8004ea8 <USB_FlushRxFifo>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	e043      	b.n	8004d46 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd4:	d118      	bne.n	8004d08 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10a      	bne.n	8004cf2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e013      	b.n	8004d1a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e008      	b.n	8004d1a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	461a      	mov	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d26:	461a      	mov	r2, r3
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3301      	adds	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d3b7      	bcc.n	8004cbe <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	e043      	b.n	8004ddc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d6a:	d118      	bne.n	8004d9e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e013      	b.n	8004db0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d94:	461a      	mov	r2, r3
 8004d96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e008      	b.n	8004db0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	461a      	mov	r2, r3
 8004dac:	2300      	movs	r3, #0
 8004dae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d3b7      	bcc.n	8004d54 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f043 0210 	orr.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <USB_DevInit+0x280>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f043 0208 	orr.w	r2, r3, #8
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e3e:	f043 0304 	orr.w	r3, r3, #4
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e52:	b004      	add	sp, #16
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	803c3800 	.word	0x803c3800

08004e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	019b      	lsls	r3, r3, #6
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <USB_FlushTxFifo+0x48>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d901      	bls.n	8004e88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e006      	b.n	8004e96 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d0f0      	beq.n	8004e76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	00030d40 	.word	0x00030d40

08004ea8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2210      	movs	r2, #16
 8004eb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <USB_FlushRxFifo+0x40>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e006      	b.n	8004eda <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d0f0      	beq.n	8004eba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	00030d40 	.word	0x00030d40

08004eec <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	68f9      	ldr	r1, [r7, #12]
 8004f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004f3e:	2003      	movs	r0, #3
 8004f40:	f7fc fb48 	bl	80015d4 <HAL_Delay>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <USB_CoreReset+0x64>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e01b      	b.n	8004fa6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	daf2      	bge.n	8004f5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f043 0201 	orr.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <USB_CoreReset+0x64>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d0f0      	beq.n	8004f86 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	00030d40 	.word	0x00030d40

08004fb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fca:	2b84      	cmp	r3, #132	; 0x84
 8004fcc:	d005      	beq.n	8004fda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3303      	adds	r3, #3
 8004fd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fee:	f3ef 8305 	mrs	r3, IPSR
 8004ff2:	607b      	str	r3, [r7, #4]
  return(result);
 8004ff4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005010:	f001 f8f0 	bl	80061f4 <vTaskStartScheduler>
  
  return osOK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	bd80      	pop	{r7, pc}

0800501a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800501a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501c:	b089      	sub	sp, #36	; 0x24
 800501e:	af04      	add	r7, sp, #16
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d020      	beq.n	800506e <osThreadCreate+0x54>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01c      	beq.n	800506e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685c      	ldr	r4, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681d      	ldr	r5, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691e      	ldr	r6, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff ffb6 	bl	8004fb8 <makeFreeRtosPriority>
 800504c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005056:	9202      	str	r2, [sp, #8]
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	9100      	str	r1, [sp, #0]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4632      	mov	r2, r6
 8005060:	4629      	mov	r1, r5
 8005062:	4620      	mov	r0, r4
 8005064:	f000 ff0b 	bl	8005e7e <xTaskCreateStatic>
 8005068:	4603      	mov	r3, r0
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e01c      	b.n	80050a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685c      	ldr	r4, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800507a:	b29e      	uxth	r6, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff ff98 	bl	8004fb8 <makeFreeRtosPriority>
 8005088:	4602      	mov	r2, r0
 800508a:	f107 030c 	add.w	r3, r7, #12
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	9200      	str	r2, [sp, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	4632      	mov	r2, r6
 8005096:	4629      	mov	r1, r5
 8005098:	4620      	mov	r0, r4
 800509a:	f000 ff49 	bl	8005f30 <xTaskCreate>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e000      	b.n	80050aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <osDelay+0x16>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	e000      	b.n	80050ca <osDelay+0x18>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 f85e 	bl	800618c <vTaskDelay>
  
  return osOK;
 80050d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af02      	add	r7, sp, #8
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <osSemaphoreCreate+0x34>
    if (count == 1) {
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10b      	bne.n	800510a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	2303      	movs	r3, #3
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4613      	mov	r3, r2
 80050fc:	2200      	movs	r2, #0
 80050fe:	2100      	movs	r1, #0
 8005100:	2001      	movs	r0, #1
 8005102:	f000 f9bd 	bl	8005480 <xQueueGenericCreateStatic>
 8005106:	4603      	mov	r3, r0
 8005108:	e016      	b.n	8005138 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	e014      	b.n	8005138 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d110      	bne.n	8005136 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8005114:	2203      	movs	r2, #3
 8005116:	2100      	movs	r1, #0
 8005118:	2001      	movs	r0, #1
 800511a:	f000 fa23 	bl	8005564 <xQueueGenericCreate>
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <osSemaphoreCreate+0x58>
 8005126:	2300      	movs	r3, #0
 8005128:	2200      	movs	r2, #0
 800512a:	2100      	movs	r1, #0
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fa75 	bl	800561c <xQueueGenericSend>
      return sema;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	e000      	b.n	8005138 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005136:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	e03a      	b.n	80051ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d103      	bne.n	800516c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005164:	f04f 33ff 	mov.w	r3, #4294967295
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e009      	b.n	8005180 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d006      	beq.n	8005180 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <osSemaphoreWait+0x40>
      ticks = 1;
 800517c:	2301      	movs	r3, #1
 800517e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005180:	f7ff ff32 	bl	8004fe8 <inHandlerMode>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d017      	beq.n	80051ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800518a:	f107 0308 	add.w	r3, r7, #8
 800518e:	461a      	mov	r2, r3
 8005190:	2100      	movs	r1, #0
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fcce 	bl	8005b34 <xQueueReceiveFromISR>
 8005198:	4603      	mov	r3, r0
 800519a:	2b01      	cmp	r3, #1
 800519c:	d001      	beq.n	80051a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800519e:	23ff      	movs	r3, #255	; 0xff
 80051a0:	e015      	b.n	80051ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d011      	beq.n	80051cc <osSemaphoreWait+0x8c>
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <osSemaphoreWait+0x98>)
 80051aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	e008      	b.n	80051cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fbb1 	bl	8005924 <xQueueSemaphoreTake>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d001      	beq.n	80051cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80051c8:	23ff      	movs	r3, #255	; 0xff
 80051ca:	e000      	b.n	80051ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80051ec:	f7ff fefc 	bl	8004fe8 <inHandlerMode>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fb07 	bl	8005810 <xQueueGiveFromISR>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005208:	23ff      	movs	r3, #255	; 0xff
 800520a:	e017      	b.n	800523c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <osSemaphoreRelease+0x5e>
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <osSemaphoreRelease+0x68>)
 8005214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	e00a      	b.n	800523a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005224:	2300      	movs	r3, #0
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9f6 	bl	800561c <xQueueGenericSend>
 8005230:	4603      	mov	r3, r0
 8005232:	2b01      	cmp	r3, #1
 8005234:	d001      	beq.n	800523a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005236:	23ff      	movs	r3, #255	; 0xff
 8005238:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800523a:	68fb      	ldr	r3, [r7, #12]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f103 0208 	add.w	r2, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f04f 32ff 	mov.w	r2, #4294967295
 8005260:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f103 0208 	add.w	r2, r3, #8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f103 0208 	add.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052ea:	b480      	push	{r7}
 80052ec:	b085      	sub	sp, #20
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d103      	bne.n	800530a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e00c      	b.n	8005324 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3308      	adds	r3, #8
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e002      	b.n	8005318 <vListInsert+0x2e>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	429a      	cmp	r2, r3
 8005322:	d2f6      	bcs.n	8005312 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]
}
 8005350:	bf00      	nop
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6892      	ldr	r2, [r2, #8]
 8005372:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6852      	ldr	r2, [r2, #4]
 800537c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	d103      	bne.n	8005390 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	1e5a      	subs	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	e7fe      	b.n	80053d6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80053d8:	f001 fe70 	bl	80070bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	441a      	add	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	3b01      	subs	r3, #1
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800540e:	fb01 f303 	mul.w	r3, r1, r3
 8005412:	441a      	add	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	22ff      	movs	r2, #255	; 0xff
 800541c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	22ff      	movs	r2, #255	; 0xff
 8005424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d114      	bne.n	8005458 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01a      	beq.n	800546c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3310      	adds	r3, #16
 800543a:	4618      	mov	r0, r3
 800543c:	f001 f91c 	bl	8006678 <xTaskRemoveFromEventList>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d012      	beq.n	800546c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <xQueueGenericReset+0xcc>)
 8005448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	e009      	b.n	800546c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3310      	adds	r3, #16
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff fef3 	bl	8005248 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3324      	adds	r3, #36	; 0x24
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff feee 	bl	8005248 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800546c:	f001 fe54 	bl	8007118 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005470:	2301      	movs	r3, #1
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08e      	sub	sp, #56	; 0x38
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <xQueueGenericCreateStatic+0x28>
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054a6:	e7fe      	b.n	80054a6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <xQueueGenericCreateStatic+0x42>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	e7fe      	b.n	80054c0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <xQueueGenericCreateStatic+0x4e>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <xQueueGenericCreateStatic+0x52>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <xQueueGenericCreateStatic+0x54>
 80054d2:	2300      	movs	r3, #0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d109      	bne.n	80054ec <xQueueGenericCreateStatic+0x6c>
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	e7fe      	b.n	80054ea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <xQueueGenericCreateStatic+0x78>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <xQueueGenericCreateStatic+0x7c>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <xQueueGenericCreateStatic+0x7e>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <xQueueGenericCreateStatic+0x96>
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	e7fe      	b.n	8005514 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005516:	2348      	movs	r3, #72	; 0x48
 8005518:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b48      	cmp	r3, #72	; 0x48
 800551e:	d009      	beq.n	8005534 <xQueueGenericCreateStatic+0xb4>
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e7fe      	b.n	8005532 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005546:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f842 	bl	80055de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800555c:	4618      	mov	r0, r3
 800555e:	3730      	adds	r7, #48	; 0x30
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <xQueueGenericCreate+0x28>
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e7fe      	b.n	800558a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e004      	b.n	80055a2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3348      	adds	r3, #72	; 0x48
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 fea2 	bl	80072f0 <pvPortMalloc>
 80055ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00f      	beq.n	80055d4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3348      	adds	r3, #72	; 0x48
 80055b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055c2:	79fa      	ldrb	r2, [r7, #7]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f805 	bl	80055de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80055d4:	69bb      	ldr	r3, [r7, #24]
	}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	607a      	str	r2, [r7, #4]
 80055ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e002      	b.n	8005600 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800560c:	2101      	movs	r1, #1
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f7ff fece 	bl	80053b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08e      	sub	sp, #56	; 0x38
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <xQueueGenericSend+0x30>
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
 800564a:	e7fe      	b.n	800564a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <xQueueGenericSend+0x3e>
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <xQueueGenericSend+0x42>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueGenericSend+0x44>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <xQueueGenericSend+0x5c>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
 8005676:	e7fe      	b.n	8005676 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d103      	bne.n	8005686 <xQueueGenericSend+0x6a>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <xQueueGenericSend+0x6e>
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <xQueueGenericSend+0x70>
 800568a:	2300      	movs	r3, #0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <xQueueGenericSend+0x88>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	e7fe      	b.n	80056a2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a4:	f001 f9a4 	bl	80069f0 <xTaskGetSchedulerState>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <xQueueGenericSend+0x98>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <xQueueGenericSend+0x9c>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <xQueueGenericSend+0x9e>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <xQueueGenericSend+0xb6>
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e7fe      	b.n	80056d0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056d2:	f001 fcf3 	bl	80070bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <xQueueGenericSend+0xcc>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d129      	bne.n	800573c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ee:	f000 fab6 	bl	8005c5e <prvCopyDataToQueue>
 80056f2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d010      	beq.n	800571e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	4618      	mov	r0, r3
 8005702:	f000 ffb9 	bl	8006678 <xTaskRemoveFromEventList>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d013      	beq.n	8005734 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800570c:	4b3f      	ldr	r3, [pc, #252]	; (800580c <xQueueGenericSend+0x1f0>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	e00a      	b.n	8005734 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005724:	4b39      	ldr	r3, [pc, #228]	; (800580c <xQueueGenericSend+0x1f0>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005734:	f001 fcf0 	bl	8007118 <vPortExitCritical>
				return pdPASS;
 8005738:	2301      	movs	r3, #1
 800573a:	e063      	b.n	8005804 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005742:	f001 fce9 	bl	8007118 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005746:	2300      	movs	r3, #0
 8005748:	e05c      	b.n	8005804 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fff1 	bl	800673c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800575e:	f001 fcdb 	bl	8007118 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005762:	f000 fda5 	bl	80062b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005766:	f001 fca9 	bl	80070bc <vPortEnterCritical>
 800576a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005770:	b25b      	sxtb	r3, r3
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d103      	bne.n	8005780 <xQueueGenericSend+0x164>
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005786:	b25b      	sxtb	r3, r3
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d103      	bne.n	8005796 <xQueueGenericSend+0x17a>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005796:	f001 fcbf 	bl	8007118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800579a:	1d3a      	adds	r2, r7, #4
 800579c:	f107 0314 	add.w	r3, r7, #20
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 ffe0 	bl	8006768 <xTaskCheckForTimeOut>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d124      	bne.n	80057f8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b0:	f000 fb4d 	bl	8005e4e <prvIsQueueFull>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d018      	beq.n	80057ec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	3310      	adds	r3, #16
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 ff34 	bl	8006630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ca:	f000 fad8 	bl	8005d7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057ce:	f000 fd7d 	bl	80062cc <xTaskResumeAll>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f47f af7c 	bne.w	80056d2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80057da:	4b0c      	ldr	r3, [pc, #48]	; (800580c <xQueueGenericSend+0x1f0>)
 80057dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	e772      	b.n	80056d2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ee:	f000 fac6 	bl	8005d7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f2:	f000 fd6b 	bl	80062cc <xTaskResumeAll>
 80057f6:	e76c      	b.n	80056d2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80057f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057fa:	f000 fac0 	bl	8005d7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057fe:	f000 fd65 	bl	80062cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005802:	2300      	movs	r3, #0
		}
	}
}
 8005804:	4618      	mov	r0, r3
 8005806:	3738      	adds	r7, #56	; 0x38
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	e000ed04 	.word	0xe000ed04

08005810 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08e      	sub	sp, #56	; 0x38
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <xQueueGiveFromISR+0x28>
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	e7fe      	b.n	8005836 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <xQueueGiveFromISR+0x44>
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	e7fe      	b.n	8005852 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <xQueueGiveFromISR+0x54>
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <xQueueGiveFromISR+0x58>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <xQueueGiveFromISR+0x5a>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <xQueueGiveFromISR+0x72>
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	61bb      	str	r3, [r7, #24]
 8005880:	e7fe      	b.n	8005880 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005882:	f001 fcf7 	bl	8007274 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005886:	f3ef 8211 	mrs	r2, BASEPRI
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	617a      	str	r2, [r7, #20]
 800589c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800589e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d22b      	bcs.n	800590a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d112      	bne.n	80058f4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	3324      	adds	r3, #36	; 0x24
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fecc 	bl	8006678 <xTaskRemoveFromEventList>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00e      	beq.n	8005904 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e007      	b.n	8005904 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058f8:	3301      	adds	r3, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	b25a      	sxtb	r2, r3
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005904:	2301      	movs	r3, #1
 8005906:	637b      	str	r3, [r7, #52]	; 0x34
 8005908:	e001      	b.n	800590e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800590a:	2300      	movs	r3, #0
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800591a:	4618      	mov	r0, r3
 800591c:	3738      	adds	r7, #56	; 0x38
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08e      	sub	sp, #56	; 0x38
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800592e:	2300      	movs	r3, #0
 8005930:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005936:	2300      	movs	r3, #0
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d109      	bne.n	8005954 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	623b      	str	r3, [r7, #32]
 8005952:	e7fe      	b.n	8005952 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d009      	beq.n	8005970 <xQueueSemaphoreTake+0x4c>
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	e7fe      	b.n	800596e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005970:	f001 f83e 	bl	80069f0 <xTaskGetSchedulerState>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d102      	bne.n	8005980 <xQueueSemaphoreTake+0x5c>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <xQueueSemaphoreTake+0x60>
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <xQueueSemaphoreTake+0x62>
 8005984:	2300      	movs	r3, #0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <xQueueSemaphoreTake+0x7a>
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	e7fe      	b.n	800599c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800599e:	f001 fb8d 	bl	80070bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d024      	beq.n	80059f8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	1e5a      	subs	r2, r3, #1
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80059be:	f001 f9dd 	bl	8006d7c <pvTaskIncrementMutexHeldCount>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00f      	beq.n	80059f0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	3310      	adds	r3, #16
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fe4f 	bl	8006678 <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059e0:	4b53      	ldr	r3, [pc, #332]	; (8005b30 <xQueueSemaphoreTake+0x20c>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059f0:	f001 fb92 	bl	8007118 <vPortExitCritical>
				return pdPASS;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e096      	b.n	8005b26 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d110      	bne.n	8005a20 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d009      	beq.n	8005a18 <xQueueSemaphoreTake+0xf4>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	e7fe      	b.n	8005a16 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a18:	f001 fb7e 	bl	8007118 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e082      	b.n	8005b26 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a26:	f107 030c 	add.w	r3, r7, #12
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fe86 	bl	800673c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a34:	f001 fb70 	bl	8007118 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a38:	f000 fc3a 	bl	80062b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a3c:	f001 fb3e 	bl	80070bc <vPortEnterCritical>
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d103      	bne.n	8005a56 <xQueueSemaphoreTake+0x132>
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5c:	b25b      	sxtb	r3, r3
 8005a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a62:	d103      	bne.n	8005a6c <xQueueSemaphoreTake+0x148>
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6c:	f001 fb54 	bl	8007118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a70:	463a      	mov	r2, r7
 8005a72:	f107 030c 	add.w	r3, r7, #12
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fe75 	bl	8006768 <xTaskCheckForTimeOut>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d132      	bne.n	8005aea <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a86:	f000 f9cc 	bl	8005e22 <prvIsQueueEmpty>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d026      	beq.n	8005ade <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005a98:	f001 fb10 	bl	80070bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 ffc3 	bl	8006a2c <xTaskPriorityInherit>
 8005aa6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005aa8:	f001 fb36 	bl	8007118 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	3324      	adds	r3, #36	; 0x24
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fdbb 	bl	8006630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005abc:	f000 f95f 	bl	8005d7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ac0:	f000 fc04 	bl	80062cc <xTaskResumeAll>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f47f af69 	bne.w	800599e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005acc:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <xQueueSemaphoreTake+0x20c>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	e75f      	b.n	800599e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ade:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ae0:	f000 f94d 	bl	8005d7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ae4:	f000 fbf2 	bl	80062cc <xTaskResumeAll>
 8005ae8:	e759      	b.n	800599e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aec:	f000 f947 	bl	8005d7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af0:	f000 fbec 	bl	80062cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005af6:	f000 f994 	bl	8005e22 <prvIsQueueEmpty>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f43f af4e 	beq.w	800599e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00d      	beq.n	8005b24 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005b08:	f001 fad8 	bl	80070bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b0e:	f000 f88e 	bl	8005c2e <prvGetDisinheritPriorityAfterTimeout>
 8005b12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 f890 	bl	8006c40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b20:	f001 fafa 	bl	8007118 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3738      	adds	r7, #56	; 0x38
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	e000ed04 	.word	0xe000ed04

08005b34 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08e      	sub	sp, #56	; 0x38
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <xQueueReceiveFromISR+0x2a>
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	e7fe      	b.n	8005b5c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d103      	bne.n	8005b6c <xQueueReceiveFromISR+0x38>
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <xQueueReceiveFromISR+0x3c>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e000      	b.n	8005b72 <xQueueReceiveFromISR+0x3e>
 8005b70:	2300      	movs	r3, #0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <xQueueReceiveFromISR+0x56>
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	e7fe      	b.n	8005b88 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b8a:	f001 fb73 	bl	8007274 <vPortValidateInterruptPriority>
	__asm volatile
 8005b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	61ba      	str	r2, [r7, #24]
 8005ba4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ba6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02f      	beq.n	8005c16 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bc4:	f000 f8b5 	bl	8005d32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	1e5a      	subs	r2, r3, #1
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d112      	bne.n	8005c00 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d016      	beq.n	8005c10 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	3310      	adds	r3, #16
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fd46 	bl	8006678 <xTaskRemoveFromEventList>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e007      	b.n	8005c10 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c04:	3301      	adds	r3, #1
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	b25a      	sxtb	r2, r3
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005c10:	2301      	movs	r3, #1
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
 8005c14:	e001      	b.n	8005c1a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3738      	adds	r7, #56	; 0x38
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d006      	beq.n	8005c4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f1c3 0307 	rsb	r3, r3, #7
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e001      	b.n	8005c50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c50:	68fb      	ldr	r3, [r7, #12]
	}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b086      	sub	sp, #24
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10d      	bne.n	8005c98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d14d      	bne.n	8005d20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 ff55 	bl	8006b38 <xTaskPriorityDisinherit>
 8005c8e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	e043      	b.n	8005d20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d119      	bne.n	8005cd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6898      	ldr	r0, [r3, #8]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68b9      	ldr	r1, [r7, #8]
 8005caa:	f001 fd1b 	bl	80076e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d32b      	bcc.n	8005d20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	e026      	b.n	8005d20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68d8      	ldr	r0, [r3, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	f001 fd01 	bl	80076e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	425b      	negs	r3, r3
 8005cec:	441a      	add	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d207      	bcs.n	8005d0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	425b      	negs	r3, r3
 8005d08:	441a      	add	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d105      	bne.n	8005d20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d28:	697b      	ldr	r3, [r7, #20]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d018      	beq.n	8005d76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4c:	441a      	add	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d303      	bcc.n	8005d66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68d9      	ldr	r1, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f001 fcb7 	bl	80076e4 <memcpy>
	}
}
 8005d76:	bf00      	nop
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d86:	f001 f999 	bl	80070bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d92:	e011      	b.n	8005db8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d012      	beq.n	8005dc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3324      	adds	r3, #36	; 0x24
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fc69 	bl	8006678 <xTaskRemoveFromEventList>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dac:	f000 fd3c 	bl	8006828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dce9      	bgt.n	8005d94 <prvUnlockQueue+0x16>
 8005dc0:	e000      	b.n	8005dc4 <prvUnlockQueue+0x46>
					break;
 8005dc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	22ff      	movs	r2, #255	; 0xff
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005dcc:	f001 f9a4 	bl	8007118 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dd0:	f001 f974 	bl	80070bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ddc:	e011      	b.n	8005e02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d012      	beq.n	8005e0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3310      	adds	r3, #16
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fc44 	bl	8006678 <xTaskRemoveFromEventList>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005df6:	f000 fd17 	bl	8006828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dfa:	7bbb      	ldrb	r3, [r7, #14]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dce9      	bgt.n	8005dde <prvUnlockQueue+0x60>
 8005e0a:	e000      	b.n	8005e0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	22ff      	movs	r2, #255	; 0xff
 8005e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e16:	f001 f97f 	bl	8007118 <vPortExitCritical>
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e2a:	f001 f947 	bl	80070bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e36:	2301      	movs	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e001      	b.n	8005e40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e40:	f001 f96a 	bl	8007118 <vPortExitCritical>

	return xReturn;
 8005e44:	68fb      	ldr	r3, [r7, #12]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b084      	sub	sp, #16
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e56:	f001 f931 	bl	80070bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d102      	bne.n	8005e6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e001      	b.n	8005e70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e70:	f001 f952 	bl	8007118 <vPortExitCritical>

	return xReturn;
 8005e74:	68fb      	ldr	r3, [r7, #12]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b08e      	sub	sp, #56	; 0x38
 8005e82:	af04      	add	r7, sp, #16
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <xTaskCreateStatic+0x28>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	e7fe      	b.n	8005ea4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d109      	bne.n	8005ec0 <xTaskCreateStatic+0x42>
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e7fe      	b.n	8005ebe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ec0:	2354      	movs	r3, #84	; 0x54
 8005ec2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b54      	cmp	r3, #84	; 0x54
 8005ec8:	d009      	beq.n	8005ede <xTaskCreateStatic+0x60>
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	e7fe      	b.n	8005edc <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01e      	beq.n	8005f22 <xTaskCreateStatic+0xa4>
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01b      	beq.n	8005f22 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005efc:	2300      	movs	r3, #0
 8005efe:	9303      	str	r3, [sp, #12]
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	9302      	str	r3, [sp, #8]
 8005f04:	f107 0314 	add.w	r3, r7, #20
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f850 	bl	8005fba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f1c:	f000 f8cc 	bl	80060b8 <prvAddNewTaskToReadyList>
 8005f20:	e001      	b.n	8005f26 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f26:	697b      	ldr	r3, [r7, #20]
	}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3728      	adds	r7, #40	; 0x28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08c      	sub	sp, #48	; 0x30
 8005f34:	af04      	add	r7, sp, #16
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f9d3 	bl	80072f0 <pvPortMalloc>
 8005f4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00e      	beq.n	8005f70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f52:	2054      	movs	r0, #84	; 0x54
 8005f54:	f001 f9cc 	bl	80072f0 <pvPortMalloc>
 8005f58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
 8005f66:	e005      	b.n	8005f74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f68:	6978      	ldr	r0, [r7, #20]
 8005f6a:	f001 fa83 	bl	8007474 <vPortFree>
 8005f6e:	e001      	b.n	8005f74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d017      	beq.n	8005faa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	2300      	movs	r3, #0
 8005f86:	9303      	str	r3, [sp, #12]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	9302      	str	r3, [sp, #8]
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f80e 	bl	8005fba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f9e:	69f8      	ldr	r0, [r7, #28]
 8005fa0:	f000 f88a 	bl	80060b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	e002      	b.n	8005fb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005faa:	f04f 33ff 	mov.w	r3, #4294967295
 8005fae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
	}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f023 0307 	bic.w	r3, r3, #7
 8005fe0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d009      	beq.n	8006000 <prvInitialiseNewTask+0x46>
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e7fe      	b.n	8005ffe <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
 8006004:	e012      	b.n	800602c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	7819      	ldrb	r1, [r3, #0]
 800600e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	3334      	adds	r3, #52	; 0x34
 8006016:	460a      	mov	r2, r1
 8006018:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d006      	beq.n	8006034 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3301      	adds	r3, #1
 800602a:	61fb      	str	r3, [r7, #28]
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	2b0f      	cmp	r3, #15
 8006030:	d9e9      	bls.n	8006006 <prvInitialiseNewTask+0x4c>
 8006032:	e000      	b.n	8006036 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006034:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	2b06      	cmp	r3, #6
 8006042:	d901      	bls.n	8006048 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006044:	2306      	movs	r3, #6
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006052:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	2200      	movs	r2, #0
 8006058:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	3304      	adds	r3, #4
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff f912 	bl	8005288 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	3318      	adds	r3, #24
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff f90d 	bl	8005288 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006072:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	f1c3 0207 	rsb	r2, r3, #7
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006082:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	2200      	movs	r2, #0
 8006088:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	69b8      	ldr	r0, [r7, #24]
 8006098:	f000 feea 	bl	8006e70 <pxPortInitialiseStack>
 800609c:	4602      	mov	r2, r0
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ae:	bf00      	nop
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060c0:	f000 fffc 	bl	80070bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060c4:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <prvAddNewTaskToReadyList+0xb8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	4a29      	ldr	r2, [pc, #164]	; (8006170 <prvAddNewTaskToReadyList+0xb8>)
 80060cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ce:	4b29      	ldr	r3, [pc, #164]	; (8006174 <prvAddNewTaskToReadyList+0xbc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060d6:	4a27      	ldr	r2, [pc, #156]	; (8006174 <prvAddNewTaskToReadyList+0xbc>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060dc:	4b24      	ldr	r3, [pc, #144]	; (8006170 <prvAddNewTaskToReadyList+0xb8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d110      	bne.n	8006106 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060e4:	f000 fbc4 	bl	8006870 <prvInitialiseTaskLists>
 80060e8:	e00d      	b.n	8006106 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060ea:	4b23      	ldr	r3, [pc, #140]	; (8006178 <prvAddNewTaskToReadyList+0xc0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <prvAddNewTaskToReadyList+0xbc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d802      	bhi.n	8006106 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006100:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <prvAddNewTaskToReadyList+0xbc>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006106:	4b1d      	ldr	r3, [pc, #116]	; (800617c <prvAddNewTaskToReadyList+0xc4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	4a1b      	ldr	r2, [pc, #108]	; (800617c <prvAddNewTaskToReadyList+0xc4>)
 800610e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <prvAddNewTaskToReadyList+0xc8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4313      	orrs	r3, r2
 800611e:	4a18      	ldr	r2, [pc, #96]	; (8006180 <prvAddNewTaskToReadyList+0xc8>)
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4a15      	ldr	r2, [pc, #84]	; (8006184 <prvAddNewTaskToReadyList+0xcc>)
 8006130:	441a      	add	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7ff f8b2 	bl	80052a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800613e:	f000 ffeb 	bl	8007118 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <prvAddNewTaskToReadyList+0xc0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00e      	beq.n	8006168 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <prvAddNewTaskToReadyList+0xbc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	429a      	cmp	r2, r3
 8006156:	d207      	bcs.n	8006168 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <prvAddNewTaskToReadyList+0xd0>)
 800615a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	200003a8 	.word	0x200003a8
 8006174:	200002a8 	.word	0x200002a8
 8006178:	200003b4 	.word	0x200003b4
 800617c:	200003c4 	.word	0x200003c4
 8006180:	200003b0 	.word	0x200003b0
 8006184:	200002ac 	.word	0x200002ac
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d016      	beq.n	80061cc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <vTaskDelay+0x60>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <vTaskDelay+0x2e>
 80061a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	e7fe      	b.n	80061b8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80061ba:	f000 f879 	bl	80062b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061be:	2100      	movs	r1, #0
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fdef 	bl	8006da4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061c6:	f000 f881 	bl	80062cc <xTaskResumeAll>
 80061ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <vTaskDelay+0x64>)
 80061d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200003d0 	.word	0x200003d0
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006202:	463a      	mov	r2, r7
 8006204:	1d39      	adds	r1, r7, #4
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	4618      	mov	r0, r3
 800620c:	f7fa f968 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	9202      	str	r2, [sp, #8]
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	2300      	movs	r3, #0
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	2300      	movs	r3, #0
 8006220:	460a      	mov	r2, r1
 8006222:	491d      	ldr	r1, [pc, #116]	; (8006298 <vTaskStartScheduler+0xa4>)
 8006224:	481d      	ldr	r0, [pc, #116]	; (800629c <vTaskStartScheduler+0xa8>)
 8006226:	f7ff fe2a 	bl	8005e7e <xTaskCreateStatic>
 800622a:	4602      	mov	r2, r0
 800622c:	4b1c      	ldr	r3, [pc, #112]	; (80062a0 <vTaskStartScheduler+0xac>)
 800622e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <vTaskStartScheduler+0xac>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e001      	b.n	8006242 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d115      	bne.n	8006274 <vTaskStartScheduler+0x80>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <vTaskStartScheduler+0xb0>)
 800625c:	f04f 32ff 	mov.w	r2, #4294967295
 8006260:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006262:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <vTaskStartScheduler+0xb4>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006268:	4b10      	ldr	r3, [pc, #64]	; (80062ac <vTaskStartScheduler+0xb8>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800626e:	f000 fe87 	bl	8006f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006272:	e00d      	b.n	8006290 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d109      	bne.n	8006290 <vTaskStartScheduler+0x9c>
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e7fe      	b.n	800628e <vTaskStartScheduler+0x9a>
}
 8006290:	bf00      	nop
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	080078a0 	.word	0x080078a0
 800629c:	08006841 	.word	0x08006841
 80062a0:	200003cc 	.word	0x200003cc
 80062a4:	200003c8 	.word	0x200003c8
 80062a8:	200003b4 	.word	0x200003b4
 80062ac:	200003ac 	.word	0x200003ac

080062b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062b4:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <vTaskSuspendAll+0x18>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3301      	adds	r3, #1
 80062ba:	4a03      	ldr	r2, [pc, #12]	; (80062c8 <vTaskSuspendAll+0x18>)
 80062bc:	6013      	str	r3, [r2, #0]
}
 80062be:	bf00      	nop
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	200003d0 	.word	0x200003d0

080062cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062da:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <xTaskResumeAll+0x114>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <xTaskResumeAll+0x2a>
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	e7fe      	b.n	80062f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062f6:	f000 fee1 	bl	80070bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062fa:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <xTaskResumeAll+0x114>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3b01      	subs	r3, #1
 8006300:	4a37      	ldr	r2, [pc, #220]	; (80063e0 <xTaskResumeAll+0x114>)
 8006302:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006304:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <xTaskResumeAll+0x114>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d161      	bne.n	80063d0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800630c:	4b35      	ldr	r3, [pc, #212]	; (80063e4 <xTaskResumeAll+0x118>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05d      	beq.n	80063d0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006314:	e02e      	b.n	8006374 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006316:	4b34      	ldr	r3, [pc, #208]	; (80063e8 <xTaskResumeAll+0x11c>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3318      	adds	r3, #24
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff f81a 	bl	800535c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff f815 	bl	800535c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	2201      	movs	r2, #1
 8006338:	409a      	lsls	r2, r3
 800633a:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <xTaskResumeAll+0x120>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4313      	orrs	r3, r2
 8006340:	4a2a      	ldr	r2, [pc, #168]	; (80063ec <xTaskResumeAll+0x120>)
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4a27      	ldr	r2, [pc, #156]	; (80063f0 <xTaskResumeAll+0x124>)
 8006352:	441a      	add	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3304      	adds	r3, #4
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f7fe ffa1 	bl	80052a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <xTaskResumeAll+0x128>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	429a      	cmp	r2, r3
 800636c:	d302      	bcc.n	8006374 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800636e:	4b22      	ldr	r3, [pc, #136]	; (80063f8 <xTaskResumeAll+0x12c>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006374:	4b1c      	ldr	r3, [pc, #112]	; (80063e8 <xTaskResumeAll+0x11c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1cc      	bne.n	8006316 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006382:	f000 fb0f 	bl	80069a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006386:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <xTaskResumeAll+0x130>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d010      	beq.n	80063b4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006392:	f000 f837 	bl	8006404 <xTaskIncrementTick>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800639c:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <xTaskResumeAll+0x12c>)
 800639e:	2201      	movs	r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f1      	bne.n	8006392 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <xTaskResumeAll+0x130>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063b4:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <xTaskResumeAll+0x12c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063bc:	2301      	movs	r3, #1
 80063be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <xTaskResumeAll+0x134>)
 80063c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063d0:	f000 fea2 	bl	8007118 <vPortExitCritical>

	return xAlreadyYielded;
 80063d4:	68bb      	ldr	r3, [r7, #8]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200003d0 	.word	0x200003d0
 80063e4:	200003a8 	.word	0x200003a8
 80063e8:	20000368 	.word	0x20000368
 80063ec:	200003b0 	.word	0x200003b0
 80063f0:	200002ac 	.word	0x200002ac
 80063f4:	200002a8 	.word	0x200002a8
 80063f8:	200003bc 	.word	0x200003bc
 80063fc:	200003b8 	.word	0x200003b8
 8006400:	e000ed04 	.word	0xe000ed04

08006404 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640e:	4b50      	ldr	r3, [pc, #320]	; (8006550 <xTaskIncrementTick+0x14c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f040 808c 	bne.w	8006530 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006418:	4b4e      	ldr	r3, [pc, #312]	; (8006554 <xTaskIncrementTick+0x150>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006420:	4a4c      	ldr	r2, [pc, #304]	; (8006554 <xTaskIncrementTick+0x150>)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d11f      	bne.n	800646c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800642c:	4b4a      	ldr	r3, [pc, #296]	; (8006558 <xTaskIncrementTick+0x154>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <xTaskIncrementTick+0x46>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	e7fe      	b.n	8006448 <xTaskIncrementTick+0x44>
 800644a:	4b43      	ldr	r3, [pc, #268]	; (8006558 <xTaskIncrementTick+0x154>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	4b42      	ldr	r3, [pc, #264]	; (800655c <xTaskIncrementTick+0x158>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a40      	ldr	r2, [pc, #256]	; (8006558 <xTaskIncrementTick+0x154>)
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	4a40      	ldr	r2, [pc, #256]	; (800655c <xTaskIncrementTick+0x158>)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	4b40      	ldr	r3, [pc, #256]	; (8006560 <xTaskIncrementTick+0x15c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	4a3e      	ldr	r2, [pc, #248]	; (8006560 <xTaskIncrementTick+0x15c>)
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	f000 fa9c 	bl	80069a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800646c:	4b3d      	ldr	r3, [pc, #244]	; (8006564 <xTaskIncrementTick+0x160>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d34d      	bcc.n	8006512 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006476:	4b38      	ldr	r3, [pc, #224]	; (8006558 <xTaskIncrementTick+0x154>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <xTaskIncrementTick+0x80>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <xTaskIncrementTick+0x82>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d004      	beq.n	8006494 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648a:	4b36      	ldr	r3, [pc, #216]	; (8006564 <xTaskIncrementTick+0x160>)
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	601a      	str	r2, [r3, #0]
					break;
 8006492:	e03e      	b.n	8006512 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006494:	4b30      	ldr	r3, [pc, #192]	; (8006558 <xTaskIncrementTick+0x154>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d203      	bcs.n	80064b4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064ac:	4a2d      	ldr	r2, [pc, #180]	; (8006564 <xTaskIncrementTick+0x160>)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6013      	str	r3, [r2, #0]
						break;
 80064b2:	e02e      	b.n	8006512 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe ff4f 	bl	800535c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d004      	beq.n	80064d0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	3318      	adds	r3, #24
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe ff46 	bl	800535c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	2201      	movs	r2, #1
 80064d6:	409a      	lsls	r2, r3
 80064d8:	4b23      	ldr	r3, [pc, #140]	; (8006568 <xTaskIncrementTick+0x164>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	4a22      	ldr	r2, [pc, #136]	; (8006568 <xTaskIncrementTick+0x164>)
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4a1f      	ldr	r2, [pc, #124]	; (800656c <xTaskIncrementTick+0x168>)
 80064f0:	441a      	add	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7fe fed2 	bl	80052a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <xTaskIncrementTick+0x16c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	429a      	cmp	r2, r3
 800650a:	d3b4      	bcc.n	8006476 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006510:	e7b1      	b.n	8006476 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <xTaskIncrementTick+0x16c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4914      	ldr	r1, [pc, #80]	; (800656c <xTaskIncrementTick+0x168>)
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d907      	bls.n	800653a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e004      	b.n	800653a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006530:	4b10      	ldr	r3, [pc, #64]	; (8006574 <xTaskIncrementTick+0x170>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3301      	adds	r3, #1
 8006536:	4a0f      	ldr	r2, [pc, #60]	; (8006574 <xTaskIncrementTick+0x170>)
 8006538:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800653a:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <xTaskIncrementTick+0x174>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006546:	697b      	ldr	r3, [r7, #20]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200003d0 	.word	0x200003d0
 8006554:	200003ac 	.word	0x200003ac
 8006558:	20000360 	.word	0x20000360
 800655c:	20000364 	.word	0x20000364
 8006560:	200003c0 	.word	0x200003c0
 8006564:	200003c8 	.word	0x200003c8
 8006568:	200003b0 	.word	0x200003b0
 800656c:	200002ac 	.word	0x200002ac
 8006570:	200002a8 	.word	0x200002a8
 8006574:	200003b8 	.word	0x200003b8
 8006578:	200003bc 	.word	0x200003bc

0800657c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006582:	4b26      	ldr	r3, [pc, #152]	; (800661c <vTaskSwitchContext+0xa0>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800658a:	4b25      	ldr	r3, [pc, #148]	; (8006620 <vTaskSwitchContext+0xa4>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006590:	e03e      	b.n	8006610 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006592:	4b23      	ldr	r3, [pc, #140]	; (8006620 <vTaskSwitchContext+0xa4>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006598:	4b22      	ldr	r3, [pc, #136]	; (8006624 <vTaskSwitchContext+0xa8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	fab3 f383 	clz	r3, r3
 80065a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	f1c3 031f 	rsb	r3, r3, #31
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	491e      	ldr	r1, [pc, #120]	; (8006628 <vTaskSwitchContext+0xac>)
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <vTaskSwitchContext+0x5a>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e7fe      	b.n	80065d4 <vTaskSwitchContext+0x58>
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4a11      	ldr	r2, [pc, #68]	; (8006628 <vTaskSwitchContext+0xac>)
 80065e2:	4413      	add	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	605a      	str	r2, [r3, #4]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	3308      	adds	r3, #8
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d104      	bne.n	8006606 <vTaskSwitchContext+0x8a>
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4a07      	ldr	r2, [pc, #28]	; (800662c <vTaskSwitchContext+0xb0>)
 800660e:	6013      	str	r3, [r2, #0]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	200003d0 	.word	0x200003d0
 8006620:	200003bc 	.word	0x200003bc
 8006624:	200003b0 	.word	0x200003b0
 8006628:	200002ac 	.word	0x200002ac
 800662c:	200002a8 	.word	0x200002a8

08006630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <vTaskPlaceOnEventList+0x24>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e7fe      	b.n	8006652 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <vTaskPlaceOnEventList+0x44>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3318      	adds	r3, #24
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fe fe44 	bl	80052ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006662:	2101      	movs	r1, #1
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f000 fb9d 	bl	8006da4 <prvAddCurrentTaskToDelayedList>
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200002a8 	.word	0x200002a8

08006678 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d109      	bne.n	80066a2 <xTaskRemoveFromEventList+0x2a>
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e7fe      	b.n	80066a0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	3318      	adds	r3, #24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe fe58 	bl	800535c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066ac:	4b1d      	ldr	r3, [pc, #116]	; (8006724 <xTaskRemoveFromEventList+0xac>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d11c      	bne.n	80066ee <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fe4f 	bl	800535c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	2201      	movs	r2, #1
 80066c4:	409a      	lsls	r2, r3
 80066c6:	4b18      	ldr	r3, [pc, #96]	; (8006728 <xTaskRemoveFromEventList+0xb0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	4a16      	ldr	r2, [pc, #88]	; (8006728 <xTaskRemoveFromEventList+0xb0>)
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <xTaskRemoveFromEventList+0xb4>)
 80066de:	441a      	add	r2, r3
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f7fe fddb 	bl	80052a2 <vListInsertEnd>
 80066ec:	e005      	b.n	80066fa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	3318      	adds	r3, #24
 80066f2:	4619      	mov	r1, r3
 80066f4:	480e      	ldr	r0, [pc, #56]	; (8006730 <xTaskRemoveFromEventList+0xb8>)
 80066f6:	f7fe fdd4 	bl	80052a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fe:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <xTaskRemoveFromEventList+0xbc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	429a      	cmp	r2, r3
 8006706:	d905      	bls.n	8006714 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <xTaskRemoveFromEventList+0xc0>)
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	e001      	b.n	8006718 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006718:	697b      	ldr	r3, [r7, #20]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200003d0 	.word	0x200003d0
 8006728:	200003b0 	.word	0x200003b0
 800672c:	200002ac 	.word	0x200002ac
 8006730:	20000368 	.word	0x20000368
 8006734:	200002a8 	.word	0x200002a8
 8006738:	200003bc 	.word	0x200003bc

0800673c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <vTaskInternalSetTimeOutState+0x24>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <vTaskInternalSetTimeOutState+0x28>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	605a      	str	r2, [r3, #4]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	200003c0 	.word	0x200003c0
 8006764:	200003ac 	.word	0x200003ac

08006768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <xTaskCheckForTimeOut+0x24>
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	e7fe      	b.n	800678a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d109      	bne.n	80067a6 <xTaskCheckForTimeOut+0x3e>
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e7fe      	b.n	80067a4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80067a6:	f000 fc89 	bl	80070bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067aa:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <xTaskCheckForTimeOut+0xb8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d102      	bne.n	80067ca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	e023      	b.n	8006812 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b15      	ldr	r3, [pc, #84]	; (8006824 <xTaskCheckForTimeOut+0xbc>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d007      	beq.n	80067e6 <xTaskCheckForTimeOut+0x7e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d302      	bcc.n	80067e6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067e0:	2301      	movs	r3, #1
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	e015      	b.n	8006812 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d20b      	bcs.n	8006808 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	1ad2      	subs	r2, r2, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff ff9d 	bl	800673c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	e004      	b.n	8006812 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800680e:	2301      	movs	r3, #1
 8006810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006812:	f000 fc81 	bl	8007118 <vPortExitCritical>

	return xReturn;
 8006816:	69fb      	ldr	r3, [r7, #28]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	200003ac 	.word	0x200003ac
 8006824:	200003c0 	.word	0x200003c0

08006828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <vTaskMissedYield+0x14>)
 800682e:	2201      	movs	r2, #1
 8006830:	601a      	str	r2, [r3, #0]
}
 8006832:	bf00      	nop
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	200003bc 	.word	0x200003bc

08006840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006848:	f000 f852 	bl	80068f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <prvIdleTask+0x28>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d9f9      	bls.n	8006848 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <prvIdleTask+0x2c>)
 8006856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006864:	e7f0      	b.n	8006848 <prvIdleTask+0x8>
 8006866:	bf00      	nop
 8006868:	200002ac 	.word	0x200002ac
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006876:	2300      	movs	r3, #0
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	e00c      	b.n	8006896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4a12      	ldr	r2, [pc, #72]	; (80068d0 <prvInitialiseTaskLists+0x60>)
 8006888:	4413      	add	r3, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fcdc 	bl	8005248 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3301      	adds	r3, #1
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b06      	cmp	r3, #6
 800689a:	d9ef      	bls.n	800687c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800689c:	480d      	ldr	r0, [pc, #52]	; (80068d4 <prvInitialiseTaskLists+0x64>)
 800689e:	f7fe fcd3 	bl	8005248 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068a2:	480d      	ldr	r0, [pc, #52]	; (80068d8 <prvInitialiseTaskLists+0x68>)
 80068a4:	f7fe fcd0 	bl	8005248 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068a8:	480c      	ldr	r0, [pc, #48]	; (80068dc <prvInitialiseTaskLists+0x6c>)
 80068aa:	f7fe fccd 	bl	8005248 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068ae:	480c      	ldr	r0, [pc, #48]	; (80068e0 <prvInitialiseTaskLists+0x70>)
 80068b0:	f7fe fcca 	bl	8005248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068b4:	480b      	ldr	r0, [pc, #44]	; (80068e4 <prvInitialiseTaskLists+0x74>)
 80068b6:	f7fe fcc7 	bl	8005248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ba:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <prvInitialiseTaskLists+0x78>)
 80068bc:	4a05      	ldr	r2, [pc, #20]	; (80068d4 <prvInitialiseTaskLists+0x64>)
 80068be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068c0:	4b0a      	ldr	r3, [pc, #40]	; (80068ec <prvInitialiseTaskLists+0x7c>)
 80068c2:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <prvInitialiseTaskLists+0x68>)
 80068c4:	601a      	str	r2, [r3, #0]
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200002ac 	.word	0x200002ac
 80068d4:	20000338 	.word	0x20000338
 80068d8:	2000034c 	.word	0x2000034c
 80068dc:	20000368 	.word	0x20000368
 80068e0:	2000037c 	.word	0x2000037c
 80068e4:	20000394 	.word	0x20000394
 80068e8:	20000360 	.word	0x20000360
 80068ec:	20000364 	.word	0x20000364

080068f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068f6:	e019      	b.n	800692c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068f8:	f000 fbe0 	bl	80070bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068fc:	4b0f      	ldr	r3, [pc, #60]	; (800693c <prvCheckTasksWaitingTermination+0x4c>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3304      	adds	r3, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fd27 	bl	800535c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <prvCheckTasksWaitingTermination+0x50>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3b01      	subs	r3, #1
 8006914:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <prvCheckTasksWaitingTermination+0x50>)
 8006916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006918:	4b0a      	ldr	r3, [pc, #40]	; (8006944 <prvCheckTasksWaitingTermination+0x54>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <prvCheckTasksWaitingTermination+0x54>)
 8006920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006922:	f000 fbf9 	bl	8007118 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f80e 	bl	8006948 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <prvCheckTasksWaitingTermination+0x54>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e1      	bne.n	80068f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006934:	bf00      	nop
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	2000037c 	.word	0x2000037c
 8006940:	200003a8 	.word	0x200003a8
 8006944:	20000390 	.word	0x20000390

08006948 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006956:	2b00      	cmp	r3, #0
 8006958:	d108      	bne.n	800696c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fd88 	bl	8007474 <vPortFree>
				vPortFree( pxTCB );
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fd85 	bl	8007474 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800696a:	e017      	b.n	800699c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006972:	2b01      	cmp	r3, #1
 8006974:	d103      	bne.n	800697e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fd7c 	bl	8007474 <vPortFree>
	}
 800697c:	e00e      	b.n	800699c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006984:	2b02      	cmp	r3, #2
 8006986:	d009      	beq.n	800699c <prvDeleteTCB+0x54>
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e7fe      	b.n	800699a <prvDeleteTCB+0x52>
	}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069aa:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <prvResetNextTaskUnblockTime+0x44>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <prvResetNextTaskUnblockTime+0x14>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <prvResetNextTaskUnblockTime+0x16>
 80069b8:	2300      	movs	r3, #0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069be:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <prvResetNextTaskUnblockTime+0x48>)
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295
 80069c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069c6:	e008      	b.n	80069da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069c8:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <prvResetNextTaskUnblockTime+0x44>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	4a05      	ldr	r2, [pc, #20]	; (80069ec <prvResetNextTaskUnblockTime+0x48>)
 80069d8:	6013      	str	r3, [r2, #0]
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000360 	.word	0x20000360
 80069ec:	200003c8 	.word	0x200003c8

080069f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <xTaskGetSchedulerState+0x34>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069fe:	2301      	movs	r3, #1
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	e008      	b.n	8006a16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a04:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <xTaskGetSchedulerState+0x38>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	e001      	b.n	8006a16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a12:	2300      	movs	r3, #0
 8006a14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a16:	687b      	ldr	r3, [r7, #4]
	}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	200003b4 	.word	0x200003b4
 8006a28:	200003d0 	.word	0x200003d0

08006a2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d06e      	beq.n	8006b20 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a46:	4b39      	ldr	r3, [pc, #228]	; (8006b2c <xTaskPriorityInherit+0x100>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d25e      	bcs.n	8006b0e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	db06      	blt.n	8006a66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a58:	4b34      	ldr	r3, [pc, #208]	; (8006b2c <xTaskPriorityInherit+0x100>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	f1c3 0207 	rsb	r2, r3, #7
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	6959      	ldr	r1, [r3, #20]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4a2e      	ldr	r2, [pc, #184]	; (8006b30 <xTaskPriorityInherit+0x104>)
 8006a78:	4413      	add	r3, r2
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	d101      	bne.n	8006a82 <xTaskPriorityInherit+0x56>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <xTaskPriorityInherit+0x58>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d03a      	beq.n	8006afe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fc65 	bl	800535c <uxListRemove>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d115      	bne.n	8006ac4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9c:	4924      	ldr	r1, [pc, #144]	; (8006b30 <xTaskPriorityInherit+0x104>)
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	440b      	add	r3, r1
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <xTaskPriorityInherit+0x98>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	43da      	mvns	r2, r3
 8006aba:	4b1e      	ldr	r3, [pc, #120]	; (8006b34 <xTaskPriorityInherit+0x108>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <xTaskPriorityInherit+0x108>)
 8006ac2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <xTaskPriorityInherit+0x100>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <xTaskPriorityInherit+0x108>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <xTaskPriorityInherit+0x108>)
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4a10      	ldr	r2, [pc, #64]	; (8006b30 <xTaskPriorityInherit+0x104>)
 8006aee:	441a      	add	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fe fbd3 	bl	80052a2 <vListInsertEnd>
 8006afc:	e004      	b.n	8006b08 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <xTaskPriorityInherit+0x100>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	e008      	b.n	8006b20 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <xTaskPriorityInherit+0x100>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d201      	bcs.n	8006b20 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b20:	68fb      	ldr	r3, [r7, #12]
	}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200002a8 	.word	0x200002a8
 8006b30:	200002ac 	.word	0x200002ac
 8006b34:	200003b0 	.word	0x200003b0

08006b38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d06c      	beq.n	8006c28 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b4e:	4b39      	ldr	r3, [pc, #228]	; (8006c34 <xTaskPriorityDisinherit+0xfc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d009      	beq.n	8006b6c <xTaskPriorityDisinherit+0x34>
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	e7fe      	b.n	8006b6a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <xTaskPriorityDisinherit+0x50>
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	e7fe      	b.n	8006b86 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d044      	beq.n	8006c28 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d140      	bne.n	8006c28 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fbd6 	bl	800535c <uxListRemove>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d115      	bne.n	8006be2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	491f      	ldr	r1, [pc, #124]	; (8006c38 <xTaskPriorityDisinherit+0x100>)
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10a      	bne.n	8006be2 <xTaskPriorityDisinherit+0xaa>
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <xTaskPriorityDisinherit+0x104>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <xTaskPriorityDisinherit+0x104>)
 8006be0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	f1c3 0207 	rsb	r2, r3, #7
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	409a      	lsls	r2, r3
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <xTaskPriorityDisinherit+0x104>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <xTaskPriorityDisinherit+0x104>)
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4a08      	ldr	r2, [pc, #32]	; (8006c38 <xTaskPriorityDisinherit+0x100>)
 8006c16:	441a      	add	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7fe fb3f 	bl	80052a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c28:	697b      	ldr	r3, [r7, #20]
	}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200002a8 	.word	0x200002a8
 8006c38:	200002ac 	.word	0x200002ac
 8006c3c:	200003b0 	.word	0x200003b0

08006c40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8086 	beq.w	8006d66 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e7fe      	b.n	8006c74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d902      	bls.n	8006c86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	61fb      	str	r3, [r7, #28]
 8006c84:	e002      	b.n	8006c8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d067      	beq.n	8006d66 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d162      	bne.n	8006d66 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ca0:	4b33      	ldr	r3, [pc, #204]	; (8006d70 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d109      	bne.n	8006cbe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	e7fe      	b.n	8006cbc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	db04      	blt.n	8006cdc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	f1c3 0207 	rsb	r2, r3, #7
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	6959      	ldr	r1, [r3, #20]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4a22      	ldr	r2, [pc, #136]	; (8006d74 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006cec:	4413      	add	r3, r2
 8006cee:	4299      	cmp	r1, r3
 8006cf0:	d101      	bne.n	8006cf6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d034      	beq.n	8006d66 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fe fb2b 	bl	800535c <uxListRemove>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d115      	bne.n	8006d38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	4918      	ldr	r1, [pc, #96]	; (8006d74 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	2201      	movs	r2, #1
 8006d28:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2c:	43da      	mvns	r2, r3
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4013      	ands	r3, r2
 8006d34:	4a10      	ldr	r2, [pc, #64]	; (8006d78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d36:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	409a      	lsls	r2, r3
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006d58:	441a      	add	r2, r3
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fe fa9e 	bl	80052a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d66:	bf00      	nop
 8006d68:	3720      	adds	r7, #32
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	200002a8 	.word	0x200002a8
 8006d74:	200002ac 	.word	0x200002ac
 8006d78:	200003b0 	.word	0x200003b0

08006d7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d004      	beq.n	8006d92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d88:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d8e:	3201      	adds	r2, #1
 8006d90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d92:	4b03      	ldr	r3, [pc, #12]	; (8006da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d94:	681b      	ldr	r3, [r3, #0]
	}
 8006d96:	4618      	mov	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	200002a8 	.word	0x200002a8

08006da4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dae:	4b29      	ldr	r3, [pc, #164]	; (8006e54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006db4:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3304      	adds	r3, #4
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe face 	bl	800535c <uxListRemove>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10b      	bne.n	8006dde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006dc6:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	2201      	movs	r2, #1
 8006dce:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd2:	43da      	mvns	r2, r3
 8006dd4:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	4a20      	ldr	r2, [pc, #128]	; (8006e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d10a      	bne.n	8006dfc <prvAddCurrentTaskToDelayedList+0x58>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d007      	beq.n	8006dfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	481a      	ldr	r0, [pc, #104]	; (8006e60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006df6:	f7fe fa54 	bl	80052a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dfa:	e026      	b.n	8006e4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4413      	add	r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e04:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d209      	bcs.n	8006e28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e14:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	4619      	mov	r1, r3
 8006e20:	4610      	mov	r0, r2
 8006e22:	f7fe fa62 	bl	80052ea <vListInsert>
}
 8006e26:	e010      	b.n	8006e4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e28:	4b0f      	ldr	r3, [pc, #60]	; (8006e68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3304      	adds	r3, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	4610      	mov	r0, r2
 8006e36:	f7fe fa58 	bl	80052ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d202      	bcs.n	8006e4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e44:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	6013      	str	r3, [r2, #0]
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200003ac 	.word	0x200003ac
 8006e58:	200002a8 	.word	0x200002a8
 8006e5c:	200003b0 	.word	0x200003b0
 8006e60:	20000394 	.word	0x20000394
 8006e64:	20000364 	.word	0x20000364
 8006e68:	20000360 	.word	0x20000360
 8006e6c:	200003c8 	.word	0x200003c8

08006e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3b04      	subs	r3, #4
 8006e80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3b04      	subs	r3, #4
 8006e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f023 0201 	bic.w	r2, r3, #1
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3b04      	subs	r3, #4
 8006e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ea0:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <pxPortInitialiseStack+0x64>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3b14      	subs	r3, #20
 8006eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3b04      	subs	r3, #4
 8006eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f06f 0202 	mvn.w	r2, #2
 8006ebe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3b20      	subs	r3, #32
 8006ec4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	08006ed9 	.word	0x08006ed9

08006ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ee2:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <prvTaskExitError+0x50>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d009      	beq.n	8006f00 <prvTaskExitError+0x28>
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	e7fe      	b.n	8006efe <prvTaskExitError+0x26>
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f12:	bf00      	nop
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0fc      	beq.n	8006f14 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f1a:	bf00      	nop
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	2000000c 	.word	0x2000000c
 8006f2c:	00000000 	.word	0x00000000

08006f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <pxCurrentTCBConst2>)
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	6808      	ldr	r0, [r1, #0]
 8006f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	f380 8809 	msr	PSP, r0
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f380 8811 	msr	BASEPRI, r0
 8006f4a:	4770      	bx	lr
 8006f4c:	f3af 8000 	nop.w

08006f50 <pxCurrentTCBConst2>:
 8006f50:	200002a8 	.word	0x200002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop

08006f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f58:	4808      	ldr	r0, [pc, #32]	; (8006f7c <prvPortStartFirstTask+0x24>)
 8006f5a:	6800      	ldr	r0, [r0, #0]
 8006f5c:	6800      	ldr	r0, [r0, #0]
 8006f5e:	f380 8808 	msr	MSP, r0
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8814 	msr	CONTROL, r0
 8006f6a:	b662      	cpsie	i
 8006f6c:	b661      	cpsie	f
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	df00      	svc	0
 8006f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f7a:	bf00      	nop
 8006f7c:	e000ed08 	.word	0xe000ed08

08006f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f86:	4b44      	ldr	r3, [pc, #272]	; (8007098 <xPortStartScheduler+0x118>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a44      	ldr	r2, [pc, #272]	; (800709c <xPortStartScheduler+0x11c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d109      	bne.n	8006fa4 <xPortStartScheduler+0x24>
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e7fe      	b.n	8006fa2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fa4:	4b3c      	ldr	r3, [pc, #240]	; (8007098 <xPortStartScheduler+0x118>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a3d      	ldr	r2, [pc, #244]	; (80070a0 <xPortStartScheduler+0x120>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d109      	bne.n	8006fc2 <xPortStartScheduler+0x42>
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e7fe      	b.n	8006fc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fc2:	4b38      	ldr	r3, [pc, #224]	; (80070a4 <xPortStartScheduler+0x124>)
 8006fc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	22ff      	movs	r2, #255	; 0xff
 8006fd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <xPortStartScheduler+0x128>)
 8006fe8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fea:	4b30      	ldr	r3, [pc, #192]	; (80070ac <xPortStartScheduler+0x12c>)
 8006fec:	2207      	movs	r2, #7
 8006fee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ff0:	e009      	b.n	8007006 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006ff2:	4b2e      	ldr	r3, [pc, #184]	; (80070ac <xPortStartScheduler+0x12c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	4a2c      	ldr	r2, [pc, #176]	; (80070ac <xPortStartScheduler+0x12c>)
 8006ffa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d0ef      	beq.n	8006ff2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007012:	4b26      	ldr	r3, [pc, #152]	; (80070ac <xPortStartScheduler+0x12c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f1c3 0307 	rsb	r3, r3, #7
 800701a:	2b04      	cmp	r3, #4
 800701c:	d009      	beq.n	8007032 <xPortStartScheduler+0xb2>
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60bb      	str	r3, [r7, #8]
 8007030:	e7fe      	b.n	8007030 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007032:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <xPortStartScheduler+0x12c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <xPortStartScheduler+0x12c>)
 800703a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800703c:	4b1b      	ldr	r3, [pc, #108]	; (80070ac <xPortStartScheduler+0x12c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007044:	4a19      	ldr	r2, [pc, #100]	; (80070ac <xPortStartScheduler+0x12c>)
 8007046:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <xPortStartScheduler+0x130>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <xPortStartScheduler+0x130>)
 8007056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800705a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <xPortStartScheduler+0x130>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a13      	ldr	r2, [pc, #76]	; (80070b0 <xPortStartScheduler+0x130>)
 8007062:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007066:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007068:	f000 f8d6 	bl	8007218 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800706c:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <xPortStartScheduler+0x134>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007072:	f000 f8f5 	bl	8007260 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007076:	4b10      	ldr	r3, [pc, #64]	; (80070b8 <xPortStartScheduler+0x138>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a0f      	ldr	r2, [pc, #60]	; (80070b8 <xPortStartScheduler+0x138>)
 800707c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007080:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007082:	f7ff ff69 	bl	8006f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007086:	f7ff fa79 	bl	800657c <vTaskSwitchContext>
	prvTaskExitError();
 800708a:	f7ff ff25 	bl	8006ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed00 	.word	0xe000ed00
 800709c:	410fc271 	.word	0x410fc271
 80070a0:	410fc270 	.word	0x410fc270
 80070a4:	e000e400 	.word	0xe000e400
 80070a8:	200003d4 	.word	0x200003d4
 80070ac:	200003d8 	.word	0x200003d8
 80070b0:	e000ed20 	.word	0xe000ed20
 80070b4:	2000000c 	.word	0x2000000c
 80070b8:	e000ef34 	.word	0xe000ef34

080070bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070d4:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <vPortEnterCritical+0x54>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	4a0d      	ldr	r2, [pc, #52]	; (8007110 <vPortEnterCritical+0x54>)
 80070dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <vPortEnterCritical+0x54>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d10e      	bne.n	8007104 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070e6:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <vPortEnterCritical+0x58>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d009      	beq.n	8007104 <vPortEnterCritical+0x48>
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	e7fe      	b.n	8007102 <vPortEnterCritical+0x46>
	}
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	2000000c 	.word	0x2000000c
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800711e:	4b11      	ldr	r3, [pc, #68]	; (8007164 <vPortExitCritical+0x4c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <vPortExitCritical+0x22>
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	607b      	str	r3, [r7, #4]
 8007138:	e7fe      	b.n	8007138 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800713a:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <vPortExitCritical+0x4c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3b01      	subs	r3, #1
 8007140:	4a08      	ldr	r2, [pc, #32]	; (8007164 <vPortExitCritical+0x4c>)
 8007142:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007144:	4b07      	ldr	r3, [pc, #28]	; (8007164 <vPortExitCritical+0x4c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <vPortExitCritical+0x3e>
 800714c:	2300      	movs	r3, #0
 800714e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	2000000c 	.word	0x2000000c
	...

08007170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007170:	f3ef 8009 	mrs	r0, PSP
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	4b15      	ldr	r3, [pc, #84]	; (80071d0 <pxCurrentTCBConst>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	f01e 0f10 	tst.w	lr, #16
 8007180:	bf08      	it	eq
 8007182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718a:	6010      	str	r0, [r2, #0]
 800718c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007194:	f380 8811 	msr	BASEPRI, r0
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f7ff f9ec 	bl	800657c <vTaskSwitchContext>
 80071a4:	f04f 0000 	mov.w	r0, #0
 80071a8:	f380 8811 	msr	BASEPRI, r0
 80071ac:	bc09      	pop	{r0, r3}
 80071ae:	6819      	ldr	r1, [r3, #0]
 80071b0:	6808      	ldr	r0, [r1, #0]
 80071b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b6:	f01e 0f10 	tst.w	lr, #16
 80071ba:	bf08      	it	eq
 80071bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071c0:	f380 8809 	msr	PSP, r0
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	f3af 8000 	nop.w

080071d0 <pxCurrentTCBConst>:
 80071d0:	200002a8 	.word	0x200002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071f0:	f7ff f908 	bl	8006404 <xTaskIncrementTick>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071fa:	4b06      	ldr	r3, [pc, #24]	; (8007214 <SysTick_Handler+0x3c>)
 80071fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	2300      	movs	r3, #0
 8007204:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800721c:	4b0b      	ldr	r3, [pc, #44]	; (800724c <vPortSetupTimerInterrupt+0x34>)
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <vPortSetupTimerInterrupt+0x38>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <vPortSetupTimerInterrupt+0x3c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <vPortSetupTimerInterrupt+0x40>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	4a09      	ldr	r2, [pc, #36]	; (800725c <vPortSetupTimerInterrupt+0x44>)
 8007236:	3b01      	subs	r3, #1
 8007238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800723a:	4b04      	ldr	r3, [pc, #16]	; (800724c <vPortSetupTimerInterrupt+0x34>)
 800723c:	2207      	movs	r2, #7
 800723e:	601a      	str	r2, [r3, #0]
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	e000e010 	.word	0xe000e010
 8007250:	e000e018 	.word	0xe000e018
 8007254:	20000000 	.word	0x20000000
 8007258:	10624dd3 	.word	0x10624dd3
 800725c:	e000e014 	.word	0xe000e014

08007260 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007260:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007270 <vPortEnableVFP+0x10>
 8007264:	6801      	ldr	r1, [r0, #0]
 8007266:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800726a:	6001      	str	r1, [r0, #0]
 800726c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800726e:	bf00      	nop
 8007270:	e000ed88 	.word	0xe000ed88

08007274 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800727a:	f3ef 8305 	mrs	r3, IPSR
 800727e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b0f      	cmp	r3, #15
 8007284:	d913      	bls.n	80072ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007286:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <vPortValidateInterruptPriority+0x6c>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007290:	4b14      	ldr	r3, [pc, #80]	; (80072e4 <vPortValidateInterruptPriority+0x70>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	7afa      	ldrb	r2, [r7, #11]
 8007296:	429a      	cmp	r2, r3
 8007298:	d209      	bcs.n	80072ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	e7fe      	b.n	80072ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072ae:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <vPortValidateInterruptPriority+0x74>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072b6:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <vPortValidateInterruptPriority+0x78>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d909      	bls.n	80072d2 <vPortValidateInterruptPriority+0x5e>
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	e7fe      	b.n	80072d0 <vPortValidateInterruptPriority+0x5c>
	}
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	e000e3f0 	.word	0xe000e3f0
 80072e4:	200003d4 	.word	0x200003d4
 80072e8:	e000ed0c 	.word	0xe000ed0c
 80072ec:	200003d8 	.word	0x200003d8

080072f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072fc:	f7fe ffd8 	bl	80062b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007300:	4b57      	ldr	r3, [pc, #348]	; (8007460 <pvPortMalloc+0x170>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007308:	f000 f90c 	bl	8007524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800730c:	4b55      	ldr	r3, [pc, #340]	; (8007464 <pvPortMalloc+0x174>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4013      	ands	r3, r2
 8007314:	2b00      	cmp	r3, #0
 8007316:	f040 808c 	bne.w	8007432 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01c      	beq.n	800735a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007320:	2208      	movs	r2, #8
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4413      	add	r3, r2
 8007326:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f003 0307 	and.w	r3, r3, #7
 800732e:	2b00      	cmp	r3, #0
 8007330:	d013      	beq.n	800735a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f023 0307 	bic.w	r3, r3, #7
 8007338:	3308      	adds	r3, #8
 800733a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <pvPortMalloc+0x6a>
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e7fe      	b.n	8007358 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d068      	beq.n	8007432 <pvPortMalloc+0x142>
 8007360:	4b41      	ldr	r3, [pc, #260]	; (8007468 <pvPortMalloc+0x178>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	429a      	cmp	r2, r3
 8007368:	d863      	bhi.n	8007432 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800736a:	4b40      	ldr	r3, [pc, #256]	; (800746c <pvPortMalloc+0x17c>)
 800736c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800736e:	4b3f      	ldr	r3, [pc, #252]	; (800746c <pvPortMalloc+0x17c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007374:	e004      	b.n	8007380 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d903      	bls.n	8007392 <pvPortMalloc+0xa2>
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f1      	bne.n	8007376 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007392:	4b33      	ldr	r3, [pc, #204]	; (8007460 <pvPortMalloc+0x170>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007398:	429a      	cmp	r2, r3
 800739a:	d04a      	beq.n	8007432 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2208      	movs	r2, #8
 80073a2:	4413      	add	r3, r2
 80073a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	1ad2      	subs	r2, r2, r3
 80073b6:	2308      	movs	r3, #8
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d91e      	bls.n	80073fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <pvPortMalloc+0xf4>
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	e7fe      	b.n	80073e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073f6:	69b8      	ldr	r0, [r7, #24]
 80073f8:	f000 f8f6 	bl	80075e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073fc:	4b1a      	ldr	r3, [pc, #104]	; (8007468 <pvPortMalloc+0x178>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <pvPortMalloc+0x178>)
 8007408:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800740a:	4b17      	ldr	r3, [pc, #92]	; (8007468 <pvPortMalloc+0x178>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b18      	ldr	r3, [pc, #96]	; (8007470 <pvPortMalloc+0x180>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d203      	bcs.n	800741e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <pvPortMalloc+0x178>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a15      	ldr	r2, [pc, #84]	; (8007470 <pvPortMalloc+0x180>)
 800741c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	4b10      	ldr	r3, [pc, #64]	; (8007464 <pvPortMalloc+0x174>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	431a      	orrs	r2, r3
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007432:	f7fe ff4b 	bl	80062cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <pvPortMalloc+0x164>
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	e7fe      	b.n	8007452 <pvPortMalloc+0x162>
	return pvReturn;
 8007454:	69fb      	ldr	r3, [r7, #28]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3728      	adds	r7, #40	; 0x28
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000f9c 	.word	0x20000f9c
 8007464:	20000fa8 	.word	0x20000fa8
 8007468:	20000fa0 	.word	0x20000fa0
 800746c:	20000f94 	.word	0x20000f94
 8007470:	20000fa4 	.word	0x20000fa4

08007474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d046      	beq.n	8007514 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007486:	2308      	movs	r3, #8
 8007488:	425b      	negs	r3, r3
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4413      	add	r3, r2
 800748e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <vPortFree+0xa8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d109      	bne.n	80074b6 <vPortFree+0x42>
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e7fe      	b.n	80074b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <vPortFree+0x5e>
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60bb      	str	r3, [r7, #8]
 80074d0:	e7fe      	b.n	80074d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	4b11      	ldr	r3, [pc, #68]	; (800751c <vPortFree+0xa8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4013      	ands	r3, r2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d019      	beq.n	8007514 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d115      	bne.n	8007514 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <vPortFree+0xa8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	43db      	mvns	r3, r3
 80074f2:	401a      	ands	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074f8:	f7fe feda 	bl	80062b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <vPortFree+0xac>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4413      	add	r3, r2
 8007506:	4a06      	ldr	r2, [pc, #24]	; (8007520 <vPortFree+0xac>)
 8007508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f000 f86c 	bl	80075e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007510:	f7fe fedc 	bl	80062cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007514:	bf00      	nop
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20000fa8 	.word	0x20000fa8
 8007520:	20000fa0 	.word	0x20000fa0

08007524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800752a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800752e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007530:	4b27      	ldr	r3, [pc, #156]	; (80075d0 <prvHeapInit+0xac>)
 8007532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3307      	adds	r3, #7
 8007542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <prvHeapInit+0xac>)
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800755c:	4a1d      	ldr	r2, [pc, #116]	; (80075d4 <prvHeapInit+0xb0>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007562:	4b1c      	ldr	r3, [pc, #112]	; (80075d4 <prvHeapInit+0xb0>)
 8007564:	2200      	movs	r2, #0
 8007566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4413      	add	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007570:	2208      	movs	r2, #8
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <prvHeapInit+0xb4>)
 8007584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <prvHeapInit+0xb4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800758e:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <prvHeapInit+0xb4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <prvHeapInit+0xb4>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <prvHeapInit+0xb8>)
 80075b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <prvHeapInit+0xbc>)
 80075ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075bc:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <prvHeapInit+0xc0>)
 80075be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	200003dc 	.word	0x200003dc
 80075d4:	20000f94 	.word	0x20000f94
 80075d8:	20000f9c 	.word	0x20000f9c
 80075dc:	20000fa4 	.word	0x20000fa4
 80075e0:	20000fa0 	.word	0x20000fa0
 80075e4:	20000fa8 	.word	0x20000fa8

080075e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075f0:	4b28      	ldr	r3, [pc, #160]	; (8007694 <prvInsertBlockIntoFreeList+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e002      	b.n	80075fc <prvInsertBlockIntoFreeList+0x14>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	429a      	cmp	r2, r3
 8007604:	d8f7      	bhi.n	80075f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4413      	add	r3, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d108      	bne.n	800762a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d118      	bne.n	8007670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d00d      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	441a      	add	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e008      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007666:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e003      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d002      	beq.n	8007686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20000f94 	.word	0x20000f94
 8007698:	20000f9c 	.word	0x20000f9c

0800769c <__libc_init_array>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4e0d      	ldr	r6, [pc, #52]	; (80076d4 <__libc_init_array+0x38>)
 80076a0:	4c0d      	ldr	r4, [pc, #52]	; (80076d8 <__libc_init_array+0x3c>)
 80076a2:	1ba4      	subs	r4, r4, r6
 80076a4:	10a4      	asrs	r4, r4, #2
 80076a6:	2500      	movs	r5, #0
 80076a8:	42a5      	cmp	r5, r4
 80076aa:	d109      	bne.n	80076c0 <__libc_init_array+0x24>
 80076ac:	4e0b      	ldr	r6, [pc, #44]	; (80076dc <__libc_init_array+0x40>)
 80076ae:	4c0c      	ldr	r4, [pc, #48]	; (80076e0 <__libc_init_array+0x44>)
 80076b0:	f000 f82c 	bl	800770c <_init>
 80076b4:	1ba4      	subs	r4, r4, r6
 80076b6:	10a4      	asrs	r4, r4, #2
 80076b8:	2500      	movs	r5, #0
 80076ba:	42a5      	cmp	r5, r4
 80076bc:	d105      	bne.n	80076ca <__libc_init_array+0x2e>
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076c4:	4798      	blx	r3
 80076c6:	3501      	adds	r5, #1
 80076c8:	e7ee      	b.n	80076a8 <__libc_init_array+0xc>
 80076ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ce:	4798      	blx	r3
 80076d0:	3501      	adds	r5, #1
 80076d2:	e7f2      	b.n	80076ba <__libc_init_array+0x1e>
 80076d4:	080078f8 	.word	0x080078f8
 80076d8:	080078f8 	.word	0x080078f8
 80076dc:	080078f8 	.word	0x080078f8
 80076e0:	080078fc 	.word	0x080078fc

080076e4 <memcpy>:
 80076e4:	b510      	push	{r4, lr}
 80076e6:	1e43      	subs	r3, r0, #1
 80076e8:	440a      	add	r2, r1
 80076ea:	4291      	cmp	r1, r2
 80076ec:	d100      	bne.n	80076f0 <memcpy+0xc>
 80076ee:	bd10      	pop	{r4, pc}
 80076f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076f8:	e7f7      	b.n	80076ea <memcpy+0x6>

080076fa <memset>:
 80076fa:	4402      	add	r2, r0
 80076fc:	4603      	mov	r3, r0
 80076fe:	4293      	cmp	r3, r2
 8007700:	d100      	bne.n	8007704 <memset+0xa>
 8007702:	4770      	bx	lr
 8007704:	f803 1b01 	strb.w	r1, [r3], #1
 8007708:	e7f9      	b.n	80076fe <memset+0x4>
	...

0800770c <_init>:
 800770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770e:	bf00      	nop
 8007710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007712:	bc08      	pop	{r3}
 8007714:	469e      	mov	lr, r3
 8007716:	4770      	bx	lr

08007718 <_fini>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr
