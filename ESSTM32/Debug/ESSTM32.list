
ESSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a0  080067a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a8  080067a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080067b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000162c  20000010  080067c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  080067c0  0002163c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d21  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004142  00000000  00000000  00043d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002020  00000000  00000000  00047ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e38  00000000  00000000  00049ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a879  00000000  00000000  0004bd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017db6  00000000  00000000  00076579  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010366d  00000000  00000000  0008e32f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019199c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089b0  00000000  00000000  00191a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066e8 	.word	0x080066e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080066e8 	.word	0x080066e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:

void SerialPrintTask(void const *argument);


/******************************* MAIN ******************************************/
int main(void) {
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0
    // SETUP HERE

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800051a:	f000 ff80 	bl	800141e <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 800051e:	f000 f83b 	bl	8000598 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000522:	f000 fa47 	bl	80009b4 <MX_GPIO_Init>
    MX_DFSDM1_Init();
 8000526:	f000 f8db 	bl	80006e0 <MX_DFSDM1_Init>
    MX_I2C2_Init();
 800052a:	f000 f911 	bl	8000750 <MX_I2C2_Init>
    MX_QUADSPI_Init();
 800052e:	f000 f94f 	bl	80007d0 <MX_QUADSPI_Init>
    MX_SPI3_Init();
 8000532:	f000 f973 	bl	800081c <MX_SPI3_Init>
    MX_USART1_UART_Init();
 8000536:	f000 f9af 	bl	8000898 <MX_USART1_UART_Init>
    MX_USART3_UART_Init();
 800053a:	f000 f9dd 	bl	80008f8 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 800053e:	f000 fa0b 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>

    osMessageQDef(queueHandle, 256, uint8_t);
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <main+0x74>)
 8000544:	f107 0420 	add.w	r4, r7, #32
 8000548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    QueueHandle = osMessageCreate(osMessageQ(queueHandle), NULL);
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f004 fd36 	bl	8004fc6 <osMessageCreate>
 800055a:	4602      	mov	r2, r0
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <main+0x78>)
 800055e:	601a      	str	r2, [r3, #0]
    /* Create the thread(s) attributes */
    // osThreadDef(taskBlink1, TaskBlink1, osPriorityNormal, 0, 128);
    // osThreadDef(taskBlink2, TaskBlink2, osPriorityNormal, 0, 128);
    // osThreadDef(taskReceiver, StartQueueTaskReceiver, osPriorityNormal, 0, 128);
    // osThreadDef(taskSender, StartQueueTaskSender, osPriorityNormal, 0, 128);
    osThreadDef(taskSerial, SerialPrintTask, osPriorityNormal, 0, 128);
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <main+0x7c>)
 8000562:	1d3c      	adds	r4, r7, #4
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    /* Create threads */
    // Blink1TaskHandle = osThreadCreate(osThread(taskBlink1), NULL);
    // Blink2TaskHandle = osThreadCreate(osThread(taskBlink2), NULL);
    // receiverTaskHandle = osThreadCreate(osThread(taskReceiver), NULL);
    // senderTaskHandle = osThreadCreate(osThread(taskSender), NULL);
    serialTaskHandle = osThreadCreate(osThread(taskSerial), NULL);
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fcc5 	bl	8004f06 <osThreadCreate>
 800057c:	4602      	mov	r2, r0
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <main+0x80>)
 8000580:	601a      	str	r2, [r3, #0]

    /* Start scheduler */
    osKernelStart();
 8000582:	f004 fcb9 	bl	8004ef8 <osKernelStart>

    // We should never get here as control is now taken by the scheduler.
    /* Infinite loop */
    while (1);
 8000586:	e7fe      	b.n	8000586 <main+0x72>
 8000588:	08006700 	.word	0x08006700
 800058c:	200015a8 	.word	0x200015a8
 8000590:	0800671c 	.word	0x0800671c
 8000594:	200014bc 	.word	0x200014bc

08000598 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b0b8      	sub	sp, #224	; 0xe0
 800059c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005a2:	2244      	movs	r2, #68	; 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 f896 	bl	80066d8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2288      	movs	r2, #136	; 0x88
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f006 f888 	bl	80066d8 <memset>

    /** Configure LSE Drive Capability */
    HAL_PWR_EnableBkUpAccess();
 80005c8:	f001 fdcc 	bl	8002164 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005cc:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <SystemClock_Config+0x140>)
 80005ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d2:	4a41      	ldr	r2, [pc, #260]	; (80006d8 <SystemClock_Config+0x140>)
 80005d4:	f023 0318 	bic.w	r3, r3, #24
 80005d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /** Initializes the CPU, AHB and APB busses clocks */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 80005dc:	2314      	movs	r3, #20
 80005de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005e2:	2301      	movs	r3, #1
 80005e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f4:	2360      	movs	r3, #96	; 0x60
 80005f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000600:	2301      	movs	r3, #1
 8000602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    RCC_OscInitStruct.PLL.PLLN = 40;
 800060c:	2328      	movs	r3, #40	; 0x28
 800060e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000612:	2307      	movs	r3, #7
 8000614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000624:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fee7 	bl	80023fc <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xa0>
        Error_Handler();
 8000634:	f000 fbce 	bl	8000dd4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000638:	230f      	movs	r3, #15
 800063a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2303      	movs	r3, #3
 8000640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000656:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800065a:	2104      	movs	r1, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fa7d 	bl	8002b5c <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xd4>
        Error_Handler();
 8000668:	f000 fbb4 	bl	8000dd4 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART3
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <SystemClock_Config+0x144>)
 800066e:	603b      	str	r3, [r7, #0]
                                         | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_DFSDM1
                                         | RCC_PERIPHCLK_USB;
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000674:	2300      	movs	r3, #0
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000678:	2300      	movs	r3, #0
 800067a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000682:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000686:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800068c:	2301      	movs	r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000690:	2318      	movs	r3, #24
 8000692:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000694:	2307      	movs	r3, #7
 8000696:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006a4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fc8d 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x120>
        Error_Handler();
 80006b4:	f000 fb8e 	bl	8000dd4 <Error_Handler>
    }
    /** Configure the main internal regulator output voltage */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 80006b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006bc:	f001 fd70 	bl	80021a0 <HAL_PWREx_ControlVoltageScaling>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x132>
        Error_Handler();
 80006c6:	f000 fb85 	bl	8000dd4 <Error_Handler>
    }
    /** Enable MSI Auto calibration */
    HAL_RCCEx_EnableMSIPLLMode();
 80006ca:	f002 ff63 	bl	8003594 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ce:	bf00      	nop
 80006d0:	37e0      	adds	r7, #224	; 0xe0
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	00012085 	.word	0x00012085

080006e0 <MX_DFSDM1_Init>:
/**
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DFSDM1_Init 0 */
    /* USER CODE END DFSDM1_Init 0 */

    /* USER CODE BEGIN DFSDM1_Init 1 */
    /* USER CODE END DFSDM1_Init 1 */
    hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_DFSDM1_Init+0x68>)
 80006e6:	4a19      	ldr	r2, [pc, #100]	; (800074c <MX_DFSDM1_Init+0x6c>)
 80006e8:	601a      	str	r2, [r3, #0]
    hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_DFSDM1_Init+0x68>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	711a      	strb	r2, [r3, #4]
    hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_DFSDM1_Init+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
    hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_DFSDM1_Init+0x68>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	60da      	str	r2, [r3, #12]
    hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_DFSDM1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
    hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_DFSDM1_Init+0x68>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
    hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_DFSDM1_Init+0x68>)
 800070a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070e:	619a      	str	r2, [r3, #24]
    hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000710:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_DFSDM1_Init+0x68>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
    hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DFSDM1_Init+0x68>)
 8000718:	2204      	movs	r2, #4
 800071a:	621a      	str	r2, [r3, #32]
    hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_DFSDM1_Init+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
    hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DFSDM1_Init+0x68>)
 8000724:	2201      	movs	r2, #1
 8000726:	629a      	str	r2, [r3, #40]	; 0x28
    hdfsdm1_channel1.Init.Offset = 0;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_DFSDM1_Init+0x68>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_DFSDM1_Init+0x68>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_DFSDM1_Init+0x68>)
 8000736:	f000 ffad 	bl	8001694 <HAL_DFSDM_ChannelInit>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_DFSDM1_Init+0x64>
        Error_Handler();
 8000740:	f000 fb48 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN DFSDM1_Init 2 */
    /* USER CODE END DFSDM1_Init 2 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000fac 	.word	0x20000fac
 800074c:	40016020 	.word	0x40016020

08000750 <MX_I2C2_Init>:
/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C2_Init 0 */
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */
    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_I2C2_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x10909CEC;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_I2C2_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <MX_I2C2_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800078a:	480e      	ldr	r0, [pc, #56]	; (80007c4 <MX_I2C2_Init+0x74>)
 800078c:	f001 fa7b 	bl	8001c86 <HAL_I2C_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C2_Init+0x4a>
        Error_Handler();
 8000796:	f000 fb1d 	bl	8000dd4 <Error_Handler>
    }
    /** Configure Analogue filter */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800079a:	2100      	movs	r1, #0
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <MX_I2C2_Init+0x74>)
 800079e:	f001 fb01 	bl	8001da4 <HAL_I2CEx_ConfigAnalogFilter>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C2_Init+0x5c>
        Error_Handler();
 80007a8:	f000 fb14 	bl	8000dd4 <Error_Handler>
    }
    /** Configure Digital filter */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80007ac:	2100      	movs	r1, #0
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_I2C2_Init+0x74>)
 80007b0:	f001 fb43 	bl	8001e3a <HAL_I2CEx_ConfigDigitalFilter>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C2_Init+0x6e>
        Error_Handler();
 80007ba:	f000 fb0b 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */
    /* USER CODE END I2C2_Init 2 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000146c 	.word	0x2000146c
 80007c8:	40005800 	.word	0x40005800
 80007cc:	10909cec 	.word	0x10909cec

080007d0 <MX_QUADSPI_Init>:
/**
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    /* USER CODE END QUADSPI_Init 0 */

    /* USER CODE BEGIN QUADSPI_Init 1 */
    /* USER CODE END QUADSPI_Init 1 */
    /* QUADSPI parameter configuration*/
    hqspi.Instance = QUADSPI;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_QUADSPI_Init+0x44>)
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <MX_QUADSPI_Init+0x48>)
 80007d8:	601a      	str	r2, [r3, #0]
    hqspi.Init.ClockPrescaler = 255;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_QUADSPI_Init+0x44>)
 80007dc:	22ff      	movs	r2, #255	; 0xff
 80007de:	605a      	str	r2, [r3, #4]
    hqspi.Init.FifoThreshold = 1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_QUADSPI_Init+0x44>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	609a      	str	r2, [r3, #8]
    hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_QUADSPI_Init+0x44>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    hqspi.Init.FlashSize = 1;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_QUADSPI_Init+0x44>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	611a      	str	r2, [r3, #16]
    hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_QUADSPI_Init+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
    hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_QUADSPI_Init+0x44>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
    if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_QUADSPI_Init+0x44>)
 8000800:	f001 fd34 	bl	800226c <HAL_QSPI_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_QUADSPI_Init+0x3e>
        Error_Handler();
 800080a:	f000 fae3 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN QUADSPI_Init 2 */
    /* USER CODE END QUADSPI_Init 2 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200015b4 	.word	0x200015b4
 8000818:	a0001000 	.word	0xa0001000

0800081c <MX_SPI3_Init>:
/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    /* USER CODE END SPI3_Init 0 */

    /* USER CODE BEGIN SPI3_Init 1 */
    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration*/
    hspi3.Instance = SPI3;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_SPI3_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_SPI3_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_SPI3_Init+0x74>)
 8000828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800082c:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_SPI3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_SPI3_Init+0x74>)
 8000836:	f44f 7240 	mov.w	r2, #768	; 0x300
 800083a:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_SPI3_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_SPI3_Init+0x74>)
 800084a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084e:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_SPI3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_SPI3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_SPI3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
    hspi3.Init.CRCPolynomial = 7;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_SPI3_Init+0x74>)
 800086a:	2207      	movs	r2, #7
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_SPI3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
    hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_SPI3_Init+0x74>)
 8000876:	2208      	movs	r2, #8
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_SPI3_Init+0x74>)
 800087c:	f003 f864 	bl	8003948 <HAL_SPI_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_SPI3_Init+0x6e>
        Error_Handler();
 8000886:	f000 faa5 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */
    /* USER CODE END SPI3_Init 2 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200014c0 	.word	0x200014c0
 8000894:	40003c00 	.word	0x40003c00

08000898 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_Init 0 */
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */
    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <MX_USART1_UART_Init+0x5c>)
 80008a0:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) {
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART1_UART_Init+0x58>)
 80008dc:	f003 fb1e 	bl	8003f1c <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART1_UART_Init+0x52>
        Error_Handler();
 80008e6:	f000 fa75 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */
    /* USER CODE END USART1_Init 2 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20001528 	.word	0x20001528
 80008f4:	40013800 	.word	0x40013800

080008f8 <MX_USART3_UART_Init>:
/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART3_Init 0 */
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */
    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART3_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800093c:	f003 faee 	bl	8003f1c <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x52>
        Error_Handler();
 8000946:	f000 fa45 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */
    /* USER CODE END USART3_Init 2 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000fe4 	.word	0x20000fe4
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USB_OTG_FS_PCD_Init>:
/**
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USB_OTG_FS_Init 0 */
    /* USER CODE END USB_OTG_FS_Init 0 */

    /* USER CODE BEGIN USB_OTG_FS_Init 1 */
    /* USER CODE END USB_OTG_FS_Init 1 */
    hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000962:	601a      	str	r2, [r3, #0]
    hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2206      	movs	r2, #6
 8000968:	605a      	str	r2, [r3, #4]
    hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2202      	movs	r2, #2
 800096e:	60da      	str	r2, [r3, #12]
    hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2202      	movs	r2, #2
 8000974:	619a      	str	r2, [r3, #24]
    hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
    hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
    hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
    hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
    hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	631a      	str	r2, [r3, #48]	; 0x30
    hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	f001 fa99 	bl	8001ed2 <HAL_PCD_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USB_OTG_FS_PCD_Init+0x52>
        Error_Handler();
 80009a6:	f000 fa15 	bl	8000dd4 <Error_Handler>
    }
    /* USER CODE BEGIN USB_OTG_FS_Init 2 */
    /* USER CODE END USB_OTG_FS_Init 2 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20001064 	.word	0x20001064

080009b4 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ca:	4bba      	ldr	r3, [pc, #744]	; (8000cb4 <MX_GPIO_Init+0x300>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4ab9      	ldr	r2, [pc, #740]	; (8000cb4 <MX_GPIO_Init+0x300>)
 80009d0:	f043 0310 	orr.w	r3, r3, #16
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4bb7      	ldr	r3, [pc, #732]	; (8000cb4 <MX_GPIO_Init+0x300>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e2:	4bb4      	ldr	r3, [pc, #720]	; (8000cb4 <MX_GPIO_Init+0x300>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4ab3      	ldr	r2, [pc, #716]	; (8000cb4 <MX_GPIO_Init+0x300>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4bb1      	ldr	r3, [pc, #708]	; (8000cb4 <MX_GPIO_Init+0x300>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4bae      	ldr	r3, [pc, #696]	; (8000cb4 <MX_GPIO_Init+0x300>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4aad      	ldr	r2, [pc, #692]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4bab      	ldr	r3, [pc, #684]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4ba8      	ldr	r3, [pc, #672]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4aa7      	ldr	r2, [pc, #668]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4ba5      	ldr	r3, [pc, #660]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	4ba2      	ldr	r3, [pc, #648]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4aa1      	ldr	r2, [pc, #644]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b9f      	ldr	r3, [pc, #636]	; (8000cb4 <MX_GPIO_Init+0x300>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a48:	489b      	ldr	r0, [pc, #620]	; (8000cb8 <MX_GPIO_Init+0x304>)
 8000a4a:	f001 f8e1 	bl	8001c10 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f001 f8da 	bl	8001c10 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a62:	4896      	ldr	r0, [pc, #600]	; (8000cbc <MX_GPIO_Init+0x308>)
 8000a64:	f001 f8d4 	bl	8001c10 <HAL_GPIO_WritePin>
                             | SPSGRF_915_SDN_Pin | ARD_D5_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a6e:	4894      	ldr	r0, [pc, #592]	; (8000cc0 <MX_GPIO_Init+0x30c>)
 8000a70:	f001 f8ce 	bl	8001c10 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	4891      	ldr	r0, [pc, #580]	; (8000cc0 <MX_GPIO_Init+0x30c>)
 8000a7c:	f001 f8c8 	bl	8001c10 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a86:	488f      	ldr	r0, [pc, #572]	; (8000cc4 <MX_GPIO_Init+0x310>)
 8000a88:	f001 f8c2 	bl	8001c10 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2120      	movs	r1, #32
 8000a90:	488a      	ldr	r0, [pc, #552]	; (8000cbc <MX_GPIO_Init+0x308>)
 8000a92:	f001 f8bd 	bl	8001c10 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4887      	ldr	r0, [pc, #540]	; (8000cb8 <MX_GPIO_Init+0x304>)
 8000a9c:	f001 f8b8 	bl	8001c10 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
    GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin | ISM43362_RST_Pin | ISM43362_SPI3_CSN_Pin;
 8000aa0:	f240 1315 	movw	r3, #277	; 0x115
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	487f      	ldr	r0, [pc, #508]	; (8000cb8 <MX_GPIO_Init+0x304>)
 8000aba:	f000 ff01 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
    GPIO_InitStruct.Pin =
 8000abe:	236a      	movs	r3, #106	; 0x6a
 8000ac0:	617b      	str	r3, [r7, #20]
            USB_OTG_FS_OVRCR_EXTI3_Pin | SPSGRF_915_GPIO3_EXTI5_Pin | SPBTLE_RF_IRQ_EXTI6_Pin | ISM43362_DRDY_EXTI1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac2:	4b81      	ldr	r3, [pc, #516]	; (8000cc8 <MX_GPIO_Init+0x314>)
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4879      	ldr	r0, [pc, #484]	; (8000cb8 <MX_GPIO_Init+0x304>)
 8000ad2:	f000 fef5 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON_EXTI13_Pin */
    GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000adc:	4b7b      	ldr	r3, [pc, #492]	; (8000ccc <MX_GPIO_Init+0x318>)
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4876      	ldr	r0, [pc, #472]	; (8000cc4 <MX_GPIO_Init+0x310>)
 8000aec:	f000 fee8 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                             ARD_A1_Pin ARD_A0_Pin */
    GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 8000af0:	233f      	movs	r3, #63	; 0x3f
 8000af2:	617b      	str	r3, [r7, #20]
                          | ARD_A1_Pin | ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af4:	230b      	movs	r3, #11
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4870      	ldr	r0, [pc, #448]	; (8000cc4 <MX_GPIO_Init+0x310>)
 8000b04:	f000 fedc 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
    GPIO_InitStruct.Pin = ARD_D1_Pin | ARD_D0_Pin;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fecb 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
    GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 8000b2a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f000 febb 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : ARD_D4_Pin */
    GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f000 feaa 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : ARD_D7_Pin */
    GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b70:	230b      	movs	r3, #11
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 fe9d 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
    GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 8000b86:	23e0      	movs	r3, #224	; 0xe0
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b96:	2305      	movs	r3, #5
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba4:	f000 fe8c 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : ARD_D3_Pin */
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	4b46      	ldr	r3, [pc, #280]	; (8000cc8 <MX_GPIO_Init+0x314>)
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4840      	ldr	r0, [pc, #256]	; (8000cbc <MX_GPIO_Init+0x308>)
 8000bbc:	f000 fe80 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : ARD_D6_Pin */
    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	483a      	ldr	r0, [pc, #232]	; (8000cbc <MX_GPIO_Init+0x308>)
 8000bd4:	f000 fe74 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                             SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
    GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin | LED2_Pin
 8000bd8:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bdc:	617b      	str	r3, [r7, #20]
                          | SPSGRF_915_SDN_Pin | ARD_D5_Pin | SPSGRF_915_SPI3_CSN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4832      	ldr	r0, [pc, #200]	; (8000cbc <MX_GPIO_Init+0x308>)
 8000bf2:	f000 fe65 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                             PMOD_IRQ_EXTI12_Pin */
    GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin | ARD_D2_Pin | HTS221_DRDY_EXTI15_Pin
 8000bf6:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000bfa:	617b      	str	r3, [r7, #20]
                          | PMOD_IRQ_EXTI12_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bfc:	4b32      	ldr	r3, [pc, #200]	; (8000cc8 <MX_GPIO_Init+0x314>)
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0x30c>)
 8000c0c:	f000 fe58 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
    GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin | PMOD_RESET_Pin | STSAFE_A100_RESET_Pin;
 8000c10:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4825      	ldr	r0, [pc, #148]	; (8000cc0 <MX_GPIO_Init+0x30c>)
 8000c2a:	f000 fe49 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
    GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 8000c2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	481f      	ldr	r0, [pc, #124]	; (8000cc4 <MX_GPIO_Init+0x310>)
 8000c48:	f000 fe3a 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
    GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 8000c4c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_GPIO_Init+0x314>)
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <MX_GPIO_Init+0x310>)
 8000c62:	f000 fe2d 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
    GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c66:	2302      	movs	r3, #2
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c76:	2305      	movs	r3, #5
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <MX_GPIO_Init+0x30c>)
 8000c82:	f000 fe1d 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin | PMOD_UART2_TX_Pin | PMOD_UART2_RX_Pin;
 8000c86:	2378      	movs	r3, #120	; 0x78
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <MX_GPIO_Init+0x30c>)
 8000ca2:	f000 fe0d 	bl	80018c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
    GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e00d      	b.n	8000cd0 <MX_GPIO_Init+0x31c>
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000c00 	.word	0x48000c00
 8000cc4:	48000800 	.word	0x48000800
 8000cc8:	10110000 	.word	0x10110000
 8000ccc:	10210000 	.word	0x10210000
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <MX_GPIO_Init+0x35c>)
 8000ce2:	f000 fded 	bl	80018c0 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	2017      	movs	r0, #23
 8000cec:	f000 fca8 	bl	8001640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cf0:	2017      	movs	r0, #23
 8000cf2:	f000 fcc1 	bl	8001678 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	2028      	movs	r0, #40	; 0x28
 8000cfc:	f000 fca0 	bl	8001640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d00:	2028      	movs	r0, #40	; 0x28
 8000d02:	f000 fcb9 	bl	8001678 <HAL_NVIC_EnableIRQ>

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	48000400 	.word	0x48000400

08000d14 <serialPrint>:
        }
    }
}

// Serial direct print
void serialPrint(UART_HandleTypeDef *huart, char _out[]){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f7ff fa56 	bl	80001d0 <strlen>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	230a      	movs	r3, #10
 8000d2a:	6839      	ldr	r1, [r7, #0]
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f003 f943 	bl	8003fb8 <HAL_UART_Transmit>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <serialPrintln>:

// Serial print line
void serialPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000d44:	6838      	ldr	r0, [r7, #0]
 8000d46:	f7ff fa43 	bl	80001d0 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	230a      	movs	r3, #10
 8000d50:	6839      	ldr	r1, [r7, #0]
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f003 f930 	bl	8003fb8 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000d58:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000d5c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8000d5e:	f107 010c 	add.w	r1, r7, #12
 8000d62:	230a      	movs	r3, #10
 8000d64:	2202      	movs	r2, #2
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f003 f926 	bl	8003fb8 <HAL_UART_Transmit>
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <SerialPrintTask>:

// Serial print task
void SerialPrintTask(void const * argument)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	for(;;) {
		serialPrint(&huart1, "BELLAAAA"); 		// print
 8000d7c:	4908      	ldr	r1, [pc, #32]	; (8000da0 <SerialPrintTask+0x2c>)
 8000d7e:	4809      	ldr	r0, [pc, #36]	; (8000da4 <SerialPrintTask+0x30>)
 8000d80:	f7ff ffc8 	bl	8000d14 <serialPrint>
		serialPrint(&huart1, "\r\n"); 			// manual new line
 8000d84:	4908      	ldr	r1, [pc, #32]	; (8000da8 <SerialPrintTask+0x34>)
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <SerialPrintTask+0x30>)
 8000d88:	f7ff ffc4 	bl	8000d14 <serialPrint>
		serialPrintln(&huart1, "A capo"); 		// print full line
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <SerialPrintTask+0x38>)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <SerialPrintTask+0x30>)
 8000d90:	f7ff ffd3 	bl	8000d3a <serialPrintln>
		osDelay(1000);
 8000d94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d98:	f004 f901 	bl	8004f9e <osDelay>
		serialPrint(&huart1, "BELLAAAA"); 		// print
 8000d9c:	e7ee      	b.n	8000d7c <SerialPrintTask+0x8>
 8000d9e:	bf00      	nop
 8000da0:	08006738 	.word	0x08006738
 8000da4:	20001528 	.word	0x20001528
 8000da8:	08006744 	.word	0x08006744
 8000dac:	08006748 	.word	0x08006748

08000db0 <HAL_TIM_PeriodElapsedCallback>:
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */
    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM6) {
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8000dc2:	f000 fb45 	bl	8001450 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */
    /* USER CODE END Callback 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40001000 	.word	0x40001000

08000dd4 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    /* USER CODE END Error_Handler_Debug */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_MspInit+0x4c>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	f06f 0001 	mvn.w	r0, #1
 8000e22:	f000 fc0d 	bl	8001640 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000

08000e34 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d128      	bne.n	8000ea6 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e58:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0x80>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e84:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e96:	2306      	movs	r3, #6
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000ea2:	f000 fd0d 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000280 	.word	0x20000280
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48001000 	.word	0x48001000

08000ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_I2C_MspInit+0x7c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d128      	bne.n	8000f30 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <HAL_I2C_MspInit+0x80>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <HAL_I2C_MspInit+0x80>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <HAL_I2C_MspInit+0x80>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000ef6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efc:	2312      	movs	r3, #18
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <HAL_I2C_MspInit+0x84>)
 8000f14:	f000 fcd4 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_I2C_MspInit+0x80>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_I2C_MspInit+0x80>)
 8000f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f22:	6593      	str	r3, [r2, #88]	; 0x58
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_I2C_MspInit+0x80>)
 8000f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	; 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40005800 	.word	0x40005800
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	48000400 	.word	0x48000400

08000f44 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <HAL_QSPI_MspInit+0x7c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d128      	bne.n	8000fb8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_QSPI_MspInit+0x80>)
 8000f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <HAL_QSPI_MspInit+0x80>)
 8000f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f70:	6513      	str	r3, [r2, #80]	; 0x50
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <HAL_QSPI_MspInit+0x80>)
 8000f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_QSPI_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_QSPI_MspInit+0x80>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_QSPI_MspInit+0x80>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8000f96:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f9a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fa8:	230a      	movs	r3, #10
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_QSPI_MspInit+0x84>)
 8000fb4:	f000 fc84 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	a0001000 	.word	0xa0001000
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48001000 	.word	0x48001000

08000fcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_SPI_MspInit+0x7c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d128      	bne.n	8001040 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_SPI_MspInit+0x80>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_SPI_MspInit+0x80>)
 8000ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_SPI_MspInit+0x80>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_SPI_MspInit+0x80>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_SPI_MspInit+0x80>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_SPI_MspInit+0x80>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800101e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001030:	2306      	movs	r3, #6
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_SPI_MspInit+0x84>)
 800103c:	f000 fc40 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40003c00 	.word	0x40003c00
 800104c:	40021000 	.word	0x40021000
 8001050:	48000800 	.word	0x48000800

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	; 0x30
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a2e      	ldr	r2, [pc, #184]	; (800112c <HAL_UART_MspInit+0xd8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d128      	bne.n	80010c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_UART_MspInit+0xdc>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <HAL_UART_MspInit+0xdc>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_UART_MspInit+0xdc>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_UART_MspInit+0xdc>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_UART_MspInit+0xdc>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_UART_MspInit+0xdc>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80010a6:	23c0      	movs	r3, #192	; 0xc0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b6:	2307      	movs	r3, #7
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	481c      	ldr	r0, [pc, #112]	; (8001134 <HAL_UART_MspInit+0xe0>)
 80010c2:	f000 fbfd 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010c6:	e02d      	b.n	8001124 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1a      	ldr	r2, [pc, #104]	; (8001138 <HAL_UART_MspInit+0xe4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d128      	bne.n	8001124 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_UART_MspInit+0xdc>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <HAL_UART_MspInit+0xdc>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6593      	str	r3, [r2, #88]	; 0x58
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_UART_MspInit+0xdc>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_MspInit+0xdc>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_UART_MspInit+0xdc>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_UART_MspInit+0xdc>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001114:	2307      	movs	r3, #7
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <HAL_UART_MspInit+0xe8>)
 8001120:	f000 fbce 	bl	80018c0 <HAL_GPIO_Init>
}
 8001124:	bf00      	nop
 8001126:	3730      	adds	r7, #48	; 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013800 	.word	0x40013800
 8001130:	40021000 	.word	0x40021000
 8001134:	48000400 	.word	0x48000400
 8001138:	40004800 	.word	0x40004800
 800113c:	48000c00 	.word	0x48000c00

08001140 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001160:	d154      	bne.n	800120c <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a2b      	ldr	r2, [pc, #172]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800117a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001180:	2300      	movs	r3, #0
 8001182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f000 fb95 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001196:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011a8:	230a      	movs	r3, #10
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b6:	f000 fb83 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d114      	bne.n	8001208 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80011f6:	f001 f829 	bl	800224c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <HAL_PCD_MspInit+0xd4>)
 8001200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001204:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001206:	e001      	b.n	800120c <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001208:	f001 f820 	bl	800224c <HAL_PWREx_EnableVddUSB>
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	2036      	movs	r0, #54	; 0x36
 800122e:	f000 fa07 	bl	8001640 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f000 fa20 	bl	8001678 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_InitTick+0x9c>)
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_InitTick+0x9c>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6593      	str	r3, [r2, #88]	; 0x58
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_InitTick+0x9c>)
 8001246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001250:	f107 0210 	add.w	r2, r7, #16
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f001 fe22 	bl	8002ea4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001260:	f001 fdf4 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8001264:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001268:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_InitTick+0xa0>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	3b01      	subs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_InitTick+0xa4>)
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <HAL_InitTick+0xa8>)
 8001278:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_InitTick+0xa4>)
 800127c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001280:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_InitTick+0xa4>)
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <HAL_InitTick+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_InitTick+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <HAL_InitTick+0xa4>)
 8001296:	f002 fbe1 	bl	8003a5c <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d104      	bne.n	80012aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <HAL_InitTick+0xa4>)
 80012a2:	f002 fc11 	bl	8003ac8 <HAL_TIM_Base_Start_IT>
 80012a6:	4603      	mov	r3, r0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3730      	adds	r7, #48	; 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	200015f8 	.word	0x200015f8
 80012c0:	40001000 	.word	0x40001000

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80012fc:	2020      	movs	r0, #32
 80012fe:	f000 fc9f 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001302:	2040      	movs	r0, #64	; 0x40
 8001304:	f000 fc9c 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001308:	2080      	movs	r0, #128	; 0x80
 800130a:	f000 fc99 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800130e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001312:	f000 fc95 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}

0800131a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800131e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001322:	f000 fc8d 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001326:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800132a:	f000 fc89 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800132e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001332:	f000 fc85 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001336:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800133a:	f000 fc81 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800133e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001342:	f000 fc7d 	bl	8001c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <TIM6_DAC_IRQHandler+0x10>)
 8001352:	f002 fbe3 	bl	8003b1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200015f8 	.word	0x200015f8

08001360 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <SystemInit+0x64>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <SystemInit+0x64>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <SystemInit+0x68>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <SystemInit+0x68>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <SystemInit+0x68>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <SystemInit+0x68>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <SystemInit+0x68>)
 800138c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001390:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001394:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <SystemInit+0x68>)
 8001398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <SystemInit+0x68>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <SystemInit+0x68>)
 80013a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <SystemInit+0x68>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SystemInit+0x64>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b6:	609a      	str	r2, [r3, #8]
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	40021000 	.word	0x40021000

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001404 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013d2:	e003      	b.n	80013dc <LoopCopyDataInit>

080013d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013da:	3104      	adds	r1, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <LoopForever+0xa>)
	ldr	r3, =_edata
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013e4:	d3f6      	bcc.n	80013d4 <CopyDataInit>
	ldr	r2, =_sbss
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013e8:	e002      	b.n	80013f0 <LoopFillZerobss>

080013ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013ec:	f842 3b04 	str.w	r3, [r2], #4

080013f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <LoopForever+0x16>)
	cmp	r2, r3
 80013f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013f4:	d3f9      	bcc.n	80013ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013f6:	f7ff ffb3 	bl	8001360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f005 f949 	bl	8006690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fe:	f7ff f889 	bl	8000514 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001404:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001408:	080067b0 	.word	0x080067b0
	ldr	r0, =_sdata
 800140c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001410:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001414:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001418:	2000163c 	.word	0x2000163c

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>

0800141e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f8fe 	bl	800162a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fef2 	bl	8001218 <HAL_InitTick>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	e001      	b.n	8001444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001440:	f7ff fcd0 	bl	8000de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001444:	79fb      	ldrb	r3, [r7, #7]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x1c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x20>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4413      	add	r3, r2
 800145e:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_IncTick+0x1c>)
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	20001638 	.word	0x20001638
 8001470:	20000008 	.word	0x20000008

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20001638 	.word	0x20001638

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff ffee 	bl	8001474 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d004      	beq.n	80014b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_Delay+0x40>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014b0:	bf00      	nop
 80014b2:	f7ff ffdf 	bl	8001474 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8f7      	bhi.n	80014b2 <HAL_Delay+0x26>
  {
  }
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	; (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff4c 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001652:	f7ff ff61 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001656:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	6978      	ldr	r0, [r7, #20]
 800165e:	f7ff ffb1 	bl	80015c4 <NVIC_EncodePriority>
 8001662:	4602      	mov	r2, r0
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff80 	bl	8001570 <__NVIC_SetPriority>
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff54 	bl	8001534 <__NVIC_EnableIRQ>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0ac      	b.n	8001800 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f8b2 	bl	8001814 <DFSDM_GetChannelFromInstance>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_DFSDM_ChannelInit+0x174>)
 80016b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e09f      	b.n	8001800 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fbb7 	bl	8000e34 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80016c6:	4b51      	ldr	r3, [pc, #324]	; (800180c <HAL_DFSDM_ChannelInit+0x178>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_DFSDM_ChannelInit+0x178>)
 80016ce:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80016d0:	4b4e      	ldr	r3, [pc, #312]	; (800180c <HAL_DFSDM_ChannelInit+0x178>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d125      	bne.n	8001724 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80016d8:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a4c      	ldr	r2, [pc, #304]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 80016de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016e2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80016e4:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4948      	ldr	r1, [pc, #288]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 80016f8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80016fc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	3b01      	subs	r3, #1
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	493f      	ldr	r1, [pc, #252]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a3c      	ldr	r2, [pc, #240]	; (8001810 <HAL_DFSDM_ChannelInit+0x17c>)
 800171e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001722:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001732:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6819      	ldr	r1, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001742:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001748:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 020f 	bic.w	r2, r2, #15
 8001760:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6819      	ldr	r1, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001788:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6899      	ldr	r1, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	3b01      	subs	r3, #1
 800179a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f002 0207 	and.w	r2, r2, #7
 80017b4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f810 	bl	8001814 <DFSDM_GetChannelFromInstance>
 80017f4:	4601      	mov	r1, r0
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_DFSDM_ChannelInit+0x174>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000288 	.word	0x20000288
 800180c:	20000284 	.word	0x20000284
 8001810:	40016000 	.word	0x40016000

08001814 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a20      	ldr	r2, [pc, #128]	; (80018a0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d102      	bne.n	800182a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e032      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <DFSDM_GetChannelFromInstance+0x90>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d102      	bne.n	8001838 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001832:	2301      	movs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e02b      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <DFSDM_GetChannelFromInstance+0x94>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d102      	bne.n	8001846 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001840:	2302      	movs	r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e024      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <DFSDM_GetChannelFromInstance+0x98>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d102      	bne.n	8001854 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800184e:	2303      	movs	r3, #3
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e01d      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <DFSDM_GetChannelFromInstance+0x9c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d102      	bne.n	8001862 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800185c:	2304      	movs	r3, #4
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e016      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <DFSDM_GetChannelFromInstance+0xa0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d102      	bne.n	8001870 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800186a:	2305      	movs	r3, #5
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e00f      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <DFSDM_GetChannelFromInstance+0xa4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8001878:	2306      	movs	r3, #6
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e008      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <DFSDM_GetChannelFromInstance+0xa8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d102      	bne.n	800188c <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 8001886:	2307      	movs	r3, #7
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e001      	b.n	8001890 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40016000 	.word	0x40016000
 80018a4:	40016020 	.word	0x40016020
 80018a8:	40016040 	.word	0x40016040
 80018ac:	40016060 	.word	0x40016060
 80018b0:	40016080 	.word	0x40016080
 80018b4:	400160a0 	.word	0x400160a0
 80018b8:	400160c0 	.word	0x400160c0
 80018bc:	400160e0 	.word	0x400160e0

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e17f      	b.n	8001bd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8171 	beq.w	8001bca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x38>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b12      	cmp	r3, #18
 80018f6:	d123      	bne.n	8001940 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	08da      	lsrs	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3208      	adds	r2, #8
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	220f      	movs	r2, #15
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	08da      	lsrs	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3208      	adds	r2, #8
 800193a:	6939      	ldr	r1, [r7, #16]
 800193c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0203 	and.w	r2, r3, #3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d00b      	beq.n	8001994 <HAL_GPIO_Init+0xd4>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001988:	2b11      	cmp	r3, #17
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b12      	cmp	r3, #18
 8001992:	d130      	bne.n	80019f6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ca:	2201      	movs	r2, #1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 0201 	and.w	r2, r3, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d118      	bne.n	8001a34 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	08db      	lsrs	r3, r3, #3
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80ac 	beq.w	8001bca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <HAL_GPIO_Init+0x32c>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	4a5d      	ldr	r2, [pc, #372]	; (8001bec <HAL_GPIO_Init+0x32c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_GPIO_Init+0x32c>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a8a:	4a59      	ldr	r2, [pc, #356]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ab4:	d025      	beq.n	8001b02 <HAL_GPIO_Init+0x242>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4e      	ldr	r2, [pc, #312]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <HAL_GPIO_Init+0x23e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_GPIO_Init+0x338>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d019      	beq.n	8001afa <HAL_GPIO_Init+0x23a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_GPIO_Init+0x33c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x236>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4b      	ldr	r2, [pc, #300]	; (8001c00 <HAL_GPIO_Init+0x340>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x232>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	; (8001c04 <HAL_GPIO_Init+0x344>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x22e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a49      	ldr	r2, [pc, #292]	; (8001c08 <HAL_GPIO_Init+0x348>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x22a>
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001b02:	2300      	movs	r3, #0
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b14:	4936      	ldr	r1, [pc, #216]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b46:	4a31      	ldr	r2, [pc, #196]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b70:	4a26      	ldr	r2, [pc, #152]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bc4:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f ae78 	bne.w	80018d0 <HAL_GPIO_Init+0x10>
  }
}
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	48001000 	.word	0x48001000
 8001c04:	48001400 	.word	0x48001400
 8001c08:	48001800 	.word	0x48001800
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c20:	787b      	ldrb	r3, [r7, #1]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c2e:	887a      	ldrh	r2, [r7, #2]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d006      	beq.n	8001c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f806 	bl	8001c70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e081      	b.n	8001d9c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d106      	bne.n	8001cb2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff f905 	bl	8000ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2224      	movs	r2, #36	; 0x24
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	e006      	b.n	8001d0e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d104      	bne.n	8001d20 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d32:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	ea42 0103 	orr.w	r1, r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	021a      	lsls	r2, r3, #8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69d9      	ldr	r1, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0201 	orr.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d138      	bne.n	8001e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e032      	b.n	8001e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d139      	bne.n	8001ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e033      	b.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2224      	movs	r2, #36	; 0x24
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed4:	b08f      	sub	sp, #60	; 0x3c
 8001ed6:	af0a      	add	r7, sp, #40	; 0x28
 8001ed8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e116      	b.n	8002112 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff f91e 	bl	8001140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2203      	movs	r2, #3
 8001f08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fda5 	bl	8004a72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	687e      	ldr	r6, [r7, #4]
 8001f30:	466d      	mov	r5, sp
 8001f32:	f106 0410 	add.w	r4, r6, #16
 8001f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f42:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f46:	1d33      	adds	r3, r6, #4
 8001f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f4a:	6838      	ldr	r0, [r7, #0]
 8001f4c:	f002 fd3f 	bl	80049ce <USB_CoreInit>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0d7      	b.n	8002112 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fd93 	bl	8004a94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e04a      	b.n	800200a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	333d      	adds	r3, #61	; 0x3d
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	333c      	adds	r3, #60	; 0x3c
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	b298      	uxth	r0, r3
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	333f      	adds	r3, #63	; 0x3f
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3344      	adds	r3, #68	; 0x44
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	3348      	adds	r3, #72	; 0x48
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3350      	adds	r3, #80	; 0x50
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	3301      	adds	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3af      	bcc.n	8001f74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e044      	b.n	80020a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	3301      	adds	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3b5      	bcc.n	800201a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	687e      	ldr	r6, [r7, #4]
 80020b6:	466d      	mov	r5, sp
 80020b8:	f106 0410 	add.w	r4, r6, #16
 80020bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020cc:	1d33      	adds	r3, r6, #4
 80020ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d0:	6838      	ldr	r0, [r7, #0]
 80020d2:	f002 fd09 	bl	8004ae8 <USB_DevInit>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e014      	b.n	8002112 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d102      	bne.n	8002106 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f80a 	bl	800211a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fe8f 	bl	8004e2e <USB_DevDisconnect>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800211a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	f043 0303 	orr.w	r3, r3, #3
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40007000 	.word	0x40007000

08002184 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002188:	4b04      	ldr	r3, [pc, #16]	; (800219c <HAL_PWREx_GetVoltageRange+0x18>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40007000 	.word	0x40007000

080021a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ae:	d130      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b0:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021bc:	d038      	beq.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c6:	4a1e      	ldr	r2, [pc, #120]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2232      	movs	r2, #50	; 0x32
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	3301      	adds	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e4:	e002      	b.n	80021ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f8:	d102      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f2      	bne.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220c:	d110      	bne.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e00f      	b.n	8002232 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221e:	d007      	beq.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002228:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800222e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40007000 	.word	0x40007000
 8002244:	20000000 	.word	0x20000000
 8002248:	431bde83 	.word	0x431bde83

0800224c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225a:	6053      	str	r3, [r2, #4]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000

0800226c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af02      	add	r7, sp, #8
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff f8fe 	bl	8001474 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e06f      	b.n	8002364 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_QSPI_Init+0x28>
 8002290:	2302      	movs	r3, #2
 8002292:	e067      	b.n	8002364 <HAL_QSPI_Init+0xf8>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fe fe47 	bl	8000f44 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80022b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f858 	bl	8002370 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	021a      	lsls	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	2120      	movs	r1, #32
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f850 	bl	800238c <QSPI_WaitFlagStateUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d131      	bne.n	800235a <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002300:	f023 0310 	bic.w	r3, r3, #16
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6852      	ldr	r2, [r2, #4]
 8002308:	0611      	lsls	r1, r2, #24
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68d2      	ldr	r2, [r2, #12]
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	430b      	orrs	r3, r1
 8002316:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_QSPI_Init+0x100>)
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6912      	ldr	r2, [r2, #16]
 8002326:	0411      	lsls	r1, r2, #16
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6952      	ldr	r2, [r2, #20]
 800232c:	4311      	orrs	r1, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6992      	ldr	r2, [r2, #24]
 8002332:	4311      	orrs	r1, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	430b      	orrs	r3, r1
 800233a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002362:	7afb      	ldrb	r3, [r7, #11]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	ffe0f8fe 	.word	0xffe0f8fe

08002370 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800239c:	e01a      	b.n	80023d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d016      	beq.n	80023d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7ff f865 	bl	8001474 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2204      	movs	r2, #4
 80023c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00e      	b.n	80023f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1d6      	bne.n	800239e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e39d      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	4ba4      	ldr	r3, [pc, #656]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002418:	4ba1      	ldr	r3, [pc, #644]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80e1 	beq.w	80025f2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_RCC_OscConfig+0x4a>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	f040 8088 	bne.w	800254e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 8084 	bne.w	800254e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002446:	4b96      	ldr	r3, [pc, #600]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e375      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	4b8f      	ldr	r3, [pc, #572]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_RCC_OscConfig+0x7c>
 800246e:	4b8c      	ldr	r3, [pc, #560]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002476:	e005      	b.n	8002484 <HAL_RCC_OscConfig+0x88>
 8002478:	4b89      	ldr	r3, [pc, #548]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002484:	4293      	cmp	r3, r2
 8002486:	d223      	bcs.n	80024d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fd3b 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e356      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249c:	4b80      	ldr	r3, [pc, #512]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a7f      	ldr	r2, [pc, #508]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b7d      	ldr	r3, [pc, #500]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	497a      	ldr	r1, [pc, #488]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ba:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	4975      	ldr	r1, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
 80024ce:	e022      	b.n	8002516 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d0:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	496d      	ldr	r1, [pc, #436]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ee:	4b6c      	ldr	r3, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4968      	ldr	r1, [pc, #416]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fcfe 	bl	8002f08 <RCC_SetFlashLatencyFromMSIRange>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e319      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002516:	f000 fc03 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 800251a:	4601      	mov	r1, r0
 800251c:	4b60      	ldr	r3, [pc, #384]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	4a5f      	ldr	r2, [pc, #380]	; (80026a4 <HAL_RCC_OscConfig+0x2a8>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	fa21 f303 	lsr.w	r3, r1, r3
 8002532:	4a5d      	ldr	r2, [pc, #372]	; (80026a8 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002536:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <HAL_RCC_OscConfig+0x2b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fe6c 	bl	8001218 <HAL_InitTick>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d052      	beq.n	80025f0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	e2fd      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d032      	beq.n	80025bc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002556:	4b52      	ldr	r3, [pc, #328]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002562:	f7fe ff87 	bl	8001474 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800256a:	f7fe ff83 	bl	8001474 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e2e6      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257c:	4b48      	ldr	r3, [pc, #288]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a44      	ldr	r2, [pc, #272]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800258e:	f043 0308 	orr.w	r3, r3, #8
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	493f      	ldr	r1, [pc, #252]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	493a      	ldr	r1, [pc, #232]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
 80025ba:	e01a      	b.n	80025f2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025bc:	4b38      	ldr	r3, [pc, #224]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a37      	ldr	r2, [pc, #220]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025c8:	f7fe ff54 	bl	8001474 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d0:	f7fe ff50 	bl	8001474 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e2b3      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e2:	4b2f      	ldr	r3, [pc, #188]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x1d4>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d074      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d005      	beq.n	8002610 <HAL_RCC_OscConfig+0x214>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d10e      	bne.n	8002628 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d064      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2ea>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d160      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e290      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x244>
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0x280>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x268>
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0x280>
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_RCC_OscConfig+0x2a4>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d01c      	beq.n	80026be <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe fef6 	bl	8001474 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268a:	e011      	b.n	80026b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fef2 	bl	8001474 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d90a      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e255      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08006758 	.word	0x08006758
 80026a8:	20000000 	.word	0x20000000
 80026ac:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b0:	4bae      	ldr	r3, [pc, #696]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0e7      	beq.n	800268c <HAL_RCC_OscConfig+0x290>
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fed9 	bl	8001474 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c6:	f7fe fed5 	bl	8001474 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	; 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e238      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026d8:	4ba4      	ldr	r3, [pc, #656]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2ca>
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d060      	beq.n	80027b6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d005      	beq.n	8002706 <HAL_RCC_OscConfig+0x30a>
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	d119      	bne.n	8002734 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002706:	4b99      	ldr	r3, [pc, #612]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x322>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e215      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b93      	ldr	r3, [pc, #588]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	498f      	ldr	r1, [pc, #572]	; (800296c <HAL_RCC_OscConfig+0x570>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002732:	e040      	b.n	80027b6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d023      	beq.n	8002784 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b8b      	ldr	r3, [pc, #556]	; (800296c <HAL_RCC_OscConfig+0x570>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a8a      	ldr	r2, [pc, #552]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fe94 	bl	8001474 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fe90 	bl	8001474 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1f3      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002762:	4b82      	ldr	r3, [pc, #520]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	497b      	ldr	r1, [pc, #492]	; (800296c <HAL_RCC_OscConfig+0x570>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
 8002782:	e018      	b.n	80027b6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002784:	4b79      	ldr	r3, [pc, #484]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a78      	ldr	r2, [pc, #480]	; (800296c <HAL_RCC_OscConfig+0x570>)
 800278a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800278e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fe70 	bl	8001474 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7fe fe6c 	bl	8001474 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1cf      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027aa:	4b70      	ldr	r3, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d03c      	beq.n	800283c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01c      	beq.n	8002804 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b68      	ldr	r3, [pc, #416]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80027cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d0:	4a66      	ldr	r2, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe fe4b 	bl	8001474 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e2:	f7fe fe47 	bl	8001474 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1aa      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027f4:	4b5d      	ldr	r3, [pc, #372]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80027f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ef      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3e6>
 8002802:	e01b      	b.n	800283c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280a:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x570>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe fe2e 	bl	8001474 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281c:	f7fe fe2a 	bl	8001474 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e18d      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800282e:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ef      	bne.n	800281c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a5 	beq.w	8002994 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_RCC_OscConfig+0x570>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a43      	ldr	r2, [pc, #268]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002876:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x574>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002882:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_OscConfig+0x574>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3a      	ldr	r2, [pc, #232]	; (8002970 <HAL_RCC_OscConfig+0x574>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7fe fdf1 	bl	8001474 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7fe fded 	bl	8001474 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e150      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a8:	4b31      	ldr	r3, [pc, #196]	; (8002970 <HAL_RCC_OscConfig+0x574>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d108      	bne.n	80028ce <HAL_RCC_OscConfig+0x4d2>
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	4a2a      	ldr	r2, [pc, #168]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028cc:	e024      	b.n	8002918 <HAL_RCC_OscConfig+0x51c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d110      	bne.n	80028f8 <HAL_RCC_OscConfig+0x4fc>
 80028d6:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	4a23      	ldr	r2, [pc, #140]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f6:	e00f      	b.n	8002918 <HAL_RCC_OscConfig+0x51c>
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_RCC_OscConfig+0x570>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	4a1b      	ldr	r2, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002908:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_RCC_OscConfig+0x570>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d016      	beq.n	800294e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fda8 	bl	8001474 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe fda4 	bl	8001474 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e105      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_OscConfig+0x570>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ed      	beq.n	8002928 <HAL_RCC_OscConfig+0x52c>
 800294c:	e019      	b.n	8002982 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe fd91 	bl	8001474 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002954:	e00e      	b.n	8002974 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fd8d 	bl	8001474 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d905      	bls.n	8002974 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0ee      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002974:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e9      	bne.n	8002956 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002982:	7ffb      	ldrb	r3, [r7, #31]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d105      	bne.n	8002994 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002988:	4b72      	ldr	r3, [pc, #456]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	4a71      	ldr	r2, [pc, #452]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 800298e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002992:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80d5 	beq.w	8002b48 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	f000 808e 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d15b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ae:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a68      	ldr	r2, [pc, #416]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 80029b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe fd5b 	bl	8001474 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fd57 	bl	8001474 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0ba      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	4b5c      	ldr	r3, [pc, #368]	; (8002b58 <HAL_RCC_OscConfig+0x75c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029f0:	3a01      	subs	r2, #1
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	4311      	orrs	r1, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029fa:	0212      	lsls	r2, r2, #8
 80029fc:	4311      	orrs	r1, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a02:	0852      	lsrs	r2, r2, #1
 8002a04:	3a01      	subs	r2, #1
 8002a06:	0552      	lsls	r2, r2, #21
 8002a08:	4311      	orrs	r1, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a0e:	0852      	lsrs	r2, r2, #1
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0652      	lsls	r2, r2, #25
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a1a:	0912      	lsrs	r2, r2, #4
 8002a1c:	0452      	lsls	r2, r2, #17
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	494c      	ldr	r1, [pc, #304]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a26:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4a      	ldr	r2, [pc, #296]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a30:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a32:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a47      	ldr	r2, [pc, #284]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fd19 	bl	8001474 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe fd15 	bl	8001474 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e078      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x64a>
 8002a64:	e070      	b.n	8002b48 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b3b      	ldr	r3, [pc, #236]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a3a      	ldr	r2, [pc, #232]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a72:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a7e:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a84:	f023 0303 	bic.w	r3, r3, #3
 8002a88:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a8a:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4a31      	ldr	r2, [pc, #196]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002a90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fceb 	bl	8001474 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fce7 	bl	8001474 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e04a      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab4:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x6a6>
 8002ac0:	e042      	b.n	8002b48 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e03d      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002ace:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <HAL_RCC_OscConfig+0x758>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d130      	bne.n	8002b44 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	3b01      	subs	r3, #1
 8002aee:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d127      	bne.n	8002b44 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d11f      	bne.n	8002b44 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b0e:	2a07      	cmp	r2, #7
 8002b10:	bf14      	ite	ne
 8002b12:	2201      	movne	r2, #1
 8002b14:	2200      	moveq	r2, #0
 8002b16:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d113      	bne.n	8002b44 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	f99d808c 	.word	0xf99d808c

08002b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0c8      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d910      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 0207 	bic.w	r2, r3, #7
 8002b86:	4961      	ldr	r1, [pc, #388]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b0      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d04c      	beq.n	8002c46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb4:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d121      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e09e      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d115      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e092      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002be4:	4b4a      	ldr	r3, [pc, #296]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e086      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e07e      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c04:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 0203 	bic.w	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	493f      	ldr	r1, [pc, #252]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c16:	f7fe fc2d 	bl	8001474 <HAL_GetTick>
 8002c1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1e:	f7fe fc29 	bl	8001474 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e066      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 020c 	and.w	r2, r3, #12
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d1eb      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c52:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	492c      	ldr	r1, [pc, #176]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d210      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 0207 	bic.w	r2, r3, #7
 8002c7a:	4924      	ldr	r1, [pc, #144]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_RCC_ClockConfig+0x1b0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e036      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4918      	ldr	r1, [pc, #96]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4910      	ldr	r1, [pc, #64]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd2:	f000 f825 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_RCC_ClockConfig+0x1b4>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	5cd3      	ldrb	r3, [r2, r3]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	fa21 f303 	lsr.w	r3, r1, r3
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fa8e 	bl	8001218 <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d00:	7afb      	ldrb	r3, [r7, #11]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08006758 	.word	0x08006758
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d38:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x34>
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d121      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d11e      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d54:	4b33      	ldr	r3, [pc, #204]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d60:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e005      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d7c:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d102      	bne.n	8002d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d98:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e004      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d133      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xa4>
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0xaa>
 8002dc2:	e005      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dc6:	617b      	str	r3, [r7, #20]
      break;
 8002dc8:	e005      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dcc:	617b      	str	r3, [r7, #20]
      break;
 8002dce:	e002      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	617b      	str	r3, [r7, #20]
      break;
 8002dd4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	3301      	adds	r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	fb02 f203 	mul.w	r2, r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x104>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0e5b      	lsrs	r3, r3, #25
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e16:	69bb      	ldr	r3, [r7, #24]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3724      	adds	r7, #36	; 0x24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08006770 	.word	0x08006770
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4601      	mov	r1, r0
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	08006768 	.word	0x08006768

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e7c:	f7ff ffda 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e80:	4601      	mov	r1, r0
 8002e82:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0adb      	lsrs	r3, r3, #11
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e8e:	5cd3      	ldrb	r3, [r2, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08006768 	.word	0x08006768

08002ea4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	220f      	movs	r2, #15
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0203 	and.w	r2, r3, #3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_GetClockConfig+0x5c>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_RCC_GetClockConfig+0x60>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0207 	and.w	r2, r3, #7
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	601a      	str	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40022000 	.word	0x40022000

08002f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f14:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f20:	f7ff f930 	bl	8002184 <HAL_PWREx_GetVoltageRange>
 8002f24:	6178      	str	r0, [r7, #20]
 8002f26:	e014      	b.n	8002f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f32:	6593      	str	r3, [r2, #88]	; 0x58
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f920 	bl	8002184 <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f58:	d10b      	bne.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b80      	cmp	r3, #128	; 0x80
 8002f5e:	d919      	bls.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2ba0      	cmp	r3, #160	; 0xa0
 8002f64:	d902      	bls.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f66:	2302      	movs	r3, #2
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e013      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	e010      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b80      	cmp	r3, #128	; 0x80
 8002f76:	d902      	bls.n	8002f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f78:	2303      	movs	r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	e00a      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d102      	bne.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f84:	2302      	movs	r3, #2
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	e004      	b.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b70      	cmp	r3, #112	; 0x70
 8002f8e:	d101      	bne.n	8002f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 0207 	bic.w	r2, r3, #7
 8002f9c:	4909      	ldr	r1, [pc, #36]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fa4:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d001      	beq.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fec:	d01c      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff2:	d802      	bhi.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00e      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ff8:	e01f      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ffa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffe:	d003      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003000:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003004:	d01c      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003006:	e018      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003008:	4b85      	ldr	r3, [pc, #532]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a84      	ldr	r2, [pc, #528]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003014:	e015      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fac9 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003026:	e00c      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3320      	adds	r3, #32
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fbb0 	bl	8003794 <RCCEx_PLLSAI2_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003038:	e003      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	74fb      	strb	r3, [r7, #19]
      break;
 800303e:	e000      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003048:	4b75      	ldr	r3, [pc, #468]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003056:	4972      	ldr	r1, [pc, #456]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305e:	e001      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03f      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003078:	d01c      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800307a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800307e:	d802      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003084:	e01f      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800308a:	d003      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800308c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003090:	d01c      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003092:	e018      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003094:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a61      	ldr	r2, [pc, #388]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa83 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3320      	adds	r3, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fb6a 	bl	8003794 <RCCEx_PLLSAI2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d4:	4b52      	ldr	r3, [pc, #328]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a0 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	6593      	str	r3, [r2, #88]	; 0x58
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003140:	f7fe f998 	bl	8001474 <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fe f994 	bl	8001474 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	74fb      	strb	r3, [r7, #19]
        break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d15c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003178:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d019      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe f953 	bl	8001474 <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	e00b      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe f94f 	bl	8001474 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d902      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	74fb      	strb	r3, [r7, #19]
            break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ec      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b9e      	ldr	r3, [pc, #632]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a9d      	ldr	r2, [pc, #628]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324a:	4b98      	ldr	r3, [pc, #608]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4994      	ldr	r1, [pc, #592]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 020c 	bic.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	498c      	ldr	r1, [pc, #560]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800328e:	4b87      	ldr	r3, [pc, #540]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4983      	ldr	r1, [pc, #524]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b0:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	497b      	ldr	r1, [pc, #492]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d2:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	4972      	ldr	r1, [pc, #456]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f4:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	496a      	ldr	r1, [pc, #424]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	4961      	ldr	r1, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003338:	4b5c      	ldr	r3, [pc, #368]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4959      	ldr	r1, [pc, #356]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4948      	ldr	r1, [pc, #288]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	493f      	ldr	r1, [pc, #252]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d028      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d106      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e011      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f8d8 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	491f      	ldr	r1, [pc, #124]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343c:	d106      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003448:	60d3      	str	r3, [r2, #12]
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f8a9 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02b      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349a:	d109      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
 80034a8:	e014      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f877 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	4928      	ldr	r1, [pc, #160]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f854 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
 800351a:	e011      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3320      	adds	r3, #32
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f931 	bl	8003794 <RCCEx_PLLSAI2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355a:	490d      	ldr	r1, [pc, #52]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003586:	7cbb      	ldrb	r3, [r7, #18]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c2:	4b73      	ldr	r3, [pc, #460]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ce:	4b70      	ldr	r3, [pc, #448]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
       ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035e6:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
       ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d044      	beq.n	8003684 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e041      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d00c      	beq.n	8003622 <RCCEx_PLLSAI1_Config+0x6e>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d013      	beq.n	8003634 <RCCEx_PLLSAI1_Config+0x80>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d120      	bne.n	8003652 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003610:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d11d      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e01a      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003622:	4b5b      	ldr	r3, [pc, #364]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003632:	e013      	b.n	800365c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003634:	4b56      	ldr	r3, [pc, #344]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10f      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003650:	e006      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
      break;
 8003656:	e004      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003658:	bf00      	nop
 800365a:	e002      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800365c:	bf00      	nop
 800365e:	e000      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003660:	bf00      	nop
    }

    if(status == HAL_OK)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003668:	4b49      	ldr	r3, [pc, #292]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6819      	ldr	r1, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	3b01      	subs	r3, #1
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	430b      	orrs	r3, r1
 800367e:	4944      	ldr	r1, [pc, #272]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d17d      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800368a:	4b41      	ldr	r3, [pc, #260]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a40      	ldr	r2, [pc, #256]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fd feed 	bl	8001474 <HAL_GetTick>
 800369a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800369c:	e009      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800369e:	f7fd fee9 	bl	8001474 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d902      	bls.n	80036b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	73fb      	strb	r3, [r7, #15]
        break;
 80036b0:	e005      	b.n	80036be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ef      	bne.n	800369e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d160      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d111      	bne.n	80036ee <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6892      	ldr	r2, [r2, #8]
 80036da:	0211      	lsls	r1, r2, #8
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68d2      	ldr	r2, [r2, #12]
 80036e0:	0912      	lsrs	r2, r2, #4
 80036e2:	0452      	lsls	r2, r2, #17
 80036e4:	430a      	orrs	r2, r1
 80036e6:	492a      	ldr	r1, [pc, #168]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	610b      	str	r3, [r1, #16]
 80036ec:	e027      	b.n	800373e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d112      	bne.n	800371a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f4:	4b26      	ldr	r3, [pc, #152]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6892      	ldr	r2, [r2, #8]
 8003704:	0211      	lsls	r1, r2, #8
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6912      	ldr	r2, [r2, #16]
 800370a:	0852      	lsrs	r2, r2, #1
 800370c:	3a01      	subs	r2, #1
 800370e:	0552      	lsls	r2, r2, #21
 8003710:	430a      	orrs	r2, r1
 8003712:	491f      	ldr	r1, [pc, #124]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	610b      	str	r3, [r1, #16]
 8003718:	e011      	b.n	800373e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003722:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	0211      	lsls	r1, r2, #8
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6952      	ldr	r2, [r2, #20]
 8003730:	0852      	lsrs	r2, r2, #1
 8003732:	3a01      	subs	r2, #1
 8003734:	0652      	lsls	r2, r2, #25
 8003736:	430a      	orrs	r2, r1
 8003738:	4915      	ldr	r1, [pc, #84]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003744:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003748:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fd fe93 	bl	8001474 <HAL_GetTick>
 800374e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003750:	e009      	b.n	8003766 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003752:	f7fd fe8f 	bl	8001474 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d902      	bls.n	8003766 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	73fb      	strb	r3, [r7, #15]
          break;
 8003764:	e005      	b.n	8003772 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ef      	beq.n	8003752 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000

08003794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037a2:	4b68      	ldr	r3, [pc, #416]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ae:	4b65      	ldr	r3, [pc, #404]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 0203 	and.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d10d      	bne.n	80037da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
       ||
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037c6:	4b5f      	ldr	r3, [pc, #380]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
       ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d044      	beq.n	8003864 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e041      	b.n	8003864 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d00c      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0x6e>
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d013      	beq.n	8003814 <RCCEx_PLLSAI2_Config+0x80>
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d120      	bne.n	8003832 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f0:	4b54      	ldr	r3, [pc, #336]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11d      	bne.n	8003838 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e01a      	b.n	8003838 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003802:	4b50      	ldr	r3, [pc, #320]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003812:	e013      	b.n	800383c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003814:	4b4b      	ldr	r3, [pc, #300]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10f      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003820:	4b48      	ldr	r3, [pc, #288]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d109      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003830:	e006      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
      break;
 8003836:	e004      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003838:	bf00      	nop
 800383a:	e002      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800383c:	bf00      	nop
 800383e:	e000      	b.n	8003842 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003840:	bf00      	nop
    }

    if(status == HAL_OK)
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10d      	bne.n	8003864 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003848:	4b3e      	ldr	r3, [pc, #248]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	3b01      	subs	r3, #1
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	430b      	orrs	r3, r1
 800385e:	4939      	ldr	r1, [pc, #228]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003860:	4313      	orrs	r3, r2
 8003862:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d167      	bne.n	800393a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a35      	ldr	r2, [pc, #212]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003876:	f7fd fdfd 	bl	8001474 <HAL_GetTick>
 800387a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800387c:	e009      	b.n	8003892 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800387e:	f7fd fdf9 	bl	8001474 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d902      	bls.n	8003892 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	73fb      	strb	r3, [r7, #15]
        break;
 8003890:	e005      	b.n	800389e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ef      	bne.n	800387e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d14a      	bne.n	800393a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d111      	bne.n	80038ce <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	0211      	lsls	r1, r2, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68d2      	ldr	r2, [r2, #12]
 80038c0:	0912      	lsrs	r2, r2, #4
 80038c2:	0452      	lsls	r2, r2, #17
 80038c4:	430a      	orrs	r2, r1
 80038c6:	491f      	ldr	r1, [pc, #124]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	614b      	str	r3, [r1, #20]
 80038cc:	e011      	b.n	80038f2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6892      	ldr	r2, [r2, #8]
 80038de:	0211      	lsls	r1, r2, #8
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6912      	ldr	r2, [r2, #16]
 80038e4:	0852      	lsrs	r2, r2, #1
 80038e6:	3a01      	subs	r2, #1
 80038e8:	0652      	lsls	r2, r2, #25
 80038ea:	430a      	orrs	r2, r1
 80038ec:	4915      	ldr	r1, [pc, #84]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038f2:	4b14      	ldr	r3, [pc, #80]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80038f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fd fdb9 	bl	8001474 <HAL_GetTick>
 8003902:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003904:	e009      	b.n	800391a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003906:	f7fd fdb5 	bl	8001474 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d902      	bls.n	800391a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	73fb      	strb	r3, [r7, #15]
          break;
 8003918:	e005      	b.n	8003926 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ef      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003926:	7bfb      	ldrb	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d106      	bne.n	800393a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003936:	4313      	orrs	r3, r2
 8003938:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07c      	b.n	8003a54 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fd fb29 	bl	8000fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800399a:	d902      	bls.n	80039a2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e002      	b.n	80039a8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039b0:	d007      	beq.n	80039c2 <HAL_SPI_Init+0x7a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ba:	d002      	beq.n	80039c2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d2:	d903      	bls.n	80039dc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	631a      	str	r2, [r3, #48]	; 0x30
 80039da:	e002      	b.n	80039e2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	ea42 0103 	orr.w	r1, r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	f003 0204 	and.w	r2, r3, #4
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a30:	431a      	orrs	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	ea42 0103 	orr.w	r1, r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e01d      	b.n	8003aaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f815 	bl	8003ab2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	4619      	mov	r1, r3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	f000 f986 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_TIM_Base_Start_IT+0x50>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d00b      	beq.n	8003b0a <HAL_TIM_Base_Start_IT+0x42>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d007      	beq.n	8003b0a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	00010007 	.word	0x00010007

08003b1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d122      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0202 	mvn.w	r2, #2
 8003b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f905 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8f7 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f908 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d122      	bne.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d11b      	bne.n	8003bcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0204 	mvn.w	r2, #4
 8003b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8db 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8cd 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8de 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d122      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0308 	and.w	r3, r3, #8
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d11b      	bne.n	8003c20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0208 	mvn.w	r2, #8
 8003bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8b1 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003c0c:	e005      	b.n	8003c1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8a3 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f8b4 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d122      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d11b      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0210 	mvn.w	r2, #16
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f887 	bl	8003d6e <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f879 	bl	8003d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f88a 	bl	8003d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0201 	mvn.w	r2, #1
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fd f888 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb8:	2b80      	cmp	r3, #128	; 0x80
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f914 	bl	8003ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cda:	d10e      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f907 	bl	8003f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d10e      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f838 	bl	8003d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d10e      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d107      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0220 	mvn.w	r2, #32
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8c7 	bl	8003ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a40      	ldr	r2, [pc, #256]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3d      	ldr	r2, [pc, #244]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01f      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d01b      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d017      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00f      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <TIM_Base_SetConfig+0x128>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0x9a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a10      	ldr	r2, [pc, #64]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a11      	ldr	r2, [pc, #68]	; (8003ed4 <TIM_Base_SetConfig+0x128>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800

08003ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e040      	b.n	8003fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd f888 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8c0 	bl	80040e0 <UART_SetConfig>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e022      	b.n	8003fb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fbfc 	bl	8004770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fc83 	bl	80048b4 <UART_CheckIdleState>
 8003fae:	4603      	mov	r3, r0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	f040 8081 	bne.w	80040d4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_UART_Transmit+0x26>
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e079      	b.n	80040d6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_UART_Transmit+0x38>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e072      	b.n	80040d6 <HAL_UART_Transmit+0x11e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2221      	movs	r2, #33	; 0x21
 8004002:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004004:	f7fd fa36 	bl	8001474 <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	88fa      	ldrh	r2, [r7, #6]
 800400e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	88fa      	ldrh	r2, [r7, #6]
 8004016:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004022:	d108      	bne.n	8004036 <HAL_UART_Transmit+0x7e>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800402c:	2300      	movs	r3, #0
 800402e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e003      	b.n	800403e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800403e:	e02d      	b.n	800409c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2200      	movs	r2, #0
 8004048:	2180      	movs	r1, #128	; 0x80
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fc77 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e03d      	b.n	80040d6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800406c:	b292      	uxth	r2, r2
 800406e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3302      	adds	r3, #2
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	e008      	b.n	800408a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	b292      	uxth	r2, r2
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1cb      	bne.n	8004040 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fc43 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e009      	b.n	80040d6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	e000      	b.n	80040d6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80040d4:	2302      	movs	r3, #2
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80040e4:	b088      	sub	sp, #32
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4313      	orrs	r3, r2
 800410c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4bac      	ldr	r3, [pc, #688]	; (80043c8 <UART_SetConfig+0x2e8>)
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	430b      	orrs	r3, r1
 8004120:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4aa2      	ldr	r2, [pc, #648]	; (80043cc <UART_SetConfig+0x2ec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	4313      	orrs	r3, r2
 8004150:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a99      	ldr	r2, [pc, #612]	; (80043d0 <UART_SetConfig+0x2f0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d121      	bne.n	80041b4 <UART_SetConfig+0xd4>
 8004170:	4b98      	ldr	r3, [pc, #608]	; (80043d4 <UART_SetConfig+0x2f4>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b03      	cmp	r3, #3
 800417c:	d816      	bhi.n	80041ac <UART_SetConfig+0xcc>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <UART_SetConfig+0xa4>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a1 	.word	0x080041a1
 800418c:	0800419b 	.word	0x0800419b
 8004190:	080041a7 	.word	0x080041a7
 8004194:	2301      	movs	r3, #1
 8004196:	76fb      	strb	r3, [r7, #27]
 8004198:	e0e8      	b.n	800436c <UART_SetConfig+0x28c>
 800419a:	2302      	movs	r3, #2
 800419c:	76fb      	strb	r3, [r7, #27]
 800419e:	e0e5      	b.n	800436c <UART_SetConfig+0x28c>
 80041a0:	2304      	movs	r3, #4
 80041a2:	76fb      	strb	r3, [r7, #27]
 80041a4:	e0e2      	b.n	800436c <UART_SetConfig+0x28c>
 80041a6:	2308      	movs	r3, #8
 80041a8:	76fb      	strb	r3, [r7, #27]
 80041aa:	e0df      	b.n	800436c <UART_SetConfig+0x28c>
 80041ac:	2310      	movs	r3, #16
 80041ae:	76fb      	strb	r3, [r7, #27]
 80041b0:	bf00      	nop
 80041b2:	e0db      	b.n	800436c <UART_SetConfig+0x28c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a87      	ldr	r2, [pc, #540]	; (80043d8 <UART_SetConfig+0x2f8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d134      	bne.n	8004228 <UART_SetConfig+0x148>
 80041be:	4b85      	ldr	r3, [pc, #532]	; (80043d4 <UART_SetConfig+0x2f4>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d829      	bhi.n	8004220 <UART_SetConfig+0x140>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0xf4>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004221 	.word	0x08004221
 80041dc:	08004221 	.word	0x08004221
 80041e0:	08004221 	.word	0x08004221
 80041e4:	08004215 	.word	0x08004215
 80041e8:	08004221 	.word	0x08004221
 80041ec:	08004221 	.word	0x08004221
 80041f0:	08004221 	.word	0x08004221
 80041f4:	0800420f 	.word	0x0800420f
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004221 	.word	0x08004221
 8004204:	0800421b 	.word	0x0800421b
 8004208:	2300      	movs	r3, #0
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	e0ae      	b.n	800436c <UART_SetConfig+0x28c>
 800420e:	2302      	movs	r3, #2
 8004210:	76fb      	strb	r3, [r7, #27]
 8004212:	e0ab      	b.n	800436c <UART_SetConfig+0x28c>
 8004214:	2304      	movs	r3, #4
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	e0a8      	b.n	800436c <UART_SetConfig+0x28c>
 800421a:	2308      	movs	r3, #8
 800421c:	76fb      	strb	r3, [r7, #27]
 800421e:	e0a5      	b.n	800436c <UART_SetConfig+0x28c>
 8004220:	2310      	movs	r3, #16
 8004222:	76fb      	strb	r3, [r7, #27]
 8004224:	bf00      	nop
 8004226:	e0a1      	b.n	800436c <UART_SetConfig+0x28c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6b      	ldr	r2, [pc, #428]	; (80043dc <UART_SetConfig+0x2fc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d120      	bne.n	8004274 <UART_SetConfig+0x194>
 8004232:	4b68      	ldr	r3, [pc, #416]	; (80043d4 <UART_SetConfig+0x2f4>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800423c:	2b10      	cmp	r3, #16
 800423e:	d00f      	beq.n	8004260 <UART_SetConfig+0x180>
 8004240:	2b10      	cmp	r3, #16
 8004242:	d802      	bhi.n	800424a <UART_SetConfig+0x16a>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <UART_SetConfig+0x174>
 8004248:	e010      	b.n	800426c <UART_SetConfig+0x18c>
 800424a:	2b20      	cmp	r3, #32
 800424c:	d005      	beq.n	800425a <UART_SetConfig+0x17a>
 800424e:	2b30      	cmp	r3, #48	; 0x30
 8004250:	d009      	beq.n	8004266 <UART_SetConfig+0x186>
 8004252:	e00b      	b.n	800426c <UART_SetConfig+0x18c>
 8004254:	2300      	movs	r3, #0
 8004256:	76fb      	strb	r3, [r7, #27]
 8004258:	e088      	b.n	800436c <UART_SetConfig+0x28c>
 800425a:	2302      	movs	r3, #2
 800425c:	76fb      	strb	r3, [r7, #27]
 800425e:	e085      	b.n	800436c <UART_SetConfig+0x28c>
 8004260:	2304      	movs	r3, #4
 8004262:	76fb      	strb	r3, [r7, #27]
 8004264:	e082      	b.n	800436c <UART_SetConfig+0x28c>
 8004266:	2308      	movs	r3, #8
 8004268:	76fb      	strb	r3, [r7, #27]
 800426a:	e07f      	b.n	800436c <UART_SetConfig+0x28c>
 800426c:	2310      	movs	r3, #16
 800426e:	76fb      	strb	r3, [r7, #27]
 8004270:	bf00      	nop
 8004272:	e07b      	b.n	800436c <UART_SetConfig+0x28c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a59      	ldr	r2, [pc, #356]	; (80043e0 <UART_SetConfig+0x300>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d120      	bne.n	80042c0 <UART_SetConfig+0x1e0>
 800427e:	4b55      	ldr	r3, [pc, #340]	; (80043d4 <UART_SetConfig+0x2f4>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004284:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d00f      	beq.n	80042ac <UART_SetConfig+0x1cc>
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d802      	bhi.n	8004296 <UART_SetConfig+0x1b6>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <UART_SetConfig+0x1c0>
 8004294:	e010      	b.n	80042b8 <UART_SetConfig+0x1d8>
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d005      	beq.n	80042a6 <UART_SetConfig+0x1c6>
 800429a:	2bc0      	cmp	r3, #192	; 0xc0
 800429c:	d009      	beq.n	80042b2 <UART_SetConfig+0x1d2>
 800429e:	e00b      	b.n	80042b8 <UART_SetConfig+0x1d8>
 80042a0:	2300      	movs	r3, #0
 80042a2:	76fb      	strb	r3, [r7, #27]
 80042a4:	e062      	b.n	800436c <UART_SetConfig+0x28c>
 80042a6:	2302      	movs	r3, #2
 80042a8:	76fb      	strb	r3, [r7, #27]
 80042aa:	e05f      	b.n	800436c <UART_SetConfig+0x28c>
 80042ac:	2304      	movs	r3, #4
 80042ae:	76fb      	strb	r3, [r7, #27]
 80042b0:	e05c      	b.n	800436c <UART_SetConfig+0x28c>
 80042b2:	2308      	movs	r3, #8
 80042b4:	76fb      	strb	r3, [r7, #27]
 80042b6:	e059      	b.n	800436c <UART_SetConfig+0x28c>
 80042b8:	2310      	movs	r3, #16
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	bf00      	nop
 80042be:	e055      	b.n	800436c <UART_SetConfig+0x28c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a47      	ldr	r2, [pc, #284]	; (80043e4 <UART_SetConfig+0x304>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d124      	bne.n	8004314 <UART_SetConfig+0x234>
 80042ca:	4b42      	ldr	r3, [pc, #264]	; (80043d4 <UART_SetConfig+0x2f4>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d8:	d012      	beq.n	8004300 <UART_SetConfig+0x220>
 80042da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042de:	d802      	bhi.n	80042e6 <UART_SetConfig+0x206>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <UART_SetConfig+0x214>
 80042e4:	e012      	b.n	800430c <UART_SetConfig+0x22c>
 80042e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ea:	d006      	beq.n	80042fa <UART_SetConfig+0x21a>
 80042ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f0:	d009      	beq.n	8004306 <UART_SetConfig+0x226>
 80042f2:	e00b      	b.n	800430c <UART_SetConfig+0x22c>
 80042f4:	2300      	movs	r3, #0
 80042f6:	76fb      	strb	r3, [r7, #27]
 80042f8:	e038      	b.n	800436c <UART_SetConfig+0x28c>
 80042fa:	2302      	movs	r3, #2
 80042fc:	76fb      	strb	r3, [r7, #27]
 80042fe:	e035      	b.n	800436c <UART_SetConfig+0x28c>
 8004300:	2304      	movs	r3, #4
 8004302:	76fb      	strb	r3, [r7, #27]
 8004304:	e032      	b.n	800436c <UART_SetConfig+0x28c>
 8004306:	2308      	movs	r3, #8
 8004308:	76fb      	strb	r3, [r7, #27]
 800430a:	e02f      	b.n	800436c <UART_SetConfig+0x28c>
 800430c:	2310      	movs	r3, #16
 800430e:	76fb      	strb	r3, [r7, #27]
 8004310:	bf00      	nop
 8004312:	e02b      	b.n	800436c <UART_SetConfig+0x28c>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2c      	ldr	r2, [pc, #176]	; (80043cc <UART_SetConfig+0x2ec>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d124      	bne.n	8004368 <UART_SetConfig+0x288>
 800431e:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <UART_SetConfig+0x2f4>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432c:	d012      	beq.n	8004354 <UART_SetConfig+0x274>
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d802      	bhi.n	800433a <UART_SetConfig+0x25a>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <UART_SetConfig+0x268>
 8004338:	e012      	b.n	8004360 <UART_SetConfig+0x280>
 800433a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433e:	d006      	beq.n	800434e <UART_SetConfig+0x26e>
 8004340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004344:	d009      	beq.n	800435a <UART_SetConfig+0x27a>
 8004346:	e00b      	b.n	8004360 <UART_SetConfig+0x280>
 8004348:	2300      	movs	r3, #0
 800434a:	76fb      	strb	r3, [r7, #27]
 800434c:	e00e      	b.n	800436c <UART_SetConfig+0x28c>
 800434e:	2302      	movs	r3, #2
 8004350:	76fb      	strb	r3, [r7, #27]
 8004352:	e00b      	b.n	800436c <UART_SetConfig+0x28c>
 8004354:	2304      	movs	r3, #4
 8004356:	76fb      	strb	r3, [r7, #27]
 8004358:	e008      	b.n	800436c <UART_SetConfig+0x28c>
 800435a:	2308      	movs	r3, #8
 800435c:	76fb      	strb	r3, [r7, #27]
 800435e:	e005      	b.n	800436c <UART_SetConfig+0x28c>
 8004360:	2310      	movs	r3, #16
 8004362:	76fb      	strb	r3, [r7, #27]
 8004364:	bf00      	nop
 8004366:	e001      	b.n	800436c <UART_SetConfig+0x28c>
 8004368:	2310      	movs	r3, #16
 800436a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a16      	ldr	r2, [pc, #88]	; (80043cc <UART_SetConfig+0x2ec>)
 8004372:	4293      	cmp	r3, r2
 8004374:	f040 80fa 	bne.w	800456c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004378:	7efb      	ldrb	r3, [r7, #27]
 800437a:	2b08      	cmp	r3, #8
 800437c:	d836      	bhi.n	80043ec <UART_SetConfig+0x30c>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0x2a4>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043ed 	.word	0x080043ed
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043ed 	.word	0x080043ed
 8004394:	080043b7 	.word	0x080043b7
 8004398:	080043ed 	.word	0x080043ed
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043ed 	.word	0x080043ed
 80043a4:	080043bf 	.word	0x080043bf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fe fd50 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80043ac:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043ae:	e020      	b.n	80043f2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <UART_SetConfig+0x308>)
 80043b2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043b4:	e01d      	b.n	80043f2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80043b6:	f7fe fcb3 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 80043ba:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043bc:	e019      	b.n	80043f2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80043be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80043c4:	e015      	b.n	80043f2 <UART_SetConfig+0x312>
 80043c6:	bf00      	nop
 80043c8:	efff69f3 	.word	0xefff69f3
 80043cc:	40008000 	.word	0x40008000
 80043d0:	40013800 	.word	0x40013800
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40004400 	.word	0x40004400
 80043dc:	40004800 	.word	0x40004800
 80043e0:	40004c00 	.word	0x40004c00
 80043e4:	40005000 	.word	0x40005000
 80043e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	74fb      	strb	r3, [r7, #19]
        break;
 80043f0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 81ac 	beq.w	8004752 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	429a      	cmp	r2, r3
 8004408:	d305      	bcc.n	8004416 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	429a      	cmp	r2, r3
 8004414:	d902      	bls.n	800441c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	74fb      	strb	r3, [r7, #19]
 800441a:	e19a      	b.n	8004752 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800441c:	7efb      	ldrb	r3, [r7, #27]
 800441e:	2b08      	cmp	r3, #8
 8004420:	f200 8091 	bhi.w	8004546 <UART_SetConfig+0x466>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x34c>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	08004547 	.word	0x08004547
 8004434:	0800449d 	.word	0x0800449d
 8004438:	08004547 	.word	0x08004547
 800443c:	080044d1 	.word	0x080044d1
 8004440:	08004547 	.word	0x08004547
 8004444:	08004547 	.word	0x08004547
 8004448:	08004547 	.word	0x08004547
 800444c:	0800451d 	.word	0x0800451d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004450:	f7fe fcfc 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8004454:	4603      	mov	r3, r0
 8004456:	4619      	mov	r1, r3
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	f04f 0400 	mov.w	r4, #0
 8004464:	0214      	lsls	r4, r2, #8
 8004466:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800446a:	020b      	lsls	r3, r1, #8
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6852      	ldr	r2, [r2, #4]
 8004470:	0852      	lsrs	r2, r2, #1
 8004472:	4611      	mov	r1, r2
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	eb13 0b01 	adds.w	fp, r3, r1
 800447c:	eb44 0c02 	adc.w	ip, r4, r2
 8004480:	4658      	mov	r0, fp
 8004482:	4661      	mov	r1, ip
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	461a      	mov	r2, r3
 800448e:	4623      	mov	r3, r4
 8004490:	f7fb fea6 	bl	80001e0 <__aeabi_uldivmod>
 8004494:	4603      	mov	r3, r0
 8004496:	460c      	mov	r4, r1
 8004498:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800449a:	e057      	b.n	800454c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	49b1      	ldr	r1, [pc, #708]	; (800476c <UART_SetConfig+0x68c>)
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	eb13 0b01 	adds.w	fp, r3, r1
 80044b0:	eb44 0c02 	adc.w	ip, r4, r2
 80044b4:	4658      	mov	r0, fp
 80044b6:	4661      	mov	r1, ip
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	461a      	mov	r2, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	f7fb fe8c 	bl	80001e0 <__aeabi_uldivmod>
 80044c8:	4603      	mov	r3, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80044ce:	e03d      	b.n	800454c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80044d0:	f7fe fc26 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 80044d4:	4603      	mov	r3, r0
 80044d6:	4619      	mov	r1, r3
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f04f 0400 	mov.w	r4, #0
 80044e4:	0214      	lsls	r4, r2, #8
 80044e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80044ea:	020b      	lsls	r3, r1, #8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6852      	ldr	r2, [r2, #4]
 80044f0:	0852      	lsrs	r2, r2, #1
 80044f2:	4611      	mov	r1, r2
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	eb13 0b01 	adds.w	fp, r3, r1
 80044fc:	eb44 0c02 	adc.w	ip, r4, r2
 8004500:	4658      	mov	r0, fp
 8004502:	4661      	mov	r1, ip
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	f7fb fe66 	bl	80001e0 <__aeabi_uldivmod>
 8004514:	4603      	mov	r3, r0
 8004516:	460c      	mov	r4, r1
 8004518:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800451a:	e017      	b.n	800454c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	f04f 0400 	mov.w	r4, #0
 8004526:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800452a:	f144 0100 	adc.w	r1, r4, #0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f04f 0400 	mov.w	r4, #0
 8004536:	461a      	mov	r2, r3
 8004538:	4623      	mov	r3, r4
 800453a:	f7fb fe51 	bl	80001e0 <__aeabi_uldivmod>
 800453e:	4603      	mov	r3, r0
 8004540:	460c      	mov	r4, r1
 8004542:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004544:	e002      	b.n	800454c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	74fb      	strb	r3, [r7, #19]
            break;
 800454a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004552:	d308      	bcc.n	8004566 <UART_SetConfig+0x486>
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d204      	bcs.n	8004566 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	60da      	str	r2, [r3, #12]
 8004564:	e0f5      	b.n	8004752 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	74fb      	strb	r3, [r7, #19]
 800456a:	e0f2      	b.n	8004752 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004574:	d17f      	bne.n	8004676 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004576:	7efb      	ldrb	r3, [r7, #27]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d85c      	bhi.n	8004636 <UART_SetConfig+0x556>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <UART_SetConfig+0x4a4>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045a9 	.word	0x080045a9
 8004588:	080045c7 	.word	0x080045c7
 800458c:	080045e5 	.word	0x080045e5
 8004590:	08004637 	.word	0x08004637
 8004594:	08004601 	.word	0x08004601
 8004598:	08004637 	.word	0x08004637
 800459c:	08004637 	.word	0x08004637
 80045a0:	08004637 	.word	0x08004637
 80045a4:	0800461f 	.word	0x0800461f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045a8:	f7fe fc50 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80045ac:	4603      	mov	r3, r0
 80045ae:	005a      	lsls	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	441a      	add	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045c4:	e03a      	b.n	800463c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80045c6:	f7fe fc57 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 80045ca:	4603      	mov	r3, r0
 80045cc:	005a      	lsls	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	b29b      	uxth	r3, r3
 80045e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045e2:	e02b      	b.n	800463c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80045ee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6852      	ldr	r2, [r2, #4]
 80045f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80045fe:	e01d      	b.n	800463c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004600:	f7fe fb8e 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8004604:	4603      	mov	r3, r0
 8004606:	005a      	lsls	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	b29b      	uxth	r3, r3
 800461a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800461c:	e00e      	b.n	800463c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	b29b      	uxth	r3, r3
 8004632:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004634:	e002      	b.n	800463c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	74fb      	strb	r3, [r7, #19]
        break;
 800463a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	d916      	bls.n	8004670 <UART_SetConfig+0x590>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d212      	bcs.n	8004670 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f023 030f 	bic.w	r3, r3, #15
 8004652:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	b29b      	uxth	r3, r3
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	b29a      	uxth	r2, r3
 8004660:	897b      	ldrh	r3, [r7, #10]
 8004662:	4313      	orrs	r3, r2
 8004664:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	897a      	ldrh	r2, [r7, #10]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	e070      	b.n	8004752 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	74fb      	strb	r3, [r7, #19]
 8004674:	e06d      	b.n	8004752 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004676:	7efb      	ldrb	r3, [r7, #27]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d859      	bhi.n	8004730 <UART_SetConfig+0x650>
 800467c:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <UART_SetConfig+0x5a4>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	080046a9 	.word	0x080046a9
 8004688:	080046c5 	.word	0x080046c5
 800468c:	080046e1 	.word	0x080046e1
 8004690:	08004731 	.word	0x08004731
 8004694:	080046fd 	.word	0x080046fd
 8004698:	08004731 	.word	0x08004731
 800469c:	08004731 	.word	0x08004731
 80046a0:	08004731 	.word	0x08004731
 80046a4:	08004719 	.word	0x08004719
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046a8:	f7fe fbd0 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	441a      	add	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	b29b      	uxth	r3, r3
 80046c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046c2:	e038      	b.n	8004736 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046c4:	f7fe fbd8 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	b29b      	uxth	r3, r3
 80046dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046de:	e02a      	b.n	8004736 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80046ea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6852      	ldr	r2, [r2, #4]
 80046f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046fa:	e01c      	b.n	8004736 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80046fc:	f7fe fb10 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	b29b      	uxth	r3, r3
 8004714:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004716:	e00e      	b.n	8004736 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	b29b      	uxth	r3, r3
 800472c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800472e:	e002      	b.n	8004736 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	74fb      	strb	r3, [r7, #19]
        break;
 8004734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b0f      	cmp	r3, #15
 800473a:	d908      	bls.n	800474e <UART_SetConfig+0x66e>
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004742:	d204      	bcs.n	800474e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	60da      	str	r2, [r3, #12]
 800474c:	e001      	b.n	8004752 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800475e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800476a:	bf00      	nop
 800476c:	f4240000 	.word	0xf4240000

08004770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01a      	beq.n	8004886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486e:	d10a      	bne.n	8004886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048c2:	f7fc fdd7 	bl	8001474 <HAL_GetTick>
 80048c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d10e      	bne.n	80048f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f82a 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e020      	b.n	8004936 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d10e      	bne.n	8004920 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004902:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f814 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e00a      	b.n	8004936 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494e:	e02a      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d026      	beq.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004958:	f7fc fd8c 	bl	8001474 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	d302      	bcc.n	800496e <UART_WaitOnFlagUntilTimeout+0x30>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d11b      	bne.n	80049a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800497c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e00f      	b.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69da      	ldr	r2, [r3, #28]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4013      	ands	r3, r2
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d0c5      	beq.n	8004950 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ce:	b084      	sub	sp, #16
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	f107 001c 	add.w	r0, r7, #28
 80049dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d122      	bne.n	8004a2c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fa1d 	bl	8004e60 <USB_CoreReset>
 8004a26:	4603      	mov	r3, r0
 8004a28:	73fb      	strb	r3, [r7, #15]
 8004a2a:	e01a      	b.n	8004a62 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fa11 	bl	8004e60 <USB_CoreReset>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38
 8004a54:	e005      	b.n	8004a62 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a6e:	b004      	add	sp, #16
 8004a70:	4770      	bx	lr

08004a72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f023 0201 	bic.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d106      	bne.n	8004ac0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	e00b      	b.n	8004ad8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e001      	b.n	8004ad8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e003      	b.n	8004ae0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ad8:	2032      	movs	r0, #50	; 0x32
 8004ada:	f7fc fcd7 	bl	800148c <HAL_Delay>

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae8:	b084      	sub	sp, #16
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e009      	b.n	8004b1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3340      	adds	r3, #64	; 0x40
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0e      	cmp	r3, #14
 8004b20:	d9f2      	bls.n	8004b08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d112      	bne.n	8004b4e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e005      	b.n	8004b5a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b60:	461a      	mov	r2, r3
 8004b62:	2300      	movs	r3, #0
 8004b64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	461a      	mov	r2, r3
 8004b76:	680b      	ldr	r3, [r1, #0]
 8004b78:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b7a:	2103      	movs	r1, #3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f93d 	bl	8004dfc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b82:	2110      	movs	r1, #16
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8f1 	bl	8004d6c <USB_FlushTxFifo>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f90f 	bl	8004db8 <USB_FlushRxFifo>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004baa:	461a      	mov	r2, r3
 8004bac:	2300      	movs	r3, #0
 8004bae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e043      	b.n	8004c56 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be4:	d118      	bne.n	8004c18 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e013      	b.n	8004c2a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e008      	b.n	8004c2a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	461a      	mov	r2, r3
 8004c26:	2300      	movs	r3, #0
 8004c28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	461a      	mov	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	3301      	adds	r3, #1
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d3b7      	bcc.n	8004bce <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	e043      	b.n	8004cec <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c7a:	d118      	bne.n	8004cae <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e013      	b.n	8004cc0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e008      	b.n	8004cc0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ce4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d3b7      	bcc.n	8004c64 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f043 0210 	orr.w	r2, r3, #16
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <USB_DevInit+0x280>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f043 0208 	orr.w	r2, r3, #8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d107      	bne.n	8004d56 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d62:	b004      	add	sp, #16
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	803c3800 	.word	0x803c3800

08004d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	f043 0220 	orr.w	r2, r3, #32
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <USB_FlushTxFifo+0x48>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d0f0      	beq.n	8004d86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	00030d40 	.word	0x00030d40

08004db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <USB_FlushRxFifo+0x40>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e006      	b.n	8004dea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d0f0      	beq.n	8004dca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	00030d40 	.word	0x00030d40

08004dfc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004e4e:	2003      	movs	r0, #3
 8004e50:	f7fc fb1c 	bl	800148c <HAL_Delay>

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <USB_CoreReset+0x64>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e01b      	b.n	8004eb6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	daf2      	bge.n	8004e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <USB_CoreReset+0x64>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e006      	b.n	8004eb6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d0f0      	beq.n	8004e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	00030d40 	.word	0x00030d40

08004ec8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eda:	2b84      	cmp	r3, #132	; 0x84
 8004edc:	d005      	beq.n	8004eea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ede:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3303      	adds	r3, #3
 8004ee8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004efc:	f000 fc30 	bl	8005760 <vTaskStartScheduler>
  
  return osOK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f08:	b089      	sub	sp, #36	; 0x24
 8004f0a:	af04      	add	r7, sp, #16
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <osThreadCreate+0x54>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01c      	beq.n	8004f5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685c      	ldr	r4, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681d      	ldr	r5, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691e      	ldr	r6, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ffc8 	bl	8004ec8 <makeFreeRtosPriority>
 8004f38:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f42:	9202      	str	r2, [sp, #8]
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	9100      	str	r1, [sp, #0]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	4632      	mov	r2, r6
 8004f4c:	4629      	mov	r1, r5
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f000 fa4c 	bl	80053ec <xTaskCreateStatic>
 8004f54:	4603      	mov	r3, r0
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e01c      	b.n	8004f94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685c      	ldr	r4, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f66:	b29e      	uxth	r6, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ffaa 	bl	8004ec8 <makeFreeRtosPriority>
 8004f74:	4602      	mov	r2, r0
 8004f76:	f107 030c 	add.w	r3, r7, #12
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	9200      	str	r2, [sp, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	4632      	mov	r2, r6
 8004f82:	4629      	mov	r1, r5
 8004f84:	4620      	mov	r0, r4
 8004f86:	f000 fa8a 	bl	800549e <xTaskCreate>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d001      	beq.n	8004f94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e000      	b.n	8004f96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f94:	68fb      	ldr	r3, [r7, #12]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <osDelay+0x16>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	e000      	b.n	8004fb6 <osDelay+0x18>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fb9e 	bl	80056f8 <vTaskDelay>
  
  return osOK;
 8004fbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004fc6:	b590      	push	{r4, r7, lr}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af02      	add	r7, sp, #8
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d012      	beq.n	8004ffe <osMessageCreate+0x38>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68dc      	ldr	r4, [r3, #12]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	f000 f92b 	bl	8005250 <xQueueGenericCreateStatic>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	e008      	b.n	8005010 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	4619      	mov	r1, r3
 800500a:	f000 f993 	bl	8005334 <xQueueGenericCreate>
 800500e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bd90      	pop	{r4, r7, pc}

08005018 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f103 0208 	add.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f04f 32ff 	mov.w	r2, #4294967295
 8005030:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f103 0208 	add.w	r2, r3, #8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f103 0208 	add.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ba:	b480      	push	{r7}
 80050bc:	b085      	sub	sp, #20
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d103      	bne.n	80050da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e00c      	b.n	80050f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3308      	adds	r3, #8
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e002      	b.n	80050e8 <vListInsert+0x2e>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d2f6      	bcs.n	80050e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6852      	ldr	r2, [r2, #4]
 800514c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	d103      	bne.n	8005160 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	1e5a      	subs	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	60bb      	str	r3, [r7, #8]
 80051a6:	e7fe      	b.n	80051a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80051a8:	f000 ffc0 	bl	800612c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	3b01      	subs	r3, #1
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	441a      	add	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	22ff      	movs	r2, #255	; 0xff
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d114      	bne.n	8005228 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01a      	beq.n	800523c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3310      	adds	r3, #16
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fcc6 	bl	8005b9c <xTaskRemoveFromEventList>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d012      	beq.n	800523c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <xQueueGenericReset+0xcc>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	e009      	b.n	800523c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3310      	adds	r3, #16
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fef3 	bl	8005018 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3324      	adds	r3, #36	; 0x24
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff feee 	bl	8005018 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800523c:	f000 ffa4 	bl	8006188 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005240:	2301      	movs	r3, #1
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <xQueueGenericCreateStatic+0x28>
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	e7fe      	b.n	8005276 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <xQueueGenericCreateStatic+0x42>
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e7fe      	b.n	8005290 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <xQueueGenericCreateStatic+0x4e>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <xQueueGenericCreateStatic+0x52>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <xQueueGenericCreateStatic+0x54>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <xQueueGenericCreateStatic+0x6c>
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	623b      	str	r3, [r7, #32]
 80052ba:	e7fe      	b.n	80052ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <xQueueGenericCreateStatic+0x78>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <xQueueGenericCreateStatic+0x7c>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <xQueueGenericCreateStatic+0x7e>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <xQueueGenericCreateStatic+0x96>
 80052d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052e6:	2348      	movs	r3, #72	; 0x48
 80052e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b48      	cmp	r3, #72	; 0x48
 80052ee:	d009      	beq.n	8005304 <xQueueGenericCreateStatic+0xb4>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e7fe      	b.n	8005302 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005316:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 f842 	bl	80053ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800532c:	4618      	mov	r0, r3
 800532e:	3730      	adds	r7, #48	; 0x30
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <xQueueGenericCreate+0x28>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e7fe      	b.n	800535a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e004      	b.n	8005372 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3348      	adds	r3, #72	; 0x48
 8005376:	4618      	mov	r0, r3
 8005378:	f000 ffb4 	bl	80062e4 <pvPortMalloc>
 800537c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00f      	beq.n	80053a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	3348      	adds	r3, #72	; 0x48
 8005388:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005392:	79fa      	ldrb	r2, [r7, #7]
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f805 	bl	80053ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053a4:	69bb      	ldr	r3, [r7, #24]
	}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d103      	bne.n	80053ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e002      	b.n	80053d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053dc:	2101      	movs	r1, #1
 80053de:	69b8      	ldr	r0, [r7, #24]
 80053e0:	f7ff fece 	bl	8005180 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053e4:	bf00      	nop
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08e      	sub	sp, #56	; 0x38
 80053f0:	af04      	add	r7, sp, #16
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <xTaskCreateStatic+0x28>
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	623b      	str	r3, [r7, #32]
 8005412:	e7fe      	b.n	8005412 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <xTaskCreateStatic+0x42>
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	e7fe      	b.n	800542c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800542e:	2354      	movs	r3, #84	; 0x54
 8005430:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b54      	cmp	r3, #84	; 0x54
 8005436:	d009      	beq.n	800544c <xTaskCreateStatic+0x60>
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	e7fe      	b.n	800544a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01e      	beq.n	8005490 <xTaskCreateStatic+0xa4>
 8005452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01b      	beq.n	8005490 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005460:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	2202      	movs	r2, #2
 8005466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800546a:	2300      	movs	r3, #0
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	9302      	str	r3, [sp, #8]
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f850 	bl	8005528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800548a:	f000 f8cb 	bl	8005624 <prvAddNewTaskToReadyList>
 800548e:	e001      	b.n	8005494 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005494:	697b      	ldr	r3, [r7, #20]
	}
 8005496:	4618      	mov	r0, r3
 8005498:	3728      	adds	r7, #40	; 0x28
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b08c      	sub	sp, #48	; 0x30
 80054a2:	af04      	add	r7, sp, #16
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 ff16 	bl	80062e4 <pvPortMalloc>
 80054b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00e      	beq.n	80054de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80054c0:	2054      	movs	r0, #84	; 0x54
 80054c2:	f000 ff0f 	bl	80062e4 <pvPortMalloc>
 80054c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
 80054d4:	e005      	b.n	80054e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054d6:	6978      	ldr	r0, [r7, #20]
 80054d8:	f000 ffc6 	bl	8006468 <vPortFree>
 80054dc:	e001      	b.n	80054e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d017      	beq.n	8005518 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	2300      	movs	r3, #0
 80054f4:	9303      	str	r3, [sp, #12]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f80e 	bl	8005528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800550c:	69f8      	ldr	r0, [r7, #28]
 800550e:	f000 f889 	bl	8005624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005512:	2301      	movs	r3, #1
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e002      	b.n	800551e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005518:	f04f 33ff 	mov.w	r3, #4294967295
 800551c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800551e:	69bb      	ldr	r3, [r7, #24]
	}
 8005520:	4618      	mov	r0, r3
 8005522:	3720      	adds	r7, #32
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005540:	3b01      	subs	r3, #1
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <prvInitialiseNewTask+0x46>
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	e7fe      	b.n	800556c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800556e:	2300      	movs	r3, #0
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	e012      	b.n	800559a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	7819      	ldrb	r1, [r3, #0]
 800557c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	3334      	adds	r3, #52	; 0x34
 8005584:	460a      	mov	r2, r1
 8005586:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4413      	add	r3, r2
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d006      	beq.n	80055a2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	3301      	adds	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	2b0f      	cmp	r3, #15
 800559e:	d9e9      	bls.n	8005574 <prvInitialiseNewTask+0x4c>
 80055a0:	e000      	b.n	80055a4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80055a2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b06      	cmp	r3, #6
 80055b0:	d901      	bls.n	80055b6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055b2:	2306      	movs	r3, #6
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	3304      	adds	r3, #4
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff fd43 	bl	8005058 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	3318      	adds	r3, #24
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff fd3e 	bl	8005058 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	f1c3 0207 	rsb	r2, r3, #7
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	2200      	movs	r2, #0
 80055f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	69b8      	ldr	r0, [r7, #24]
 8005606:	f000 fc69 	bl	8005edc <pxPortInitialiseStack>
 800560a:	4602      	mov	r2, r0
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561c:	bf00      	nop
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800562c:	f000 fd7e 	bl	800612c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <prvAddNewTaskToReadyList+0xb8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	4a29      	ldr	r2, [pc, #164]	; (80056dc <prvAddNewTaskToReadyList+0xb8>)
 8005638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800563a:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005642:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <prvAddNewTaskToReadyList+0xb8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d110      	bne.n	8005672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005650:	f000 fb1e 	bl	8005c90 <prvInitialiseTaskLists>
 8005654:	e00d      	b.n	8005672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005656:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <prvAddNewTaskToReadyList+0xc0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	429a      	cmp	r2, r3
 800566a:	d802      	bhi.n	8005672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800566c:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <prvAddNewTaskToReadyList+0xc4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	4a1b      	ldr	r2, [pc, #108]	; (80056e8 <prvAddNewTaskToReadyList+0xc4>)
 800567a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	4b19      	ldr	r3, [pc, #100]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4313      	orrs	r3, r2
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <prvAddNewTaskToReadyList+0xc8>)
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <prvAddNewTaskToReadyList+0xcc>)
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f7ff fce4 	bl	8005072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056aa:	f000 fd6d 	bl	8006188 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056ae:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <prvAddNewTaskToReadyList+0xc0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00e      	beq.n	80056d4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056b6:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <prvAddNewTaskToReadyList+0xbc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d207      	bcs.n	80056d4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <prvAddNewTaskToReadyList+0xd0>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200003a8 	.word	0x200003a8
 80056e0:	200002a8 	.word	0x200002a8
 80056e4:	200003b4 	.word	0x200003b4
 80056e8:	200003c4 	.word	0x200003c4
 80056ec:	200003b0 	.word	0x200003b0
 80056f0:	200002ac 	.word	0x200002ac
 80056f4:	e000ed04 	.word	0xe000ed04

080056f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <vTaskDelay+0x60>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <vTaskDelay+0x2e>
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	60bb      	str	r3, [r7, #8]
 8005724:	e7fe      	b.n	8005724 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005726:	f000 f879 	bl	800581c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800572a:	2100      	movs	r1, #0
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fb6f 	bl	8005e10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005732:	f000 f881 	bl	8005838 <xTaskResumeAll>
 8005736:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d107      	bne.n	800574e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <vTaskDelay+0x64>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	200003d0 	.word	0x200003d0
 800575c:	e000ed04 	.word	0xe000ed04

08005760 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	; 0x28
 8005764:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800576e:	463a      	mov	r2, r7
 8005770:	1d39      	adds	r1, r7, #4
 8005772:	f107 0308 	add.w	r3, r7, #8
 8005776:	4618      	mov	r0, r3
 8005778:	f7fa feb2 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	9202      	str	r2, [sp, #8]
 8005784:	9301      	str	r3, [sp, #4]
 8005786:	2300      	movs	r3, #0
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	2300      	movs	r3, #0
 800578c:	460a      	mov	r2, r1
 800578e:	491d      	ldr	r1, [pc, #116]	; (8005804 <vTaskStartScheduler+0xa4>)
 8005790:	481d      	ldr	r0, [pc, #116]	; (8005808 <vTaskStartScheduler+0xa8>)
 8005792:	f7ff fe2b 	bl	80053ec <xTaskCreateStatic>
 8005796:	4602      	mov	r2, r0
 8005798:	4b1c      	ldr	r3, [pc, #112]	; (800580c <vTaskStartScheduler+0xac>)
 800579a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800579c:	4b1b      	ldr	r3, [pc, #108]	; (800580c <vTaskStartScheduler+0xac>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	e001      	b.n	80057ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d115      	bne.n	80057e0 <vTaskStartScheduler+0x80>
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057c6:	4b12      	ldr	r3, [pc, #72]	; (8005810 <vTaskStartScheduler+0xb0>)
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <vTaskStartScheduler+0xb4>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057d4:	4b10      	ldr	r3, [pc, #64]	; (8005818 <vTaskStartScheduler+0xb8>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057da:	f000 fc09 	bl	8005ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057de:	e00d      	b.n	80057fc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d109      	bne.n	80057fc <vTaskStartScheduler+0x9c>
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	e7fe      	b.n	80057fa <vTaskStartScheduler+0x9a>
}
 80057fc:	bf00      	nop
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	08006750 	.word	0x08006750
 8005808:	08005c61 	.word	0x08005c61
 800580c:	200003cc 	.word	0x200003cc
 8005810:	200003c8 	.word	0x200003c8
 8005814:	200003b4 	.word	0x200003b4
 8005818:	200003ac 	.word	0x200003ac

0800581c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <vTaskSuspendAll+0x18>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	4a03      	ldr	r2, [pc, #12]	; (8005834 <vTaskSuspendAll+0x18>)
 8005828:	6013      	str	r3, [r2, #0]
}
 800582a:	bf00      	nop
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	200003d0 	.word	0x200003d0

08005838 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005846:	4b41      	ldr	r3, [pc, #260]	; (800594c <xTaskResumeAll+0x114>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <xTaskResumeAll+0x2a>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	e7fe      	b.n	8005860 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005862:	f000 fc63 	bl	800612c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005866:	4b39      	ldr	r3, [pc, #228]	; (800594c <xTaskResumeAll+0x114>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	4a37      	ldr	r2, [pc, #220]	; (800594c <xTaskResumeAll+0x114>)
 800586e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005870:	4b36      	ldr	r3, [pc, #216]	; (800594c <xTaskResumeAll+0x114>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d161      	bne.n	800593c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005878:	4b35      	ldr	r3, [pc, #212]	; (8005950 <xTaskResumeAll+0x118>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d05d      	beq.n	800593c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005880:	e02e      	b.n	80058e0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005882:	4b34      	ldr	r3, [pc, #208]	; (8005954 <xTaskResumeAll+0x11c>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	3318      	adds	r3, #24
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff fc4c 	bl	800512c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3304      	adds	r3, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff fc47 	bl	800512c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	2201      	movs	r2, #1
 80058a4:	409a      	lsls	r2, r3
 80058a6:	4b2c      	ldr	r3, [pc, #176]	; (8005958 <xTaskResumeAll+0x120>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <xTaskResumeAll+0x120>)
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <xTaskResumeAll+0x124>)
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7ff fbd3 	bl	8005072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	4b23      	ldr	r3, [pc, #140]	; (8005960 <xTaskResumeAll+0x128>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d302      	bcc.n	80058e0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80058da:	4b22      	ldr	r3, [pc, #136]	; (8005964 <xTaskResumeAll+0x12c>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e0:	4b1c      	ldr	r3, [pc, #112]	; (8005954 <xTaskResumeAll+0x11c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1cc      	bne.n	8005882 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ee:	f000 fa69 	bl	8005dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <xTaskResumeAll+0x130>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058fe:	f000 f837 	bl	8005970 <xTaskIncrementTick>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005908:	4b16      	ldr	r3, [pc, #88]	; (8005964 <xTaskResumeAll+0x12c>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3b01      	subs	r3, #1
 8005912:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f1      	bne.n	80058fe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <xTaskResumeAll+0x130>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <xTaskResumeAll+0x12c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <xTaskResumeAll+0x134>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800593c:	f000 fc24 	bl	8006188 <vPortExitCritical>

	return xAlreadyYielded;
 8005940:	68bb      	ldr	r3, [r7, #8]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200003d0 	.word	0x200003d0
 8005950:	200003a8 	.word	0x200003a8
 8005954:	20000368 	.word	0x20000368
 8005958:	200003b0 	.word	0x200003b0
 800595c:	200002ac 	.word	0x200002ac
 8005960:	200002a8 	.word	0x200002a8
 8005964:	200003bc 	.word	0x200003bc
 8005968:	200003b8 	.word	0x200003b8
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597a:	4b50      	ldr	r3, [pc, #320]	; (8005abc <xTaskIncrementTick+0x14c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f040 808c 	bne.w	8005a9c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005984:	4b4e      	ldr	r3, [pc, #312]	; (8005ac0 <xTaskIncrementTick+0x150>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3301      	adds	r3, #1
 800598a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800598c:	4a4c      	ldr	r2, [pc, #304]	; (8005ac0 <xTaskIncrementTick+0x150>)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11f      	bne.n	80059d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005998:	4b4a      	ldr	r3, [pc, #296]	; (8005ac4 <xTaskIncrementTick+0x154>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <xTaskIncrementTick+0x46>
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	e7fe      	b.n	80059b4 <xTaskIncrementTick+0x44>
 80059b6:	4b43      	ldr	r3, [pc, #268]	; (8005ac4 <xTaskIncrementTick+0x154>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <xTaskIncrementTick+0x158>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a40      	ldr	r2, [pc, #256]	; (8005ac4 <xTaskIncrementTick+0x154>)
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <xTaskIncrementTick+0x158>)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	4b40      	ldr	r3, [pc, #256]	; (8005acc <xTaskIncrementTick+0x15c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <xTaskIncrementTick+0x15c>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	f000 f9f6 	bl	8005dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059d8:	4b3d      	ldr	r3, [pc, #244]	; (8005ad0 <xTaskIncrementTick+0x160>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d34d      	bcc.n	8005a7e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e2:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <xTaskIncrementTick+0x154>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <xTaskIncrementTick+0x80>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <xTaskIncrementTick+0x82>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d004      	beq.n	8005a00 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f6:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <xTaskIncrementTick+0x160>)
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295
 80059fc:	601a      	str	r2, [r3, #0]
					break;
 80059fe:	e03e      	b.n	8005a7e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a00:	4b30      	ldr	r3, [pc, #192]	; (8005ac4 <xTaskIncrementTick+0x154>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d203      	bcs.n	8005a20 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a18:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <xTaskIncrementTick+0x160>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6013      	str	r3, [r2, #0]
						break;
 8005a1e:	e02e      	b.n	8005a7e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fb81 	bl	800512c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3318      	adds	r3, #24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fb78 	bl	800512c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	2201      	movs	r2, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	4b23      	ldr	r3, [pc, #140]	; (8005ad4 <xTaskIncrementTick+0x164>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <xTaskIncrementTick+0x164>)
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <xTaskIncrementTick+0x168>)
 8005a5c:	441a      	add	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7ff fb04 	bl	8005072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <xTaskIncrementTick+0x16c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3b4      	bcc.n	80059e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7c:	e7b1      	b.n	80059e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a7e:	4b17      	ldr	r3, [pc, #92]	; (8005adc <xTaskIncrementTick+0x16c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	4914      	ldr	r1, [pc, #80]	; (8005ad8 <xTaskIncrementTick+0x168>)
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d907      	bls.n	8005aa6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e004      	b.n	8005aa6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <xTaskIncrementTick+0x170>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	4a0f      	ldr	r2, [pc, #60]	; (8005ae0 <xTaskIncrementTick+0x170>)
 8005aa4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <xTaskIncrementTick+0x174>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	200003d0 	.word	0x200003d0
 8005ac0:	200003ac 	.word	0x200003ac
 8005ac4:	20000360 	.word	0x20000360
 8005ac8:	20000364 	.word	0x20000364
 8005acc:	200003c0 	.word	0x200003c0
 8005ad0:	200003c8 	.word	0x200003c8
 8005ad4:	200003b0 	.word	0x200003b0
 8005ad8:	200002ac 	.word	0x200002ac
 8005adc:	200002a8 	.word	0x200002a8
 8005ae0:	200003b8 	.word	0x200003b8
 8005ae4:	200003bc 	.word	0x200003bc

08005ae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aee:	4b26      	ldr	r3, [pc, #152]	; (8005b88 <vTaskSwitchContext+0xa0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005af6:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <vTaskSwitchContext+0xa4>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005afc:	e03e      	b.n	8005b7c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005afe:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <vTaskSwitchContext+0xa4>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b04:	4b22      	ldr	r3, [pc, #136]	; (8005b90 <vTaskSwitchContext+0xa8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b12:	7afb      	ldrb	r3, [r7, #11]
 8005b14:	f1c3 031f 	rsb	r3, r3, #31
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	491e      	ldr	r1, [pc, #120]	; (8005b94 <vTaskSwitchContext+0xac>)
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	e7fe      	b.n	8005b40 <vTaskSwitchContext+0x58>
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <vTaskSwitchContext+0xac>)
 8005b4e:	4413      	add	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	3308      	adds	r3, #8
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d104      	bne.n	8005b72 <vTaskSwitchContext+0x8a>
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a07      	ldr	r2, [pc, #28]	; (8005b98 <vTaskSwitchContext+0xb0>)
 8005b7a:	6013      	str	r3, [r2, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	200003d0 	.word	0x200003d0
 8005b8c:	200003bc 	.word	0x200003bc
 8005b90:	200003b0 	.word	0x200003b0
 8005b94:	200002ac 	.word	0x200002ac
 8005b98:	200002a8 	.word	0x200002a8

08005b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d109      	bne.n	8005bc6 <xTaskRemoveFromEventList+0x2a>
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e7fe      	b.n	8005bc4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	3318      	adds	r3, #24
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff faae 	bl	800512c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <xTaskRemoveFromEventList+0xac>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d11c      	bne.n	8005c12 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff faa5 	bl	800512c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	2201      	movs	r2, #1
 8005be8:	409a      	lsls	r2, r3
 8005bea:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <xTaskRemoveFromEventList+0xb0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <xTaskRemoveFromEventList+0xb0>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <xTaskRemoveFromEventList+0xb4>)
 8005c02:	441a      	add	r2, r3
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f7ff fa31 	bl	8005072 <vListInsertEnd>
 8005c10:	e005      	b.n	8005c1e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3318      	adds	r3, #24
 8005c16:	4619      	mov	r1, r3
 8005c18:	480e      	ldr	r0, [pc, #56]	; (8005c54 <xTaskRemoveFromEventList+0xb8>)
 8005c1a:	f7ff fa2a 	bl	8005072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <xTaskRemoveFromEventList+0xbc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d905      	bls.n	8005c38 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <xTaskRemoveFromEventList+0xc0>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e001      	b.n	8005c3c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005c3c:	697b      	ldr	r3, [r7, #20]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200003d0 	.word	0x200003d0
 8005c4c:	200003b0 	.word	0x200003b0
 8005c50:	200002ac 	.word	0x200002ac
 8005c54:	20000368 	.word	0x20000368
 8005c58:	200002a8 	.word	0x200002a8
 8005c5c:	200003bc 	.word	0x200003bc

08005c60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c68:	f000 f852 	bl	8005d10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <prvIdleTask+0x28>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d9f9      	bls.n	8005c68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <prvIdleTask+0x2c>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c84:	e7f0      	b.n	8005c68 <prvIdleTask+0x8>
 8005c86:	bf00      	nop
 8005c88:	200002ac 	.word	0x200002ac
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c96:	2300      	movs	r3, #0
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	e00c      	b.n	8005cb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <prvInitialiseTaskLists+0x60>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f9b4 	bl	8005018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b06      	cmp	r3, #6
 8005cba:	d9ef      	bls.n	8005c9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cbc:	480d      	ldr	r0, [pc, #52]	; (8005cf4 <prvInitialiseTaskLists+0x64>)
 8005cbe:	f7ff f9ab 	bl	8005018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cc2:	480d      	ldr	r0, [pc, #52]	; (8005cf8 <prvInitialiseTaskLists+0x68>)
 8005cc4:	f7ff f9a8 	bl	8005018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cc8:	480c      	ldr	r0, [pc, #48]	; (8005cfc <prvInitialiseTaskLists+0x6c>)
 8005cca:	f7ff f9a5 	bl	8005018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cce:	480c      	ldr	r0, [pc, #48]	; (8005d00 <prvInitialiseTaskLists+0x70>)
 8005cd0:	f7ff f9a2 	bl	8005018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cd4:	480b      	ldr	r0, [pc, #44]	; (8005d04 <prvInitialiseTaskLists+0x74>)
 8005cd6:	f7ff f99f 	bl	8005018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <prvInitialiseTaskLists+0x78>)
 8005cdc:	4a05      	ldr	r2, [pc, #20]	; (8005cf4 <prvInitialiseTaskLists+0x64>)
 8005cde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <prvInitialiseTaskLists+0x7c>)
 8005ce2:	4a05      	ldr	r2, [pc, #20]	; (8005cf8 <prvInitialiseTaskLists+0x68>)
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200002ac 	.word	0x200002ac
 8005cf4:	20000338 	.word	0x20000338
 8005cf8:	2000034c 	.word	0x2000034c
 8005cfc:	20000368 	.word	0x20000368
 8005d00:	2000037c 	.word	0x2000037c
 8005d04:	20000394 	.word	0x20000394
 8005d08:	20000360 	.word	0x20000360
 8005d0c:	20000364 	.word	0x20000364

08005d10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d16:	e019      	b.n	8005d4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d18:	f000 fa08 	bl	800612c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <prvCheckTasksWaitingTermination+0x4c>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff f9ff 	bl	800512c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <prvCheckTasksWaitingTermination+0x50>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <prvCheckTasksWaitingTermination+0x50>)
 8005d36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <prvCheckTasksWaitingTermination+0x54>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	4a09      	ldr	r2, [pc, #36]	; (8005d64 <prvCheckTasksWaitingTermination+0x54>)
 8005d40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d42:	f000 fa21 	bl	8006188 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f80e 	bl	8005d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <prvCheckTasksWaitingTermination+0x54>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e1      	bne.n	8005d18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	2000037c 	.word	0x2000037c
 8005d60:	200003a8 	.word	0x200003a8
 8005d64:	20000390 	.word	0x20000390

08005d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d108      	bne.n	8005d8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fb72 	bl	8006468 <vPortFree>
				vPortFree( pxTCB );
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fb6f 	bl	8006468 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d8a:	e017      	b.n	8005dbc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d103      	bne.n	8005d9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fb66 	bl	8006468 <vPortFree>
	}
 8005d9c:	e00e      	b.n	8005dbc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d009      	beq.n	8005dbc <prvDeleteTCB+0x54>
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e7fe      	b.n	8005dba <prvDeleteTCB+0x52>
	}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <prvResetNextTaskUnblockTime+0x44>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <prvResetNextTaskUnblockTime+0x14>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <prvResetNextTaskUnblockTime+0x16>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d004      	beq.n	8005de8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <prvResetNextTaskUnblockTime+0x48>)
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005de6:	e008      	b.n	8005dfa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <prvResetNextTaskUnblockTime+0x44>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	4a05      	ldr	r2, [pc, #20]	; (8005e0c <prvResetNextTaskUnblockTime+0x48>)
 8005df8:	6013      	str	r3, [r2, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000360 	.word	0x20000360
 8005e0c:	200003c8 	.word	0x200003c8

08005e10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e1a:	4b29      	ldr	r3, [pc, #164]	; (8005ec0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff f980 	bl	800512c <uxListRemove>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10b      	bne.n	8005e4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e32:	4b24      	ldr	r3, [pc, #144]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	2201      	movs	r2, #1
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43da      	mvns	r2, r3
 8005e40:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4013      	ands	r3, r2
 8005e46:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d10a      	bne.n	8005e68 <prvAddCurrentTaskToDelayedList+0x58>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e58:	4b1a      	ldr	r3, [pc, #104]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	4619      	mov	r1, r3
 8005e60:	481a      	ldr	r0, [pc, #104]	; (8005ecc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005e62:	f7ff f906 	bl	8005072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e66:	e026      	b.n	8005eb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d209      	bcs.n	8005e94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7ff f914 	bl	80050ba <vListInsert>
}
 8005e92:	e010      	b.n	8005eb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f7ff f90a 	bl	80050ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d202      	bcs.n	8005eb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	200003ac 	.word	0x200003ac
 8005ec4:	200002a8 	.word	0x200002a8
 8005ec8:	200003b0 	.word	0x200003b0
 8005ecc:	20000394 	.word	0x20000394
 8005ed0:	20000364 	.word	0x20000364
 8005ed4:	20000360 	.word	0x20000360
 8005ed8:	200003c8 	.word	0x200003c8

08005edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3b04      	subs	r3, #4
 8005eec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f023 0201 	bic.w	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f0c:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <pxPortInitialiseStack+0x64>)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3b14      	subs	r3, #20
 8005f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3b04      	subs	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f06f 0202 	mvn.w	r2, #2
 8005f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b20      	subs	r3, #32
 8005f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f32:	68fb      	ldr	r3, [r7, #12]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	08005f45 	.word	0x08005f45

08005f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <prvTaskExitError+0x50>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d009      	beq.n	8005f6c <prvTaskExitError+0x28>
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e7fe      	b.n	8005f6a <prvTaskExitError+0x26>
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f7e:	bf00      	nop
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0fc      	beq.n	8005f80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	2000000c 	.word	0x2000000c
	...

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <pxCurrentTCBConst2>)
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6808      	ldr	r0, [r1, #0]
 8005fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	f380 8809 	msr	PSP, r0
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	4770      	bx	lr
 8005fbc:	f3af 8000 	nop.w

08005fc0 <pxCurrentTCBConst2>:
 8005fc0:	200002a8 	.word	0x200002a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fc8:	4808      	ldr	r0, [pc, #32]	; (8005fec <prvPortStartFirstTask+0x24>)
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f380 8808 	msr	MSP, r0
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f380 8814 	msr	CONTROL, r0
 8005fda:	b662      	cpsie	i
 8005fdc:	b661      	cpsie	f
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	df00      	svc	0
 8005fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fea:	bf00      	nop
 8005fec:	e000ed08 	.word	0xe000ed08

08005ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ff6:	4b44      	ldr	r3, [pc, #272]	; (8006108 <xPortStartScheduler+0x118>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a44      	ldr	r2, [pc, #272]	; (800610c <xPortStartScheduler+0x11c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d109      	bne.n	8006014 <xPortStartScheduler+0x24>
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	e7fe      	b.n	8006012 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006014:	4b3c      	ldr	r3, [pc, #240]	; (8006108 <xPortStartScheduler+0x118>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a3d      	ldr	r2, [pc, #244]	; (8006110 <xPortStartScheduler+0x120>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d109      	bne.n	8006032 <xPortStartScheduler+0x42>
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e7fe      	b.n	8006030 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006032:	4b38      	ldr	r3, [pc, #224]	; (8006114 <xPortStartScheduler+0x124>)
 8006034:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006054:	b2da      	uxtb	r2, r3
 8006056:	4b30      	ldr	r3, [pc, #192]	; (8006118 <xPortStartScheduler+0x128>)
 8006058:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800605a:	4b30      	ldr	r3, [pc, #192]	; (800611c <xPortStartScheduler+0x12c>)
 800605c:	2207      	movs	r2, #7
 800605e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006060:	e009      	b.n	8006076 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006062:	4b2e      	ldr	r3, [pc, #184]	; (800611c <xPortStartScheduler+0x12c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3b01      	subs	r3, #1
 8006068:	4a2c      	ldr	r2, [pc, #176]	; (800611c <xPortStartScheduler+0x12c>)
 800606a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	b2db      	uxtb	r3, r3
 8006074:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607e:	2b80      	cmp	r3, #128	; 0x80
 8006080:	d0ef      	beq.n	8006062 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006082:	4b26      	ldr	r3, [pc, #152]	; (800611c <xPortStartScheduler+0x12c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f1c3 0307 	rsb	r3, r3, #7
 800608a:	2b04      	cmp	r3, #4
 800608c:	d009      	beq.n	80060a2 <xPortStartScheduler+0xb2>
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60bb      	str	r3, [r7, #8]
 80060a0:	e7fe      	b.n	80060a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060a2:	4b1e      	ldr	r3, [pc, #120]	; (800611c <xPortStartScheduler+0x12c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	4a1c      	ldr	r2, [pc, #112]	; (800611c <xPortStartScheduler+0x12c>)
 80060aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060ac:	4b1b      	ldr	r3, [pc, #108]	; (800611c <xPortStartScheduler+0x12c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <xPortStartScheduler+0x12c>)
 80060b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <xPortStartScheduler+0x130>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <xPortStartScheduler+0x130>)
 80060c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060cc:	4b14      	ldr	r3, [pc, #80]	; (8006120 <xPortStartScheduler+0x130>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <xPortStartScheduler+0x130>)
 80060d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060d8:	f000 f8d6 	bl	8006288 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060dc:	4b11      	ldr	r3, [pc, #68]	; (8006124 <xPortStartScheduler+0x134>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060e2:	f000 f8f5 	bl	80062d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <xPortStartScheduler+0x138>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a0f      	ldr	r2, [pc, #60]	; (8006128 <xPortStartScheduler+0x138>)
 80060ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060f2:	f7ff ff69 	bl	8005fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060f6:	f7ff fcf7 	bl	8005ae8 <vTaskSwitchContext>
	prvTaskExitError();
 80060fa:	f7ff ff23 	bl	8005f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed00 	.word	0xe000ed00
 800610c:	410fc271 	.word	0x410fc271
 8006110:	410fc270 	.word	0x410fc270
 8006114:	e000e400 	.word	0xe000e400
 8006118:	200003d4 	.word	0x200003d4
 800611c:	200003d8 	.word	0x200003d8
 8006120:	e000ed20 	.word	0xe000ed20
 8006124:	2000000c 	.word	0x2000000c
 8006128:	e000ef34 	.word	0xe000ef34

0800612c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <vPortEnterCritical+0x54>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	4a0d      	ldr	r2, [pc, #52]	; (8006180 <vPortEnterCritical+0x54>)
 800614c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800614e:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <vPortEnterCritical+0x54>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10e      	bne.n	8006174 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <vPortEnterCritical+0x58>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d009      	beq.n	8006174 <vPortEnterCritical+0x48>
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	e7fe      	b.n	8006172 <vPortEnterCritical+0x46>
	}
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	2000000c 	.word	0x2000000c
 8006184:	e000ed04 	.word	0xe000ed04

08006188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <vPortExitCritical+0x4c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <vPortExitCritical+0x22>
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	e7fe      	b.n	80061a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <vPortExitCritical+0x4c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	4a08      	ldr	r2, [pc, #32]	; (80061d4 <vPortExitCritical+0x4c>)
 80061b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061b4:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <vPortExitCritical+0x4c>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <vPortExitCritical+0x3e>
 80061bc:	2300      	movs	r3, #0
 80061be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	2000000c 	.word	0x2000000c
	...

080061e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061e0:	f3ef 8009 	mrs	r0, PSP
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <pxCurrentTCBConst>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	f01e 0f10 	tst.w	lr, #16
 80061f0:	bf08      	it	eq
 80061f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	6010      	str	r0, [r2, #0]
 80061fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006204:	f380 8811 	msr	BASEPRI, r0
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f7ff fc6a 	bl	8005ae8 <vTaskSwitchContext>
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f380 8811 	msr	BASEPRI, r0
 800621c:	bc09      	pop	{r0, r3}
 800621e:	6819      	ldr	r1, [r3, #0]
 8006220:	6808      	ldr	r0, [r1, #0]
 8006222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006226:	f01e 0f10 	tst.w	lr, #16
 800622a:	bf08      	it	eq
 800622c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006230:	f380 8809 	msr	PSP, r0
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	f3af 8000 	nop.w

08006240 <pxCurrentTCBConst>:
 8006240:	200002a8 	.word	0x200002a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006260:	f7ff fb86 	bl	8005970 <xTaskIncrementTick>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <SysTick_Handler+0x3c>)
 800626c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <vPortSetupTimerInterrupt+0x34>)
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <vPortSetupTimerInterrupt+0x38>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006298:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <vPortSetupTimerInterrupt+0x3c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <vPortSetupTimerInterrupt+0x40>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	099b      	lsrs	r3, r3, #6
 80062a4:	4a09      	ldr	r2, [pc, #36]	; (80062cc <vPortSetupTimerInterrupt+0x44>)
 80062a6:	3b01      	subs	r3, #1
 80062a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <vPortSetupTimerInterrupt+0x34>)
 80062ac:	2207      	movs	r2, #7
 80062ae:	601a      	str	r2, [r3, #0]
}
 80062b0:	bf00      	nop
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	e000e010 	.word	0xe000e010
 80062c0:	e000e018 	.word	0xe000e018
 80062c4:	20000000 	.word	0x20000000
 80062c8:	10624dd3 	.word	0x10624dd3
 80062cc:	e000e014 	.word	0xe000e014

080062d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062e0 <vPortEnableVFP+0x10>
 80062d4:	6801      	ldr	r1, [r0, #0]
 80062d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062da:	6001      	str	r1, [r0, #0]
 80062dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062de:	bf00      	nop
 80062e0:	e000ed88 	.word	0xe000ed88

080062e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	; 0x28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80062f0:	f7ff fa94 	bl	800581c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80062f4:	4b57      	ldr	r3, [pc, #348]	; (8006454 <pvPortMalloc+0x170>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062fc:	f000 f90c 	bl	8006518 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006300:	4b55      	ldr	r3, [pc, #340]	; (8006458 <pvPortMalloc+0x174>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	f040 808c 	bne.w	8006426 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01c      	beq.n	800634e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006314:	2208      	movs	r2, #8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	2b00      	cmp	r3, #0
 8006324:	d013      	beq.n	800634e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f023 0307 	bic.w	r3, r3, #7
 800632c:	3308      	adds	r3, #8
 800632e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <pvPortMalloc+0x6a>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e7fe      	b.n	800634c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d068      	beq.n	8006426 <pvPortMalloc+0x142>
 8006354:	4b41      	ldr	r3, [pc, #260]	; (800645c <pvPortMalloc+0x178>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	429a      	cmp	r2, r3
 800635c:	d863      	bhi.n	8006426 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800635e:	4b40      	ldr	r3, [pc, #256]	; (8006460 <pvPortMalloc+0x17c>)
 8006360:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006362:	4b3f      	ldr	r3, [pc, #252]	; (8006460 <pvPortMalloc+0x17c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006368:	e004      	b.n	8006374 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d903      	bls.n	8006386 <pvPortMalloc+0xa2>
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f1      	bne.n	800636a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006386:	4b33      	ldr	r3, [pc, #204]	; (8006454 <pvPortMalloc+0x170>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800638c:	429a      	cmp	r2, r3
 800638e:	d04a      	beq.n	8006426 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2208      	movs	r2, #8
 8006396:	4413      	add	r3, r2
 8006398:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	1ad2      	subs	r2, r2, r3
 80063aa:	2308      	movs	r3, #8
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d91e      	bls.n	80063f0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <pvPortMalloc+0xf4>
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	e7fe      	b.n	80063d6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1ad2      	subs	r2, r2, r3
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80063e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063ea:	69b8      	ldr	r0, [r7, #24]
 80063ec:	f000 f8f6 	bl	80065dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063f0:	4b1a      	ldr	r3, [pc, #104]	; (800645c <pvPortMalloc+0x178>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	4a18      	ldr	r2, [pc, #96]	; (800645c <pvPortMalloc+0x178>)
 80063fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063fe:	4b17      	ldr	r3, [pc, #92]	; (800645c <pvPortMalloc+0x178>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b18      	ldr	r3, [pc, #96]	; (8006464 <pvPortMalloc+0x180>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d203      	bcs.n	8006412 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800640a:	4b14      	ldr	r3, [pc, #80]	; (800645c <pvPortMalloc+0x178>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a15      	ldr	r2, [pc, #84]	; (8006464 <pvPortMalloc+0x180>)
 8006410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	4b10      	ldr	r3, [pc, #64]	; (8006458 <pvPortMalloc+0x174>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	431a      	orrs	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006426:	f7ff fa07 	bl	8005838 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <pvPortMalloc+0x164>
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	e7fe      	b.n	8006446 <pvPortMalloc+0x162>
	return pvReturn;
 8006448:	69fb      	ldr	r3, [r7, #28]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	; 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000f9c 	.word	0x20000f9c
 8006458:	20000fa8 	.word	0x20000fa8
 800645c:	20000fa0 	.word	0x20000fa0
 8006460:	20000f94 	.word	0x20000f94
 8006464:	20000fa4 	.word	0x20000fa4

08006468 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d046      	beq.n	8006508 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800647a:	2308      	movs	r3, #8
 800647c:	425b      	negs	r3, r3
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4413      	add	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	4b20      	ldr	r3, [pc, #128]	; (8006510 <vPortFree+0xa8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <vPortFree+0x42>
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	e7fe      	b.n	80064a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <vPortFree+0x5e>
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60bb      	str	r3, [r7, #8]
 80064c4:	e7fe      	b.n	80064c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <vPortFree+0xa8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d019      	beq.n	8006508 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d115      	bne.n	8006508 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <vPortFree+0xa8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	43db      	mvns	r3, r3
 80064e6:	401a      	ands	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80064ec:	f7ff f996 	bl	800581c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <vPortFree+0xac>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4413      	add	r3, r2
 80064fa:	4a06      	ldr	r2, [pc, #24]	; (8006514 <vPortFree+0xac>)
 80064fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064fe:	6938      	ldr	r0, [r7, #16]
 8006500:	f000 f86c 	bl	80065dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006504:	f7ff f998 	bl	8005838 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006508:	bf00      	nop
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000fa8 	.word	0x20000fa8
 8006514:	20000fa0 	.word	0x20000fa0

08006518 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800651e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006522:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006524:	4b27      	ldr	r3, [pc, #156]	; (80065c4 <prvHeapInit+0xac>)
 8006526:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3307      	adds	r3, #7
 8006536:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0307 	bic.w	r3, r3, #7
 800653e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <prvHeapInit+0xac>)
 8006548:	4413      	add	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006550:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <prvHeapInit+0xb0>)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006556:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <prvHeapInit+0xb0>)
 8006558:	2200      	movs	r2, #0
 800655a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	4413      	add	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006564:	2208      	movs	r2, #8
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0307 	bic.w	r3, r3, #7
 8006572:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <prvHeapInit+0xb4>)
 8006578:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800657a:	4b14      	ldr	r3, [pc, #80]	; (80065cc <prvHeapInit+0xb4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2200      	movs	r2, #0
 8006580:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006582:	4b12      	ldr	r3, [pc, #72]	; (80065cc <prvHeapInit+0xb4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	1ad2      	subs	r2, r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <prvHeapInit+0xb4>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <prvHeapInit+0xb8>)
 80065a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	4a09      	ldr	r2, [pc, #36]	; (80065d4 <prvHeapInit+0xbc>)
 80065ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065b0:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <prvHeapInit+0xc0>)
 80065b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065b6:	601a      	str	r2, [r3, #0]
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	200003dc 	.word	0x200003dc
 80065c8:	20000f94 	.word	0x20000f94
 80065cc:	20000f9c 	.word	0x20000f9c
 80065d0:	20000fa4 	.word	0x20000fa4
 80065d4:	20000fa0 	.word	0x20000fa0
 80065d8:	20000fa8 	.word	0x20000fa8

080065dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065e4:	4b28      	ldr	r3, [pc, #160]	; (8006688 <prvInsertBlockIntoFreeList+0xac>)
 80065e6:	60fb      	str	r3, [r7, #12]
 80065e8:	e002      	b.n	80065f0 <prvInsertBlockIntoFreeList+0x14>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d8f7      	bhi.n	80065ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	4413      	add	r3, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	429a      	cmp	r2, r3
 800660a:	d108      	bne.n	800661e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	441a      	add	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	441a      	add	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d118      	bne.n	8006664 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b15      	ldr	r3, [pc, #84]	; (800668c <prvInsertBlockIntoFreeList+0xb0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d00d      	beq.n	800665a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e008      	b.n	800666c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <prvInsertBlockIntoFreeList+0xb0>)
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	e003      	b.n	800666c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d002      	beq.n	800667a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800667a:	bf00      	nop
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	20000f94 	.word	0x20000f94
 800668c:	20000f9c 	.word	0x20000f9c

08006690 <__libc_init_array>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4e0d      	ldr	r6, [pc, #52]	; (80066c8 <__libc_init_array+0x38>)
 8006694:	4c0d      	ldr	r4, [pc, #52]	; (80066cc <__libc_init_array+0x3c>)
 8006696:	1ba4      	subs	r4, r4, r6
 8006698:	10a4      	asrs	r4, r4, #2
 800669a:	2500      	movs	r5, #0
 800669c:	42a5      	cmp	r5, r4
 800669e:	d109      	bne.n	80066b4 <__libc_init_array+0x24>
 80066a0:	4e0b      	ldr	r6, [pc, #44]	; (80066d0 <__libc_init_array+0x40>)
 80066a2:	4c0c      	ldr	r4, [pc, #48]	; (80066d4 <__libc_init_array+0x44>)
 80066a4:	f000 f820 	bl	80066e8 <_init>
 80066a8:	1ba4      	subs	r4, r4, r6
 80066aa:	10a4      	asrs	r4, r4, #2
 80066ac:	2500      	movs	r5, #0
 80066ae:	42a5      	cmp	r5, r4
 80066b0:	d105      	bne.n	80066be <__libc_init_array+0x2e>
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066b8:	4798      	blx	r3
 80066ba:	3501      	adds	r5, #1
 80066bc:	e7ee      	b.n	800669c <__libc_init_array+0xc>
 80066be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066c2:	4798      	blx	r3
 80066c4:	3501      	adds	r5, #1
 80066c6:	e7f2      	b.n	80066ae <__libc_init_array+0x1e>
 80066c8:	080067a8 	.word	0x080067a8
 80066cc:	080067a8 	.word	0x080067a8
 80066d0:	080067a8 	.word	0x080067a8
 80066d4:	080067ac 	.word	0x080067ac

080066d8 <memset>:
 80066d8:	4402      	add	r2, r0
 80066da:	4603      	mov	r3, r0
 80066dc:	4293      	cmp	r3, r2
 80066de:	d100      	bne.n	80066e2 <memset+0xa>
 80066e0:	4770      	bx	lr
 80066e2:	f803 1b01 	strb.w	r1, [r3], #1
 80066e6:	e7f9      	b.n	80066dc <memset+0x4>

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr
