
GIRASOLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800a818  0800a818  0001a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa1c  0800aa1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa24  0800aa24  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa24  0800aa24  0001aa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa28  0800aa28  0001aa28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800aa2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000232c  20000074  0800aaa0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200023a0  0800aaa0  000223a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000298e7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bc0  00000000  00000000  0004998b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002590  00000000  00000000  0004e550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002358  00000000  00000000  00050ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c95d  00000000  00000000  00052e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c749  00000000  00000000  0007f795  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011810d  00000000  00000000  0009bede  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b3feb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4b8  00000000  00000000  001b4068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a800 	.word	0x0800a800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800a800 	.word	0x0800a800

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <panelDataInit>:
struct panelsData {
	int rightPanelValue, leftPanelValue, threshold, variation;
} pd;

// Function to initialize panel data
void panelDataInit() {
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	pd.leftPanelValue = 0;
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <panelDataInit+0x28>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
	pd.rightPanelValue = 0;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <panelDataInit+0x28>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	pd.threshold = 10;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <panelDataInit+0x28>)
 80005c6:	220a      	movs	r2, #10
 80005c8:	609a      	str	r2, [r3, #8]
	pd.variation = 10;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <panelDataInit+0x28>)
 80005cc:	220a      	movs	r2, #10
 80005ce:	60da      	str	r2, [r3, #12]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20002264 	.word	0x20002264

080005e0 <prec_control_manag_init>:
	int led1_done, led2_done, led3_done;
	int button_wait, button_can_do;
} pcm;

void prec_control_manag_init()
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	pcm.lpw = pcm.rpw = 0;
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <prec_control_manag_init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <prec_control_manag_init+0x64>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <prec_control_manag_init+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]
	pcm.l1w = pcm.l2w = pcm.l3w = 0;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <prec_control_manag_init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <prec_control_manag_init+0x64>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a11      	ldr	r2, [pc, #68]	; (8000644 <prec_control_manag_init+0x64>)
 80005fe:	60d3      	str	r3, [r2, #12]
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <prec_control_manag_init+0x64>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <prec_control_manag_init+0x64>)
 8000606:	6093      	str	r3, [r2, #8]
	pcm.lpanel_done = pcm.rpanel_done = 0;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <prec_control_manag_init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <prec_control_manag_init+0x64>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <prec_control_manag_init+0x64>)
 8000614:	6153      	str	r3, [r2, #20]
	pcm.led1_done = pcm.led2_done = pcm.led3_done = 1;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <prec_control_manag_init+0x64>)
 8000618:	2201      	movs	r2, #1
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <prec_control_manag_init+0x64>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <prec_control_manag_init+0x64>)
 8000622:	6213      	str	r3, [r2, #32]
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <prec_control_manag_init+0x64>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a06      	ldr	r2, [pc, #24]	; (8000644 <prec_control_manag_init+0x64>)
 800062a:	61d3      	str	r3, [r2, #28]
	pcm.button_wait = pcm.button_can_do = 0;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <prec_control_manag_init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <prec_control_manag_init+0x64>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	4a03      	ldr	r2, [pc, #12]	; (8000644 <prec_control_manag_init+0x64>)
 8000638:	6293      	str	r3, [r2, #40]	; 0x28
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	200020e0 	.word	0x200020e0

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b0c2      	sub	sp, #264	; 0x108
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	// Initialize panels data structure
	panelDataInit();
 800064e:	f7ff ffb1 	bl	80005b4 <panelDataInit>
	// Initialize control data structure
	prec_control_manag_init();
 8000652:	f7ff ffc5 	bl	80005e0 <prec_control_manag_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f001 fd8c 	bl	8002172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f94f 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fc37 	bl	8000ed0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000662:	f000 facb 	bl	8000bfc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000666:	f000 fb01 	bl	8000c6c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800066a:	f000 fb3f 	bl	8000cec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800066e:	f000 fb63 	bl	8000d38 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000672:	f000 fbcf 	bl	8000e14 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000676:	f000 fbfd 	bl	8000e74 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800067a:	f000 f9e5 	bl	8000a48 <MX_ADC1_Init>
  MX_ADC2_Init();
 800067e:	f000 fa59 	bl	8000b34 <MX_ADC2_Init>
  MX_UART4_Init();
 8000682:	f000 fb97 	bl	8000db4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 8000686:	4b86      	ldr	r3, [pc, #536]	; (80008a0 <main+0x258>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b84      	ldr	r3, [pc, #528]	; (80008a0 <main+0x258>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f042 0220 	orr.w	r2, r2, #32
 8000694:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart4, UART_IT_TC);
 8000696:	4b82      	ldr	r3, [pc, #520]	; (80008a0 <main+0x258>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b80      	ldr	r3, [pc, #512]	; (80008a0 <main+0x258>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexPD */
  osMutexDef(MutexPD);
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  MutexPDHandle = osMutexCreate(osMutex(MutexPD));
 80006b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80006b6:	4618      	mov	r0, r3
 80006b8:	f007 f89d 	bl	80077f6 <osMutexCreate>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b79      	ldr	r3, [pc, #484]	; (80008a4 <main+0x25c>)
 80006c0:	601a      	str	r2, [r3, #0]

  /* definition and creation of panelsMutex */
  osMutexDef(panelsMutex);
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  panelsMutexHandle = osMutexCreate(osMutex(panelsMutex));
 80006ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 f88f 	bl	80077f6 <osMutexCreate>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b73      	ldr	r3, [pc, #460]	; (80008a8 <main+0x260>)
 80006dc:	601a      	str	r2, [r3, #0]
  //osMutexWait(panelsMutexHandle, osWaitForever);
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of rpanel_sem */
  osSemaphoreDef(rpanel_sem);
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  rpanel_semHandle = osSemaphoreCreate(osSemaphore(rpanel_sem), 1);
 80006ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80006ee:	2101      	movs	r1, #1
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 f91d 	bl	8007930 <osSemaphoreCreate>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b6c      	ldr	r3, [pc, #432]	; (80008ac <main+0x264>)
 80006fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of lpanel_sem */
  osSemaphoreDef(lpanel_sem);
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  lpanel_semHandle = osSemaphoreCreate(osSemaphore(lpanel_sem), 1);
 8000708:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800070c:	2101      	movs	r1, #1
 800070e:	4618      	mov	r0, r3
 8000710:	f007 f90e 	bl	8007930 <osSemaphoreCreate>
 8000714:	4602      	mov	r2, r0
 8000716:	4b66      	ldr	r3, [pc, #408]	; (80008b0 <main+0x268>)
 8000718:	601a      	str	r2, [r3, #0]

  /* definition and creation of led1_sem */
  osSemaphoreDef(led1_sem);
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  led1_semHandle = osSemaphoreCreate(osSemaphore(led1_sem), 1);
 8000726:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800072a:	2101      	movs	r1, #1
 800072c:	4618      	mov	r0, r3
 800072e:	f007 f8ff 	bl	8007930 <osSemaphoreCreate>
 8000732:	4602      	mov	r2, r0
 8000734:	4b5f      	ldr	r3, [pc, #380]	; (80008b4 <main+0x26c>)
 8000736:	601a      	str	r2, [r3, #0]

  /* definition and creation of led2_sem */
  osSemaphoreDef(led2_sem);
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  led2_semHandle = osSemaphoreCreate(osSemaphore(led2_sem), 1);
 8000744:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f007 f8f0 	bl	8007930 <osSemaphoreCreate>
 8000750:	4602      	mov	r2, r0
 8000752:	4b59      	ldr	r3, [pc, #356]	; (80008b8 <main+0x270>)
 8000754:	601a      	str	r2, [r3, #0]

  /* definition and creation of led3_sem */
  osSemaphoreDef(led3_sem);
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  led3_semHandle = osSemaphoreCreate(osSemaphore(led3_sem), 1);
 8000762:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000766:	2101      	movs	r1, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f007 f8e1 	bl	8007930 <osSemaphoreCreate>
 800076e:	4602      	mov	r2, r0
 8000770:	4b52      	ldr	r3, [pc, #328]	; (80008bc <main+0x274>)
 8000772:	601a      	str	r2, [r3, #0]

  /* definition and creation of button_sem */
  osSemaphoreDef(button_sem);
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  button_semHandle = osSemaphoreCreate(osSemaphore(button_sem), 1);
 8000780:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f007 f8d2 	bl	8007930 <osSemaphoreCreate>
 800078c:	4602      	mov	r2, r0
 800078e:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <main+0x278>)
 8000790:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadLeftPanel */
  osThreadDef(ReadLeftPanel, StartReadLeftPanel, osPriorityNormal, 0, 128);
 8000792:	4b4c      	ldr	r3, [pc, #304]	; (80008c4 <main+0x27c>)
 8000794:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000798:	461d      	mov	r5, r3
 800079a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadLeftPanelHandle = osThreadCreate(osThread(ReadLeftPanel), NULL);
 80007a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 ffc2 	bl	8007736 <osThreadCreate>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <main+0x280>)
 80007b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of ReadRightPanel */
  osThreadDef(ReadRightPanel, StartReadRightPanel, osPriorityNormal, 0, 128);
 80007b8:	4b44      	ldr	r3, [pc, #272]	; (80008cc <main+0x284>)
 80007ba:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRightPanelHandle = osThreadCreate(osThread(ReadRightPanel), NULL);
 80007cc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f006 ffaf 	bl	8007736 <osThreadCreate>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <main+0x288>)
 80007dc:	601a      	str	r2, [r3, #0]

  /* definition and creation of SerialDebug */
  osThreadDef(SerialDebug, StartSerialDebug, osPriorityNormal, 0, 128);
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <main+0x28c>)
 80007e0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80007e4:	461d      	mov	r5, r3
 80007e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SerialDebugHandle = osThreadCreate(osThread(SerialDebug), NULL);
 80007f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f006 ff9c 	bl	8007736 <osThreadCreate>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <main+0x290>)
 8000802:	601a      	str	r2, [r3, #0]

  /* definition and creation of SyncButtonTask */
  osThreadDef(SyncButtonTask, StartSyncButton, osPriorityAboveNormal, 0, 128);
 8000804:	4b35      	ldr	r3, [pc, #212]	; (80008dc <main+0x294>)
 8000806:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800080a:	461d      	mov	r5, r3
 800080c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000814:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SyncButtonTaskHandle = osThreadCreate(osThread(SyncButtonTask), NULL);
 8000818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f006 ff89 	bl	8007736 <osThreadCreate>
 8000824:	4602      	mov	r2, r0
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <main+0x298>)
 8000828:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask1 */
  osThreadDef(ledTask1, StartLedTask1, osPriorityNormal, 0, 128);
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <main+0x29c>)
 800082c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000830:	461d      	mov	r5, r3
 8000832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000836:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask1Handle = osThreadCreate(osThread(ledTask1), NULL);
 800083e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f006 ff76 	bl	8007736 <osThreadCreate>
 800084a:	4602      	mov	r2, r0
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <main+0x2a0>)
 800084e:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask2 */
  osThreadDef(ledTask2, StartLedTask2, osPriorityNormal, 0, 128);
 8000850:	4b26      	ldr	r3, [pc, #152]	; (80008ec <main+0x2a4>)
 8000852:	f107 0420 	add.w	r4, r7, #32
 8000856:	461d      	mov	r5, r3
 8000858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000860:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask2Handle = osThreadCreate(osThread(ledTask2), NULL);
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f006 ff63 	bl	8007736 <osThreadCreate>
 8000870:	4602      	mov	r2, r0
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <main+0x2a8>)
 8000874:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledTask3 */
  osThreadDef(ledTask3, StartLedTask3, osPriorityNormal, 0, 128);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <main+0x2ac>)
 800087a:	461c      	mov	r4, r3
 800087c:	4615      	mov	r5, r2
 800087e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000882:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTask3Handle = osThreadCreate(osThread(ledTask3), NULL);
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f006 ff51 	bl	8007736 <osThreadCreate>
 8000894:	4602      	mov	r2, r0
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <main+0x2b0>)
 8000898:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800089a:	f006 ff45 	bl	8007728 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800089e:	e7fe      	b.n	800089e <main+0x256>
 80008a0:	20002284 	.word	0x20002284
 80008a4:	20002310 	.word	0x20002310
 80008a8:	200021e0 	.word	0x200021e0
 80008ac:	20002174 	.word	0x20002174
 80008b0:	20002280 	.word	0x20002280
 80008b4:	20001c18 	.word	0x20001c18
 80008b8:	2000230c 	.word	0x2000230c
 80008bc:	20002308 	.word	0x20002308
 80008c0:	200020dc 	.word	0x200020dc
 80008c4:	0800a828 	.word	0x0800a828
 80008c8:	20002278 	.word	0x20002278
 80008cc:	0800a854 	.word	0x0800a854
 80008d0:	20002304 	.word	0x20002304
 80008d4:	0800a87c 	.word	0x0800a87c
 80008d8:	20001c84 	.word	0x20001c84
 80008dc:	0800a8a8 	.word	0x0800a8a8
 80008e0:	20001c80 	.word	0x20001c80
 80008e4:	0800a8d0 	.word	0x0800a8d0
 80008e8:	200021dc 	.word	0x200021dc
 80008ec:	0800a8f8 	.word	0x0800a8f8
 80008f0:	20001bdc 	.word	0x20001bdc
 80008f4:	0800a920 	.word	0x0800a920
 80008f8:	20002274 	.word	0x20002274

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b0b8      	sub	sp, #224	; 0xe0
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000906:	2244      	movs	r2, #68	; 0x44
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f009 fb73 	bl	8009ff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	463b      	mov	r3, r7
 8000922:	2288      	movs	r2, #136	; 0x88
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f009 fb65 	bl	8009ff6 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800092c:	f003 fc58 	bl	80041e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000930:	4b43      	ldr	r3, [pc, #268]	; (8000a40 <SystemClock_Config+0x144>)
 8000932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000936:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <SystemClock_Config+0x144>)
 8000938:	f023 0318 	bic.w	r3, r3, #24
 800093c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000940:	2314      	movs	r3, #20
 8000942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000946:	2301      	movs	r3, #1
 8000948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000964:	2301      	movs	r3, #1
 8000966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000970:	2328      	movs	r3, #40	; 0x28
 8000972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000976:	2307      	movs	r3, #7
 8000978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800097c:	2302      	movs	r3, #2
 800097e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000982:	2302      	movs	r3, #2
 8000984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fd73 	bl	8004478 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000998:	f000 ffe0 	bl	800195c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2303      	movs	r3, #3
 80009a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009be:	2104      	movs	r1, #4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f004 f909 	bl	8004bd8 <HAL_RCC_ClockConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009cc:	f000 ffc6 	bl	800195c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <SystemClock_Config+0x148>)
 80009d2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009e4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009f2:	2301      	movs	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009fa:	2318      	movs	r3, #24
 80009fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009fe:	2307      	movs	r3, #7
 8000a00:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000a0a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000a0e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4618      	mov	r0, r3
 8000a14:	f004 fb16 	bl	8005044 <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000a1e:	f000 ff9d 	bl	800195c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a26:	f003 fbf9 	bl	800421c <HAL_PWREx_ControlVoltageScaling>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000a30:	f000 ff94 	bl	800195c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a34:	f004 fdec 	bl	8005610 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a38:	bf00      	nop
 8000a3a:	37e0      	adds	r7, #224	; 0xe0
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	00016089 	.word	0x00016089

08000a48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a6c:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <MX_ADC1_Init+0xe4>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a76:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aca:	4817      	ldr	r0, [pc, #92]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000acc:	f001 fd80 	bl	80025d0 <HAL_ADC_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ad6:	f000 ff41 	bl	800195c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4810      	ldr	r0, [pc, #64]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000ae6:	f002 fc43 	bl	8003370 <HAL_ADCEx_MultiModeConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000af0:	f000 ff34 	bl	800195c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_ADC1_Init+0xe8>)
 8000af6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2306      	movs	r3, #6
 8000afa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b00:	237f      	movs	r3, #127	; 0x7f
 8000b02:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b04:	2304      	movs	r3, #4
 8000b06:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC1_Init+0xe0>)
 8000b12:	f002 f849 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000b1c:	f000 ff1e 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20002178 	.word	0x20002178
 8000b2c:	50040000 	.word	0x50040000
 8000b30:	04300002 	.word	0x04300002

08000b34 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
 8000b48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b4c:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <MX_ADC2_Init+0xc0>)
 8000b4e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b62:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000baa:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000bac:	f001 fd10 	bl	80025d0 <HAL_ADC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000bb6:	f000 fed1 	bl	800195c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ADC2_Init+0xc4>)
 8000bbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc6:	237f      	movs	r3, #127	; 0x7f
 8000bc8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_ADC2_Init+0xbc>)
 8000bd8:	f001 ffe6 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000be2:	f000 febb 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20001c1c 	.word	0x20001c1c
 8000bf4:	50040100 	.word	0x50040100
 8000bf8:	08600004 	.word	0x08600004

08000bfc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c02:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <MX_DFSDM1_Init+0x6c>)
 8000c04:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c14:	2202      	movs	r2, #2
 8000c16:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c34:	2204      	movs	r2, #4
 8000c36:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_DFSDM1_Init+0x68>)
 8000c52:	f002 fd1b 	bl	800368c <HAL_DFSDM_ChannelInit>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000c5c:	f000 fe7e 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20001be0 	.word	0x20001be0
 8000c68:	40016020 	.word	0x40016020

08000c6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <MX_I2C2_Init+0x78>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <MX_I2C2_Init+0x7c>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000ca8:	f003 f82b 	bl	8003d02 <HAL_I2C_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cb2:	f000 fe53 	bl	800195c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000cba:	f003 f8b1 	bl	8003e20 <HAL_I2CEx_ConfigAnalogFilter>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cc4:	f000 fe4a 	bl	800195c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_I2C2_Init+0x74>)
 8000ccc:	f003 f8f3 	bl	8003eb6 <HAL_I2CEx_ConfigDigitalFilter>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 fe41 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20002090 	.word	0x20002090
 8000ce4:	40005800 	.word	0x40005800
 8000ce8:	10909cec 	.word	0x10909cec

08000cec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <MX_QUADSPI_Init+0x48>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000cf8:	22ff      	movs	r2, #255	; 0xff
 8000cfa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_QUADSPI_Init+0x44>)
 8000d1c:	f003 fae4 	bl	80042e8 <HAL_QSPI_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000d26:	f000 fe19 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20002314 	.word	0x20002314
 8000d34:	a0001000 	.word	0xa0001000

08000d38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_SPI3_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d86:	2207      	movs	r2, #7
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d92:	2208      	movs	r2, #8
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_SPI3_Init+0x74>)
 8000d98:	f004 fe14 	bl	80059c4 <HAL_SPI_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fddb 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20002110 	.word	0x20002110
 8000db0:	40003c00 	.word	0x40003c00

08000db4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_UART4_Init+0x58>)
 8000dba:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <MX_UART4_Init+0x5c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_UART4_Init+0x58>)
 8000dc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_UART4_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_UART4_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_UART4_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_UART4_Init+0x58>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_UART4_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_UART4_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_UART4_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_UART4_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_UART4_Init+0x58>)
 8000df8:	f005 f8ce 	bl	8005f98 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e02:	f000 fdab 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20002284 	.word	0x20002284
 8000e10:	40004c00 	.word	0x40004c00

08000e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e1a:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <MX_USART1_UART_Init+0x5c>)
 8000e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_USART1_UART_Init+0x58>)
 8000e58:	f005 f89e 	bl	8005f98 <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e62:	f000 fd7b 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200021e4 	.word	0x200021e4
 8000e70:	40013800 	.word	0x40013800

08000e74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e82:	2206      	movs	r2, #6
 8000e84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb8:	f003 f849 	bl	8003f4e <HAL_PCD_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ec2:	f000 fd4b 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20001c88 	.word	0x20001c88

08000ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	4b8f      	ldr	r3, [pc, #572]	; (8001124 <MX_GPIO_Init+0x254>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a8e      	ldr	r2, [pc, #568]	; (8001124 <MX_GPIO_Init+0x254>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b8c      	ldr	r3, [pc, #560]	; (8001124 <MX_GPIO_Init+0x254>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	4b89      	ldr	r3, [pc, #548]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a88      	ldr	r2, [pc, #544]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b86      	ldr	r3, [pc, #536]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b83      	ldr	r3, [pc, #524]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a82      	ldr	r2, [pc, #520]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b80      	ldr	r3, [pc, #512]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b7d      	ldr	r3, [pc, #500]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a7c      	ldr	r2, [pc, #496]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b7a      	ldr	r3, [pc, #488]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b77      	ldr	r3, [pc, #476]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a76      	ldr	r2, [pc, #472]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b74      	ldr	r3, [pc, #464]	; (8001124 <MX_GPIO_Init+0x254>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f64:	4870      	ldr	r0, [pc, #448]	; (8001128 <MX_GPIO_Init+0x258>)
 8000f66:	f002 fe91 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000f70:	486e      	ldr	r0, [pc, #440]	; (800112c <MX_GPIO_Init+0x25c>)
 8000f72:	f002 fe8b 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f7c:	486c      	ldr	r0, [pc, #432]	; (8001130 <MX_GPIO_Init+0x260>)
 8000f7e:	f002 fe85 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f88:	4869      	ldr	r0, [pc, #420]	; (8001130 <MX_GPIO_Init+0x260>)
 8000f8a:	f002 fe7f 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f94:	4867      	ldr	r0, [pc, #412]	; (8001134 <MX_GPIO_Init+0x264>)
 8000f96:	f002 fe79 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_RST_GPIO_Port, SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f002 fe72 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2120      	movs	r1, #32
 8000fac:	485f      	ldr	r0, [pc, #380]	; (800112c <MX_GPIO_Init+0x25c>)
 8000fae:	f002 fe6d 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	485c      	ldr	r0, [pc, #368]	; (8001128 <MX_GPIO_Init+0x258>)
 8000fb8:	f002 fe68 	bl	8003c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fbc:	f240 1315 	movw	r3, #277	; 0x115
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4854      	ldr	r0, [pc, #336]	; (8001128 <MX_GPIO_Init+0x258>)
 8000fd6:	f002 fcb1 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fda:	232a      	movs	r3, #42	; 0x2a
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	4b56      	ldr	r3, [pc, #344]	; (8001138 <MX_GPIO_Init+0x268>)
 8000fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	484e      	ldr	r0, [pc, #312]	; (8001128 <MX_GPIO_Init+0x258>)
 8000fee:	f002 fca5 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTBLUE_Pin */
  GPIO_InitStruct.Pin = BUTBLUE_Pin;
 8000ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ff8:	4b50      	ldr	r3, [pc, #320]	; (800113c <MX_GPIO_Init+0x26c>)
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTBLUE_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	484b      	ldr	r0, [pc, #300]	; (8001134 <MX_GPIO_Init+0x264>)
 8001008:	f002 fc98 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 800100c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8001010:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4841      	ldr	r0, [pc, #260]	; (800112c <MX_GPIO_Init+0x25c>)
 8001026:	f002 fc89 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800102a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103c:	2307      	movs	r3, #7
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	483a      	ldr	r0, [pc, #232]	; (8001130 <MX_GPIO_Init+0x260>)
 8001048:	f002 fc78 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
 800104c:	f648 4304 	movw	r3, #35844	; 0x8c04
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <MX_GPIO_Init+0x268>)
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4833      	ldr	r0, [pc, #204]	; (8001130 <MX_GPIO_Init+0x260>)
 8001062:	f002 fc6b 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001066:	f243 0381 	movw	r3, #12417	; 0x3081
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	482c      	ldr	r0, [pc, #176]	; (8001130 <MX_GPIO_Init+0x260>)
 8001080:	f002 fc5c 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001084:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4825      	ldr	r0, [pc, #148]	; (8001134 <MX_GPIO_Init+0x264>)
 800109e:	f002 fc4d 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80010a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_GPIO_Init+0x268>)
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	481f      	ldr	r0, [pc, #124]	; (8001134 <MX_GPIO_Init+0x264>)
 80010b8:	f002 fc40 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin;
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPBTLE_RF_RST_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f002 fc30 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010dc:	2302      	movs	r3, #2
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ec:	2305      	movs	r3, #5
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <MX_GPIO_Init+0x260>)
 80010f8:	f002 fc20 	bl	800393c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2105      	movs	r1, #5
 8001100:	2017      	movs	r0, #23
 8001102:	f002 fa99 	bl	8003638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001106:	2017      	movs	r0, #23
 8001108:	f002 fab2 	bl	8003670 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2105      	movs	r1, #5
 8001110:	2028      	movs	r0, #40	; 0x28
 8001112:	f002 fa91 	bl	8003638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f002 faaa 	bl	8003670 <HAL_NVIC_EnableIRQ>

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	48001000 	.word	0x48001000
 800112c:	48000400 	.word	0x48000400
 8001130:	48000c00 	.word	0x48000c00
 8001134:	48000800 	.word	0x48000800
 8001138:	10110000 	.word	0x10110000
 800113c:	10210000 	.word	0x10210000

08001140 <PostLedTasks>:

/* USER CODE BEGIN 4 */
void PostLedTasks()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    if (pcm.l1w)
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <PostLedTasks+0x5c>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <PostLedTasks+0x20>
    {
        pcm.l1w--;
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <PostLedTasks+0x5c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	3b01      	subs	r3, #1
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <PostLedTasks+0x5c>)
 8001154:	6093      	str	r3, [r2, #8]
        osSemaphoreRelease(led1_semHandle);
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <PostLedTasks+0x60>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f006 fc6a 	bl	8007a34 <osSemaphoreRelease>
    }

    if (pcm.l2w)
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <PostLedTasks+0x5c>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d009      	beq.n	800117c <PostLedTasks+0x3c>
    {
        pcm.l2w--;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <PostLedTasks+0x5c>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <PostLedTasks+0x5c>)
 8001170:	60d3      	str	r3, [r2, #12]
        osSemaphoreRelease(led2_semHandle);
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <PostLedTasks+0x64>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f006 fc5c 	bl	8007a34 <osSemaphoreRelease>
    }

    if (pcm.l3w)
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <PostLedTasks+0x5c>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <PostLedTasks+0x58>
    {
        pcm.l3w--;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <PostLedTasks+0x5c>)
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	3b01      	subs	r3, #1
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <PostLedTasks+0x5c>)
 800118c:	6113      	str	r3, [r2, #16]
        osSemaphoreRelease(led3_semHandle);
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <PostLedTasks+0x68>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f006 fc4e 	bl	8007a34 <osSemaphoreRelease>
    }
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200020e0 	.word	0x200020e0
 80011a0:	20001c18 	.word	0x20001c18
 80011a4:	2000230c 	.word	0x2000230c
 80011a8:	20002308 	.word	0x20002308

080011ac <PostPanelTasks>:

void PostPanelTasks()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    if (pcm.lpw)
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <PostPanelTasks+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <PostPanelTasks+0x20>
    {
        pcm.lpw--;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <PostPanelTasks+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3b01      	subs	r3, #1
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <PostPanelTasks+0x40>)
 80011c0:	6013      	str	r3, [r2, #0]
        osSemaphoreRelease(lpanel_semHandle);
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <PostPanelTasks+0x44>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 fc34 	bl	8007a34 <osSemaphoreRelease>
    }

    if (pcm.rpw)
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <PostPanelTasks+0x40>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d009      	beq.n	80011e8 <PostPanelTasks+0x3c>
    {
        pcm.rpw--;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <PostPanelTasks+0x40>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	3b01      	subs	r3, #1
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <PostPanelTasks+0x40>)
 80011dc:	6053      	str	r3, [r2, #4]
        osSemaphoreRelease(rpanel_semHandle);
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <PostPanelTasks+0x48>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 fc26 	bl	8007a34 <osSemaphoreRelease>
    }
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200020e0 	.word	0x200020e0
 80011f0:	20002280 	.word	0x20002280
 80011f4:	20002174 	.word	0x20002174

080011f8 <ReadLPStart>:

void ReadLPStart()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <ReadLPStart+0x4c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	4618      	mov	r0, r3
 8001206:	f006 fb0f 	bl	8007828 <osMutexWait>
	if (pcm.lpanel_done)
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <ReadLPStart+0x50>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <ReadLPStart+0x26>
		pcm.lpw++;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <ReadLPStart+0x50>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <ReadLPStart+0x50>)
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	e004      	b.n	8001228 <ReadLPStart+0x30>
	else
		osSemaphoreRelease(lpanel_semHandle);
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <ReadLPStart+0x54>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fc06 	bl	8007a34 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <ReadLPStart+0x4c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f006 fb49 	bl	80078c4 <osMutexRelease>
	osSemaphoreWait(lpanel_semHandle, osWaitForever);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <ReadLPStart+0x54>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f04f 31ff 	mov.w	r1, #4294967295
 800123a:	4618      	mov	r0, r3
 800123c:	f006 fbac 	bl	8007998 <osSemaphoreWait>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20002310 	.word	0x20002310
 8001248:	200020e0 	.word	0x200020e0
 800124c:	20002280 	.word	0x20002280

08001250 <ReadLPEnd>:

void ReadLPEnd()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <ReadLPEnd+0x58>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	4618      	mov	r0, r3
 800125e:	f006 fae3 	bl	8007828 <osMutexWait>
	pcm.lpanel_done = 1;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <ReadLPEnd+0x5c>)
 8001264:	2201      	movs	r2, #1
 8001266:	615a      	str	r2, [r3, #20]
	if (pcm.lpanel_done && pcm.rpanel_done)
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <ReadLPEnd+0x5c>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d014      	beq.n	800129a <ReadLPEnd+0x4a>
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <ReadLPEnd+0x5c>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d010      	beq.n	800129a <ReadLPEnd+0x4a>
	{
		pcm.button_can_do = 1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <ReadLPEnd+0x5c>)
 800127a:	2201      	movs	r2, #1
 800127c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (pcm.button_wait)
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <ReadLPEnd+0x5c>)
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <ReadLPEnd+0x4a>
		{
			pcm.button_wait--;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <ReadLPEnd+0x5c>)
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	3b01      	subs	r3, #1
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <ReadLPEnd+0x5c>)
 800128e:	6293      	str	r3, [r2, #40]	; 0x28
			osSemaphoreRelease(button_semHandle);
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <ReadLPEnd+0x60>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f006 fbcd 	bl	8007a34 <osSemaphoreRelease>
		}
	 }
	osMutexRelease(MutexPDHandle);
 800129a:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <ReadLPEnd+0x58>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f006 fb10 	bl	80078c4 <osMutexRelease>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20002310 	.word	0x20002310
 80012ac:	200020e0 	.word	0x200020e0
 80012b0:	200020dc 	.word	0x200020dc

080012b4 <ReadRPStart>:

void ReadRPStart()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <ReadRPStart+0x4c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 fab1 	bl	8007828 <osMutexWait>
	if (pcm.rpanel_done)
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <ReadRPStart+0x50>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <ReadRPStart+0x26>
		pcm.rpw++;
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <ReadRPStart+0x50>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <ReadRPStart+0x50>)
 80012d6:	6053      	str	r3, [r2, #4]
 80012d8:	e004      	b.n	80012e4 <ReadRPStart+0x30>
	else
		osSemaphoreRelease(rpanel_semHandle);
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <ReadRPStart+0x54>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f006 fba8 	bl	8007a34 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <ReadRPStart+0x4c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f006 faeb 	bl	80078c4 <osMutexRelease>
	osSemaphoreWait(rpanel_semHandle, osWaitForever);
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <ReadRPStart+0x54>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f04f 31ff 	mov.w	r1, #4294967295
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 fb4e 	bl	8007998 <osSemaphoreWait>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20002310 	.word	0x20002310
 8001304:	200020e0 	.word	0x200020e0
 8001308:	20002174 	.word	0x20002174

0800130c <ReadRPEnd>:

void ReadRPEnd()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <ReadRPEnd+0x58>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fa85 	bl	8007828 <osMutexWait>
	pcm.rpanel_done = 1;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <ReadRPEnd+0x5c>)
 8001320:	2201      	movs	r2, #1
 8001322:	619a      	str	r2, [r3, #24]
	if (pcm.lpanel_done && pcm.rpanel_done)
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <ReadRPEnd+0x5c>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d014      	beq.n	8001356 <ReadRPEnd+0x4a>
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <ReadRPEnd+0x5c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d010      	beq.n	8001356 <ReadRPEnd+0x4a>
	{
		pcm.button_can_do = 1;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <ReadRPEnd+0x5c>)
 8001336:	2201      	movs	r2, #1
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
		if (pcm.button_wait)
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <ReadRPEnd+0x5c>)
 800133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <ReadRPEnd+0x4a>
		{
			pcm.button_wait--;
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <ReadRPEnd+0x5c>)
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	3b01      	subs	r3, #1
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <ReadRPEnd+0x5c>)
 800134a:	6293      	str	r3, [r2, #40]	; 0x28
			osSemaphoreRelease(button_semHandle);
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <ReadRPEnd+0x60>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f006 fb6f 	bl	8007a34 <osSemaphoreRelease>
		}
	}
	osMutexRelease(MutexPDHandle);
 8001356:	4b03      	ldr	r3, [pc, #12]	; (8001364 <ReadRPEnd+0x58>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f006 fab2 	bl	80078c4 <osMutexRelease>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20002310 	.word	0x20002310
 8001368:	200020e0 	.word	0x200020e0
 800136c:	200020dc 	.word	0x200020dc

08001370 <WriteL1Start>:

void WriteL1Start()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <WriteL1Start+0x4c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	4618      	mov	r0, r3
 800137e:	f006 fa53 	bl	8007828 <osMutexWait>
	if (pcm.led1_done)
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <WriteL1Start+0x50>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <WriteL1Start+0x26>
		pcm.l1w++;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <WriteL1Start+0x50>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	3301      	adds	r3, #1
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <WriteL1Start+0x50>)
 8001392:	6093      	str	r3, [r2, #8]
 8001394:	e004      	b.n	80013a0 <WriteL1Start+0x30>
	else
		osSemaphoreRelease(led1_semHandle);
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <WriteL1Start+0x54>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f006 fb4a 	bl	8007a34 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <WriteL1Start+0x4c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 fa8d 	bl	80078c4 <osMutexRelease>
	osSemaphoreWait(led1_semHandle, osWaitForever);
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <WriteL1Start+0x54>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f04f 31ff 	mov.w	r1, #4294967295
 80013b2:	4618      	mov	r0, r3
 80013b4:	f006 faf0 	bl	8007998 <osSemaphoreWait>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20002310 	.word	0x20002310
 80013c0:	200020e0 	.word	0x200020e0
 80013c4:	20001c18 	.word	0x20001c18

080013c8 <WriteL2Start>:

void WriteL2Start()
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <WriteL2Start+0x4c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 fa27 	bl	8007828 <osMutexWait>
	if (pcm.led2_done)
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <WriteL2Start+0x50>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <WriteL2Start+0x26>
		pcm.l2w++;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <WriteL2Start+0x50>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <WriteL2Start+0x50>)
 80013ea:	60d3      	str	r3, [r2, #12]
 80013ec:	e004      	b.n	80013f8 <WriteL2Start+0x30>
	else
		osSemaphoreRelease(led2_semHandle);
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <WriteL2Start+0x54>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 fb1e 	bl	8007a34 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <WriteL2Start+0x4c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f006 fa61 	bl	80078c4 <osMutexRelease>
	osSemaphoreWait(led2_semHandle, osWaitForever);
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <WriteL2Start+0x54>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f04f 31ff 	mov.w	r1, #4294967295
 800140a:	4618      	mov	r0, r3
 800140c:	f006 fac4 	bl	8007998 <osSemaphoreWait>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20002310 	.word	0x20002310
 8001418:	200020e0 	.word	0x200020e0
 800141c:	2000230c 	.word	0x2000230c

08001420 <WriteL3Start>:

void WriteL3Start()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <WriteL3Start+0x4c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	4618      	mov	r0, r3
 800142e:	f006 f9fb 	bl	8007828 <osMutexWait>
	if (pcm.led3_done)
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <WriteL3Start+0x50>)
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <WriteL3Start+0x26>
		pcm.l3w++;
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <WriteL3Start+0x50>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	3301      	adds	r3, #1
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <WriteL3Start+0x50>)
 8001442:	6113      	str	r3, [r2, #16]
 8001444:	e004      	b.n	8001450 <WriteL3Start+0x30>
	else
		osSemaphoreRelease(led3_semHandle);
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <WriteL3Start+0x54>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f006 faf2 	bl	8007a34 <osSemaphoreRelease>
	osMutexRelease(MutexPDHandle);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <WriteL3Start+0x4c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f006 fa35 	bl	80078c4 <osMutexRelease>
	osSemaphoreWait(led3_semHandle, osWaitForever);
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <WriteL3Start+0x54>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f04f 31ff 	mov.w	r1, #4294967295
 8001462:	4618      	mov	r0, r3
 8001464:	f006 fa98 	bl	8007998 <osSemaphoreWait>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20002310 	.word	0x20002310
 8001470:	200020e0 	.word	0x200020e0
 8001474:	20002308 	.word	0x20002308

08001478 <WriteL1End>:

void WriteL1End()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <WriteL1End+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	4618      	mov	r0, r3
 8001486:	f006 f9cf 	bl	8007828 <osMutexWait>
	pcm.led1_done = 1;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <WriteL1End+0x54>)
 800148c:	2201      	movs	r2, #1
 800148e:	61da      	str	r2, [r3, #28]
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <WriteL1End+0x54>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d010      	beq.n	80014ba <WriteL1End+0x42>
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <WriteL1End+0x54>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <WriteL1End+0x42>
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <WriteL1End+0x54>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <WriteL1End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <WriteL1End+0x54>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <WriteL1End+0x54>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	4a06      	ldr	r2, [pc, #24]	; (80014cc <WriteL1End+0x54>)
 80014b4:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 80014b6:	f7ff fe79 	bl	80011ac <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <WriteL1End+0x50>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 fa00 	bl	80078c4 <osMutexRelease>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20002310 	.word	0x20002310
 80014cc:	200020e0 	.word	0x200020e0

080014d0 <WriteL2End>:

void WriteL2End()
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <WriteL2End+0x50>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	4618      	mov	r0, r3
 80014de:	f006 f9a3 	bl	8007828 <osMutexWait>
	pcm.led2_done = 1;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <WriteL2End+0x54>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	621a      	str	r2, [r3, #32]
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <WriteL2End+0x54>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d010      	beq.n	8001512 <WriteL2End+0x42>
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <WriteL2End+0x54>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00c      	beq.n	8001512 <WriteL2End+0x42>
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <WriteL2End+0x54>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <WriteL2End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <WriteL2End+0x54>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <WriteL2End+0x54>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <WriteL2End+0x54>)
 800150c:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 800150e:	f7ff fe4d 	bl	80011ac <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 8001512:	4b03      	ldr	r3, [pc, #12]	; (8001520 <WriteL2End+0x50>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f006 f9d4 	bl	80078c4 <osMutexRelease>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20002310 	.word	0x20002310
 8001524:	200020e0 	.word	0x200020e0

08001528 <WriteL3End>:

void WriteL3End()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <WriteL3End+0x50>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	4618      	mov	r0, r3
 8001536:	f006 f977 	bl	8007828 <osMutexWait>
	pcm.led3_done = 1;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <WriteL3End+0x54>)
 800153c:	2201      	movs	r2, #1
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
	if (pcm.led1_done && pcm.led2_done && pcm.led3_done)
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <WriteL3End+0x54>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d010      	beq.n	800156a <WriteL3End+0x42>
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <WriteL3End+0x54>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00c      	beq.n	800156a <WriteL3End+0x42>
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <WriteL3End+0x54>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	2b00      	cmp	r3, #0
 8001556:	d008      	beq.n	800156a <WriteL3End+0x42>
	{
		pcm.lpanel_done = pcm.rpanel_done = 0; //sblocco i pannelli
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <WriteL3End+0x54>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <WriteL3End+0x54>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <WriteL3End+0x54>)
 8001564:	6153      	str	r3, [r2, #20]
		PostPanelTasks();
 8001566:	f7ff fe21 	bl	80011ac <PostPanelTasks>
	}
	osMutexRelease(MutexPDHandle);
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <WriteL3End+0x50>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f006 f9a8 	bl	80078c4 <osMutexRelease>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20002310 	.word	0x20002310
 800157c:	200020e0 	.word	0x200020e0

08001580 <StartReadButton>:

void StartReadButton()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <StartReadButton+0x4c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	4618      	mov	r0, r3
 800158e:	f006 f94b 	bl	8007828 <osMutexWait>
	if (pcm.button_can_do)
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <StartReadButton+0x50>)
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <StartReadButton+0x26>
		osSemaphoreRelease(button_semHandle);
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <StartReadButton+0x54>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 fa48 	bl	8007a34 <osSemaphoreRelease>
 80015a4:	e004      	b.n	80015b0 <StartReadButton+0x30>
	else
		pcm.button_wait++;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <StartReadButton+0x50>)
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <StartReadButton+0x50>)
 80015ae:	6293      	str	r3, [r2, #40]	; 0x28
	osMutexRelease(MutexPDHandle);
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <StartReadButton+0x4c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 f985 	bl	80078c4 <osMutexRelease>
	osSemaphoreWait(button_semHandle, osWaitForever);
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <StartReadButton+0x54>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f04f 31ff 	mov.w	r1, #4294967295
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 f9e8 	bl	8007998 <osSemaphoreWait>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20002310 	.word	0x20002310
 80015d0:	200020e0 	.word	0x200020e0
 80015d4:	200020dc 	.word	0x200020dc

080015d8 <EndReadButton>:

void EndReadButton()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	osMutexWait(MutexPDHandle, osWaitForever);
 80015dc:	4b10      	ldr	r3, [pc, #64]	; (8001620 <EndReadButton+0x48>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	4618      	mov	r0, r3
 80015e6:	f006 f91f 	bl	8007828 <osMutexWait>
	pcm.button_can_do = 0; //non può andare
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <EndReadButton+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
	pcm.button_wait = 0; //non è più in attesa
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <EndReadButton+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
	pcm.led1_done = pcm.led2_done = pcm.led3_done = 0; //indico che devono eseguire i led
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <EndReadButton+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <EndReadButton+0x4c>)
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	4a08      	ldr	r2, [pc, #32]	; (8001624 <EndReadButton+0x4c>)
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <EndReadButton+0x4c>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <EndReadButton+0x4c>)
 800160a:	61d3      	str	r3, [r2, #28]
	PostLedTasks();
 800160c:	f7ff fd98 	bl	8001140 <PostLedTasks>
	osMutexRelease(MutexPDHandle);
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <EndReadButton+0x48>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f006 f955 	bl	80078c4 <osMutexRelease>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20002310 	.word	0x20002310
 8001624:	200020e0 	.word	0x200020e0

08001628 <StartReadLeftPanel>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadLeftPanel */
void StartReadLeftPanel(void const * argument)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	for(;;)
	{
		ReadLPStart();
 8001630:	f7ff fde2 	bl	80011f8 <ReadLPStart>

		 // Get left panel value
		HAL_ADC_Start(&hadc2);
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <StartReadLeftPanel+0x44>)
 8001636:	f001 f91f 	bl	8002878 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800163a:	f04f 31ff 	mov.w	r1, #4294967295
 800163e:	480b      	ldr	r0, [pc, #44]	; (800166c <StartReadLeftPanel+0x44>)
 8001640:	f001 f9d4 	bl	80029ec <HAL_ADC_PollForConversion>
		pd.leftPanelValue = HAL_ADC_GetValue(&hadc2)*100/2400;
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <StartReadLeftPanel+0x44>)
 8001646:	f001 faa1 	bl	8002b8c <HAL_ADC_GetValue>
 800164a:	4602      	mov	r2, r0
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	fb03 f302 	mul.w	r3, r3, r2
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <StartReadLeftPanel+0x48>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	461a      	mov	r2, r3
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <StartReadLeftPanel+0x4c>)
 800165e:	605a      	str	r2, [r3, #4]

		ReadLPEnd();
 8001660:	f7ff fdf6 	bl	8001250 <ReadLPEnd>

		// Delay time (msec)
		osDelay(100);
 8001664:	2064      	movs	r0, #100	; 0x64
 8001666:	f006 f8b2 	bl	80077ce <osDelay>
		ReadLPStart();
 800166a:	e7e1      	b.n	8001630 <StartReadLeftPanel+0x8>
 800166c:	20001c1c 	.word	0x20001c1c
 8001670:	1b4e81b5 	.word	0x1b4e81b5
 8001674:	20002264 	.word	0x20002264

08001678 <StartReadRightPanel>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadRightPanel */
void StartReadRightPanel(void const * argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadRightPanel */
  /* Infinite loop */
  for(;;)
  {
	ReadRPStart();
 8001680:	f7ff fe18 	bl	80012b4 <ReadRPStart>
	 // Get right panel value
	HAL_ADC_Start(&hadc1);
 8001684:	480d      	ldr	r0, [pc, #52]	; (80016bc <StartReadRightPanel+0x44>)
 8001686:	f001 f8f7 	bl	8002878 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800168a:	f04f 31ff 	mov.w	r1, #4294967295
 800168e:	480b      	ldr	r0, [pc, #44]	; (80016bc <StartReadRightPanel+0x44>)
 8001690:	f001 f9ac 	bl	80029ec <HAL_ADC_PollForConversion>
	pd.rightPanelValue = HAL_ADC_GetValue(&hadc1)*100/2400;
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <StartReadRightPanel+0x44>)
 8001696:	f001 fa79 	bl	8002b8c <HAL_ADC_GetValue>
 800169a:	4602      	mov	r2, r0
 800169c:	2364      	movs	r3, #100	; 0x64
 800169e:	fb03 f302 	mul.w	r3, r3, r2
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <StartReadRightPanel+0x48>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <StartReadRightPanel+0x4c>)
 80016ae:	601a      	str	r2, [r3, #0]

	ReadRPEnd();
 80016b0:	f7ff fe2c 	bl	800130c <ReadRPEnd>

    osDelay(100);
 80016b4:	2064      	movs	r0, #100	; 0x64
 80016b6:	f006 f88a 	bl	80077ce <osDelay>
	ReadRPStart();
 80016ba:	e7e1      	b.n	8001680 <StartReadRightPanel+0x8>
 80016bc:	20002178 	.word	0x20002178
 80016c0:	1b4e81b5 	.word	0x1b4e81b5
 80016c4:	20002264 	.word	0x20002264

080016c8 <StartSerialDebug>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSerialDebug */
void StartSerialDebug(void const * argument)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b093      	sub	sp, #76	; 0x4c
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	6078      	str	r0, [r7, #4]
	
	/** Update panel data structure values **/
	// Lock data reads semaphore
  	
	#ifdef SERIAL
	osMutexWait(MutexPDHandle, osWaitForever);
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <StartSerialDebug+0xc0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	4618      	mov	r0, r3
 80016da:	f006 f8a5 	bl	8007828 <osMutexWait>
	
  	// Get data
	sprintf(msg, "Light Panel Right = %hu\r\nLight Panel Left = %hu\r\nThr = %hu\r\nVar = %hu\r\n", pd.rightPanelValue, pd.leftPanelValue, pd.threshold, pd.variation);
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <StartSerialDebug+0xc4>)
 80016e0:	6819      	ldr	r1, [r3, #0]
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <StartSerialDebug+0xc4>)
 80016e4:	685c      	ldr	r4, [r3, #4]
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <StartSerialDebug+0xc4>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4a28      	ldr	r2, [pc, #160]	; (800178c <StartSerialDebug+0xc4>)
 80016ec:	68d2      	ldr	r2, [r2, #12]
 80016ee:	f107 000c 	add.w	r0, r7, #12
 80016f2:	9201      	str	r2, [sp, #4]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4623      	mov	r3, r4
 80016f8:	460a      	mov	r2, r1
 80016fa:	4925      	ldr	r1, [pc, #148]	; (8001790 <StartSerialDebug+0xc8>)
 80016fc:	f008 fc84 	bl	800a008 <siprintf>

	// Unlock data reads semaphore
	osMutexRelease(MutexPDHandle);
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <StartSerialDebug+0xc0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f006 f8dd 	bl	80078c4 <osMutexRelease>

	// Print data
	HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fd5e 	bl	80001d0 <strlen>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	f107 010c 	add.w	r1, r7, #12
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <StartSerialDebug+0xcc>)
 8001722:	f004 fc87 	bl	8006034 <HAL_UART_Transmit>
	#endif
	
	#ifdef BLUETOOTH
    /** Update panel data structure values **/
	osMutexWait(MutexPDHandle, osWaitForever);
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <StartSerialDebug+0xc0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4618      	mov	r0, r3
 8001730:	f006 f87a 	bl	8007828 <osMutexWait>
	
    // Get data
    sprintf(msg, "Light Panel Right = %hu\r\nLight Panel Left = %hu\r\nThr = %hu\r\nVar = %hu\r\n", pd.rightPanelValue, pd.leftPanelValue, pd.threshold, pd.variation);
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <StartSerialDebug+0xc4>)
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <StartSerialDebug+0xc4>)
 800173a:	685c      	ldr	r4, [r3, #4]
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <StartSerialDebug+0xc4>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <StartSerialDebug+0xc4>)
 8001742:	68d2      	ldr	r2, [r2, #12]
 8001744:	f107 000c 	add.w	r0, r7, #12
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4623      	mov	r3, r4
 800174e:	460a      	mov	r2, r1
 8001750:	490f      	ldr	r1, [pc, #60]	; (8001790 <StartSerialDebug+0xc8>)
 8001752:	f008 fc59 	bl	800a008 <siprintf>

	// Unlock data reads semaphore
    osMutexRelease(MutexPDHandle);
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <StartSerialDebug+0xc0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f006 f8b2 	bl	80078c4 <osMutexRelease>
    
    // Print data
    HAL_UART_Transmit(&huart4, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fd33 	bl	80001d0 <strlen>
 800176a:	4603      	mov	r3, r0
 800176c:	b29a      	uxth	r2, r3
 800176e:	f107 010c 	add.w	r1, r7, #12
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	4808      	ldr	r0, [pc, #32]	; (8001798 <StartSerialDebug+0xd0>)
 8001778:	f004 fc5c 	bl	8006034 <HAL_UART_Transmit>
	#endif


	// Delay time (msec)
	osDelay(3000);
 800177c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001780:	f006 f825 	bl	80077ce <osDelay>
  {
 8001784:	e7a4      	b.n	80016d0 <StartSerialDebug+0x8>
 8001786:	bf00      	nop
 8001788:	20002310 	.word	0x20002310
 800178c:	20002264 	.word	0x20002264
 8001790:	0800a93c 	.word	0x0800a93c
 8001794:	200021e4 	.word	0x200021e4
 8001798:	20002284 	.word	0x20002284

0800179c <StartSyncButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSyncButton */
void StartSyncButton(void const * argument)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSynkButton */
  /* Infinite loop */
  for(;;)
  {
	  StartReadButton();
 80017a4:	f7ff feec 	bl	8001580 <StartReadButton>
	  if (blue_button_pressed) {
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <StartSyncButton+0x4c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d015      	beq.n	80017dc <StartSyncButton+0x40>
		  // Reset button pressed variable
		  blue_button_pressed = 0;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <StartSyncButton+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
		  // Set threshold
		  pd.threshold = pd.leftPanelValue<pd.rightPanelValue?pd.leftPanelValue:pd.rightPanelValue;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <StartSyncButton+0x50>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <StartSyncButton+0x50>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4293      	cmp	r3, r2
 80017c0:	bfa8      	it	ge
 80017c2:	4613      	movge	r3, r2
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <StartSyncButton+0x50>)
 80017c6:	6093      	str	r3, [r2, #8]
		  // Set variation
		  pd.variation = abs(pd.leftPanelValue - pd.rightPanelValue);
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <StartSyncButton+0x50>)
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4b07      	ldr	r3, [pc, #28]	; (80017ec <StartSyncButton+0x50>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bfb8      	it	lt
 80017d6:	425b      	neglt	r3, r3
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <StartSyncButton+0x50>)
 80017da:	60d3      	str	r3, [r2, #12]
	  }
	  EndReadButton();
 80017dc:	f7ff fefc 	bl	80015d8 <EndReadButton>
	  // Delay time (msec)
	  osDelay(100);
 80017e0:	2064      	movs	r0, #100	; 0x64
 80017e2:	f005 fff4 	bl	80077ce <osDelay>
	  StartReadButton();
 80017e6:	e7dd      	b.n	80017a4 <StartSyncButton+0x8>
 80017e8:	200002ec 	.word	0x200002ec
 80017ec:	20002264 	.word	0x20002264

080017f0 <StartLedTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask1 */
void StartLedTask1(void const * argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask1 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL1Start();
 80017f8:	f7ff fdba 	bl	8001370 <WriteL1Start>
	  int lpv = pd.leftPanelValue;
 80017fc:	4b14      	ldr	r3, [pc, #80]	; (8001850 <StartLedTask1+0x60>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <StartLedTask1+0x60>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <StartLedTask1+0x60>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <StartLedTask1+0x60>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	60bb      	str	r3, [r7, #8]
	  if ((abs(rpv-lpv)<var) && (rpv>th && lpv>th))
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	bfb8      	it	lt
 800181e:	425b      	neglt	r3, r3
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	429a      	cmp	r2, r3
 8001824:	dd0d      	ble.n	8001842 <StartLedTask1+0x52>
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	429a      	cmp	r2, r3
 800182c:	dd09      	ble.n	8001842 <StartLedTask1+0x52>
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	429a      	cmp	r2, r3
 8001834:	dd05      	ble.n	8001842 <StartLedTask1+0x52>
	  {
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <StartLedTask1+0x64>)
 800183e:	f002 fa25 	bl	8003c8c <HAL_GPIO_WritePin>
	  }
	  WriteL1End();
 8001842:	f7ff fe19 	bl	8001478 <WriteL1End>
	  osDelay(100);
 8001846:	2064      	movs	r0, #100	; 0x64
 8001848:	f005 ffc1 	bl	80077ce <osDelay>
  {
 800184c:	e7d4      	b.n	80017f8 <StartLedTask1+0x8>
 800184e:	bf00      	nop
 8001850:	20002264 	.word	0x20002264
 8001854:	48000400 	.word	0x48000400

08001858 <StartLedTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask2 */
void StartLedTask2(void const * argument)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask2 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL2Start();
 8001860:	f7ff fdb2 	bl	80013c8 <WriteL2Start>
	  int lpv = pd.leftPanelValue;
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <StartLedTask2+0x64>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <StartLedTask2+0x64>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <StartLedTask2+0x64>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <StartLedTask2+0x64>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)>var && (rpv>=lpv))
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	bfb8      	it	lt
 8001886:	425b      	neglt	r3, r3
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	429a      	cmp	r2, r3
 800188c:	da0f      	bge.n	80018ae <StartLedTask2+0x56>
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	429a      	cmp	r2, r3
 8001894:	db0b      	blt.n	80018ae <StartLedTask2+0x56>
	  {
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <StartLedTask2+0x68>)
 800189e:	f002 f9f5 	bl	8003c8c <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a8:	4806      	ldr	r0, [pc, #24]	; (80018c4 <StartLedTask2+0x6c>)
 80018aa:	f002 f9ef 	bl	8003c8c <HAL_GPIO_WritePin>
	  }
	  WriteL2End();
 80018ae:	f7ff fe0f 	bl	80014d0 <WriteL2End>
	  osDelay(100);
 80018b2:	2064      	movs	r0, #100	; 0x64
 80018b4:	f005 ff8b 	bl	80077ce <osDelay>
  {
 80018b8:	e7d2      	b.n	8001860 <StartLedTask2+0x8>
 80018ba:	bf00      	nop
 80018bc:	20002264 	.word	0x20002264
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800

080018c8 <StartLedTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask3 */
void StartLedTask3(void const * argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask3 */
  /* Infinite loop */
  for(;;)
  {
	  WriteL3Start();
 80018d0:	f7ff fda6 	bl	8001420 <WriteL3Start>
	  int lpv = pd.leftPanelValue;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <StartLedTask3+0x64>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	617b      	str	r3, [r7, #20]
	  int rpv = pd.rightPanelValue;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <StartLedTask3+0x64>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	613b      	str	r3, [r7, #16]
	  int var = pd.variation;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <StartLedTask3+0x64>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60fb      	str	r3, [r7, #12]
	  int th = pd.threshold;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <StartLedTask3+0x64>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	60bb      	str	r3, [r7, #8]
	  if (abs(rpv-lpv)>var && rpv<lpv)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bfb8      	it	lt
 80018f6:	425b      	neglt	r3, r3
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	da0f      	bge.n	800191e <StartLedTask3+0x56>
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	429a      	cmp	r2, r3
 8001904:	da0b      	bge.n	800191e <StartLedTask3+0x56>
	  {
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <StartLedTask3+0x68>)
 800190e:	f002 f9bd 	bl	8003c8c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001918:	4806      	ldr	r0, [pc, #24]	; (8001934 <StartLedTask3+0x6c>)
 800191a:	f002 f9b7 	bl	8003c8c <HAL_GPIO_WritePin>
	  }
	  WriteL3End();
 800191e:	f7ff fe03 	bl	8001528 <WriteL3End>
	  osDelay(100);
 8001922:	2064      	movs	r0, #100	; 0x64
 8001924:	f005 ff53 	bl	80077ce <osDelay>
  {
 8001928:	e7d2      	b.n	80018d0 <StartLedTask3+0x8>
 800192a:	bf00      	nop
 800192c:	20002264 	.word	0x20002264
 8001930:	48000400 	.word	0x48000400
 8001934:	48000800 	.word	0x48000800

08001938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800194a:	f000 fc2b 	bl	80021a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40012c00 	.word	0x40012c00

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <HAL_MspInit+0x4c>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_MspInit+0x4c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6613      	str	r3, [r2, #96]	; 0x60
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_MspInit+0x4c>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_MspInit+0x4c>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_MspInit+0x4c>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	6593      	str	r3, [r2, #88]	; 0x58
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_MspInit+0x4c>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	210f      	movs	r1, #15
 80019a6:	f06f 0001 	mvn.w	r0, #1
 80019aa:	f001 fe45 	bl	8003638 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	; 0x30
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a33      	ldr	r2, [pc, #204]	; (8001aa8 <HAL_ADC_MspInit+0xec>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d12d      	bne.n	8001a3a <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_ADC_MspInit+0xf0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a31      	ldr	r2, [pc, #196]	; (8001aac <HAL_ADC_MspInit+0xf0>)
 80019e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80019e8:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_ADC_MspInit+0xf0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d10b      	bne.n	8001a08 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	4a2e      	ldr	r2, [pc, #184]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 80019f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8001a20:	2303      	movs	r3, #3
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a24:	230b      	movs	r3, #11
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4820      	ldr	r0, [pc, #128]	; (8001ab4 <HAL_ADC_MspInit+0xf8>)
 8001a34:	f001 ff82 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a38:	e031      	b.n	8001a9e <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_ADC_MspInit+0xfc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d12c      	bne.n	8001a9e <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_ADC_MspInit+0xf0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <HAL_ADC_MspInit+0xf0>)
 8001a4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <HAL_ADC_MspInit+0xf0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10b      	bne.n	8001a6e <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_ADC_MspInit+0xf4>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a8a:	230b      	movs	r3, #11
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a92:	f107 031c 	add.w	r3, r7, #28
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <HAL_ADC_MspInit+0xf8>)
 8001a9a:	f001 ff4f 	bl	800393c <HAL_GPIO_Init>
}
 8001a9e:	bf00      	nop
 8001aa0:	3730      	adds	r7, #48	; 0x30
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	50040000 	.word	0x50040000
 8001aac:	200002e4 	.word	0x200002e4
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	48000800 	.word	0x48000800
 8001ab8:	50040100 	.word	0x50040100

08001abc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d128      	bne.n	8001b2e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae0:	4a16      	ldr	r2, [pc, #88]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0x80>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b0c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b1e:	2306      	movs	r3, #6
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001b2a:	f001 ff07 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002e8 	.word	0x200002e8
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48001000 	.word	0x48001000

08001b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_I2C_MspInit+0x7c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d128      	bne.n	8001bb8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_I2C_MspInit+0x80>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	4a16      	ldr	r2, [pc, #88]	; (8001bc4 <HAL_I2C_MspInit+0x80>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_I2C_MspInit+0x80>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001b7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b84:	2312      	movs	r3, #18
 8001b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b90:	2304      	movs	r3, #4
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <HAL_I2C_MspInit+0x84>)
 8001b9c:	f001 fece 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_I2C_MspInit+0x80>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_I2C_MspInit+0x80>)
 8001ba6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_I2C_MspInit+0x80>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3728      	adds	r7, #40	; 0x28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40005800 	.word	0x40005800
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	48000400 	.word	0x48000400

08001bcc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_QSPI_MspInit+0x7c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d128      	bne.n	8001c40 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_QSPI_MspInit+0x80>)
 8001bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bf2:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <HAL_QSPI_MspInit+0x80>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	6513      	str	r3, [r2, #80]	; 0x50
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_QSPI_MspInit+0x80>)
 8001bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_QSPI_MspInit+0x80>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <HAL_QSPI_MspInit+0x80>)
 8001c0c:	f043 0310 	orr.w	r3, r3, #16
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_QSPI_MspInit+0x80>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001c1e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001c22:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c30:	230a      	movs	r3, #10
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <HAL_QSPI_MspInit+0x84>)
 8001c3c:	f001 fe7e 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	a0001000 	.word	0xa0001000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48001000 	.word	0x48001000

08001c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_SPI_MspInit+0x7c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d128      	bne.n	8001cc8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_SPI_MspInit+0x80>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_SPI_MspInit+0x80>)
 8001c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c80:	6593      	str	r3, [r2, #88]	; 0x58
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_SPI_MspInit+0x80>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_SPI_MspInit+0x80>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_SPI_MspInit+0x80>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_SPI_MspInit+0x80>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001ca6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cb8:	2306      	movs	r3, #6
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_SPI_MspInit+0x84>)
 8001cc4:	f001 fe3a 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40003c00 	.word	0x40003c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48000800 	.word	0x48000800

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08c      	sub	sp, #48	; 0x30
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a32      	ldr	r2, [pc, #200]	; (8001dc4 <HAL_UART_MspInit+0xe8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d131      	bne.n	8001d62 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001cfe:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4c:	f001 fdf6 	bl	800393c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2105      	movs	r1, #5
 8001d54:	2034      	movs	r0, #52	; 0x34
 8001d56:	f001 fc6f 	bl	8003638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d5a:	2034      	movs	r0, #52	; 0x34
 8001d5c:	f001 fc88 	bl	8003670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d60:	e02c      	b.n	8001dbc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_UART_MspInit+0xf0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d127      	bne.n	8001dbc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d76:	6613      	str	r3, [r2, #96]	; 0x60
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_UART_MspInit+0xec>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d9c:	23c0      	movs	r3, #192	; 0xc0
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dac:	2307      	movs	r3, #7
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <HAL_UART_MspInit+0xf4>)
 8001db8:	f001 fdc0 	bl	800393c <HAL_GPIO_Init>
}
 8001dbc:	bf00      	nop
 8001dbe:	3730      	adds	r7, #48	; 0x30
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40004c00 	.word	0x40004c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	48000400 	.word	0x48000400

08001dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001df4:	d154      	bne.n	8001ea0 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4619      	mov	r1, r3
 8001e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e26:	f001 fd89 	bl	800393c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e2a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4a:	f001 fd77 	bl	800393c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d114      	bne.n	8001e9c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001e8a:	f002 fa1d 	bl	80042c8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_PCD_MspInit+0xd4>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e9a:	e001      	b.n	8001ea0 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001e9c:	f002 fa14 	bl	80042c8 <HAL_PWREx_EnableVddUSB>
}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000

08001eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	2019      	movs	r0, #25
 8001ec2:	f001 fbb9 	bl	8003638 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ec6:	2019      	movs	r0, #25
 8001ec8:	f001 fbd2 	bl	8003670 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_InitTick+0x9c>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_InitTick+0x9c>)
 8001ed2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_InitTick+0x9c>)
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ee4:	f107 0210 	add.w	r2, r7, #16
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 f816 	bl	8004f20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ef4:	f002 fffe 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 8001ef8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <HAL_InitTick+0xa0>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9b      	lsrs	r3, r3, #18
 8001f04:	3b01      	subs	r3, #1
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_InitTick+0xa4>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <HAL_InitTick+0xa8>)
 8001f0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_InitTick+0xa4>)
 8001f10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f16:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <HAL_InitTick+0xa4>)
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_InitTick+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_InitTick+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f28:	4809      	ldr	r0, [pc, #36]	; (8001f50 <HAL_InitTick+0xa4>)
 8001f2a:	f003 fdd5 	bl	8005ad8 <HAL_TIM_Base_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d104      	bne.n	8001f3e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f34:	4806      	ldr	r0, [pc, #24]	; (8001f50 <HAL_InitTick+0xa4>)
 8001f36:	f003 fe05 	bl	8005b44 <HAL_TIM_Base_Start_IT>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3730      	adds	r7, #48	; 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	20002358 	.word	0x20002358
 8001f54:	40012c00 	.word	0x40012c00

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f90:	2020      	movs	r0, #32
 8001f92:	f001 fe93 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f96:	2080      	movs	r0, #128	; 0x80
 8001f98:	f001 fe90 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fa0:	f001 fe8c 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001fae:	f003 fdf3 	bl	8005b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20002358 	.word	0x20002358

08001fbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <EXTI15_10_IRQHandler+0x3c>)
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <EXTI15_10_IRQHandler+0x16>
	  blue_button_pressed = 1; // toggle blue button pressed
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <EXTI15_10_IRQHandler+0x40>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001fd2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fd6:	f001 fe71 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001fda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fde:	f001 fe6d 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001fe2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fe6:	f001 fe69 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001fea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fee:	f001 fe65 	bl	8003cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40010400 	.word	0x40010400
 8001ffc:	200002ec 	.word	0x200002ec

08002000 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002006:	4811      	ldr	r0, [pc, #68]	; (800204c <UART4_IRQHandler+0x4c>)
 8002008:	f004 f9a6 	bl	8006358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  HAL_UART_Receive_IT(&huart4, Rx_Data, 1);
 800200c:	2201      	movs	r2, #1
 800200e:	4910      	ldr	r1, [pc, #64]	; (8002050 <UART4_IRQHandler+0x50>)
 8002010:	480e      	ldr	r0, [pc, #56]	; (800204c <UART4_IRQHandler+0x4c>)
 8002012:	f004 f8ff 	bl	8006214 <HAL_UART_Receive_IT>

  if (Rx_Data[0] == 'R') {
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <UART4_IRQHandler+0x50>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b52      	cmp	r3, #82	; 0x52
 800201c:	d111      	bne.n	8002042 <UART4_IRQHandler+0x42>
	  blue_button_pressed = 1;
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <UART4_IRQHandler+0x54>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
	  char* msg = "Soglia modificata!\n";
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <UART4_IRQHandler+0x58>)
 8002026:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit_IT(&huart4, (uint8_t *) msg, strlen(msg));
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7fe f8d1 	bl	80001d0 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <UART4_IRQHandler+0x4c>)
 8002038:	f004 f890 	bl	800615c <HAL_UART_Transmit_IT>
	  Rx_Data[0] = '\0';
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <UART4_IRQHandler+0x50>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END UART4_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20002284 	.word	0x20002284
 8002050:	2000227c 	.word	0x2000227c
 8002054:	200002ec 	.word	0x200002ec
 8002058:	0800a984 	.word	0x0800a984

0800205c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x50>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <_sbrk+0x16>
		heap_end = &end;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <_sbrk+0x50>)
 800206e:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <_sbrk+0x54>)
 8002070:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <_sbrk+0x50>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <_sbrk+0x50>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	466a      	mov	r2, sp
 8002082:	4293      	cmp	r3, r2
 8002084:	d907      	bls.n	8002096 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002086:	f007 ff81 	bl	8009f8c <__errno>
 800208a:	4602      	mov	r2, r0
 800208c:	230c      	movs	r3, #12
 800208e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e006      	b.n	80020a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <_sbrk+0x50>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	4a03      	ldr	r2, [pc, #12]	; (80020ac <_sbrk+0x50>)
 80020a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200002f0 	.word	0x200002f0
 80020b0:	200023a0 	.word	0x200023a0

080020b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <SystemInit+0x64>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <SystemInit+0x64>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020c8:	4b14      	ldr	r3, [pc, #80]	; (800211c <SystemInit+0x68>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a13      	ldr	r2, [pc, #76]	; (800211c <SystemInit+0x68>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <SystemInit+0x68>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <SystemInit+0x68>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a0f      	ldr	r2, [pc, #60]	; (800211c <SystemInit+0x68>)
 80020e0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020e4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <SystemInit+0x68>)
 80020ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <SystemInit+0x68>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <SystemInit+0x68>)
 80020f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <SystemInit+0x68>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SystemInit+0x64>)
 8002106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800210a:	609a      	str	r2, [r3, #8]
#endif
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	40021000 	.word	0x40021000

08002120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002158 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002124:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002126:	e003      	b.n	8002130 <LoopCopyDataInit>

08002128 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800212a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800212c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800212e:	3104      	adds	r1, #4

08002130 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002134:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002136:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002138:	d3f6      	bcc.n	8002128 <CopyDataInit>
	ldr	r2, =_sbss
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <LoopForever+0x12>)
	b	LoopFillZerobss
 800213c:	e002      	b.n	8002144 <LoopFillZerobss>

0800213e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800213e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002140:	f842 3b04 	str.w	r3, [r2], #4

08002144 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <LoopForever+0x16>)
	cmp	r2, r3
 8002146:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002148:	d3f9      	bcc.n	800213e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800214a:	f7ff ffb3 	bl	80020b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214e:	f007 ff23 	bl	8009f98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002152:	f7fe fa79 	bl	8000648 <main>

08002156 <LoopForever>:

LoopForever:
    b LoopForever
 8002156:	e7fe      	b.n	8002156 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002158:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800215c:	0800aa2c 	.word	0x0800aa2c
	ldr	r0, =_sdata
 8002160:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002164:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002168:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800216c:	200023a0 	.word	0x200023a0

08002170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC1_2_IRQHandler>

08002172 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f001 fa50 	bl	8003622 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff fe92 	bl	8001eac <HAL_InitTick>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	71fb      	strb	r3, [r7, #7]
 8002192:	e001      	b.n	8002198 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002194:	f7ff fbea 	bl	800196c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002198:	79fb      	ldrb	r3, [r7, #7]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_IncTick+0x1c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_IncTick+0x20>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_IncTick+0x1c>)
 80021b4:	6013      	str	r3, [r2, #0]
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	20002398 	.word	0x20002398
 80021c4:	20000008 	.word	0x20000008

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20002398 	.word	0x20002398

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff ffee 	bl	80021c8 <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d004      	beq.n	8002204 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_Delay+0x40>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002204:	bf00      	nop
 8002206:	f7ff ffdf 	bl	80021c8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	429a      	cmp	r2, r3
 8002214:	d8f7      	bhi.n	8002206 <HAL_Delay+0x26>
  {
  }
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000008 	.word	0x20000008

08002224 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	609a      	str	r2, [r3, #8]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800228c:	b490      	push	{r4, r7}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3360      	adds	r3, #96	; 0x60
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <LL_ADC_SetOffset+0x40>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022be:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc90      	pop	{r4, r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	03fff000 	.word	0x03fff000

080022d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022d0:	b490      	push	{r4, r7}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3360      	adds	r3, #96	; 0x60
 80022de:	461a      	mov	r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc90      	pop	{r4, r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022f8:	b490      	push	{r4, r7}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3360      	adds	r3, #96	; 0x60
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4313      	orrs	r3, r2
 800231c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bc90      	pop	{r4, r7}
 8002326:	4770      	bx	lr

08002328 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800234e:	b490      	push	{r4, r7}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3330      	adds	r3, #48	; 0x30
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	4413      	add	r3, r2
 800236c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	211f      	movs	r1, #31
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	f003 011f 	and.w	r1, r3, #31
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bc90      	pop	{r4, r7}
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023a0:	b490      	push	{r4, r7}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3314      	adds	r3, #20
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	0e5b      	lsrs	r3, r3, #25
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	4413      	add	r3, r2
 80023be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023c0:	6822      	ldr	r2, [r4, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	0d1b      	lsrs	r3, r3, #20
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2107      	movs	r1, #7
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	0d1b      	lsrs	r3, r3, #20
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc90      	pop	{r4, r7}
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002408:	43db      	mvns	r3, r3
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0318 	and.w	r3, r3, #24
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002414:	40d9      	lsrs	r1, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	400b      	ands	r3, r1
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	0007ffff 	.word	0x0007ffff

08002438 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 031f 	and.w	r3, r3, #31
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6093      	str	r3, [r2, #8]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024a8:	d101      	bne.n	80024ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f8:	d101      	bne.n	80024fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800251c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002520:	f043 0201 	orr.w	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <LL_ADC_IsEnabled+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_IsEnabled+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800256a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800256e:	f043 0204 	orr.w	r2, r3, #4
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b04      	cmp	r3, #4
 8002594:	d101      	bne.n	800259a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d101      	bne.n	80025c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e134      	b.n	8002854 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff f9df 	bl	80019bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff3f 	bl	8002494 <LL_ADC_IsDeepPowerDownEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d004      	beq.n	8002626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff25 	bl	8002470 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff5a 	bl	80024e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d113      	bne.n	800265e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff3e 	bl	80024bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002640:	4b86      	ldr	r3, [pc, #536]	; (800285c <HAL_ADC_Init+0x28c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	4a86      	ldr	r2, [pc, #536]	; (8002860 <HAL_ADC_Init+0x290>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002650:	e002      	b.n	8002658 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3b01      	subs	r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff3e 	bl	80024e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f043 0201 	orr.w	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff77 	bl	8002582 <LL_ADC_REG_IsConversionOngoing>
 8002694:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 80cf 	bne.w	8002842 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 80cb 	bne.w	8002842 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026b4:	f043 0202 	orr.w	r2, r3, #2
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff37 	bl	8002534 <LL_ADC_IsEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d115      	bne.n	80026f8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026cc:	4865      	ldr	r0, [pc, #404]	; (8002864 <HAL_ADC_Init+0x294>)
 80026ce:	f7ff ff31 	bl	8002534 <LL_ADC_IsEnabled>
 80026d2:	4604      	mov	r4, r0
 80026d4:	4864      	ldr	r0, [pc, #400]	; (8002868 <HAL_ADC_Init+0x298>)
 80026d6:	f7ff ff2d 	bl	8002534 <LL_ADC_IsEnabled>
 80026da:	4603      	mov	r3, r0
 80026dc:	431c      	orrs	r4, r3
 80026de:	4863      	ldr	r0, [pc, #396]	; (800286c <HAL_ADC_Init+0x29c>)
 80026e0:	f7ff ff28 	bl	8002534 <LL_ADC_IsEnabled>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4323      	orrs	r3, r4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4619      	mov	r1, r3
 80026f2:	485f      	ldr	r0, [pc, #380]	; (8002870 <HAL_ADC_Init+0x2a0>)
 80026f4:	f7ff fd96 	bl	8002224 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e5b      	ldrb	r3, [r3, #25]
 80026fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002702:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002708:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800270e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002716:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d106      	bne.n	8002734 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	3b01      	subs	r3, #1
 800272c:	045b      	lsls	r3, r3, #17
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	4b47      	ldr	r3, [pc, #284]	; (8002874 <HAL_ADC_Init+0x2a4>)
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	430b      	orrs	r3, r1
 8002762:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff0a 	bl	8002582 <LL_ADC_REG_IsConversionOngoing>
 800276e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff17 	bl	80025a8 <LL_ADC_INJ_IsConversionOngoing>
 800277a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d13d      	bne.n	80027fe <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d13a      	bne.n	80027fe <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800278c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002794:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a4:	f023 0302 	bic.w	r3, r3, #2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	69b9      	ldr	r1, [r7, #24]
 80027ae:	430b      	orrs	r3, r1
 80027b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d118      	bne.n	80027ee <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027d8:	4311      	orrs	r1, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027de:	430a      	orrs	r2, r1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	611a      	str	r2, [r3, #16]
 80027ec:	e007      	b.n	80027fe <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10c      	bne.n	8002820 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f023 010f 	bic.w	r1, r3, #15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
 800281e:	e007      	b.n	8002830 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 020f 	bic.w	r2, r2, #15
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002834:	f023 0303 	bic.w	r3, r3, #3
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	; 0x54
 8002840:	e007      	b.n	8002852 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f043 0210 	orr.w	r2, r3, #16
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002852:	7ffb      	ldrb	r3, [r7, #31]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3724      	adds	r7, #36	; 0x24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd90      	pop	{r4, r7, pc}
 800285c:	20000000 	.word	0x20000000
 8002860:	053e2d63 	.word	0x053e2d63
 8002864:	50040000 	.word	0x50040000
 8002868:	50040100 	.word	0x50040100
 800286c:	50040200 	.word	0x50040200
 8002870:	50040300 	.word	0x50040300
 8002874:	fff0c007 	.word	0xfff0c007

08002878 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002880:	4857      	ldr	r0, [pc, #348]	; (80029e0 <HAL_ADC_Start+0x168>)
 8002882:	f7ff fdd9 	bl	8002438 <LL_ADC_GetMultimode>
 8002886:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fe78 	bl	8002582 <LL_ADC_REG_IsConversionOngoing>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 809c 	bne.w	80029d2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_Start+0x30>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e097      	b.n	80029d8 <HAL_ADC_Start+0x160>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 fcdd 	bl	8003270 <ADC_Enable>
 80028b6:	4603      	mov	r3, r0
 80028b8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f040 8083 	bne.w	80029c8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <HAL_ADC_Start+0x16c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d002      	beq.n	80028e6 <HAL_ADC_Start+0x6e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	e000      	b.n	80028e8 <HAL_ADC_Start+0x70>
 80028e6:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_ADC_Start+0x170>)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d002      	beq.n	80028f6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d105      	bne.n	8002902 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	d106      	bne.n	800291e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	f023 0206 	bic.w	r2, r3, #6
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	659a      	str	r2, [r3, #88]	; 0x58
 800291c:	e002      	b.n	8002924 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	221c      	movs	r2, #28
 800292a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <HAL_ADC_Start+0x16c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d002      	beq.n	8002944 <HAL_ADC_Start+0xcc>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e000      	b.n	8002946 <HAL_ADC_Start+0xce>
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_ADC_Start+0x170>)
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4293      	cmp	r3, r2
 800294c:	d008      	beq.n	8002960 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d002      	beq.n	8002960 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b09      	cmp	r3, #9
 800295e:	d114      	bne.n	800298a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002976:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fde9 	bl	800255a <LL_ADC_REG_StartConversion>
 8002988:	e025      	b.n	80029d6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <HAL_ADC_Start+0x16c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d002      	beq.n	80029a6 <HAL_ADC_Start+0x12e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	e000      	b.n	80029a8 <HAL_ADC_Start+0x130>
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_ADC_Start+0x170>)
 80029a8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00f      	beq.n	80029d6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
 80029c6:	e006      	b.n	80029d6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029d0:	e001      	b.n	80029d6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	50040300 	.word	0x50040300
 80029e4:	50040100 	.word	0x50040100
 80029e8:	50040000 	.word	0x50040000

080029ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f6:	4862      	ldr	r0, [pc, #392]	; (8002b80 <HAL_ADC_PollForConversion+0x194>)
 80029f8:	f7ff fd1e 	bl	8002438 <LL_ADC_GetMultimode>
 80029fc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d102      	bne.n	8002a0c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a06:	2308      	movs	r3, #8
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e02a      	b.n	8002a62 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d002      	beq.n	8002a1e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d111      	bne.n	8002a42 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	f043 0220 	orr.w	r2, r3, #32
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e09d      	b.n	8002b78 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a40:	e00f      	b.n	8002a62 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a42:	484f      	ldr	r0, [pc, #316]	; (8002b80 <HAL_ADC_PollForConversion+0x194>)
 8002a44:	f7ff fd06 	bl	8002454 <LL_ADC_GetMultiDMATransfer>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	f043 0220 	orr.w	r2, r3, #32
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e08c      	b.n	8002b78 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a5e:	2304      	movs	r3, #4
 8002a60:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a62:	f7ff fbb1 	bl	80021c8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a68:	e01a      	b.n	8002aa0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d016      	beq.n	8002aa0 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a72:	f7ff fba9 	bl	80021c8 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <HAL_ADC_PollForConversion+0x9c>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	f043 0204 	orr.w	r2, r3, #4
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e06b      	b.n	8002b78 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0dd      	beq.n	8002a6a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fc32 	bl	8002328 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01c      	beq.n	8002b04 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7e5b      	ldrb	r3, [r3, #25]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d111      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_ADC_PollForConversion+0x198>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d002      	beq.n	8002b14 <HAL_ADC_PollForConversion+0x128>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	e000      	b.n	8002b16 <HAL_ADC_PollForConversion+0x12a>
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_ADC_PollForConversion+0x19c>)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d008      	beq.n	8002b30 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d002      	beq.n	8002b30 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d104      	bne.n	8002b3a <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e00c      	b.n	8002b54 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <HAL_ADC_PollForConversion+0x198>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d002      	beq.n	8002b4a <HAL_ADC_PollForConversion+0x15e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	e000      	b.n	8002b4c <HAL_ADC_PollForConversion+0x160>
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_ADC_PollForConversion+0x19c>)
 8002b4c:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d104      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2208      	movs	r2, #8
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	e008      	b.n	8002b76 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d103      	bne.n	8002b76 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	220c      	movs	r2, #12
 8002b74:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	50040300 	.word	0x50040300
 8002b84:	50040100 	.word	0x50040100
 8002b88:	50040000 	.word	0x50040000

08002b8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0a6      	sub	sp, #152	; 0x98
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x22>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e348      	b.n	800325c <HAL_ADC_ConfigChannel+0x6b4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fcd3 	bl	8002582 <LL_ADC_REG_IsConversionOngoing>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8329 	bne.w	8003236 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d824      	bhi.n	8002c36 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	3b02      	subs	r3, #2
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	d81b      	bhi.n	8002c2e <HAL_ADC_ConfigChannel+0x86>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <HAL_ADC_ConfigChannel+0x54>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c0d 	.word	0x08002c0d
 8002c00:	08002c15 	.word	0x08002c15
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c25 	.word	0x08002c25
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	220c      	movs	r2, #12
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	e011      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2212      	movs	r2, #18
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	e00d      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2218      	movs	r2, #24
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	e009      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2206      	movs	r2, #6
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	e000      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c36:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	f7ff fb82 	bl	800234e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fc97 	bl	8002582 <LL_ADC_REG_IsConversionOngoing>
 8002c54:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fca3 	bl	80025a8 <LL_ADC_INJ_IsConversionOngoing>
 8002c62:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8148 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 8143 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f7ff fb8a 	bl	80023a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	08db      	lsrs	r3, r3, #3
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d00a      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6919      	ldr	r1, [r3, #16]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cbe:	f7ff fae5 	bl	800228c <LL_ADC_SetOffset>
 8002cc2:	e11d      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fb00 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x148>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff faf5 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	f003 021f 	and.w	r2, r3, #31
 8002cee:	e012      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x16e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff faea 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d105      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x186>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0e9b      	lsrs	r3, r3, #26
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	e00a      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x19c>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fad1 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fab7 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x1da>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff faac 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	e010      	b.n	8002da4 <HAL_ADC_ConfigChannel+0x1fc>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff faa1 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x214>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	e00a      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x22a>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d106      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fa8a 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2102      	movs	r1, #2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fa70 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x268>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2102      	movs	r1, #2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fa65 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 021f 	and.w	r2, r3, #31
 8002e0e:	e010      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x28a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2102      	movs	r1, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fa5a 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x2a2>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	0e9b      	lsrs	r3, r3, #26
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	e00a      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x2b8>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d106      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fa43 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2103      	movs	r1, #3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fa29 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x2f6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2103      	movs	r1, #3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fa1e 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002e94:	4603      	mov	r3, r0
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	f003 021f 	and.w	r2, r3, #31
 8002e9c:	e010      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x318>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fa13 	bl	80022d0 <LL_ADC_GetOffsetChannel>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb8:	fab3 f383 	clz	r3, r3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x330>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	e00a      	b.n	8002eee <HAL_ADC_ConfigChannel+0x346>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d106      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2103      	movs	r1, #3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff f9fc 	bl	80022f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fb15 	bl	8002534 <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 810c 	bne.w	800312a <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6819      	ldr	r1, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f7ff fa66 	bl	80023f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4aad      	ldr	r2, [pc, #692]	; (80031e0 <HAL_ADC_ConfigChannel+0x638>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	f040 80fd 	bne.w	800312a <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x3b0>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	3301      	adds	r3, #1
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	bf94      	ite	ls
 8002f50:	2301      	movls	r3, #1
 8002f52:	2300      	movhi	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e012      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x3d6>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d064      	beq.n	800304c <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d107      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x3f6>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0e9b      	lsrs	r3, r3, #26
 8002f94:	3301      	adds	r3, #1
 8002f96:	069b      	lsls	r3, r3, #26
 8002f98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f9c:	e00e      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x414>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	069b      	lsls	r3, r3, #26
 8002fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x434>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	e010      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x456>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	ea42 0103 	orr.w	r1, r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x47c>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	3301      	adds	r3, #1
 8003016:	f003 021f 	and.w	r2, r3, #31
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	051b      	lsls	r3, r3, #20
 8003022:	e011      	b.n	8003048 <HAL_ADC_ConfigChannel+0x4a0>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	f003 021f 	and.w	r2, r3, #31
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003048:	430b      	orrs	r3, r1
 800304a:	e069      	b.n	8003120 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x4c0>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	3301      	adds	r3, #1
 8003060:	069b      	lsls	r3, r3, #26
 8003062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003066:	e00e      	b.n	8003086 <HAL_ADC_ConfigChannel+0x4de>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	61fb      	str	r3, [r7, #28]
  return result;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	069b      	lsls	r3, r3, #26
 8003082:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x4fe>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0e9b      	lsrs	r3, r3, #26
 8003098:	3301      	adds	r3, #1
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	e010      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x520>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	617b      	str	r3, [r7, #20]
  return result;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	ea42 0103 	orr.w	r1, r2, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10d      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x54c>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 021f 	and.w	r2, r3, #31
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	3b1e      	subs	r3, #30
 80030ec:	051b      	lsls	r3, r3, #20
 80030ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030f2:	e014      	b.n	800311e <HAL_ADC_ConfigChannel+0x576>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	60fb      	str	r3, [r7, #12]
  return result;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	3b1e      	subs	r3, #30
 8003118:	051b      	lsls	r3, r3, #20
 800311a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311e:	430b      	orrs	r3, r1
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	6892      	ldr	r2, [r2, #8]
 8003124:	4619      	mov	r1, r3
 8003126:	f7ff f93b 	bl	80023a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_ADC_ConfigChannel+0x63c>)
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 808c 	beq.w	8003250 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003138:	482b      	ldr	r0, [pc, #172]	; (80031e8 <HAL_ADC_ConfigChannel+0x640>)
 800313a:	f7ff f899 	bl	8002270 <LL_ADC_GetCommonPathInternalCh>
 800313e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a29      	ldr	r2, [pc, #164]	; (80031ec <HAL_ADC_ConfigChannel+0x644>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d12b      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x5fc>
 800314c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d125      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <HAL_ADC_ConfigChannel+0x648>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <HAL_ADC_ConfigChannel+0x5c4>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <HAL_ADC_ConfigChannel+0x64c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d16e      	bne.n	800324a <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003174:	4619      	mov	r1, r3
 8003176:	481c      	ldr	r0, [pc, #112]	; (80031e8 <HAL_ADC_ConfigChannel+0x640>)
 8003178:	f7ff f867 	bl	800224a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <HAL_ADC_ConfigChannel+0x650>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <HAL_ADC_ConfigChannel+0x654>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	099a      	lsrs	r2, r3, #6
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003194:	e002      	b.n	800319c <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3b01      	subs	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f9      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031a2:	e052      	b.n	800324a <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_ADC_ConfigChannel+0x658>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d12a      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x65c>
 80031ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d124      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <HAL_ADC_ConfigChannel+0x648>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d004      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x626>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <HAL_ADC_ConfigChannel+0x64c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d13f      	bne.n	800324e <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d6:	4619      	mov	r1, r3
 80031d8:	4803      	ldr	r0, [pc, #12]	; (80031e8 <HAL_ADC_ConfigChannel+0x640>)
 80031da:	f7ff f836 	bl	800224a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031de:	e036      	b.n	800324e <HAL_ADC_ConfigChannel+0x6a6>
 80031e0:	407f0000 	.word	0x407f0000
 80031e4:	80080000 	.word	0x80080000
 80031e8:	50040300 	.word	0x50040300
 80031ec:	c7520000 	.word	0xc7520000
 80031f0:	50040000 	.word	0x50040000
 80031f4:	50040200 	.word	0x50040200
 80031f8:	20000000 	.word	0x20000000
 80031fc:	053e2d63 	.word	0x053e2d63
 8003200:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a16      	ldr	r2, [pc, #88]	; (8003264 <HAL_ADC_ConfigChannel+0x6bc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d120      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800320e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11a      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <HAL_ADC_ConfigChannel+0x6c0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d115      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800322c:	4619      	mov	r1, r3
 800322e:	480f      	ldr	r0, [pc, #60]	; (800326c <HAL_ADC_ConfigChannel+0x6c4>)
 8003230:	f7ff f80b 	bl	800224a <LL_ADC_SetCommonPathInternalCh>
 8003234:	e00c      	b.n	8003250 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003248:	e002      	b.n	8003250 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800324e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003258:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800325c:	4618      	mov	r0, r3
 800325e:	3798      	adds	r7, #152	; 0x98
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	80000001 	.word	0x80000001
 8003268:	50040000 	.word	0x50040000
 800326c:	50040300 	.word	0x50040300

08003270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f959 	bl	8002534 <LL_ADC_IsEnabled>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d146      	bne.n	8003316 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <ADC_Enable+0xb0>)
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e032      	b.n	8003318 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f928 	bl	800250c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032bc:	f7fe ff84 	bl	80021c8 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c2:	e021      	b.n	8003308 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff f933 	bl	8002534 <LL_ADC_IsEnabled>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff f917 	bl	800250c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032de:	f7fe ff73 	bl	80021c8 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d90d      	bls.n	8003308 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f0:	f043 0210 	orr.w	r2, r3, #16
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e007      	b.n	8003318 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d1d6      	bne.n	80032c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	8000003f 	.word	0x8000003f

08003324 <LL_ADC_IsEnabled>:
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <LL_ADC_IsEnabled+0x18>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <LL_ADC_IsEnabled+0x1a>
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_ADC_REG_IsConversionOngoing>:
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d101      	bne.n	8003362 <LL_ADC_REG_IsConversionOngoing+0x18>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b09f      	sub	sp, #124	; 0x7c
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800338a:	2302      	movs	r3, #2
 800338c:	e08f      	b.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a47      	ldr	r2, [pc, #284]	; (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d102      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80033a0:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	e001      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e072      	b.n	80034ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ffbd 	bl	800334a <LL_ADC_REG_IsConversionOngoing>
 80033d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ffb7 	bl	800334a <LL_ADC_REG_IsConversionOngoing>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d154      	bne.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d151      	bne.n	800348c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033e8:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033ea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d02c      	beq.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003406:	035b      	lsls	r3, r3, #13
 8003408:	430b      	orrs	r3, r1
 800340a:	431a      	orrs	r2, r3
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003410:	4829      	ldr	r0, [pc, #164]	; (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003412:	f7ff ff87 	bl	8003324 <LL_ADC_IsEnabled>
 8003416:	4604      	mov	r4, r0
 8003418:	4828      	ldr	r0, [pc, #160]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800341a:	f7ff ff83 	bl	8003324 <LL_ADC_IsEnabled>
 800341e:	4603      	mov	r3, r0
 8003420:	431c      	orrs	r4, r3
 8003422:	4828      	ldr	r0, [pc, #160]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003424:	f7ff ff7e 	bl	8003324 <LL_ADC_IsEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	4323      	orrs	r3, r4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d137      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003438:	f023 030f 	bic.w	r3, r3, #15
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	6811      	ldr	r1, [r2, #0]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	430a      	orrs	r2, r1
 8003446:	431a      	orrs	r2, r3
 8003448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800344a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800344c:	e028      	b.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800345a:	4817      	ldr	r0, [pc, #92]	; (80034b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800345c:	f7ff ff62 	bl	8003324 <LL_ADC_IsEnabled>
 8003460:	4604      	mov	r4, r0
 8003462:	4816      	ldr	r0, [pc, #88]	; (80034bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003464:	f7ff ff5e 	bl	8003324 <LL_ADC_IsEnabled>
 8003468:	4603      	mov	r3, r0
 800346a:	431c      	orrs	r4, r3
 800346c:	4815      	ldr	r0, [pc, #84]	; (80034c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800346e:	f7ff ff59 	bl	8003324 <LL_ADC_IsEnabled>
 8003472:	4603      	mov	r3, r0
 8003474:	4323      	orrs	r3, r4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d112      	bne.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800347a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003482:	f023 030f 	bic.w	r3, r3, #15
 8003486:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003488:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800348a:	e009      	b.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800349e:	e000      	b.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	377c      	adds	r7, #124	; 0x7c
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	50040000 	.word	0x50040000
 80034bc:	50040100 	.word	0x50040100
 80034c0:	50040300 	.word	0x50040300
 80034c4:	50040200 	.word	0x50040200

080034c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <__NVIC_SetPriorityGrouping+0x44>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034e4:	4013      	ands	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034fa:	4a04      	ldr	r2, [pc, #16]	; (800350c <__NVIC_SetPriorityGrouping+0x44>)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	60d3      	str	r3, [r2, #12]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <__NVIC_GetPriorityGrouping+0x18>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	0a1b      	lsrs	r3, r3, #8
 800351a:	f003 0307 	and.w	r3, r3, #7
}
 800351e:	4618      	mov	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	2b00      	cmp	r3, #0
 800353c:	db0b      	blt.n	8003556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	4907      	ldr	r1, [pc, #28]	; (8003564 <__NVIC_EnableIRQ+0x38>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2001      	movs	r0, #1
 800354e:	fa00 f202 	lsl.w	r2, r0, r2
 8003552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000e100 	.word	0xe000e100

08003568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003578:	2b00      	cmp	r3, #0
 800357a:	db0a      	blt.n	8003592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	490c      	ldr	r1, [pc, #48]	; (80035b4 <__NVIC_SetPriority+0x4c>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	0112      	lsls	r2, r2, #4
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	440b      	add	r3, r1
 800358c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003590:	e00a      	b.n	80035a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4908      	ldr	r1, [pc, #32]	; (80035b8 <__NVIC_SetPriority+0x50>)
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	3b04      	subs	r3, #4
 80035a0:	0112      	lsls	r2, r2, #4
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	440b      	add	r3, r1
 80035a6:	761a      	strb	r2, [r3, #24]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000e100 	.word	0xe000e100
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f1c3 0307 	rsb	r3, r3, #7
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	bf28      	it	cs
 80035da:	2304      	movcs	r3, #4
 80035dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3304      	adds	r3, #4
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d902      	bls.n	80035ec <NVIC_EncodePriority+0x30>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3b03      	subs	r3, #3
 80035ea:	e000      	b.n	80035ee <NVIC_EncodePriority+0x32>
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f0:	f04f 32ff 	mov.w	r2, #4294967295
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	401a      	ands	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003604:	f04f 31ff 	mov.w	r1, #4294967295
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	43d9      	mvns	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003614:	4313      	orrs	r3, r2
         );
}
 8003616:	4618      	mov	r0, r3
 8003618:	3724      	adds	r7, #36	; 0x24
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff4c 	bl	80034c8 <__NVIC_SetPriorityGrouping>
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800364a:	f7ff ff61 	bl	8003510 <__NVIC_GetPriorityGrouping>
 800364e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f7ff ffb1 	bl	80035bc <NVIC_EncodePriority>
 800365a:	4602      	mov	r2, r0
 800365c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff80 	bl	8003568 <__NVIC_SetPriority>
}
 8003668:	bf00      	nop
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff ff54 	bl	800352c <__NVIC_EnableIRQ>
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0ac      	b.n	80037f8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f8b2 	bl	800380c <DFSDM_GetChannelFromInstance>
 80036a8:	4602      	mov	r2, r0
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <HAL_DFSDM_ChannelInit+0x174>)
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e09f      	b.n	80037f8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe f9ff 	bl	8001abc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80036be:	4b51      	ldr	r3, [pc, #324]	; (8003804 <HAL_DFSDM_ChannelInit+0x178>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	4a4f      	ldr	r2, [pc, #316]	; (8003804 <HAL_DFSDM_ChannelInit+0x178>)
 80036c6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <HAL_DFSDM_ChannelInit+0x178>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d125      	bne.n	800371c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80036d0:	4b4d      	ldr	r3, [pc, #308]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4c      	ldr	r2, [pc, #304]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 80036d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036da:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80036dc:	4b4a      	ldr	r3, [pc, #296]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4948      	ldr	r1, [pc, #288]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80036ea:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a46      	ldr	r2, [pc, #280]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 80036f0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80036f4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	791b      	ldrb	r3, [r3, #4]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d108      	bne.n	8003710 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80036fe:	4b42      	ldr	r3, [pc, #264]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	493f      	ldr	r1, [pc, #252]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003710:	4b3d      	ldr	r3, [pc, #244]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <HAL_DFSDM_ChannelInit+0x17c>)
 8003716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800371a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800372a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800373a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003740:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 020f 	bic.w	r2, r2, #15
 8003758:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003780:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6899      	ldr	r1, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f002 0207 	and.w	r2, r2, #7
 80037ac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037d8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f810 	bl	800380c <DFSDM_GetChannelFromInstance>
 80037ec:	4601      	mov	r1, r0
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_DFSDM_ChannelInit+0x174>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200002f8 	.word	0x200002f8
 8003804:	200002f4 	.word	0x200002f4
 8003808:	40016000 	.word	0x40016000

0800380c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a20      	ldr	r2, [pc, #128]	; (8003898 <DFSDM_GetChannelFromInstance+0x8c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d102      	bne.n	8003822 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e032      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <DFSDM_GetChannelFromInstance+0x90>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d102      	bne.n	8003830 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800382a:	2301      	movs	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e02b      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <DFSDM_GetChannelFromInstance+0x94>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d102      	bne.n	800383e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003838:	2302      	movs	r3, #2
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e024      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel3)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <DFSDM_GetChannelFromInstance+0x98>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d102      	bne.n	800384c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003846:	2303      	movs	r3, #3
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	e01d      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <DFSDM_GetChannelFromInstance+0x9c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d102      	bne.n	800385a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003854:	2304      	movs	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	e016      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel5)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a13      	ldr	r2, [pc, #76]	; (80038ac <DFSDM_GetChannelFromInstance+0xa0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d102      	bne.n	8003868 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8003862:	2305      	movs	r3, #5
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e00f      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel6)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <DFSDM_GetChannelFromInstance+0xa4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d102      	bne.n	8003876 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8003870:	2306      	movs	r3, #6
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e008      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
  else if (Instance == DFSDM1_Channel7)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a0e      	ldr	r2, [pc, #56]	; (80038b4 <DFSDM_GetChannelFromInstance+0xa8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d102      	bne.n	8003884 <DFSDM_GetChannelFromInstance+0x78>
  {
    channel = 7;
 800387e:	2307      	movs	r3, #7
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e001      	b.n	8003888 <DFSDM_GetChannelFromInstance+0x7c>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003888:	68fb      	ldr	r3, [r7, #12]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40016000 	.word	0x40016000
 800389c:	40016020 	.word	0x40016020
 80038a0:	40016040 	.word	0x40016040
 80038a4:	40016060 	.word	0x40016060
 80038a8:	40016080 	.word	0x40016080
 80038ac:	400160a0 	.word	0x400160a0
 80038b0:	400160c0 	.word	0x400160c0
 80038b4:	400160e0 	.word	0x400160e0

080038b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d005      	beq.n	80038dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2204      	movs	r2, #4
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
 80038da:	e029      	b.n	8003930 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020e 	bic.w	r2, r2, #14
 80038ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	f003 021c 	and.w	r2, r3, #28
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
    }
  }
  return status;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800394a:	e17f      	b.n	8003c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	4013      	ands	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8171 	beq.w	8003c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x38>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b12      	cmp	r3, #18
 8003972:	d123      	bne.n	80039bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	220f      	movs	r2, #15
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	08da      	lsrs	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3208      	adds	r2, #8
 80039b6:	6939      	ldr	r1, [r7, #16]
 80039b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2203      	movs	r2, #3
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0203 	and.w	r2, r3, #3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d00b      	beq.n	8003a10 <HAL_GPIO_Init+0xd4>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d007      	beq.n	8003a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a04:	2b11      	cmp	r3, #17
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b12      	cmp	r3, #18
 8003a0e:	d130      	bne.n	8003a72 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a46:	2201      	movs	r2, #1
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 0201 	and.w	r2, r3, #1
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d118      	bne.n	8003ab0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a84:	2201      	movs	r2, #1
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	08db      	lsrs	r3, r3, #3
 8003a9a:	f003 0201 	and.w	r2, r3, #1
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80ac 	beq.w	8003c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	4b5e      	ldr	r3, [pc, #376]	; (8003c68 <HAL_GPIO_Init+0x32c>)
 8003af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af2:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <HAL_GPIO_Init+0x32c>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6613      	str	r3, [r2, #96]	; 0x60
 8003afa:	4b5b      	ldr	r3, [pc, #364]	; (8003c68 <HAL_GPIO_Init+0x32c>)
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b06:	4a59      	ldr	r2, [pc, #356]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	220f      	movs	r2, #15
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b30:	d025      	beq.n	8003b7e <HAL_GPIO_Init+0x242>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <HAL_GPIO_Init+0x334>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01f      	beq.n	8003b7a <HAL_GPIO_Init+0x23e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4d      	ldr	r2, [pc, #308]	; (8003c74 <HAL_GPIO_Init+0x338>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d019      	beq.n	8003b76 <HAL_GPIO_Init+0x23a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4c      	ldr	r2, [pc, #304]	; (8003c78 <HAL_GPIO_Init+0x33c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_GPIO_Init+0x236>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4b      	ldr	r2, [pc, #300]	; (8003c7c <HAL_GPIO_Init+0x340>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00d      	beq.n	8003b6e <HAL_GPIO_Init+0x232>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4a      	ldr	r2, [pc, #296]	; (8003c80 <HAL_GPIO_Init+0x344>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <HAL_GPIO_Init+0x22e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a49      	ldr	r2, [pc, #292]	; (8003c84 <HAL_GPIO_Init+0x348>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_GPIO_Init+0x22a>
 8003b62:	2306      	movs	r3, #6
 8003b64:	e00c      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b66:	2307      	movs	r3, #7
 8003b68:	e00a      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b6a:	2305      	movs	r3, #5
 8003b6c:	e008      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	e006      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b72:	2303      	movs	r3, #3
 8003b74:	e004      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e002      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_GPIO_Init+0x244>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	f002 0203 	and.w	r2, r2, #3
 8003b86:	0092      	lsls	r2, r2, #2
 8003b88:	4093      	lsls	r3, r2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b90:	4936      	ldr	r1, [pc, #216]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	089b      	lsrs	r3, r3, #2
 8003b96:	3302      	adds	r3, #2
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003bc8:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bec:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bf2:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c40:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <HAL_GPIO_Init+0x34c>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa22 f303 	lsr.w	r3, r2, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f47f ae78 	bne.w	800394c <HAL_GPIO_Init+0x10>
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	48000800 	.word	0x48000800
 8003c78:	48000c00 	.word	0x48000c00
 8003c7c:	48001000 	.word	0x48001000
 8003c80:	48001400 	.word	0x48001400
 8003c84:	48001800 	.word	0x48001800
 8003c88:	40010400 	.word	0x40010400

08003c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c9c:	787b      	ldrb	r3, [r7, #1]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ca8:	e002      	b.n	8003cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f806 	bl	8003cec <HAL_GPIO_EXTI_Callback>
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e081      	b.n	8003e18 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fd ff0b 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2224      	movs	r2, #36	; 0x24
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d107      	bne.n	8003d7c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	e006      	b.n	8003d8a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d104      	bne.n	8003d9c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	ea42 0103 	orr.w	r1, r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	021a      	lsls	r2, r3, #8
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69d9      	ldr	r1, [r3, #28]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0201 	orr.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b20      	cmp	r3, #32
 8003e34:	d138      	bne.n	8003ea8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e032      	b.n	8003eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d139      	bne.n	8003f40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e033      	b.n	8003f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2224      	movs	r2, #36	; 0x24
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f50:	b08f      	sub	sp, #60	; 0x3c
 8003f52:	af0a      	add	r7, sp, #40	; 0x28
 8003f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e116      	b.n	800418e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd ff2a 	bl	8001dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2203      	movs	r2, #3
 8003f84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f003 f96c 	bl	800727c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	687e      	ldr	r6, [r7, #4]
 8003fac:	466d      	mov	r5, sp
 8003fae:	f106 0410 	add.w	r4, r6, #16
 8003fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fbe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fc2:	1d33      	adds	r3, r6, #4
 8003fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fc6:	6838      	ldr	r0, [r7, #0]
 8003fc8:	f003 f906 	bl	80071d8 <USB_CoreInit>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0d7      	b.n	800418e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f003 f95a 	bl	800729e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	e04a      	b.n	8004086 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	333d      	adds	r3, #61	; 0x3d
 8004000:	2201      	movs	r2, #1
 8004002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	333c      	adds	r3, #60	; 0x3c
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	b298      	uxth	r0, r3
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3342      	adds	r3, #66	; 0x42
 800402c:	4602      	mov	r2, r0
 800402e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	333f      	adds	r3, #63	; 0x3f
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3344      	adds	r3, #68	; 0x44
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	3348      	adds	r3, #72	; 0x48
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	3350      	adds	r3, #80	; 0x50
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	3301      	adds	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d3af      	bcc.n	8003ff0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e044      	b.n	8004120 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004096:	7bfa      	ldrb	r2, [r7, #15]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040c2:	7bfa      	ldrb	r2, [r7, #15]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040ee:	7bfa      	ldrb	r2, [r7, #15]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	3301      	adds	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d3b5      	bcc.n	8004096 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	687e      	ldr	r6, [r7, #4]
 8004132:	466d      	mov	r5, sp
 8004134:	f106 0410 	add.w	r4, r6, #16
 8004138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004144:	e885 0003 	stmia.w	r5, {r0, r1}
 8004148:	1d33      	adds	r3, r6, #4
 800414a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f003 f8d1 	bl	80072f4 <USB_DevInit>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e014      	b.n	800418e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2b01      	cmp	r3, #1
 800417a:	d102      	bne.n	8004182 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f80a 	bl	8004196 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f003 fa57 	bl	800763a <USB_DevDisconnect>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004196 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	f043 0303 	orr.w	r3, r3, #3
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40007000 	.word	0x40007000

08004200 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <HAL_PWREx_GetVoltageRange+0x18>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40007000 	.word	0x40007000

0800421c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422a:	d130      	bne.n	800428e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800422c:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d038      	beq.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004242:	4a1e      	ldr	r2, [pc, #120]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004248:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2232      	movs	r2, #50	; 0x32
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	4a1b      	ldr	r2, [pc, #108]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0c9b      	lsrs	r3, r3, #18
 800425c:	3301      	adds	r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004260:	e002      	b.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3b01      	subs	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004274:	d102      	bne.n	800427c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f2      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004288:	d110      	bne.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e00f      	b.n	80042ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429a:	d007      	beq.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a4:	4a05      	ldr	r2, [pc, #20]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40007000 	.word	0x40007000
 80042c0:	20000000 	.word	0x20000000
 80042c4:	431bde83 	.word	0x431bde83

080042c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80042d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042d6:	6053      	str	r3, [r2, #4]
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000

080042e8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80042f0:	f7fd ff6a 	bl	80021c8 <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e06f      	b.n	80043e0 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_QSPI_Init+0x28>
 800430c:	2302      	movs	r3, #2
 800430e:	e067      	b.n	80043e0 <HAL_QSPI_Init+0xf8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fd fc4d 	bl	8001bcc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004332:	f241 3188 	movw	r1, #5000	; 0x1388
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f858 	bl	80043ec <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	3b01      	subs	r3, #1
 800434c:	021a      	lsls	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	2120      	movs	r1, #32
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f850 	bl	8004408 <QSPI_WaitFlagStateUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800436c:	7afb      	ldrb	r3, [r7, #11]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d131      	bne.n	80043d6 <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6852      	ldr	r2, [r2, #4]
 8004384:	0611      	lsls	r1, r2, #24
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68d2      	ldr	r2, [r2, #12]
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <HAL_QSPI_Init+0x100>)
 800439c:	4013      	ands	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6912      	ldr	r2, [r2, #16]
 80043a2:	0411      	lsls	r1, r2, #16
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6952      	ldr	r2, [r2, #20]
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6992      	ldr	r2, [r2, #24]
 80043ae:	4311      	orrs	r1, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80043de:	7afb      	ldrb	r3, [r7, #11]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	ffe0f8fe 	.word	0xffe0f8fe

080043ec <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004418:	e01a      	b.n	8004450 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d016      	beq.n	8004450 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fd fed1 	bl	80021c8 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10b      	bne.n	8004450 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2204      	movs	r2, #4
 800443c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e00e      	b.n	800446e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	429a      	cmp	r2, r3
 800446a:	d1d6      	bne.n	800441a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e39d      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448a:	4ba4      	ldr	r3, [pc, #656]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004494:	4ba1      	ldr	r3, [pc, #644]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80e1 	beq.w	800466e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <HAL_RCC_OscConfig+0x4a>
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	f040 8088 	bne.w	80045ca <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 8084 	bne.w	80045ca <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044c2:	4b96      	ldr	r3, [pc, #600]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCC_OscConfig+0x62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e375      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1a      	ldr	r2, [r3, #32]
 80044de:	4b8f      	ldr	r3, [pc, #572]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d004      	beq.n	80044f4 <HAL_RCC_OscConfig+0x7c>
 80044ea:	4b8c      	ldr	r3, [pc, #560]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f2:	e005      	b.n	8004500 <HAL_RCC_OscConfig+0x88>
 80044f4:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80044f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004500:	4293      	cmp	r3, r2
 8004502:	d223      	bcs.n	800454c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fd3b 	bl	8004f84 <RCC_SetFlashLatencyFromMSIRange>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e356      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004518:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7f      	ldr	r2, [pc, #508]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800451e:	f043 0308 	orr.w	r3, r3, #8
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b7d      	ldr	r3, [pc, #500]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	497a      	ldr	r1, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004536:	4b79      	ldr	r3, [pc, #484]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	4975      	ldr	r1, [pc, #468]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
 800454a:	e022      	b.n	8004592 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800454c:	4b73      	ldr	r3, [pc, #460]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a72      	ldr	r2, [pc, #456]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004552:	f043 0308 	orr.w	r3, r3, #8
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	496d      	ldr	r1, [pc, #436]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456a:	4b6c      	ldr	r3, [pc, #432]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	4968      	ldr	r1, [pc, #416]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fcfe 	bl	8004f84 <RCC_SetFlashLatencyFromMSIRange>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e319      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004592:	f000 fc03 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004596:	4601      	mov	r1, r0
 8004598:	4b60      	ldr	r3, [pc, #384]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	4a5f      	ldr	r2, [pc, #380]	; (8004720 <HAL_RCC_OscConfig+0x2a8>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	fa21 f303 	lsr.w	r3, r1, r3
 80045ae:	4a5d      	ldr	r2, [pc, #372]	; (8004724 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045b2:	4b5d      	ldr	r3, [pc, #372]	; (8004728 <HAL_RCC_OscConfig+0x2b0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fc78 	bl	8001eac <HAL_InitTick>
 80045bc:	4603      	mov	r3, r0
 80045be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d052      	beq.n	800466c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	e2fd      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d032      	beq.n	8004638 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045d2:	4b52      	ldr	r3, [pc, #328]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a51      	ldr	r2, [pc, #324]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045de:	f7fd fdf3 	bl	80021c8 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045e6:	f7fd fdef 	bl	80021c8 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e2e6      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a44      	ldr	r2, [pc, #272]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800460a:	f043 0308 	orr.w	r3, r3, #8
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	493f      	ldr	r1, [pc, #252]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004622:	4b3e      	ldr	r3, [pc, #248]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	493a      	ldr	r1, [pc, #232]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
 8004636:	e01a      	b.n	800466e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004638:	4b38      	ldr	r3, [pc, #224]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a37      	ldr	r2, [pc, #220]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004644:	f7fd fdc0 	bl	80021c8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800464c:	f7fd fdbc 	bl	80021c8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e2b3      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800465e:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0x1d4>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d074      	beq.n	8004764 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b08      	cmp	r3, #8
 800467e:	d005      	beq.n	800468c <HAL_RCC_OscConfig+0x214>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	2b0c      	cmp	r3, #12
 8004684:	d10e      	bne.n	80046a4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b03      	cmp	r3, #3
 800468a:	d10b      	bne.n	80046a4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d064      	beq.n	8004762 <HAL_RCC_OscConfig+0x2ea>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d160      	bne.n	8004762 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e290      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x244>
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1a      	ldr	r2, [pc, #104]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e01d      	b.n	80046f8 <HAL_RCC_OscConfig+0x280>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x268>
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a14      	ldr	r2, [pc, #80]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a11      	ldr	r2, [pc, #68]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0x280>
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <HAL_RCC_OscConfig+0x2a4>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01c      	beq.n	800473a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fd62 	bl	80021c8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004706:	e011      	b.n	800472c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004708:	f7fd fd5e 	bl	80021c8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d90a      	bls.n	800472c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e255      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	0800a9a0 	.word	0x0800a9a0
 8004724:	20000000 	.word	0x20000000
 8004728:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472c:	4bae      	ldr	r3, [pc, #696]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0e7      	beq.n	8004708 <HAL_RCC_OscConfig+0x290>
 8004738:	e014      	b.n	8004764 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd fd45 	bl	80021c8 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004742:	f7fd fd41 	bl	80021c8 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b64      	cmp	r3, #100	; 0x64
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e238      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004754:	4ba4      	ldr	r3, [pc, #656]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f0      	bne.n	8004742 <HAL_RCC_OscConfig+0x2ca>
 8004760:	e000      	b.n	8004764 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004762:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d060      	beq.n	8004832 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b04      	cmp	r3, #4
 8004774:	d005      	beq.n	8004782 <HAL_RCC_OscConfig+0x30a>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d119      	bne.n	80047b0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d116      	bne.n	80047b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004782:	4b99      	ldr	r3, [pc, #612]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCC_OscConfig+0x322>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e215      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479a:	4b93      	ldr	r3, [pc, #588]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	061b      	lsls	r3, r3, #24
 80047a8:	498f      	ldr	r1, [pc, #572]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ae:	e040      	b.n	8004832 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d023      	beq.n	8004800 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b8:	4b8b      	ldr	r3, [pc, #556]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a8a      	ldr	r2, [pc, #552]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80047be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c4:	f7fd fd00 	bl	80021c8 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047cc:	f7fd fcfc 	bl	80021c8 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e1f3      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047de:	4b82      	ldr	r3, [pc, #520]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	4b7f      	ldr	r3, [pc, #508]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	061b      	lsls	r3, r3, #24
 80047f8:	497b      	ldr	r1, [pc, #492]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
 80047fe:	e018      	b.n	8004832 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004800:	4b79      	ldr	r3, [pc, #484]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a78      	ldr	r2, [pc, #480]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fd fcdc 	bl	80021c8 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004814:	f7fd fcd8 	bl	80021c8 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e1cf      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004826:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d03c      	beq.n	80048b8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01c      	beq.n	8004880 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004846:	4b68      	ldr	r3, [pc, #416]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484c:	4a66      	ldr	r2, [pc, #408]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd fcb7 	bl	80021c8 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800485e:	f7fd fcb3 	bl	80021c8 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e1aa      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004870:	4b5d      	ldr	r3, [pc, #372]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ef      	beq.n	800485e <HAL_RCC_OscConfig+0x3e6>
 800487e:	e01b      	b.n	80048b8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004880:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004886:	4a58      	ldr	r2, [pc, #352]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fd fc9a 	bl	80021c8 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004898:	f7fd fc96 	bl	80021c8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e18d      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048aa:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80048ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ef      	bne.n	8004898 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a5 	beq.w	8004a10 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048c6:	2300      	movs	r3, #0
 80048c8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80048cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d6:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4a43      	ldr	r2, [pc, #268]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80048dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6593      	str	r3, [r2, #88]	; 0x58
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ee:	2301      	movs	r3, #1
 80048f0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048f2:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <HAL_RCC_OscConfig+0x574>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d118      	bne.n	8004930 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048fe:	4b3b      	ldr	r3, [pc, #236]	; (80049ec <HAL_RCC_OscConfig+0x574>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a3a      	ldr	r2, [pc, #232]	; (80049ec <HAL_RCC_OscConfig+0x574>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7fd fc5d 	bl	80021c8 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7fd fc59 	bl	80021c8 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e150      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004924:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_RCC_OscConfig+0x574>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d108      	bne.n	800494a <HAL_RCC_OscConfig+0x4d2>
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004948:	e024      	b.n	8004994 <HAL_RCC_OscConfig+0x51c>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b05      	cmp	r3, #5
 8004950:	d110      	bne.n	8004974 <HAL_RCC_OscConfig+0x4fc>
 8004952:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	4a23      	ldr	r2, [pc, #140]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800495a:	f043 0304 	orr.w	r3, r3, #4
 800495e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004962:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004972:	e00f      	b.n	8004994 <HAL_RCC_OscConfig+0x51c>
 8004974:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	4a1b      	ldr	r2, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800497c:	f023 0301 	bic.w	r3, r3, #1
 8004980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 800498c:	f023 0304 	bic.w	r3, r3, #4
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fd fc14 	bl	80021c8 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fd fc10 	bl	80021c8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e105      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_OscConfig+0x570>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ed      	beq.n	80049a4 <HAL_RCC_OscConfig+0x52c>
 80049c8:	e019      	b.n	80049fe <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fd fbfd 	bl	80021c8 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049d0:	e00e      	b.n	80049f0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fd fbf9 	bl	80021c8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d905      	bls.n	80049f0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0ee      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049f0:	4b77      	ldr	r3, [pc, #476]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e9      	bne.n	80049d2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fe:	7ffb      	ldrb	r3, [r7, #31]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a04:	4b72      	ldr	r3, [pc, #456]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	4a71      	ldr	r2, [pc, #452]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80d5 	beq.w	8004bc4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	f000 808e 	beq.w	8004b3e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d15b      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b69      	ldr	r3, [pc, #420]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a68      	ldr	r2, [pc, #416]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fd fbc7 	bl	80021c8 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3e:	f7fd fbc3 	bl	80021c8 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e0ba      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a50:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5c:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	4b5c      	ldr	r3, [pc, #368]	; (8004bd4 <HAL_RCC_OscConfig+0x75c>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	4311      	orrs	r1, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a76:	0212      	lsls	r2, r2, #8
 8004a78:	4311      	orrs	r1, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a7e:	0852      	lsrs	r2, r2, #1
 8004a80:	3a01      	subs	r2, #1
 8004a82:	0552      	lsls	r2, r2, #21
 8004a84:	4311      	orrs	r1, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a8a:	0852      	lsrs	r2, r2, #1
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	0652      	lsls	r2, r2, #25
 8004a90:	4311      	orrs	r1, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a96:	0912      	lsrs	r2, r2, #4
 8004a98:	0452      	lsls	r2, r2, #17
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	494c      	ldr	r1, [pc, #304]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a4a      	ldr	r2, [pc, #296]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004aa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aac:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004aae:	4b48      	ldr	r3, [pc, #288]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	4a47      	ldr	r2, [pc, #284]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fd fb85 	bl	80021c8 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fd fb81 	bl	80021c8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e078      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad4:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x64a>
 8004ae0:	e070      	b.n	8004bc4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a3a      	ldr	r2, [pc, #232]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004afa:	4b35      	ldr	r3, [pc, #212]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4a34      	ldr	r2, [pc, #208]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004b00:	f023 0303 	bic.w	r3, r3, #3
 8004b04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b06:	4b32      	ldr	r3, [pc, #200]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a31      	ldr	r2, [pc, #196]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004b0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd fb57 	bl	80021c8 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fd fb53 	bl	80021c8 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e04a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x6a6>
 8004b3c:	e042      	b.n	8004bc4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e03d      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004b4a:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <HAL_RCC_OscConfig+0x758>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f003 0203 	and.w	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d130      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d127      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d11f      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b8a:	2a07      	cmp	r2, #7
 8004b8c:	bf14      	ite	ne
 8004b8e:	2201      	movne	r2, #1
 8004b90:	2200      	moveq	r2, #0
 8004b92:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d113      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d109      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	f99d808c 	.word	0xf99d808c

08004bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0c8      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bec:	4b66      	ldr	r3, [pc, #408]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d910      	bls.n	8004c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b63      	ldr	r3, [pc, #396]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 0207 	bic.w	r2, r3, #7
 8004c02:	4961      	ldr	r1, [pc, #388]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0b0      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d04c      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d107      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c30:	4b56      	ldr	r3, [pc, #344]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d121      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e09e      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c48:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d115      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e092      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c60:	4b4a      	ldr	r3, [pc, #296]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e086      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c70:	4b46      	ldr	r3, [pc, #280]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e07e      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c80:	4b42      	ldr	r3, [pc, #264]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 0203 	bic.w	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	493f      	ldr	r1, [pc, #252]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c92:	f7fd fa99 	bl	80021c8 <HAL_GetTick>
 8004c96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c98:	e00a      	b.n	8004cb0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9a:	f7fd fa95 	bl	80021c8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e066      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb0:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 020c 	and.w	r2, r3, #12
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d1eb      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cce:	4b2f      	ldr	r3, [pc, #188]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	492c      	ldr	r1, [pc, #176]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce0:	4b29      	ldr	r3, [pc, #164]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d210      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cee:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 0207 	bic.w	r2, r3, #7
 8004cf6:	4924      	ldr	r1, [pc, #144]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <HAL_RCC_ClockConfig+0x1b0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e036      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4918      	ldr	r1, [pc, #96]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4910      	ldr	r1, [pc, #64]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d4e:	f000 f825 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d52:	4601      	mov	r1, r0
 8004d54:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <HAL_RCC_ClockConfig+0x1b4>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	5cd3      	ldrb	r3, [r2, r3]
 8004d62:	f003 031f 	and.w	r3, r3, #31
 8004d66:	fa21 f303 	lsr.w	r3, r1, r3
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd f89a 	bl	8001eac <HAL_InitTick>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d7c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40022000 	.word	0x40022000
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800a9a0 	.word	0x0800a9a0
 8004d94:	20000000 	.word	0x20000000
 8004d98:	20000004 	.word	0x20000004

08004d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b089      	sub	sp, #36	; 0x24
 8004da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004daa:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db4:	4b3a      	ldr	r3, [pc, #232]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d121      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d11e      	bne.n	8004e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 030f 	and.w	r3, r3, #15
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	e005      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dec:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004df8:	4a2a      	ldr	r2, [pc, #168]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10d      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d102      	bne.n	8004e1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	e004      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e20:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_RCC_GetSysClockFreq+0x110>)
 8004e22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d133      	bne.n	8004e92 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d002      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0xa4>
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0xaa>
 8004e3e:	e005      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e42:	617b      	str	r3, [r7, #20]
      break;
 8004e44:	e005      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <HAL_RCC_GetSysClockFreq+0x110>)
 8004e48:	617b      	str	r3, [r7, #20]
      break;
 8004e4a:	e002      	b.n	8004e52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	617b      	str	r3, [r7, #20]
      break;
 8004e50:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	091b      	lsrs	r3, r3, #4
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	0a1b      	lsrs	r3, r3, #8
 8004e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	fb02 f203 	mul.w	r2, r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	0e5b      	lsrs	r3, r3, #25
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	3301      	adds	r3, #1
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e92:	69bb      	ldr	r3, [r7, #24]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3724      	adds	r7, #36	; 0x24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	0800a9b8 	.word	0x0800a9b8
 8004ea8:	00f42400 	.word	0x00f42400
 8004eac:	007a1200 	.word	0x007a1200

08004eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	20000000 	.word	0x20000000

08004ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ecc:	f7ff fff0 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ed0:	4601      	mov	r1, r0
 8004ed2:	4b06      	ldr	r3, [pc, #24]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	0a1b      	lsrs	r3, r3, #8
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ede:	5cd3      	ldrb	r3, [r2, r3]
 8004ee0:	f003 031f 	and.w	r3, r3, #31
 8004ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40021000 	.word	0x40021000
 8004ef0:	0800a9b0 	.word	0x0800a9b0

08004ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ef8:	f7ff ffda 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004efc:	4601      	mov	r1, r0
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	0adb      	lsrs	r3, r3, #11
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f0a:	5cd3      	ldrb	r3, [r2, r3]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	0800a9b0 	.word	0x0800a9b0

08004f20 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	220f      	movs	r2, #15
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <HAL_RCC_GetClockConfig+0x5c>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0203 	and.w	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <HAL_RCC_GetClockConfig+0x5c>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCC_GetClockConfig+0x5c>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004f54:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <HAL_RCC_GetClockConfig+0x5c>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	08db      	lsrs	r3, r3, #3
 8004f5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <HAL_RCC_GetClockConfig+0x60>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0207 	and.w	r2, r3, #7
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40022000 	.word	0x40022000

08004f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f9c:	f7ff f930 	bl	8004200 <HAL_PWREx_GetVoltageRange>
 8004fa0:	6178      	str	r0, [r7, #20]
 8004fa2:	e014      	b.n	8004fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	4a24      	ldr	r2, [pc, #144]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6593      	str	r3, [r2, #88]	; 0x58
 8004fb0:	4b22      	ldr	r3, [pc, #136]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fbc:	f7ff f920 	bl	8004200 <HAL_PWREx_GetVoltageRange>
 8004fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fc2:	4b1e      	ldr	r3, [pc, #120]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	4a1d      	ldr	r2, [pc, #116]	; (800503c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd4:	d10b      	bne.n	8004fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d919      	bls.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2ba0      	cmp	r3, #160	; 0xa0
 8004fe0:	d902      	bls.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	e013      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe8:	2301      	movs	r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e010      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d902      	bls.n	8004ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e00a      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d102      	bne.n	8005006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005000:	2302      	movs	r3, #2
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	e004      	b.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d101      	bne.n	8005010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800500c:	2301      	movs	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f023 0207 	bic.w	r2, r3, #7
 8005018:	4909      	ldr	r1, [pc, #36]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d001      	beq.n	8005032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40021000 	.word	0x40021000
 8005040:	40022000 	.word	0x40022000

08005044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800504c:	2300      	movs	r3, #0
 800504e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005050:	2300      	movs	r3, #0
 8005052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505c:	2b00      	cmp	r3, #0
 800505e:	d03f      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005068:	d01c      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800506a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506e:	d802      	bhi.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00e      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005074:	e01f      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800507a:	d003      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800507c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005080:	d01c      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005082:	e018      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005084:	4b85      	ldr	r3, [pc, #532]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a84      	ldr	r2, [pc, #528]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800508a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005090:	e015      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fac9 	bl	8005630 <RCCEx_PLLSAI1_Config>
 800509e:	4603      	mov	r3, r0
 80050a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050a2:	e00c      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3320      	adds	r3, #32
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fbb0 	bl	8005810 <RCCEx_PLLSAI2_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b4:	e003      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	74fb      	strb	r3, [r7, #19]
      break;
 80050ba:	e000      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80050bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c4:	4b75      	ldr	r3, [pc, #468]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d2:	4972      	ldr	r1, [pc, #456]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d03f      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050f4:	d01c      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80050f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050fa:	d802      	bhi.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00e      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005100:	e01f      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005106:	d003      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005108:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800510c:	d01c      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800510e:	e018      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005110:	4b62      	ldr	r3, [pc, #392]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a61      	ldr	r2, [pc, #388]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800511c:	e015      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa83 	bl	8005630 <RCCEx_PLLSAI1_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800512e:	e00c      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3320      	adds	r3, #32
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fb6a 	bl	8005810 <RCCEx_PLLSAI2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005140:	e003      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	74fb      	strb	r3, [r7, #19]
      break;
 8005146:	e000      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005150:	4b52      	ldr	r3, [pc, #328]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515e:	494f      	ldr	r1, [pc, #316]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005166:	e001      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	7cfb      	ldrb	r3, [r7, #19]
 800516a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80a0 	beq.w	80052ba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517a:	2300      	movs	r3, #0
 800517c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800517e:	4b47      	ldr	r3, [pc, #284]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4b41      	ldr	r3, [pc, #260]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	4a40      	ldr	r2, [pc, #256]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519e:	6593      	str	r3, [r2, #88]	; 0x58
 80051a0:	4b3e      	ldr	r3, [pc, #248]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ac:	2301      	movs	r3, #1
 80051ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051b0:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3a      	ldr	r2, [pc, #232]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051bc:	f7fd f804 	bl	80021c8 <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051c2:	e009      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c4:	f7fd f800 	bl	80021c8 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d902      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	74fb      	strb	r3, [r7, #19]
        break;
 80051d6:	e005      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051d8:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ef      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d15c      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051ea:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01f      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	429a      	cmp	r2, r3
 8005206:	d019      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005208:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005214:	4b21      	ldr	r3, [pc, #132]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	4a20      	ldr	r2, [pc, #128]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fc ffbf 	bl	80021c8 <HAL_GetTick>
 800524a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800524c:	e00b      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fc ffbb 	bl	80021c8 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d902      	bls.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	74fb      	strb	r3, [r7, #19]
            break;
 8005264:	e006      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ec      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	4904      	ldr	r1, [pc, #16]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005292:	e009      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	74bb      	strb	r3, [r7, #18]
 8005298:	e006      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000
 80052a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052a8:	7c7b      	ldrb	r3, [r7, #17]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d105      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ae:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	4a9d      	ldr	r2, [pc, #628]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c6:	4b98      	ldr	r3, [pc, #608]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f023 0203 	bic.w	r2, r3, #3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	4994      	ldr	r1, [pc, #592]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052e8:	4b8f      	ldr	r3, [pc, #572]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f023 020c 	bic.w	r2, r3, #12
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	498c      	ldr	r1, [pc, #560]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800530a:	4b87      	ldr	r3, [pc, #540]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	4983      	ldr	r1, [pc, #524]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800532c:	4b7e      	ldr	r3, [pc, #504]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	497b      	ldr	r1, [pc, #492]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800534e:	4b76      	ldr	r3, [pc, #472]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535c:	4972      	ldr	r1, [pc, #456]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005370:	4b6d      	ldr	r3, [pc, #436]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537e:	496a      	ldr	r1, [pc, #424]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005392:	4b65      	ldr	r3, [pc, #404]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	4961      	ldr	r1, [pc, #388]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b4:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	4959      	ldr	r1, [pc, #356]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d6:	4b54      	ldr	r3, [pc, #336]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e4:	4950      	ldr	r1, [pc, #320]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053f8:	4b4b      	ldr	r3, [pc, #300]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	4948      	ldr	r1, [pc, #288]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800541a:	4b43      	ldr	r3, [pc, #268]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	493f      	ldr	r1, [pc, #252]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d028      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800543c:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544a:	4937      	ldr	r1, [pc, #220]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800545a:	d106      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800545c:	4b32      	ldr	r3, [pc, #200]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a31      	ldr	r2, [pc, #196]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005466:	60d3      	str	r3, [r2, #12]
 8005468:	e011      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005472:	d10c      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	2101      	movs	r1, #1
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f8d8 	bl	8005630 <RCCEx_PLLSAI1_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d028      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800549a:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	491f      	ldr	r1, [pc, #124]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b8:	d106      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c4:	60d3      	str	r3, [r2, #12]
 80054c6:	e011      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f8a9 	bl	8005630 <RCCEx_PLLSAI1_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02b      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	4908      	ldr	r1, [pc, #32]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005516:	d109      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a02      	ldr	r2, [pc, #8]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800551e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005522:	60d3      	str	r3, [r2, #12]
 8005524:	e014      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005526:	bf00      	nop
 8005528:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	2101      	movs	r1, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f877 	bl	8005630 <RCCEx_PLLSAI1_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005546:	7cfb      	ldrb	r3, [r7, #19]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02f      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800555c:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800556a:	4928      	ldr	r1, [pc, #160]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557a:	d10d      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	2102      	movs	r1, #2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f854 	bl	8005630 <RCCEx_PLLSAI1_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d014      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	74bb      	strb	r3, [r7, #18]
 8005596:	e011      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3320      	adds	r3, #32
 80055a6:	2102      	movs	r1, #2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f931 	bl	8005810 <RCCEx_PLLSAI2_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d6:	490d      	ldr	r1, [pc, #52]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fa:	4904      	ldr	r1, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005602:	7cbb      	ldrb	r3, [r7, #18]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000

08005610 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800561a:	f043 0304 	orr.w	r3, r3, #4
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000

08005630 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800563e:	4b73      	ldr	r3, [pc, #460]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800564a:	4b70      	ldr	r3, [pc, #448]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0203 	and.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d10d      	bne.n	8005676 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
       ||
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005662:	4b6a      	ldr	r3, [pc, #424]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
       ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d044      	beq.n	8005700 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
 800567a:	e041      	b.n	8005700 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d00c      	beq.n	800569e <RCCEx_PLLSAI1_Config+0x6e>
 8005684:	2b03      	cmp	r3, #3
 8005686:	d013      	beq.n	80056b0 <RCCEx_PLLSAI1_Config+0x80>
 8005688:	2b01      	cmp	r3, #1
 800568a:	d120      	bne.n	80056ce <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800568c:	4b5f      	ldr	r3, [pc, #380]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d11d      	bne.n	80056d4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569c:	e01a      	b.n	80056d4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800569e:	4b5b      	ldr	r3, [pc, #364]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d116      	bne.n	80056d8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ae:	e013      	b.n	80056d8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056b0:	4b56      	ldr	r3, [pc, #344]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10f      	bne.n	80056dc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056bc:	4b53      	ldr	r3, [pc, #332]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056cc:	e006      	b.n	80056dc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	73fb      	strb	r3, [r7, #15]
      break;
 80056d2:	e004      	b.n	80056de <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056d4:	bf00      	nop
 80056d6:	e002      	b.n	80056de <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056d8:	bf00      	nop
 80056da:	e000      	b.n	80056de <RCCEx_PLLSAI1_Config+0xae>
      break;
 80056dc:	bf00      	nop
    }

    if(status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056e4:	4b49      	ldr	r3, [pc, #292]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6819      	ldr	r1, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	430b      	orrs	r3, r1
 80056fa:	4944      	ldr	r1, [pc, #272]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d17d      	bne.n	8005802 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005706:	4b41      	ldr	r3, [pc, #260]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a40      	ldr	r2, [pc, #256]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 800570c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005712:	f7fc fd59 	bl	80021c8 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005718:	e009      	b.n	800572e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800571a:	f7fc fd55 	bl	80021c8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d902      	bls.n	800572e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	73fb      	strb	r3, [r7, #15]
        break;
 800572c:	e005      	b.n	800573a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800572e:	4b37      	ldr	r3, [pc, #220]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1ef      	bne.n	800571a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d160      	bne.n	8005802 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d111      	bne.n	800576a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005746:	4b31      	ldr	r3, [pc, #196]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800574e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6892      	ldr	r2, [r2, #8]
 8005756:	0211      	lsls	r1, r2, #8
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	68d2      	ldr	r2, [r2, #12]
 800575c:	0912      	lsrs	r2, r2, #4
 800575e:	0452      	lsls	r2, r2, #17
 8005760:	430a      	orrs	r2, r1
 8005762:	492a      	ldr	r1, [pc, #168]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005764:	4313      	orrs	r3, r2
 8005766:	610b      	str	r3, [r1, #16]
 8005768:	e027      	b.n	80057ba <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d112      	bne.n	8005796 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005770:	4b26      	ldr	r3, [pc, #152]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005778:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6892      	ldr	r2, [r2, #8]
 8005780:	0211      	lsls	r1, r2, #8
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6912      	ldr	r2, [r2, #16]
 8005786:	0852      	lsrs	r2, r2, #1
 8005788:	3a01      	subs	r2, #1
 800578a:	0552      	lsls	r2, r2, #21
 800578c:	430a      	orrs	r2, r1
 800578e:	491f      	ldr	r1, [pc, #124]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005790:	4313      	orrs	r3, r2
 8005792:	610b      	str	r3, [r1, #16]
 8005794:	e011      	b.n	80057ba <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005796:	4b1d      	ldr	r3, [pc, #116]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800579e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6892      	ldr	r2, [r2, #8]
 80057a6:	0211      	lsls	r1, r2, #8
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6952      	ldr	r2, [r2, #20]
 80057ac:	0852      	lsrs	r2, r2, #1
 80057ae:	3a01      	subs	r2, #1
 80057b0:	0652      	lsls	r2, r2, #25
 80057b2:	430a      	orrs	r2, r1
 80057b4:	4915      	ldr	r1, [pc, #84]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057ba:	4b14      	ldr	r3, [pc, #80]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c6:	f7fc fcff 	bl	80021c8 <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057cc:	e009      	b.n	80057e2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ce:	f7fc fcfb 	bl	80021c8 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d902      	bls.n	80057e2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	73fb      	strb	r3, [r7, #15]
          break;
 80057e0:	e005      	b.n	80057ee <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0ef      	beq.n	80057ce <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <RCCEx_PLLSAI1_Config+0x1dc>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40021000 	.word	0x40021000

08005810 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800581e:	4b68      	ldr	r3, [pc, #416]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d018      	beq.n	800585c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800582a:	4b65      	ldr	r3, [pc, #404]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f003 0203 	and.w	r2, r3, #3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d10d      	bne.n	8005856 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
       ||
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005842:	4b5f      	ldr	r3, [pc, #380]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
       ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d044      	beq.n	80058e0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
 800585a:	e041      	b.n	80058e0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b02      	cmp	r3, #2
 8005862:	d00c      	beq.n	800587e <RCCEx_PLLSAI2_Config+0x6e>
 8005864:	2b03      	cmp	r3, #3
 8005866:	d013      	beq.n	8005890 <RCCEx_PLLSAI2_Config+0x80>
 8005868:	2b01      	cmp	r3, #1
 800586a:	d120      	bne.n	80058ae <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800586c:	4b54      	ldr	r3, [pc, #336]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11d      	bne.n	80058b4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800587c:	e01a      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800587e:	4b50      	ldr	r3, [pc, #320]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800588e:	e013      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005890:	4b4b      	ldr	r3, [pc, #300]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10f      	bne.n	80058bc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800589c:	4b48      	ldr	r3, [pc, #288]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d109      	bne.n	80058bc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ac:	e006      	b.n	80058bc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
      break;
 80058b2:	e004      	b.n	80058be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058b4:	bf00      	nop
 80058b6:	e002      	b.n	80058be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <RCCEx_PLLSAI2_Config+0xae>
      break;
 80058bc:	bf00      	nop
    }

    if(status == HAL_OK)
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058c4:	4b3e      	ldr	r3, [pc, #248]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	430b      	orrs	r3, r1
 80058da:	4939      	ldr	r1, [pc, #228]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d167      	bne.n	80059b6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058e6:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a35      	ldr	r2, [pc, #212]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f2:	f7fc fc69 	bl	80021c8 <HAL_GetTick>
 80058f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058f8:	e009      	b.n	800590e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058fa:	f7fc fc65 	bl	80021c8 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d902      	bls.n	800590e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	73fb      	strb	r3, [r7, #15]
        break;
 800590c:	e005      	b.n	800591a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1ef      	bne.n	80058fa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d14a      	bne.n	80059b6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d111      	bne.n	800594a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005926:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800592e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6892      	ldr	r2, [r2, #8]
 8005936:	0211      	lsls	r1, r2, #8
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68d2      	ldr	r2, [r2, #12]
 800593c:	0912      	lsrs	r2, r2, #4
 800593e:	0452      	lsls	r2, r2, #17
 8005940:	430a      	orrs	r2, r1
 8005942:	491f      	ldr	r1, [pc, #124]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005944:	4313      	orrs	r3, r2
 8005946:	614b      	str	r3, [r1, #20]
 8005948:	e011      	b.n	800596e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005952:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6892      	ldr	r2, [r2, #8]
 800595a:	0211      	lsls	r1, r2, #8
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6912      	ldr	r2, [r2, #16]
 8005960:	0852      	lsrs	r2, r2, #1
 8005962:	3a01      	subs	r2, #1
 8005964:	0652      	lsls	r2, r2, #25
 8005966:	430a      	orrs	r2, r1
 8005968:	4915      	ldr	r1, [pc, #84]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800596a:	4313      	orrs	r3, r2
 800596c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800596e:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005978:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fc fc25 	bl	80021c8 <HAL_GetTick>
 800597e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005980:	e009      	b.n	8005996 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005982:	f7fc fc21 	bl	80021c8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d902      	bls.n	8005996 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	73fb      	strb	r3, [r7, #15]
          break;
 8005994:	e005      	b.n	80059a2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ef      	beq.n	8005982 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	4903      	ldr	r1, [pc, #12]	; (80059c0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000

080059c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e07c      	b.n	8005ad0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7fc f92f 	bl	8001c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a16:	d902      	bls.n	8005a1e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e002      	b.n	8005a24 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a2c:	d007      	beq.n	8005a3e <HAL_SPI_Init+0x7a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a36:	d002      	beq.n	8005a3e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a4e:	d903      	bls.n	8005a58 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	631a      	str	r2, [r3, #48]	; 0x30
 8005a56:	e002      	b.n	8005a5e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	ea42 0103 	orr.w	r1, r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	f003 0204 	and.w	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	ea42 0103 	orr.w	r1, r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e01d      	b.n	8005b26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f815 	bl	8005b2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f000 f986 	bl	8005e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0201 	orr.w	r2, r2, #1
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <HAL_TIM_Base_Start_IT+0x50>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d00b      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x42>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d007      	beq.n	8005b86 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0201 	orr.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	00010007 	.word	0x00010007

08005b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0202 	mvn.w	r2, #2
 8005bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f905 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f8f7 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f908 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0204 	mvn.w	r2, #4
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8db 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f8cd 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f8de 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0208 	mvn.w	r2, #8
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2204      	movs	r2, #4
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8b1 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f8a3 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f8b4 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f887 	bl	8005dea <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f879 	bl	8005dd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f88a 	bl	8005dfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0201 	mvn.w	r2, #1
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb fe0e 	bl	8001938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f914 	bl	8005f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d56:	d10e      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d107      	bne.n	8005d76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f907 	bl	8005f84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d10e      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d107      	bne.n	8005da2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f838 	bl	8005e12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d10e      	bne.n	8005dce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f06f 0220 	mvn.w	r2, #32
 8005dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8c7 	bl	8005f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a40      	ldr	r2, [pc, #256]	; (8005f3c <TIM_Base_SetConfig+0x114>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e46:	d00f      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a3d      	ldr	r2, [pc, #244]	; (8005f40 <TIM_Base_SetConfig+0x118>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a3c      	ldr	r2, [pc, #240]	; (8005f44 <TIM_Base_SetConfig+0x11c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d007      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3b      	ldr	r2, [pc, #236]	; (8005f48 <TIM_Base_SetConfig+0x120>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3a      	ldr	r2, [pc, #232]	; (8005f4c <TIM_Base_SetConfig+0x124>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a2f      	ldr	r2, [pc, #188]	; (8005f3c <TIM_Base_SetConfig+0x114>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d01f      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d01b      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2c      	ldr	r2, [pc, #176]	; (8005f40 <TIM_Base_SetConfig+0x118>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d017      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a2b      	ldr	r2, [pc, #172]	; (8005f44 <TIM_Base_SetConfig+0x11c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2a      	ldr	r2, [pc, #168]	; (8005f48 <TIM_Base_SetConfig+0x120>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00f      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a29      	ldr	r2, [pc, #164]	; (8005f4c <TIM_Base_SetConfig+0x124>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d00b      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <TIM_Base_SetConfig+0x128>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <TIM_Base_SetConfig+0x12c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <TIM_Base_SetConfig+0x9a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a26      	ldr	r2, [pc, #152]	; (8005f58 <TIM_Base_SetConfig+0x130>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d108      	bne.n	8005ed4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a10      	ldr	r2, [pc, #64]	; (8005f3c <TIM_Base_SetConfig+0x114>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00f      	beq.n	8005f20 <TIM_Base_SetConfig+0xf8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <TIM_Base_SetConfig+0x124>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_Base_SetConfig+0xf8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a11      	ldr	r2, [pc, #68]	; (8005f50 <TIM_Base_SetConfig+0x128>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d007      	beq.n	8005f20 <TIM_Base_SetConfig+0xf8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a10      	ldr	r2, [pc, #64]	; (8005f54 <TIM_Base_SetConfig+0x12c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0xf8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a0f      	ldr	r2, [pc, #60]	; (8005f58 <TIM_Base_SetConfig+0x130>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d103      	bne.n	8005f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	615a      	str	r2, [r3, #20]
}
 8005f2e:	bf00      	nop
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40000400 	.word	0x40000400
 8005f44:	40000800 	.word	0x40000800
 8005f48:	40000c00 	.word	0x40000c00
 8005f4c:	40013400 	.word	0x40013400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40014400 	.word	0x40014400
 8005f58:	40014800 	.word	0x40014800

08005f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e040      	b.n	800602c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fb fe8e 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2224      	movs	r2, #36	; 0x24
 8005fc4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 0201 	bic.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fb0c 	bl	80065f4 <UART_SetConfig>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e022      	b.n	800602c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fe48 	bl	8006c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fecf 	bl	8006dc8 <UART_CheckIdleState>
 800602a:	4603      	mov	r3, r0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08a      	sub	sp, #40	; 0x28
 8006038:	af02      	add	r7, sp, #8
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006048:	2b20      	cmp	r3, #32
 800604a:	f040 8081 	bne.w	8006150 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <HAL_UART_Transmit+0x26>
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e079      	b.n	8006152 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UART_Transmit+0x38>
 8006068:	2302      	movs	r3, #2
 800606a:	e072      	b.n	8006152 <HAL_UART_Transmit+0x11e>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2221      	movs	r2, #33	; 0x21
 800607e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006080:	f7fc f8a2 	bl	80021c8 <HAL_GetTick>
 8006084:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	88fa      	ldrh	r2, [r7, #6]
 800608a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609e:	d108      	bne.n	80060b2 <HAL_UART_Transmit+0x7e>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e003      	b.n	80060ba <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060ba:	e02d      	b.n	8006118 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2200      	movs	r2, #0
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fec3 	bl	8006e52 <UART_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e03d      	b.n	8006152 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	881a      	ldrh	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e8:	b292      	uxth	r2, r2
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	3302      	adds	r3, #2
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e008      	b.n	8006106 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b292      	uxth	r2, r2
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3301      	adds	r3, #1
 8006104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1cb      	bne.n	80060bc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2200      	movs	r2, #0
 800612c:	2140      	movs	r1, #64	; 0x40
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fe8f 	bl	8006e52 <UART_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e009      	b.n	8006152 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2220      	movs	r2, #32
 8006142:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	e000      	b.n	8006152 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006150:	2302      	movs	r3, #2
  }
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	4613      	mov	r3, r2
 8006168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800616e:	2b20      	cmp	r3, #32
 8006170:	d144      	bne.n	80061fc <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_UART_Transmit_IT+0x22>
 8006178:	88fb      	ldrh	r3, [r7, #6]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e03d      	b.n	80061fe <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_UART_Transmit_IT+0x34>
 800618c:	2302      	movs	r3, #2
 800618e:	e036      	b.n	80061fe <HAL_UART_Transmit_IT+0xa2>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	88fa      	ldrh	r2, [r7, #6]
 80061a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2221      	movs	r2, #33	; 0x21
 80061be:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d107      	bne.n	80061da <HAL_UART_Transmit_IT+0x7e>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4a0d      	ldr	r2, [pc, #52]	; (800620c <HAL_UART_Transmit_IT+0xb0>)
 80061d6:	665a      	str	r2, [r3, #100]	; 0x64
 80061d8:	e002      	b.n	80061e0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a0c      	ldr	r2, [pc, #48]	; (8006210 <HAL_UART_Transmit_IT+0xb4>)
 80061de:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061f6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e000      	b.n	80061fe <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
  }
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	08006fc3 	.word	0x08006fc3
 8006210:	08006f4f 	.word	0x08006f4f

08006214 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006226:	2b20      	cmp	r3, #32
 8006228:	f040 808a 	bne.w	8006340 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Receive_IT+0x24>
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e082      	b.n	8006342 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_UART_Receive_IT+0x36>
 8006246:	2302      	movs	r3, #2
 8006248:	e07b      	b.n	8006342 <HAL_UART_Receive_IT+0x12e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006276:	d10e      	bne.n	8006296 <HAL_UART_Receive_IT+0x82>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <HAL_UART_Receive_IT+0x78>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006286:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800628a:	e02d      	b.n	80062e8 <HAL_UART_Receive_IT+0xd4>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	22ff      	movs	r2, #255	; 0xff
 8006290:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006294:	e028      	b.n	80062e8 <HAL_UART_Receive_IT+0xd4>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10d      	bne.n	80062ba <HAL_UART_Receive_IT+0xa6>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <HAL_UART_Receive_IT+0x9c>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062ae:	e01b      	b.n	80062e8 <HAL_UART_Receive_IT+0xd4>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	227f      	movs	r2, #127	; 0x7f
 80062b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062b8:	e016      	b.n	80062e8 <HAL_UART_Receive_IT+0xd4>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062c2:	d10d      	bne.n	80062e0 <HAL_UART_Receive_IT+0xcc>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_UART_Receive_IT+0xc2>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	227f      	movs	r2, #127	; 0x7f
 80062d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062d4:	e008      	b.n	80062e8 <HAL_UART_Receive_IT+0xd4>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	223f      	movs	r2, #63	; 0x3f
 80062da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80062de:	e003      	b.n	80062e8 <HAL_UART_Receive_IT+0xd4>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2222      	movs	r2, #34	; 0x22
 80062f2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630c:	d107      	bne.n	800631e <HAL_UART_Receive_IT+0x10a>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a0d      	ldr	r2, [pc, #52]	; (8006350 <HAL_UART_Receive_IT+0x13c>)
 800631a:	661a      	str	r2, [r3, #96]	; 0x60
 800631c:	e002      	b.n	8006324 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <HAL_UART_Receive_IT+0x140>)
 8006322:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800633a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	e000      	b.n	8006342 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8006340:	2302      	movs	r3, #2
  }
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	0800711b 	.word	0x0800711b
 8006354:	08007071 	.word	0x08007071

08006358 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d113      	bne.n	80063ae <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00e      	beq.n	80063ae <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 80ff 	beq.w	80065a2 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
      }
      return;
 80063ac:	e0f9      	b.n	80065a2 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 80c1 	beq.w	8006538 <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d105      	bne.n	80063cc <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80b6 	beq.w	8006538 <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00e      	beq.n	80063f4 <HAL_UART_IRQHandler+0x9c>
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ec:	f043 0201 	orr.w	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00e      	beq.n	800641c <HAL_UART_IRQHandler+0xc4>
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2202      	movs	r2, #2
 800640e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006414:	f043 0204 	orr.w	r2, r3, #4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00e      	beq.n	8006444 <HAL_UART_IRQHandler+0xec>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2204      	movs	r2, #4
 8006436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643c:	f043 0202 	orr.w	r2, r3, #2
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d013      	beq.n	8006476 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2208      	movs	r2, #8
 8006468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646e:	f043 0208 	orr.w	r2, r3, #8
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 8093 	beq.w	80065a6 <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00c      	beq.n	80064a4 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d004      	beq.n	80064c2 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d031      	beq.n	8006526 <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 fd0d 	bl	8006ee2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d123      	bne.n	800651e <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d013      	beq.n	8006516 <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f2:	4a30      	ldr	r2, [pc, #192]	; (80065b4 <HAL_UART_IRQHandler+0x25c>)
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fd f9dc 	bl	80038b8 <HAL_DMA_Abort_IT>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006510:	4610      	mov	r0, r2
 8006512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	e00e      	b.n	8006534 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f862 	bl	80065e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800651c:	e00a      	b.n	8006534 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f85e 	bl	80065e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	e006      	b.n	8006534 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f85a 	bl	80065e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006532:	e038      	b.n	80065a6 <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	bf00      	nop
    return;
 8006536:	e036      	b.n	80065a6 <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <HAL_UART_IRQHandler+0x206>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fe34 	bl	80071c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800655c:	e026      	b.n	80065ac <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00d      	beq.n	8006584 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b00      	cmp	r3, #0
 8006570:	d008      	beq.n	8006584 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006576:	2b00      	cmp	r3, #0
 8006578:	d017      	beq.n	80065aa <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
    }
    return;
 8006582:	e012      	b.n	80065aa <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00e      	beq.n	80065ac <HAL_UART_IRQHandler+0x254>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fd50 	bl	800703e <UART_EndTransmit_IT>
    return;
 800659e:	bf00      	nop
 80065a0:	e004      	b.n	80065ac <HAL_UART_IRQHandler+0x254>
      return;
 80065a2:	bf00      	nop
 80065a4:	e002      	b.n	80065ac <HAL_UART_IRQHandler+0x254>
    return;
 80065a6:	bf00      	nop
 80065a8:	e000      	b.n	80065ac <HAL_UART_IRQHandler+0x254>
    return;
 80065aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80065ac:	3720      	adds	r7, #32
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	08006f23 	.word	0x08006f23

080065b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80065f8:	b088      	sub	sp, #32
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	4313      	orrs	r3, r2
 8006620:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4bac      	ldr	r3, [pc, #688]	; (80068dc <UART_SetConfig+0x2e8>)
 800662a:	4013      	ands	r3, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	69f9      	ldr	r1, [r7, #28]
 8006632:	430b      	orrs	r3, r1
 8006634:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4aa2      	ldr	r2, [pc, #648]	; (80068e0 <UART_SetConfig+0x2ec>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	4313      	orrs	r3, r2
 8006664:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a99      	ldr	r2, [pc, #612]	; (80068e4 <UART_SetConfig+0x2f0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d121      	bne.n	80066c8 <UART_SetConfig+0xd4>
 8006684:	4b98      	ldr	r3, [pc, #608]	; (80068e8 <UART_SetConfig+0x2f4>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	2b03      	cmp	r3, #3
 8006690:	d816      	bhi.n	80066c0 <UART_SetConfig+0xcc>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <UART_SetConfig+0xa4>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066a9 	.word	0x080066a9
 800669c:	080066b5 	.word	0x080066b5
 80066a0:	080066af 	.word	0x080066af
 80066a4:	080066bb 	.word	0x080066bb
 80066a8:	2301      	movs	r3, #1
 80066aa:	76fb      	strb	r3, [r7, #27]
 80066ac:	e0e8      	b.n	8006880 <UART_SetConfig+0x28c>
 80066ae:	2302      	movs	r3, #2
 80066b0:	76fb      	strb	r3, [r7, #27]
 80066b2:	e0e5      	b.n	8006880 <UART_SetConfig+0x28c>
 80066b4:	2304      	movs	r3, #4
 80066b6:	76fb      	strb	r3, [r7, #27]
 80066b8:	e0e2      	b.n	8006880 <UART_SetConfig+0x28c>
 80066ba:	2308      	movs	r3, #8
 80066bc:	76fb      	strb	r3, [r7, #27]
 80066be:	e0df      	b.n	8006880 <UART_SetConfig+0x28c>
 80066c0:	2310      	movs	r3, #16
 80066c2:	76fb      	strb	r3, [r7, #27]
 80066c4:	bf00      	nop
 80066c6:	e0db      	b.n	8006880 <UART_SetConfig+0x28c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a87      	ldr	r2, [pc, #540]	; (80068ec <UART_SetConfig+0x2f8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d134      	bne.n	800673c <UART_SetConfig+0x148>
 80066d2:	4b85      	ldr	r3, [pc, #532]	; (80068e8 <UART_SetConfig+0x2f4>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	d829      	bhi.n	8006734 <UART_SetConfig+0x140>
 80066e0:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <UART_SetConfig+0xf4>)
 80066e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e6:	bf00      	nop
 80066e8:	0800671d 	.word	0x0800671d
 80066ec:	08006735 	.word	0x08006735
 80066f0:	08006735 	.word	0x08006735
 80066f4:	08006735 	.word	0x08006735
 80066f8:	08006729 	.word	0x08006729
 80066fc:	08006735 	.word	0x08006735
 8006700:	08006735 	.word	0x08006735
 8006704:	08006735 	.word	0x08006735
 8006708:	08006723 	.word	0x08006723
 800670c:	08006735 	.word	0x08006735
 8006710:	08006735 	.word	0x08006735
 8006714:	08006735 	.word	0x08006735
 8006718:	0800672f 	.word	0x0800672f
 800671c:	2300      	movs	r3, #0
 800671e:	76fb      	strb	r3, [r7, #27]
 8006720:	e0ae      	b.n	8006880 <UART_SetConfig+0x28c>
 8006722:	2302      	movs	r3, #2
 8006724:	76fb      	strb	r3, [r7, #27]
 8006726:	e0ab      	b.n	8006880 <UART_SetConfig+0x28c>
 8006728:	2304      	movs	r3, #4
 800672a:	76fb      	strb	r3, [r7, #27]
 800672c:	e0a8      	b.n	8006880 <UART_SetConfig+0x28c>
 800672e:	2308      	movs	r3, #8
 8006730:	76fb      	strb	r3, [r7, #27]
 8006732:	e0a5      	b.n	8006880 <UART_SetConfig+0x28c>
 8006734:	2310      	movs	r3, #16
 8006736:	76fb      	strb	r3, [r7, #27]
 8006738:	bf00      	nop
 800673a:	e0a1      	b.n	8006880 <UART_SetConfig+0x28c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a6b      	ldr	r2, [pc, #428]	; (80068f0 <UART_SetConfig+0x2fc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d120      	bne.n	8006788 <UART_SetConfig+0x194>
 8006746:	4b68      	ldr	r3, [pc, #416]	; (80068e8 <UART_SetConfig+0x2f4>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006750:	2b10      	cmp	r3, #16
 8006752:	d00f      	beq.n	8006774 <UART_SetConfig+0x180>
 8006754:	2b10      	cmp	r3, #16
 8006756:	d802      	bhi.n	800675e <UART_SetConfig+0x16a>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <UART_SetConfig+0x174>
 800675c:	e010      	b.n	8006780 <UART_SetConfig+0x18c>
 800675e:	2b20      	cmp	r3, #32
 8006760:	d005      	beq.n	800676e <UART_SetConfig+0x17a>
 8006762:	2b30      	cmp	r3, #48	; 0x30
 8006764:	d009      	beq.n	800677a <UART_SetConfig+0x186>
 8006766:	e00b      	b.n	8006780 <UART_SetConfig+0x18c>
 8006768:	2300      	movs	r3, #0
 800676a:	76fb      	strb	r3, [r7, #27]
 800676c:	e088      	b.n	8006880 <UART_SetConfig+0x28c>
 800676e:	2302      	movs	r3, #2
 8006770:	76fb      	strb	r3, [r7, #27]
 8006772:	e085      	b.n	8006880 <UART_SetConfig+0x28c>
 8006774:	2304      	movs	r3, #4
 8006776:	76fb      	strb	r3, [r7, #27]
 8006778:	e082      	b.n	8006880 <UART_SetConfig+0x28c>
 800677a:	2308      	movs	r3, #8
 800677c:	76fb      	strb	r3, [r7, #27]
 800677e:	e07f      	b.n	8006880 <UART_SetConfig+0x28c>
 8006780:	2310      	movs	r3, #16
 8006782:	76fb      	strb	r3, [r7, #27]
 8006784:	bf00      	nop
 8006786:	e07b      	b.n	8006880 <UART_SetConfig+0x28c>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a59      	ldr	r2, [pc, #356]	; (80068f4 <UART_SetConfig+0x300>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d120      	bne.n	80067d4 <UART_SetConfig+0x1e0>
 8006792:	4b55      	ldr	r3, [pc, #340]	; (80068e8 <UART_SetConfig+0x2f4>)
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800679c:	2b40      	cmp	r3, #64	; 0x40
 800679e:	d00f      	beq.n	80067c0 <UART_SetConfig+0x1cc>
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d802      	bhi.n	80067aa <UART_SetConfig+0x1b6>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <UART_SetConfig+0x1c0>
 80067a8:	e010      	b.n	80067cc <UART_SetConfig+0x1d8>
 80067aa:	2b80      	cmp	r3, #128	; 0x80
 80067ac:	d005      	beq.n	80067ba <UART_SetConfig+0x1c6>
 80067ae:	2bc0      	cmp	r3, #192	; 0xc0
 80067b0:	d009      	beq.n	80067c6 <UART_SetConfig+0x1d2>
 80067b2:	e00b      	b.n	80067cc <UART_SetConfig+0x1d8>
 80067b4:	2300      	movs	r3, #0
 80067b6:	76fb      	strb	r3, [r7, #27]
 80067b8:	e062      	b.n	8006880 <UART_SetConfig+0x28c>
 80067ba:	2302      	movs	r3, #2
 80067bc:	76fb      	strb	r3, [r7, #27]
 80067be:	e05f      	b.n	8006880 <UART_SetConfig+0x28c>
 80067c0:	2304      	movs	r3, #4
 80067c2:	76fb      	strb	r3, [r7, #27]
 80067c4:	e05c      	b.n	8006880 <UART_SetConfig+0x28c>
 80067c6:	2308      	movs	r3, #8
 80067c8:	76fb      	strb	r3, [r7, #27]
 80067ca:	e059      	b.n	8006880 <UART_SetConfig+0x28c>
 80067cc:	2310      	movs	r3, #16
 80067ce:	76fb      	strb	r3, [r7, #27]
 80067d0:	bf00      	nop
 80067d2:	e055      	b.n	8006880 <UART_SetConfig+0x28c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a47      	ldr	r2, [pc, #284]	; (80068f8 <UART_SetConfig+0x304>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d124      	bne.n	8006828 <UART_SetConfig+0x234>
 80067de:	4b42      	ldr	r3, [pc, #264]	; (80068e8 <UART_SetConfig+0x2f4>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ec:	d012      	beq.n	8006814 <UART_SetConfig+0x220>
 80067ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f2:	d802      	bhi.n	80067fa <UART_SetConfig+0x206>
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <UART_SetConfig+0x214>
 80067f8:	e012      	b.n	8006820 <UART_SetConfig+0x22c>
 80067fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fe:	d006      	beq.n	800680e <UART_SetConfig+0x21a>
 8006800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006804:	d009      	beq.n	800681a <UART_SetConfig+0x226>
 8006806:	e00b      	b.n	8006820 <UART_SetConfig+0x22c>
 8006808:	2300      	movs	r3, #0
 800680a:	76fb      	strb	r3, [r7, #27]
 800680c:	e038      	b.n	8006880 <UART_SetConfig+0x28c>
 800680e:	2302      	movs	r3, #2
 8006810:	76fb      	strb	r3, [r7, #27]
 8006812:	e035      	b.n	8006880 <UART_SetConfig+0x28c>
 8006814:	2304      	movs	r3, #4
 8006816:	76fb      	strb	r3, [r7, #27]
 8006818:	e032      	b.n	8006880 <UART_SetConfig+0x28c>
 800681a:	2308      	movs	r3, #8
 800681c:	76fb      	strb	r3, [r7, #27]
 800681e:	e02f      	b.n	8006880 <UART_SetConfig+0x28c>
 8006820:	2310      	movs	r3, #16
 8006822:	76fb      	strb	r3, [r7, #27]
 8006824:	bf00      	nop
 8006826:	e02b      	b.n	8006880 <UART_SetConfig+0x28c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a2c      	ldr	r2, [pc, #176]	; (80068e0 <UART_SetConfig+0x2ec>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d124      	bne.n	800687c <UART_SetConfig+0x288>
 8006832:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <UART_SetConfig+0x2f4>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006840:	d012      	beq.n	8006868 <UART_SetConfig+0x274>
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006846:	d802      	bhi.n	800684e <UART_SetConfig+0x25a>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <UART_SetConfig+0x268>
 800684c:	e012      	b.n	8006874 <UART_SetConfig+0x280>
 800684e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006852:	d006      	beq.n	8006862 <UART_SetConfig+0x26e>
 8006854:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006858:	d009      	beq.n	800686e <UART_SetConfig+0x27a>
 800685a:	e00b      	b.n	8006874 <UART_SetConfig+0x280>
 800685c:	2300      	movs	r3, #0
 800685e:	76fb      	strb	r3, [r7, #27]
 8006860:	e00e      	b.n	8006880 <UART_SetConfig+0x28c>
 8006862:	2302      	movs	r3, #2
 8006864:	76fb      	strb	r3, [r7, #27]
 8006866:	e00b      	b.n	8006880 <UART_SetConfig+0x28c>
 8006868:	2304      	movs	r3, #4
 800686a:	76fb      	strb	r3, [r7, #27]
 800686c:	e008      	b.n	8006880 <UART_SetConfig+0x28c>
 800686e:	2308      	movs	r3, #8
 8006870:	76fb      	strb	r3, [r7, #27]
 8006872:	e005      	b.n	8006880 <UART_SetConfig+0x28c>
 8006874:	2310      	movs	r3, #16
 8006876:	76fb      	strb	r3, [r7, #27]
 8006878:	bf00      	nop
 800687a:	e001      	b.n	8006880 <UART_SetConfig+0x28c>
 800687c:	2310      	movs	r3, #16
 800687e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <UART_SetConfig+0x2ec>)
 8006886:	4293      	cmp	r3, r2
 8006888:	f040 80fa 	bne.w	8006a80 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800688c:	7efb      	ldrb	r3, [r7, #27]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d836      	bhi.n	8006900 <UART_SetConfig+0x30c>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <UART_SetConfig+0x2a4>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068bd 	.word	0x080068bd
 800689c:	08006901 	.word	0x08006901
 80068a0:	080068c5 	.word	0x080068c5
 80068a4:	08006901 	.word	0x08006901
 80068a8:	080068cb 	.word	0x080068cb
 80068ac:	08006901 	.word	0x08006901
 80068b0:	08006901 	.word	0x08006901
 80068b4:	08006901 	.word	0x08006901
 80068b8:	080068d3 	.word	0x080068d3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80068bc:	f7fe fb04 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 80068c0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068c2:	e020      	b.n	8006906 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80068c4:	4b0d      	ldr	r3, [pc, #52]	; (80068fc <UART_SetConfig+0x308>)
 80068c6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068c8:	e01d      	b.n	8006906 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80068ca:	f7fe fa67 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 80068ce:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068d0:	e019      	b.n	8006906 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80068d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068d6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80068d8:	e015      	b.n	8006906 <UART_SetConfig+0x312>
 80068da:	bf00      	nop
 80068dc:	efff69f3 	.word	0xefff69f3
 80068e0:	40008000 	.word	0x40008000
 80068e4:	40013800 	.word	0x40013800
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40004400 	.word	0x40004400
 80068f0:	40004800 	.word	0x40004800
 80068f4:	40004c00 	.word	0x40004c00
 80068f8:	40005000 	.word	0x40005000
 80068fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	74fb      	strb	r3, [r7, #19]
        break;
 8006904:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 81ac 	beq.w	8006c66 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4413      	add	r3, r2
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	429a      	cmp	r2, r3
 800691c:	d305      	bcc.n	800692a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d902      	bls.n	8006930 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	74fb      	strb	r3, [r7, #19]
 800692e:	e19a      	b.n	8006c66 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8006930:	7efb      	ldrb	r3, [r7, #27]
 8006932:	2b08      	cmp	r3, #8
 8006934:	f200 8091 	bhi.w	8006a5a <UART_SetConfig+0x466>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0x34c>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006965 	.word	0x08006965
 8006944:	08006a5b 	.word	0x08006a5b
 8006948:	080069b1 	.word	0x080069b1
 800694c:	08006a5b 	.word	0x08006a5b
 8006950:	080069e5 	.word	0x080069e5
 8006954:	08006a5b 	.word	0x08006a5b
 8006958:	08006a5b 	.word	0x08006a5b
 800695c:	08006a5b 	.word	0x08006a5b
 8006960:	08006a31 	.word	0x08006a31
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006964:	f7fe fab0 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 8006968:	4603      	mov	r3, r0
 800696a:	4619      	mov	r1, r3
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	f04f 0300 	mov.w	r3, #0
 8006974:	f04f 0400 	mov.w	r4, #0
 8006978:	0214      	lsls	r4, r2, #8
 800697a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800697e:	020b      	lsls	r3, r1, #8
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6852      	ldr	r2, [r2, #4]
 8006984:	0852      	lsrs	r2, r2, #1
 8006986:	4611      	mov	r1, r2
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	eb13 0b01 	adds.w	fp, r3, r1
 8006990:	eb44 0c02 	adc.w	ip, r4, r2
 8006994:	4658      	mov	r0, fp
 8006996:	4661      	mov	r1, ip
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f04f 0400 	mov.w	r4, #0
 80069a0:	461a      	mov	r2, r3
 80069a2:	4623      	mov	r3, r4
 80069a4:	f7f9 fc6c 	bl	8000280 <__aeabi_uldivmod>
 80069a8:	4603      	mov	r3, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069ae:	e057      	b.n	8006a60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	085b      	lsrs	r3, r3, #1
 80069b6:	f04f 0400 	mov.w	r4, #0
 80069ba:	49b1      	ldr	r1, [pc, #708]	; (8006c80 <UART_SetConfig+0x68c>)
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	eb13 0b01 	adds.w	fp, r3, r1
 80069c4:	eb44 0c02 	adc.w	ip, r4, r2
 80069c8:	4658      	mov	r0, fp
 80069ca:	4661      	mov	r1, ip
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f04f 0400 	mov.w	r4, #0
 80069d4:	461a      	mov	r2, r3
 80069d6:	4623      	mov	r3, r4
 80069d8:	f7f9 fc52 	bl	8000280 <__aeabi_uldivmod>
 80069dc:	4603      	mov	r3, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80069e2:	e03d      	b.n	8006a60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80069e4:	f7fe f9da 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 80069e8:	4603      	mov	r3, r0
 80069ea:	4619      	mov	r1, r3
 80069ec:	f04f 0200 	mov.w	r2, #0
 80069f0:	f04f 0300 	mov.w	r3, #0
 80069f4:	f04f 0400 	mov.w	r4, #0
 80069f8:	0214      	lsls	r4, r2, #8
 80069fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80069fe:	020b      	lsls	r3, r1, #8
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6852      	ldr	r2, [r2, #4]
 8006a04:	0852      	lsrs	r2, r2, #1
 8006a06:	4611      	mov	r1, r2
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	eb13 0b01 	adds.w	fp, r3, r1
 8006a10:	eb44 0c02 	adc.w	ip, r4, r2
 8006a14:	4658      	mov	r0, fp
 8006a16:	4661      	mov	r1, ip
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f04f 0400 	mov.w	r4, #0
 8006a20:	461a      	mov	r2, r3
 8006a22:	4623      	mov	r3, r4
 8006a24:	f7f9 fc2c 	bl	8000280 <__aeabi_uldivmod>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a2e:	e017      	b.n	8006a60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	f04f 0400 	mov.w	r4, #0
 8006a3a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006a3e:	f144 0100 	adc.w	r1, r4, #0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f04f 0400 	mov.w	r4, #0
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4623      	mov	r3, r4
 8006a4e:	f7f9 fc17 	bl	8000280 <__aeabi_uldivmod>
 8006a52:	4603      	mov	r3, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006a58:	e002      	b.n	8006a60 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	74fb      	strb	r3, [r7, #19]
            break;
 8006a5e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a66:	d308      	bcc.n	8006a7a <UART_SetConfig+0x486>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6e:	d204      	bcs.n	8006a7a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e0f5      	b.n	8006c66 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	74fb      	strb	r3, [r7, #19]
 8006a7e:	e0f2      	b.n	8006c66 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a88:	d17f      	bne.n	8006b8a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8006a8a:	7efb      	ldrb	r3, [r7, #27]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d85c      	bhi.n	8006b4a <UART_SetConfig+0x556>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x4a4>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006adb 	.word	0x08006adb
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006b4b 	.word	0x08006b4b
 8006aa8:	08006b15 	.word	0x08006b15
 8006aac:	08006b4b 	.word	0x08006b4b
 8006ab0:	08006b4b 	.word	0x08006b4b
 8006ab4:	08006b4b 	.word	0x08006b4b
 8006ab8:	08006b33 	.word	0x08006b33
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006abc:	f7fe fa04 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	005a      	lsls	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	441a      	add	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ad8:	e03a      	b.n	8006b50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006ada:	f7fe fa0b 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	005a      	lsls	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	085b      	lsrs	r3, r3, #1
 8006ae8:	441a      	add	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006af6:	e02b      	b.n	8006b50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006b02:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6852      	ldr	r2, [r2, #4]
 8006b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b12:	e01d      	b.n	8006b50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006b14:	f7fe f942 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	005a      	lsls	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	441a      	add	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b30:	e00e      	b.n	8006b50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b48:	e002      	b.n	8006b50 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	74fb      	strb	r3, [r7, #19]
        break;
 8006b4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b0f      	cmp	r3, #15
 8006b54:	d916      	bls.n	8006b84 <UART_SetConfig+0x590>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5c:	d212      	bcs.n	8006b84 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f023 030f 	bic.w	r3, r3, #15
 8006b66:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	897b      	ldrh	r3, [r7, #10]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	897a      	ldrh	r2, [r7, #10]
 8006b80:	60da      	str	r2, [r3, #12]
 8006b82:	e070      	b.n	8006c66 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	74fb      	strb	r3, [r7, #19]
 8006b88:	e06d      	b.n	8006c66 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8006b8a:	7efb      	ldrb	r3, [r7, #27]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d859      	bhi.n	8006c44 <UART_SetConfig+0x650>
 8006b90:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <UART_SetConfig+0x5a4>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006bbd 	.word	0x08006bbd
 8006b9c:	08006bd9 	.word	0x08006bd9
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006c45 	.word	0x08006c45
 8006ba8:	08006c11 	.word	0x08006c11
 8006bac:	08006c45 	.word	0x08006c45
 8006bb0:	08006c45 	.word	0x08006c45
 8006bb4:	08006c45 	.word	0x08006c45
 8006bb8:	08006c2d 	.word	0x08006c2d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006bbc:	f7fe f984 	bl	8004ec8 <HAL_RCC_GetPCLK1Freq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	441a      	add	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bd6:	e038      	b.n	8006c4a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006bd8:	f7fe f98c 	bl	8004ef4 <HAL_RCC_GetPCLK2Freq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006bf2:	e02a      	b.n	8006c4a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	085b      	lsrs	r3, r3, #1
 8006bfa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006bfe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6852      	ldr	r2, [r2, #4]
 8006c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c0e:	e01c      	b.n	8006c4a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c10:	f7fe f8c4 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8006c14:	4602      	mov	r2, r0
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c2a:	e00e      	b.n	8006c4a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006c42:	e002      	b.n	8006c4a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	74fb      	strb	r3, [r7, #19]
        break;
 8006c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b0f      	cmp	r3, #15
 8006c4e:	d908      	bls.n	8006c62 <UART_SetConfig+0x66e>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c56:	d204      	bcs.n	8006c62 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	60da      	str	r2, [r3, #12]
 8006c60:	e001      	b.n	8006c66 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006c7e:	bf00      	nop
 8006c80:	f4240000 	.word	0xf4240000

08006c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d01a      	beq.n	8006d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d82:	d10a      	bne.n	8006d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	605a      	str	r2, [r3, #4]
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006dd6:	f7fb f9f7 	bl	80021c8 <HAL_GetTick>
 8006dda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b08      	cmp	r3, #8
 8006de8:	d10e      	bne.n	8006e08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f82a 	bl	8006e52 <UART_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e020      	b.n	8006e4a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d10e      	bne.n	8006e34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e1a:	9300      	str	r3, [sp, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f814 	bl	8006e52 <UART_WaitOnFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e00a      	b.n	8006e4a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	60f8      	str	r0, [r7, #12]
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	603b      	str	r3, [r7, #0]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e62:	e02a      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6a:	d026      	beq.n	8006eba <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6c:	f7fb f9ac 	bl	80021c8 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	69ba      	ldr	r2, [r7, #24]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d302      	bcc.n	8006e82 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d11b      	bne.n	8006eba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e00f      	b.n	8006eda <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69da      	ldr	r2, [r3, #28]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	bf0c      	ite	eq
 8006eca:	2301      	moveq	r3, #1
 8006ecc:	2300      	movne	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d0c5      	beq.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ef8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b084      	sub	sp, #16
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f7ff fb4d 	bl	80065e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f46:	bf00      	nop
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5a:	2b21      	cmp	r3, #33	; 0x21
 8006f5c:	d12b      	bne.n	8006fb6 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d110      	bne.n	8006f8c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f88:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006f8a:	e014      	b.n	8006fb6 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	b292      	uxth	r2, r2
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fce:	2b21      	cmp	r3, #33	; 0x21
 8006fd0:	d12f      	bne.n	8007032 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d110      	bne.n	8007000 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ffc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006ffe:	e018      	b.n	8007032 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007004:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	881a      	ldrh	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007012:	b292      	uxth	r2, r2
 8007014:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007032:	bf00      	nop
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007054:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff faa8 	bl	80065b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800707e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007084:	2b22      	cmp	r3, #34	; 0x22
 8007086:	d13a      	bne.n	80070fe <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800708e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007090:	89bb      	ldrh	r3, [r7, #12]
 8007092:	b2d9      	uxtb	r1, r3
 8007094:	89fb      	ldrh	r3, [r7, #14]
 8007096:	b2da      	uxtb	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709c:	400a      	ands	r2, r1
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d123      	bne.n	8007112 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070d8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0201 	bic.w	r2, r2, #1
 80070e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff fa68 	bl	80065cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070fc:	e009      	b.n	8007112 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	8b1b      	ldrh	r3, [r3, #24]
 8007104:	b29a      	uxth	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0208 	orr.w	r2, r2, #8
 800710e:	b292      	uxth	r2, r2
 8007110:	831a      	strh	r2, [r3, #24]
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007128:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800712e:	2b22      	cmp	r3, #34	; 0x22
 8007130:	d13a      	bne.n	80071a8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007138:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007140:	89ba      	ldrh	r2, [r7, #12]
 8007142:	89fb      	ldrh	r3, [r7, #14]
 8007144:	4013      	ands	r3, r2
 8007146:	b29a      	uxth	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007150:	1c9a      	adds	r2, r3, #2
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d123      	bne.n	80071bc <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007182:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689a      	ldr	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fa13 	bl	80065cc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071a6:	e009      	b.n	80071bc <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	8b1b      	ldrh	r3, [r3, #24]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0208 	orr.w	r2, r2, #8
 80071b8:	b292      	uxth	r2, r2
 80071ba:	831a      	strh	r2, [r3, #24]
}
 80071bc:	bf00      	nop
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 001c 	add.w	r0, r7, #28
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d122      	bne.n	8007236 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800721a:	2b01      	cmp	r3, #1
 800721c:	d105      	bne.n	800722a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa1e 	bl	800766c <USB_CoreReset>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]
 8007234:	e01a      	b.n	800726c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa12 	bl	800766c <USB_CoreReset>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800724c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	639a      	str	r2, [r3, #56]	; 0x38
 800725e:	e005      	b.n	800726c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800726c:	7bfb      	ldrb	r3, [r7, #15]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007278:	b004      	add	sp, #16
 800727a:	4770      	bx	lr

0800727c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f023 0201 	bic.w	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d106      	bne.n	80072ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]
 80072c8:	e00b      	b.n	80072e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60da      	str	r2, [r3, #12]
 80072dc:	e001      	b.n	80072e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e003      	b.n	80072ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80072e2:	2032      	movs	r0, #50	; 0x32
 80072e4:	f7fa ff7c 	bl	80021e0 <HAL_Delay>

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072f4:	b084      	sub	sp, #16
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e009      	b.n	8007328 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3340      	adds	r3, #64	; 0x40
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	2200      	movs	r2, #0
 8007320:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3301      	adds	r3, #1
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b0e      	cmp	r3, #14
 800732c:	d9f2      	bls.n	8007314 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800732e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d112      	bne.n	800735a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	e005      	b.n	8007366 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800736c:	461a      	mov	r2, r3
 800736e:	2300      	movs	r3, #0
 8007370:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007378:	4619      	mov	r1, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	461a      	mov	r2, r3
 8007382:	680b      	ldr	r3, [r1, #0]
 8007384:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007386:	2103      	movs	r1, #3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f93d 	bl	8007608 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800738e:	2110      	movs	r1, #16
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f8f1 	bl	8007578 <USB_FlushTxFifo>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f90f 	bl	80075c4 <USB_FlushRxFifo>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b6:	461a      	mov	r2, r3
 80073b8:	2300      	movs	r3, #0
 80073ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	461a      	mov	r2, r3
 80073c4:	2300      	movs	r3, #0
 80073c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ce:	461a      	mov	r2, r3
 80073d0:	2300      	movs	r3, #0
 80073d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d4:	2300      	movs	r3, #0
 80073d6:	613b      	str	r3, [r7, #16]
 80073d8:	e043      	b.n	8007462 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073f0:	d118      	bne.n	8007424 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	461a      	mov	r2, r3
 8007406:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	e013      	b.n	8007436 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	461a      	mov	r2, r3
 800741c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007420:	6013      	str	r3, [r2, #0]
 8007422:	e008      	b.n	8007436 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	461a      	mov	r2, r3
 8007432:	2300      	movs	r3, #0
 8007434:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	461a      	mov	r2, r3
 8007444:	2300      	movs	r3, #0
 8007446:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	461a      	mov	r2, r3
 8007456:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800745a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	3301      	adds	r3, #1
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d3b7      	bcc.n	80073da <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	e043      	b.n	80074f8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007486:	d118      	bne.n	80074ba <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	461a      	mov	r2, r3
 800749c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	e013      	b.n	80074cc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	461a      	mov	r2, r3
 80074b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	e008      	b.n	80074cc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	461a      	mov	r2, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	461a      	mov	r2, r3
 80074da:	2300      	movs	r3, #0
 80074dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ea:	461a      	mov	r2, r3
 80074ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	3301      	adds	r3, #1
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d3b7      	bcc.n	8007470 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800750e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007512:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007520:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	f043 0210 	orr.w	r2, r3, #16
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	4b10      	ldr	r3, [pc, #64]	; (8007574 <USB_DevInit+0x280>)
 8007534:	4313      	orrs	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800753a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f043 0208 	orr.w	r2, r3, #8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800754c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754e:	2b01      	cmp	r3, #1
 8007550:	d107      	bne.n	8007562 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	699b      	ldr	r3, [r3, #24]
 8007556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800755a:	f043 0304 	orr.w	r3, r3, #4
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007562:	7dfb      	ldrb	r3, [r7, #23]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800756e:	b004      	add	sp, #16
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	803c3800 	.word	0x803c3800

08007578 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	019b      	lsls	r3, r3, #6
 800758a:	f043 0220 	orr.w	r2, r3, #32
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <USB_FlushTxFifo+0x48>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d901      	bls.n	80075a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e006      	b.n	80075b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d0f0      	beq.n	8007592 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	00030d40 	.word	0x00030d40

080075c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2210      	movs	r2, #16
 80075d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	3301      	adds	r3, #1
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4a09      	ldr	r2, [pc, #36]	; (8007604 <USB_FlushRxFifo+0x40>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d901      	bls.n	80075e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e006      	b.n	80075f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d0f0      	beq.n	80075d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	00030d40 	.word	0x00030d40

08007608 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	68f9      	ldr	r1, [r7, #12]
 8007624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007628:	4313      	orrs	r3, r2
 800762a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007654:	f043 0302 	orr.w	r3, r3, #2
 8007658:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800765a:	2003      	movs	r0, #3
 800765c:	f7fa fdc0 	bl	80021e0 <HAL_Delay>

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3301      	adds	r3, #1
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <USB_CoreReset+0x64>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e01b      	b.n	80076c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	2b00      	cmp	r3, #0
 8007690:	daf2      	bge.n	8007678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f043 0201 	orr.w	r2, r3, #1
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3301      	adds	r3, #1
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <USB_CoreReset+0x64>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d901      	bls.n	80076b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e006      	b.n	80076c2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d0f0      	beq.n	80076a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	00030d40 	.word	0x00030d40

080076d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80076e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076e6:	2b84      	cmp	r3, #132	; 0x84
 80076e8:	d005      	beq.n	80076f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80076ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	3303      	adds	r3, #3
 80076f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800770a:	f3ef 8305 	mrs	r3, IPSR
 800770e:	607b      	str	r3, [r7, #4]
  return(result);
 8007710:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007712:	2b00      	cmp	r3, #0
 8007714:	bf14      	ite	ne
 8007716:	2301      	movne	r3, #1
 8007718:	2300      	moveq	r3, #0
 800771a:	b2db      	uxtb	r3, r3
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800772c:	f001 f9dc 	bl	8008ae8 <vTaskStartScheduler>
  
  return osOK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	bd80      	pop	{r7, pc}

08007736 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007736:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007738:	b089      	sub	sp, #36	; 0x24
 800773a:	af04      	add	r7, sp, #16
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d020      	beq.n	800778a <osThreadCreate+0x54>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d01c      	beq.n	800778a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685c      	ldr	r4, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681d      	ldr	r5, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691e      	ldr	r6, [r3, #16]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff ffb6 	bl	80076d4 <makeFreeRtosPriority>
 8007768:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007772:	9202      	str	r2, [sp, #8]
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	9100      	str	r1, [sp, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	4632      	mov	r2, r6
 800777c:	4629      	mov	r1, r5
 800777e:	4620      	mov	r0, r4
 8007780:	f000 fff7 	bl	8008772 <xTaskCreateStatic>
 8007784:	4603      	mov	r3, r0
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	e01c      	b.n	80077c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685c      	ldr	r4, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007796:	b29e      	uxth	r6, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff ff98 	bl	80076d4 <makeFreeRtosPriority>
 80077a4:	4602      	mov	r2, r0
 80077a6:	f107 030c 	add.w	r3, r7, #12
 80077aa:	9301      	str	r3, [sp, #4]
 80077ac:	9200      	str	r2, [sp, #0]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	4632      	mov	r2, r6
 80077b2:	4629      	mov	r1, r5
 80077b4:	4620      	mov	r0, r4
 80077b6:	f001 f835 	bl	8008824 <xTaskCreate>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d001      	beq.n	80077c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e000      	b.n	80077c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077ce <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <osDelay+0x16>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	e000      	b.n	80077e6 <osDelay+0x18>
 80077e4:	2301      	movs	r3, #1
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 f94a 	bl	8008a80 <vTaskDelay>
  
  return osOK;
 80077ec:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	4619      	mov	r1, r3
 800780c:	2001      	movs	r0, #1
 800780e:	f000 fb63 	bl	8007ed8 <xQueueCreateMutexStatic>
 8007812:	4603      	mov	r3, r0
 8007814:	e003      	b.n	800781e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007816:	2001      	movs	r0, #1
 8007818:	f000 fb46 	bl	8007ea8 <xQueueCreateMutex>
 800781c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <osMutexWait+0x18>
    return osErrorParameter;
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	e03a      	b.n	80078b6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d103      	bne.n	8007854 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800784c:	f04f 33ff 	mov.w	r3, #4294967295
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	e009      	b.n	8007868 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d006      	beq.n	8007868 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <osMutexWait+0x40>
      ticks = 1;
 8007864:	2301      	movs	r3, #1
 8007866:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007868:	f7ff ff4c 	bl	8007704 <inHandlerMode>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d017      	beq.n	80078a2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007872:	f107 0308 	add.w	r3, r7, #8
 8007876:	461a      	mov	r2, r3
 8007878:	2100      	movs	r1, #0
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fdd4 	bl	8008428 <xQueueReceiveFromISR>
 8007880:	4603      	mov	r3, r0
 8007882:	2b01      	cmp	r3, #1
 8007884:	d001      	beq.n	800788a <osMutexWait+0x62>
      return osErrorOS;
 8007886:	23ff      	movs	r3, #255	; 0xff
 8007888:	e015      	b.n	80078b6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d011      	beq.n	80078b4 <osMutexWait+0x8c>
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <osMutexWait+0x98>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	e008      	b.n	80078b4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80078a2:	68f9      	ldr	r1, [r7, #12]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fcb7 	bl	8008218 <xQueueSemaphoreTake>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d001      	beq.n	80078b4 <osMutexWait+0x8c>
    return osErrorOS;
 80078b0:	23ff      	movs	r3, #255	; 0xff
 80078b2:	e000      	b.n	80078b6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	e000ed04 	.word	0xe000ed04

080078c4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80078d4:	f7ff ff16 	bl	8007704 <inHandlerMode>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d016      	beq.n	800790c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80078de:	f107 0308 	add.w	r3, r7, #8
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fc0d 	bl	8008104 <xQueueGiveFromISR>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d001      	beq.n	80078f4 <osMutexRelease+0x30>
      return osErrorOS;
 80078f0:	23ff      	movs	r3, #255	; 0xff
 80078f2:	e017      	b.n	8007924 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d013      	beq.n	8007922 <osMutexRelease+0x5e>
 80078fa:	4b0c      	ldr	r3, [pc, #48]	; (800792c <osMutexRelease+0x68>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e00a      	b.n	8007922 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800790c:	2300      	movs	r3, #0
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fafc 	bl	8007f10 <xQueueGenericSend>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	d001      	beq.n	8007922 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800791e:	23ff      	movs	r3, #255	; 0xff
 8007920:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007922:	68fb      	ldr	r3, [r7, #12]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed04 	.word	0xe000ed04

08007930 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af02      	add	r7, sp, #8
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d010      	beq.n	8007964 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d10b      	bne.n	8007960 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	2303      	movs	r3, #3
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	2001      	movs	r0, #1
 8007958:	f000 f9be 	bl	8007cd8 <xQueueGenericCreateStatic>
 800795c:	4603      	mov	r3, r0
 800795e:	e016      	b.n	800798e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007960:	2300      	movs	r3, #0
 8007962:	e014      	b.n	800798e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d110      	bne.n	800798c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800796a:	2203      	movs	r2, #3
 800796c:	2100      	movs	r1, #0
 800796e:	2001      	movs	r0, #1
 8007970:	f000 fa24 	bl	8007dbc <xQueueGenericCreate>
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <osSemaphoreCreate+0x58>
 800797c:	2300      	movs	r3, #0
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fac4 	bl	8007f10 <xQueueGenericSend>
      return sema;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	e000      	b.n	800798e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800798c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80079a2:	2300      	movs	r3, #0
 80079a4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80079ac:	2380      	movs	r3, #128	; 0x80
 80079ae:	e03a      	b.n	8007a26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ba:	d103      	bne.n	80079c4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80079bc:	f04f 33ff 	mov.w	r3, #4294967295
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	e009      	b.n	80079d8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d006      	beq.n	80079d8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <osSemaphoreWait+0x40>
      ticks = 1;
 80079d4:	2301      	movs	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80079d8:	f7ff fe94 	bl	8007704 <inHandlerMode>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d017      	beq.n	8007a12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	461a      	mov	r2, r3
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fd1c 	bl	8008428 <xQueueReceiveFromISR>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d001      	beq.n	80079fa <osSemaphoreWait+0x62>
      return osErrorOS;
 80079f6:	23ff      	movs	r3, #255	; 0xff
 80079f8:	e015      	b.n	8007a26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d011      	beq.n	8007a24 <osSemaphoreWait+0x8c>
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <osSemaphoreWait+0x98>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	e008      	b.n	8007a24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fbff 	bl	8008218 <xQueueSemaphoreTake>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d001      	beq.n	8007a24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007a20:	23ff      	movs	r3, #255	; 0xff
 8007a22:	e000      	b.n	8007a26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007a44:	f7ff fe5e 	bl	8007704 <inHandlerMode>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb55 	bl	8008104 <xQueueGiveFromISR>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d001      	beq.n	8007a64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007a60:	23ff      	movs	r3, #255	; 0xff
 8007a62:	e017      	b.n	8007a94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d013      	beq.n	8007a92 <osSemaphoreRelease+0x5e>
 8007a6a:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <osSemaphoreRelease+0x68>)
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	e00a      	b.n	8007a92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2100      	movs	r1, #0
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa44 	bl	8007f10 <xQueueGenericSend>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d001      	beq.n	8007a92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007a8e:	23ff      	movs	r3, #255	; 0xff
 8007a90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007a92:	68fb      	ldr	r3, [r7, #12]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f103 0208 	add.w	r2, r3, #8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f103 0208 	add.w	r2, r3, #8
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f103 0208 	add.w	r2, r3, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007afa:	b480      	push	{r7}
 8007afc:	b085      	sub	sp, #20
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d103      	bne.n	8007b62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e00c      	b.n	8007b7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3308      	adds	r3, #8
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e002      	b.n	8007b70 <vListInsert+0x2e>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d2f6      	bcs.n	8007b6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	683a      	ldr	r2, [r7, #0]
 8007b96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6892      	ldr	r2, [r2, #8]
 8007bca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6852      	ldr	r2, [r2, #4]
 8007bd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d103      	bne.n	8007be8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	1e5a      	subs	r2, r3, #1
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d109      	bne.n	8007c30 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	e7fe      	b.n	8007c2e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007c30:	f001 febc 	bl	80099ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3c:	68f9      	ldr	r1, [r7, #12]
 8007c3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c40:	fb01 f303 	mul.w	r3, r1, r3
 8007c44:	441a      	add	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c60:	3b01      	subs	r3, #1
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c66:	fb01 f303 	mul.w	r3, r1, r3
 8007c6a:	441a      	add	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	22ff      	movs	r2, #255	; 0xff
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	22ff      	movs	r2, #255	; 0xff
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d114      	bne.n	8007cb0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d01a      	beq.n	8007cc4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3310      	adds	r3, #16
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 f96a 	bl	8008f6c <xTaskRemoveFromEventList>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d012      	beq.n	8007cc4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <xQueueGenericReset+0xcc>)
 8007ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	e009      	b.n	8007cc4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff fef3 	bl	8007aa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	3324      	adds	r3, #36	; 0x24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff feee 	bl	8007aa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007cc4:	f001 fea0 	bl	8009a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cc8:	2301      	movs	r3, #1
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	e000ed04 	.word	0xe000ed04

08007cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b08e      	sub	sp, #56	; 0x38
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]
 8007ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <xQueueGenericCreateStatic+0x28>
 8007cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cfe:	e7fe      	b.n	8007cfe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d109      	bne.n	8007d1a <xQueueGenericCreateStatic+0x42>
 8007d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0a:	f383 8811 	msr	BASEPRI, r3
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
 8007d18:	e7fe      	b.n	8007d18 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <xQueueGenericCreateStatic+0x4e>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <xQueueGenericCreateStatic+0x52>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <xQueueGenericCreateStatic+0x54>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <xQueueGenericCreateStatic+0x6c>
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	623b      	str	r3, [r7, #32]
 8007d42:	e7fe      	b.n	8007d42 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <xQueueGenericCreateStatic+0x78>
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <xQueueGenericCreateStatic+0x7c>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <xQueueGenericCreateStatic+0x7e>
 8007d54:	2300      	movs	r3, #0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <xQueueGenericCreateStatic+0x96>
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	61fb      	str	r3, [r7, #28]
 8007d6c:	e7fe      	b.n	8007d6c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d6e:	2348      	movs	r3, #72	; 0x48
 8007d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b48      	cmp	r3, #72	; 0x48
 8007d76:	d009      	beq.n	8007d8c <xQueueGenericCreateStatic+0xb4>
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	61bb      	str	r3, [r7, #24]
 8007d8a:	e7fe      	b.n	8007d8a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00d      	beq.n	8007db2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	4613      	mov	r3, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	68b9      	ldr	r1, [r7, #8]
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f842 	bl	8007e36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3730      	adds	r7, #48	; 0x30
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <xQueueGenericCreate+0x28>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	e7fe      	b.n	8007de2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]
 8007dee:	e004      	b.n	8007dfa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	fb02 f303 	mul.w	r3, r2, r3
 8007df8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3348      	adds	r3, #72	; 0x48
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 feee 	bl	8009be0 <pvPortMalloc>
 8007e04:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00f      	beq.n	8007e2c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	3348      	adds	r3, #72	; 0x48
 8007e10:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e1a:	79fa      	ldrb	r2, [r7, #7]
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	4613      	mov	r3, r2
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f805 	bl	8007e36 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
	}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
 8007e42:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d103      	bne.n	8007e52 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	e002      	b.n	8007e58 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e64:	2101      	movs	r1, #1
 8007e66:	69b8      	ldr	r0, [r7, #24]
 8007e68:	f7ff fece 	bl	8007c08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e94:	2300      	movs	r3, #0
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f838 	bl	8007f10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6939      	ldr	r1, [r7, #16]
 8007ec0:	6978      	ldr	r0, [r7, #20]
 8007ec2:	f7ff ff7b 	bl	8007dbc <xQueueGenericCreate>
 8007ec6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7ff ffd3 	bl	8007e74 <prvInitialiseMutex>

		return pxNewQueue;
 8007ece:	68fb      	ldr	r3, [r7, #12]
	}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	4603      	mov	r3, r0
 8007ee0:	6039      	str	r1, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	6939      	ldr	r1, [r7, #16]
 8007ef6:	6978      	ldr	r0, [r7, #20]
 8007ef8:	f7ff feee 	bl	8007cd8 <xQueueGenericCreateStatic>
 8007efc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff ffb8 	bl	8007e74 <prvInitialiseMutex>

		return pxNewQueue;
 8007f04:	68fb      	ldr	r3, [r7, #12]
	}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08e      	sub	sp, #56	; 0x38
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d109      	bne.n	8007f40 <xQueueGenericSend+0x30>
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f3e:	e7fe      	b.n	8007f3e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <xQueueGenericSend+0x3e>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <xQueueGenericSend+0x42>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <xQueueGenericSend+0x44>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <xQueueGenericSend+0x5c>
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6a:	e7fe      	b.n	8007f6a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d103      	bne.n	8007f7a <xQueueGenericSend+0x6a>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <xQueueGenericSend+0x6e>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <xQueueGenericSend+0x70>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <xQueueGenericSend+0x88>
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	623b      	str	r3, [r7, #32]
 8007f96:	e7fe      	b.n	8007f96 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f98:	f001 f9a4 	bl	80092e4 <xTaskGetSchedulerState>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <xQueueGenericSend+0x98>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <xQueueGenericSend+0x9c>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <xQueueGenericSend+0x9e>
 8007fac:	2300      	movs	r3, #0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <xQueueGenericSend+0xb6>
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	61fb      	str	r3, [r7, #28]
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fc6:	f001 fcf1 	bl	80099ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d302      	bcc.n	8007fdc <xQueueGenericSend+0xcc>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d129      	bne.n	8008030 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	68b9      	ldr	r1, [r7, #8]
 8007fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fe2:	f000 fab6 	bl	8008552 <prvCopyDataToQueue>
 8007fe6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d010      	beq.n	8008012 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	3324      	adds	r3, #36	; 0x24
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 ffb9 	bl	8008f6c <xTaskRemoveFromEventList>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008000:	4b3f      	ldr	r3, [pc, #252]	; (8008100 <xQueueGenericSend+0x1f0>)
 8008002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	e00a      	b.n	8008028 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008018:	4b39      	ldr	r3, [pc, #228]	; (8008100 <xQueueGenericSend+0x1f0>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008028:	f001 fcee 	bl	8009a08 <vPortExitCritical>
				return pdPASS;
 800802c:	2301      	movs	r3, #1
 800802e:	e063      	b.n	80080f8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d103      	bne.n	800803e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008036:	f001 fce7 	bl	8009a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800803a:	2300      	movs	r3, #0
 800803c:	e05c      	b.n	80080f8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008040:	2b00      	cmp	r3, #0
 8008042:	d106      	bne.n	8008052 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008044:	f107 0314 	add.w	r3, r7, #20
 8008048:	4618      	mov	r0, r3
 800804a:	f000 fff1 	bl	8009030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800804e:	2301      	movs	r3, #1
 8008050:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008052:	f001 fcd9 	bl	8009a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008056:	f000 fda5 	bl	8008ba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800805a:	f001 fca7 	bl	80099ac <vPortEnterCritical>
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008064:	b25b      	sxtb	r3, r3
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d103      	bne.n	8008074 <xQueueGenericSend+0x164>
 800806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800807a:	b25b      	sxtb	r3, r3
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d103      	bne.n	800808a <xQueueGenericSend+0x17a>
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800808a:	f001 fcbd 	bl	8009a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800808e:	1d3a      	adds	r2, r7, #4
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f000 ffe0 	bl	800905c <xTaskCheckForTimeOut>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d124      	bne.n	80080ec <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080a4:	f000 fb4d 	bl	8008742 <prvIsQueueFull>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d018      	beq.n	80080e0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	3310      	adds	r3, #16
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	4611      	mov	r1, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 ff34 	bl	8008f24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080be:	f000 fad8 	bl	8008672 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080c2:	f000 fd7d 	bl	8008bc0 <xTaskResumeAll>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f47f af7c 	bne.w	8007fc6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <xQueueGenericSend+0x1f0>)
 80080d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	e772      	b.n	8007fc6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080e2:	f000 fac6 	bl	8008672 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080e6:	f000 fd6b 	bl	8008bc0 <xTaskResumeAll>
 80080ea:	e76c      	b.n	8007fc6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ee:	f000 fac0 	bl	8008672 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080f2:	f000 fd65 	bl	8008bc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080f6:	2300      	movs	r3, #0
		}
	}
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3738      	adds	r7, #56	; 0x38
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b08e      	sub	sp, #56	; 0x38
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	2b00      	cmp	r3, #0
 8008116:	d109      	bne.n	800812c <xQueueGiveFromISR+0x28>
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	623b      	str	r3, [r7, #32]
 800812a:	e7fe      	b.n	800812a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <xQueueGiveFromISR+0x44>
 8008134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008138:	f383 8811 	msr	BASEPRI, r3
 800813c:	f3bf 8f6f 	isb	sy
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	e7fe      	b.n	8008146 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <xQueueGiveFromISR+0x54>
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <xQueueGiveFromISR+0x58>
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <xQueueGiveFromISR+0x5a>
 800815c:	2300      	movs	r3, #0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d109      	bne.n	8008176 <xQueueGiveFromISR+0x72>
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	61bb      	str	r3, [r7, #24]
 8008174:	e7fe      	b.n	8008174 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008176:	f001 fcf5 	bl	8009b64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800817a:	f3ef 8211 	mrs	r2, BASEPRI
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	617a      	str	r2, [r7, #20]
 8008190:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008192:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008194:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d22b      	bcs.n	80081fe <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d112      	bne.n	80081e8 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d016      	beq.n	80081f8 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	3324      	adds	r3, #36	; 0x24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fecc 	bl	8008f6c <xTaskRemoveFromEventList>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00b      	beq.n	80081f8 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2201      	movs	r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e007      	b.n	80081f8 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081ec:	3301      	adds	r3, #1
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	b25a      	sxtb	r2, r3
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081f8:	2301      	movs	r3, #1
 80081fa:	637b      	str	r3, [r7, #52]	; 0x34
 80081fc:	e001      	b.n	8008202 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800820e:	4618      	mov	r0, r3
 8008210:	3738      	adds	r7, #56	; 0x38
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
	...

08008218 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	; 0x38
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	2b00      	cmp	r3, #0
 8008232:	d109      	bne.n	8008248 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	623b      	str	r3, [r7, #32]
 8008246:	e7fe      	b.n	8008246 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d009      	beq.n	8008264 <xQueueSemaphoreTake+0x4c>
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	e7fe      	b.n	8008262 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008264:	f001 f83e 	bl	80092e4 <xTaskGetSchedulerState>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <xQueueSemaphoreTake+0x5c>
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <xQueueSemaphoreTake+0x60>
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <xQueueSemaphoreTake+0x62>
 8008278:	2300      	movs	r3, #0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d109      	bne.n	8008292 <xQueueSemaphoreTake+0x7a>
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	61bb      	str	r3, [r7, #24]
 8008290:	e7fe      	b.n	8008290 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008292:	f001 fb8b 	bl	80099ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d024      	beq.n	80082ec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	1e5a      	subs	r2, r3, #1
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d104      	bne.n	80082bc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80082b2:	f001 f9dd 	bl	8009670 <pvTaskIncrementMutexHeldCount>
 80082b6:	4602      	mov	r2, r0
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00f      	beq.n	80082e4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	3310      	adds	r3, #16
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fe4f 	bl	8008f6c <xTaskRemoveFromEventList>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082d4:	4b53      	ldr	r3, [pc, #332]	; (8008424 <xQueueSemaphoreTake+0x20c>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082e4:	f001 fb90 	bl	8009a08 <vPortExitCritical>
				return pdPASS;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e096      	b.n	800841a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d110      	bne.n	8008314 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d009      	beq.n	800830c <xQueueSemaphoreTake+0xf4>
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e7fe      	b.n	800830a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800830c:	f001 fb7c 	bl	8009a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008310:	2300      	movs	r3, #0
 8008312:	e082      	b.n	800841a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008316:	2b00      	cmp	r3, #0
 8008318:	d106      	bne.n	8008328 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800831a:	f107 030c 	add.w	r3, r7, #12
 800831e:	4618      	mov	r0, r3
 8008320:	f000 fe86 	bl	8009030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008324:	2301      	movs	r3, #1
 8008326:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008328:	f001 fb6e 	bl	8009a08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800832c:	f000 fc3a 	bl	8008ba4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008330:	f001 fb3c 	bl	80099ac <vPortEnterCritical>
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800833a:	b25b      	sxtb	r3, r3
 800833c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008340:	d103      	bne.n	800834a <xQueueSemaphoreTake+0x132>
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800834a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008350:	b25b      	sxtb	r3, r3
 8008352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008356:	d103      	bne.n	8008360 <xQueueSemaphoreTake+0x148>
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008360:	f001 fb52 	bl	8009a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008364:	463a      	mov	r2, r7
 8008366:	f107 030c 	add.w	r3, r7, #12
 800836a:	4611      	mov	r1, r2
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fe75 	bl	800905c <xTaskCheckForTimeOut>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d132      	bne.n	80083de <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800837a:	f000 f9cc 	bl	8008716 <prvIsQueueEmpty>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d026      	beq.n	80083d2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d109      	bne.n	80083a0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800838c:	f001 fb0e 	bl	80099ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 ffc3 	bl	8009320 <xTaskPriorityInherit>
 800839a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800839c:	f001 fb34 	bl	8009a08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	3324      	adds	r3, #36	; 0x24
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fdbb 	bl	8008f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b0:	f000 f95f 	bl	8008672 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083b4:	f000 fc04 	bl	8008bc0 <xTaskResumeAll>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f47f af69 	bne.w	8008292 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80083c0:	4b18      	ldr	r3, [pc, #96]	; (8008424 <xQueueSemaphoreTake+0x20c>)
 80083c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	e75f      	b.n	8008292 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083d4:	f000 f94d 	bl	8008672 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083d8:	f000 fbf2 	bl	8008bc0 <xTaskResumeAll>
 80083dc:	e759      	b.n	8008292 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e0:	f000 f947 	bl	8008672 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083e4:	f000 fbec 	bl	8008bc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083ea:	f000 f994 	bl	8008716 <prvIsQueueEmpty>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f43f af4e 	beq.w	8008292 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00d      	beq.n	8008418 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80083fc:	f001 fad6 	bl	80099ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008402:	f000 f88e 	bl	8008522 <prvGetDisinheritPriorityAfterTimeout>
 8008406:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800840e:	4618      	mov	r0, r3
 8008410:	f001 f890 	bl	8009534 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008414:	f001 faf8 	bl	8009a08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800841a:	4618      	mov	r0, r3
 800841c:	3738      	adds	r7, #56	; 0x38
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	e000ed04 	.word	0xe000ed04

08008428 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08e      	sub	sp, #56	; 0x38
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <xQueueReceiveFromISR+0x2a>
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	623b      	str	r3, [r7, #32]
 8008450:	e7fe      	b.n	8008450 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <xQueueReceiveFromISR+0x38>
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <xQueueReceiveFromISR+0x3c>
 8008460:	2301      	movs	r3, #1
 8008462:	e000      	b.n	8008466 <xQueueReceiveFromISR+0x3e>
 8008464:	2300      	movs	r3, #0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d109      	bne.n	800847e <xQueueReceiveFromISR+0x56>
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	61fb      	str	r3, [r7, #28]
 800847c:	e7fe      	b.n	800847c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800847e:	f001 fb71 	bl	8009b64 <vPortValidateInterruptPriority>
	__asm volatile
 8008482:	f3ef 8211 	mrs	r2, BASEPRI
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	61ba      	str	r2, [r7, #24]
 8008498:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800849a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800849c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d02f      	beq.n	800850a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084b8:	f000 f8b5 	bl	8008626 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	1e5a      	subs	r2, r3, #1
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80084c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d112      	bne.n	80084f4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d016      	beq.n	8008504 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	3310      	adds	r3, #16
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fd46 	bl	8008f6c <xTaskRemoveFromEventList>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00e      	beq.n	8008504 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00b      	beq.n	8008504 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	e007      	b.n	8008504 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084f8:	3301      	adds	r3, #1
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	b25a      	sxtb	r2, r3
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008504:	2301      	movs	r3, #1
 8008506:	637b      	str	r3, [r7, #52]	; 0x34
 8008508:	e001      	b.n	800850e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800851a:	4618      	mov	r0, r3
 800851c:	3738      	adds	r7, #56	; 0x38
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b00      	cmp	r3, #0
 8008530:	d006      	beq.n	8008540 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f1c3 0307 	rsb	r3, r3, #7
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	e001      	b.n	8008544 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008544:	68fb      	ldr	r3, [r7, #12]
	}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b086      	sub	sp, #24
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10d      	bne.n	800858c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d14d      	bne.n	8008614 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 ff55 	bl	800942c <xTaskPriorityDisinherit>
 8008582:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	e043      	b.n	8008614 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d119      	bne.n	80085c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6898      	ldr	r0, [r3, #8]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	461a      	mov	r2, r3
 800859c:	68b9      	ldr	r1, [r7, #8]
 800859e:	f001 fd1f 	bl	8009fe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	441a      	add	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d32b      	bcc.n	8008614 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	609a      	str	r2, [r3, #8]
 80085c4:	e026      	b.n	8008614 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68d8      	ldr	r0, [r3, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	461a      	mov	r2, r3
 80085d0:	68b9      	ldr	r1, [r7, #8]
 80085d2:	f001 fd05 	bl	8009fe0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	425b      	negs	r3, r3
 80085e0:	441a      	add	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d207      	bcs.n	8008602 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	425b      	negs	r3, r3
 80085fc:	441a      	add	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d105      	bne.n	8008614 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	3b01      	subs	r3, #1
 8008612:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800861c:	697b      	ldr	r3, [r7, #20]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b082      	sub	sp, #8
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d018      	beq.n	800866a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	441a      	add	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	429a      	cmp	r2, r3
 8008650:	d303      	bcc.n	800865a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68d9      	ldr	r1, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	461a      	mov	r2, r3
 8008664:	6838      	ldr	r0, [r7, #0]
 8008666:	f001 fcbb 	bl	8009fe0 <memcpy>
	}
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b084      	sub	sp, #16
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800867a:	f001 f997 	bl	80099ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008684:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008686:	e011      	b.n	80086ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b00      	cmp	r3, #0
 800868e:	d012      	beq.n	80086b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3324      	adds	r3, #36	; 0x24
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fc69 	bl	8008f6c <xTaskRemoveFromEventList>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086a0:	f000 fd3c 	bl	800911c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dce9      	bgt.n	8008688 <prvUnlockQueue+0x16>
 80086b4:	e000      	b.n	80086b8 <prvUnlockQueue+0x46>
					break;
 80086b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	22ff      	movs	r2, #255	; 0xff
 80086bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086c0:	f001 f9a2 	bl	8009a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086c4:	f001 f972 	bl	80099ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086d0:	e011      	b.n	80086f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d012      	beq.n	8008700 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3310      	adds	r3, #16
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 fc44 	bl	8008f6c <xTaskRemoveFromEventList>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086ea:	f000 fd17 	bl	800911c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dce9      	bgt.n	80086d2 <prvUnlockQueue+0x60>
 80086fe:	e000      	b.n	8008702 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008700:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	22ff      	movs	r2, #255	; 0xff
 8008706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800870a:	f001 f97d 	bl	8009a08 <vPortExitCritical>
}
 800870e:	bf00      	nop
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b084      	sub	sp, #16
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800871e:	f001 f945 	bl	80099ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	d102      	bne.n	8008730 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800872a:	2301      	movs	r3, #1
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e001      	b.n	8008734 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008734:	f001 f968 	bl	8009a08 <vPortExitCritical>

	return xReturn;
 8008738:	68fb      	ldr	r3, [r7, #12]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800874a:	f001 f92f 	bl	80099ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008756:	429a      	cmp	r2, r3
 8008758:	d102      	bne.n	8008760 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800875a:	2301      	movs	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e001      	b.n	8008764 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008764:	f001 f950 	bl	8009a08 <vPortExitCritical>

	return xReturn;
 8008768:	68fb      	ldr	r3, [r7, #12]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008772:	b580      	push	{r7, lr}
 8008774:	b08e      	sub	sp, #56	; 0x38
 8008776:	af04      	add	r7, sp, #16
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	60b9      	str	r1, [r7, #8]
 800877c:	607a      	str	r2, [r7, #4]
 800877e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <xTaskCreateStatic+0x28>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	623b      	str	r3, [r7, #32]
 8008798:	e7fe      	b.n	8008798 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	d109      	bne.n	80087b4 <xTaskCreateStatic+0x42>
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	61fb      	str	r3, [r7, #28]
 80087b2:	e7fe      	b.n	80087b2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80087b4:	2354      	movs	r3, #84	; 0x54
 80087b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b54      	cmp	r3, #84	; 0x54
 80087bc:	d009      	beq.n	80087d2 <xTaskCreateStatic+0x60>
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	e7fe      	b.n	80087d0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01e      	beq.n	8008816 <xTaskCreateStatic+0xa4>
 80087d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d01b      	beq.n	8008816 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087f0:	2300      	movs	r3, #0
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	f107 0314 	add.w	r3, r7, #20
 80087fc:	9301      	str	r3, [sp, #4]
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	68b9      	ldr	r1, [r7, #8]
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 f850 	bl	80088ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800880e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008810:	f000 f8cc 	bl	80089ac <prvAddNewTaskToReadyList>
 8008814:	e001      	b.n	800881a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800881a:	697b      	ldr	r3, [r7, #20]
	}
 800881c:	4618      	mov	r0, r3
 800881e:	3728      	adds	r7, #40	; 0x28
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08c      	sub	sp, #48	; 0x30
 8008828:	af04      	add	r7, sp, #16
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	4613      	mov	r3, r2
 8008832:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4618      	mov	r0, r3
 800883a:	f001 f9d1 	bl	8009be0 <pvPortMalloc>
 800883e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00e      	beq.n	8008864 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008846:	2054      	movs	r0, #84	; 0x54
 8008848:	f001 f9ca 	bl	8009be0 <pvPortMalloc>
 800884c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	631a      	str	r2, [r3, #48]	; 0x30
 800885a:	e005      	b.n	8008868 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800885c:	6978      	ldr	r0, [r7, #20]
 800885e:	f001 fa81 	bl	8009d64 <vPortFree>
 8008862:	e001      	b.n	8008868 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d017      	beq.n	800889e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008876:	88fa      	ldrh	r2, [r7, #6]
 8008878:	2300      	movs	r3, #0
 800887a:	9303      	str	r3, [sp, #12]
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	9302      	str	r3, [sp, #8]
 8008880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f80e 	bl	80088ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008892:	69f8      	ldr	r0, [r7, #28]
 8008894:	f000 f88a 	bl	80089ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008898:	2301      	movs	r3, #1
 800889a:	61bb      	str	r3, [r7, #24]
 800889c:	e002      	b.n	80088a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800889e:	f04f 33ff 	mov.w	r3, #4294967295
 80088a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80088a4:	69bb      	ldr	r3, [r7, #24]
	}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3720      	adds	r7, #32
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b088      	sub	sp, #32
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	607a      	str	r2, [r7, #4]
 80088ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088c6:	3b01      	subs	r3, #1
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <prvInitialiseNewTask+0x46>
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	617b      	str	r3, [r7, #20]
 80088f2:	e7fe      	b.n	80088f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088f4:	2300      	movs	r3, #0
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	e012      	b.n	8008920 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	4413      	add	r3, r2
 8008900:	7819      	ldrb	r1, [r3, #0]
 8008902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4413      	add	r3, r2
 8008908:	3334      	adds	r3, #52	; 0x34
 800890a:	460a      	mov	r2, r1
 800890c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d006      	beq.n	8008928 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	3301      	adds	r3, #1
 800891e:	61fb      	str	r3, [r7, #28]
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	2b0f      	cmp	r3, #15
 8008924:	d9e9      	bls.n	80088fa <prvInitialiseNewTask+0x4c>
 8008926:	e000      	b.n	800892a <prvInitialiseNewTask+0x7c>
		{
			break;
 8008928:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	2b06      	cmp	r3, #6
 8008936:	d901      	bls.n	800893c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008938:	2306      	movs	r3, #6
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008940:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008946:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	2200      	movs	r2, #0
 800894c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	3304      	adds	r3, #4
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff f8c4 	bl	8007ae0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895a:	3318      	adds	r3, #24
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff f8bf 	bl	8007ae0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008966:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896a:	f1c3 0207 	rsb	r2, r3, #7
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008976:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	2200      	movs	r2, #0
 800897c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800897e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	68f9      	ldr	r1, [r7, #12]
 800898a:	69b8      	ldr	r0, [r7, #24]
 800898c:	f000 feea 	bl	8009764 <pxPortInitialiseStack>
 8008990:	4602      	mov	r2, r0
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a2:	bf00      	nop
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089b4:	f000 fffa 	bl	80099ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089b8:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <prvAddNewTaskToReadyList+0xb8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3301      	adds	r3, #1
 80089be:	4a29      	ldr	r2, [pc, #164]	; (8008a64 <prvAddNewTaskToReadyList+0xb8>)
 80089c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089c2:	4b29      	ldr	r3, [pc, #164]	; (8008a68 <prvAddNewTaskToReadyList+0xbc>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d109      	bne.n	80089de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089ca:	4a27      	ldr	r2, [pc, #156]	; (8008a68 <prvAddNewTaskToReadyList+0xbc>)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089d0:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <prvAddNewTaskToReadyList+0xb8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d110      	bne.n	80089fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089d8:	f000 fbc4 	bl	8009164 <prvInitialiseTaskLists>
 80089dc:	e00d      	b.n	80089fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089de:	4b23      	ldr	r3, [pc, #140]	; (8008a6c <prvAddNewTaskToReadyList+0xc0>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d109      	bne.n	80089fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089e6:	4b20      	ldr	r3, [pc, #128]	; (8008a68 <prvAddNewTaskToReadyList+0xbc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d802      	bhi.n	80089fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089f4:	4a1c      	ldr	r2, [pc, #112]	; (8008a68 <prvAddNewTaskToReadyList+0xbc>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089fa:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <prvAddNewTaskToReadyList+0xc4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3301      	adds	r3, #1
 8008a00:	4a1b      	ldr	r2, [pc, #108]	; (8008a70 <prvAddNewTaskToReadyList+0xc4>)
 8008a02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	2201      	movs	r2, #1
 8008a0a:	409a      	lsls	r2, r3
 8008a0c:	4b19      	ldr	r3, [pc, #100]	; (8008a74 <prvAddNewTaskToReadyList+0xc8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	4a18      	ldr	r2, [pc, #96]	; (8008a74 <prvAddNewTaskToReadyList+0xc8>)
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <prvAddNewTaskToReadyList+0xcc>)
 8008a24:	441a      	add	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f7ff f864 	bl	8007afa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a32:	f000 ffe9 	bl	8009a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a36:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <prvAddNewTaskToReadyList+0xc0>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00e      	beq.n	8008a5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a3e:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <prvAddNewTaskToReadyList+0xbc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d207      	bcs.n	8008a5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <prvAddNewTaskToReadyList+0xd0>)
 8008a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20000418 	.word	0x20000418
 8008a68:	20000318 	.word	0x20000318
 8008a6c:	20000424 	.word	0x20000424
 8008a70:	20000434 	.word	0x20000434
 8008a74:	20000420 	.word	0x20000420
 8008a78:	2000031c 	.word	0x2000031c
 8008a7c:	e000ed04 	.word	0xe000ed04

08008a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d016      	beq.n	8008ac0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a92:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <vTaskDelay+0x60>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <vTaskDelay+0x2e>
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	60bb      	str	r3, [r7, #8]
 8008aac:	e7fe      	b.n	8008aac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008aae:	f000 f879 	bl	8008ba4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fdef 	bl	8009698 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008aba:	f000 f881 	bl	8008bc0 <xTaskResumeAll>
 8008abe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d107      	bne.n	8008ad6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008ac6:	4b07      	ldr	r3, [pc, #28]	; (8008ae4 <vTaskDelay+0x64>)
 8008ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ad6:	bf00      	nop
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000440 	.word	0x20000440
 8008ae4:	e000ed04 	.word	0xe000ed04

08008ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08a      	sub	sp, #40	; 0x28
 8008aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008af6:	463a      	mov	r2, r7
 8008af8:	1d39      	adds	r1, r7, #4
 8008afa:	f107 0308 	add.w	r3, r7, #8
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f7 fd3e 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	9202      	str	r2, [sp, #8]
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	2300      	movs	r3, #0
 8008b14:	460a      	mov	r2, r1
 8008b16:	491d      	ldr	r1, [pc, #116]	; (8008b8c <vTaskStartScheduler+0xa4>)
 8008b18:	481d      	ldr	r0, [pc, #116]	; (8008b90 <vTaskStartScheduler+0xa8>)
 8008b1a:	f7ff fe2a 	bl	8008772 <xTaskCreateStatic>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b1c      	ldr	r3, [pc, #112]	; (8008b94 <vTaskStartScheduler+0xac>)
 8008b22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <vTaskStartScheduler+0xac>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e001      	b.n	8008b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d115      	bne.n	8008b68 <vTaskStartScheduler+0x80>
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b4e:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <vTaskStartScheduler+0xb0>)
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <vTaskStartScheduler+0xb4>)
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <vTaskStartScheduler+0xb8>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b62:	f000 fe85 	bl	8009870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b66:	e00d      	b.n	8008b84 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d109      	bne.n	8008b84 <vTaskStartScheduler+0x9c>
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	e7fe      	b.n	8008b82 <vTaskStartScheduler+0x9a>
}
 8008b84:	bf00      	nop
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	0800a998 	.word	0x0800a998
 8008b90:	08009135 	.word	0x08009135
 8008b94:	2000043c 	.word	0x2000043c
 8008b98:	20000438 	.word	0x20000438
 8008b9c:	20000424 	.word	0x20000424
 8008ba0:	2000041c 	.word	0x2000041c

08008ba4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ba8:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <vTaskSuspendAll+0x18>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3301      	adds	r3, #1
 8008bae:	4a03      	ldr	r2, [pc, #12]	; (8008bbc <vTaskSuspendAll+0x18>)
 8008bb0:	6013      	str	r3, [r2, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20000440 	.word	0x20000440

08008bc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bce:	4b41      	ldr	r3, [pc, #260]	; (8008cd4 <xTaskResumeAll+0x114>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <xTaskResumeAll+0x2a>
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	e7fe      	b.n	8008be8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bea:	f000 fedf 	bl	80099ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bee:	4b39      	ldr	r3, [pc, #228]	; (8008cd4 <xTaskResumeAll+0x114>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	4a37      	ldr	r2, [pc, #220]	; (8008cd4 <xTaskResumeAll+0x114>)
 8008bf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bf8:	4b36      	ldr	r3, [pc, #216]	; (8008cd4 <xTaskResumeAll+0x114>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d161      	bne.n	8008cc4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c00:	4b35      	ldr	r3, [pc, #212]	; (8008cd8 <xTaskResumeAll+0x118>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d05d      	beq.n	8008cc4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c08:	e02e      	b.n	8008c68 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008c0a:	4b34      	ldr	r3, [pc, #208]	; (8008cdc <xTaskResumeAll+0x11c>)
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3318      	adds	r3, #24
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe ffcc 	bl	8007bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe ffc7 	bl	8007bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	409a      	lsls	r2, r3
 8008c2e:	4b2c      	ldr	r3, [pc, #176]	; (8008ce0 <xTaskResumeAll+0x120>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	4a2a      	ldr	r2, [pc, #168]	; (8008ce0 <xTaskResumeAll+0x120>)
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4a27      	ldr	r2, [pc, #156]	; (8008ce4 <xTaskResumeAll+0x124>)
 8008c46:	441a      	add	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	f7fe ff53 	bl	8007afa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <xTaskResumeAll+0x128>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d302      	bcc.n	8008c68 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008c62:	4b22      	ldr	r3, [pc, #136]	; (8008cec <xTaskResumeAll+0x12c>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c68:	4b1c      	ldr	r3, [pc, #112]	; (8008cdc <xTaskResumeAll+0x11c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1cc      	bne.n	8008c0a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c76:	f000 fb0f 	bl	8009298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c7a:	4b1d      	ldr	r3, [pc, #116]	; (8008cf0 <xTaskResumeAll+0x130>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d010      	beq.n	8008ca8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c86:	f000 f837 	bl	8008cf8 <xTaskIncrementTick>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008c90:	4b16      	ldr	r3, [pc, #88]	; (8008cec <xTaskResumeAll+0x12c>)
 8008c92:	2201      	movs	r2, #1
 8008c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1f1      	bne.n	8008c86 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008ca2:	4b13      	ldr	r3, [pc, #76]	; (8008cf0 <xTaskResumeAll+0x130>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ca8:	4b10      	ldr	r3, [pc, #64]	; (8008cec <xTaskResumeAll+0x12c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d009      	beq.n	8008cc4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008cb4:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <xTaskResumeAll+0x134>)
 8008cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cc4:	f000 fea0 	bl	8009a08 <vPortExitCritical>

	return xAlreadyYielded;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20000440 	.word	0x20000440
 8008cd8:	20000418 	.word	0x20000418
 8008cdc:	200003d8 	.word	0x200003d8
 8008ce0:	20000420 	.word	0x20000420
 8008ce4:	2000031c 	.word	0x2000031c
 8008ce8:	20000318 	.word	0x20000318
 8008cec:	2000042c 	.word	0x2000042c
 8008cf0:	20000428 	.word	0x20000428
 8008cf4:	e000ed04 	.word	0xe000ed04

08008cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d02:	4b50      	ldr	r3, [pc, #320]	; (8008e44 <xTaskIncrementTick+0x14c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f040 808c 	bne.w	8008e24 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d0c:	4b4e      	ldr	r3, [pc, #312]	; (8008e48 <xTaskIncrementTick+0x150>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3301      	adds	r3, #1
 8008d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d14:	4a4c      	ldr	r2, [pc, #304]	; (8008e48 <xTaskIncrementTick+0x150>)
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d11f      	bne.n	8008d60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d20:	4b4a      	ldr	r3, [pc, #296]	; (8008e4c <xTaskIncrementTick+0x154>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <xTaskIncrementTick+0x46>
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	603b      	str	r3, [r7, #0]
 8008d3c:	e7fe      	b.n	8008d3c <xTaskIncrementTick+0x44>
 8008d3e:	4b43      	ldr	r3, [pc, #268]	; (8008e4c <xTaskIncrementTick+0x154>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	4b42      	ldr	r3, [pc, #264]	; (8008e50 <xTaskIncrementTick+0x158>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a40      	ldr	r2, [pc, #256]	; (8008e4c <xTaskIncrementTick+0x154>)
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	4a40      	ldr	r2, [pc, #256]	; (8008e50 <xTaskIncrementTick+0x158>)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	4b40      	ldr	r3, [pc, #256]	; (8008e54 <xTaskIncrementTick+0x15c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3301      	adds	r3, #1
 8008d58:	4a3e      	ldr	r2, [pc, #248]	; (8008e54 <xTaskIncrementTick+0x15c>)
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	f000 fa9c 	bl	8009298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d60:	4b3d      	ldr	r3, [pc, #244]	; (8008e58 <xTaskIncrementTick+0x160>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d34d      	bcc.n	8008e06 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d6a:	4b38      	ldr	r3, [pc, #224]	; (8008e4c <xTaskIncrementTick+0x154>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <xTaskIncrementTick+0x80>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e000      	b.n	8008d7a <xTaskIncrementTick+0x82>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d7e:	4b36      	ldr	r3, [pc, #216]	; (8008e58 <xTaskIncrementTick+0x160>)
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	601a      	str	r2, [r3, #0]
					break;
 8008d86:	e03e      	b.n	8008e06 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d88:	4b30      	ldr	r3, [pc, #192]	; (8008e4c <xTaskIncrementTick+0x154>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d203      	bcs.n	8008da8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008da0:	4a2d      	ldr	r2, [pc, #180]	; (8008e58 <xTaskIncrementTick+0x160>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6013      	str	r3, [r2, #0]
						break;
 8008da6:	e02e      	b.n	8008e06 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe ff01 	bl	8007bb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d004      	beq.n	8008dc4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	3318      	adds	r3, #24
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fef8 	bl	8007bb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	2201      	movs	r2, #1
 8008dca:	409a      	lsls	r2, r3
 8008dcc:	4b23      	ldr	r3, [pc, #140]	; (8008e5c <xTaskIncrementTick+0x164>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	4a22      	ldr	r2, [pc, #136]	; (8008e5c <xTaskIncrementTick+0x164>)
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4a1f      	ldr	r2, [pc, #124]	; (8008e60 <xTaskIncrementTick+0x168>)
 8008de4:	441a      	add	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	3304      	adds	r3, #4
 8008dea:	4619      	mov	r1, r3
 8008dec:	4610      	mov	r0, r2
 8008dee:	f7fe fe84 	bl	8007afa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df6:	4b1b      	ldr	r3, [pc, #108]	; (8008e64 <xTaskIncrementTick+0x16c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3b4      	bcc.n	8008d6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e04:	e7b1      	b.n	8008d6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e06:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <xTaskIncrementTick+0x16c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0c:	4914      	ldr	r1, [pc, #80]	; (8008e60 <xTaskIncrementTick+0x168>)
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d907      	bls.n	8008e2e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	e004      	b.n	8008e2e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e24:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <xTaskIncrementTick+0x170>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4a0f      	ldr	r2, [pc, #60]	; (8008e68 <xTaskIncrementTick+0x170>)
 8008e2c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <xTaskIncrementTick+0x174>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008e36:	2301      	movs	r3, #1
 8008e38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e3a:	697b      	ldr	r3, [r7, #20]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20000440 	.word	0x20000440
 8008e48:	2000041c 	.word	0x2000041c
 8008e4c:	200003d0 	.word	0x200003d0
 8008e50:	200003d4 	.word	0x200003d4
 8008e54:	20000430 	.word	0x20000430
 8008e58:	20000438 	.word	0x20000438
 8008e5c:	20000420 	.word	0x20000420
 8008e60:	2000031c 	.word	0x2000031c
 8008e64:	20000318 	.word	0x20000318
 8008e68:	20000428 	.word	0x20000428
 8008e6c:	2000042c 	.word	0x2000042c

08008e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e76:	4b26      	ldr	r3, [pc, #152]	; (8008f10 <vTaskSwitchContext+0xa0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e7e:	4b25      	ldr	r3, [pc, #148]	; (8008f14 <vTaskSwitchContext+0xa4>)
 8008e80:	2201      	movs	r2, #1
 8008e82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e84:	e03e      	b.n	8008f04 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008e86:	4b23      	ldr	r3, [pc, #140]	; (8008f14 <vTaskSwitchContext+0xa4>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e8c:	4b22      	ldr	r3, [pc, #136]	; (8008f18 <vTaskSwitchContext+0xa8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	fab3 f383 	clz	r3, r3
 8008e98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	f1c3 031f 	rsb	r3, r3, #31
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	491e      	ldr	r1, [pc, #120]	; (8008f1c <vTaskSwitchContext+0xac>)
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <vTaskSwitchContext+0x5a>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	e7fe      	b.n	8008ec8 <vTaskSwitchContext+0x58>
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4a11      	ldr	r2, [pc, #68]	; (8008f1c <vTaskSwitchContext+0xac>)
 8008ed6:	4413      	add	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	685a      	ldr	r2, [r3, #4]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	605a      	str	r2, [r3, #4]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	3308      	adds	r3, #8
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d104      	bne.n	8008efa <vTaskSwitchContext+0x8a>
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	605a      	str	r2, [r3, #4]
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	4a07      	ldr	r2, [pc, #28]	; (8008f20 <vTaskSwitchContext+0xb0>)
 8008f02:	6013      	str	r3, [r2, #0]
}
 8008f04:	bf00      	nop
 8008f06:	371c      	adds	r7, #28
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20000440 	.word	0x20000440
 8008f14:	2000042c 	.word	0x2000042c
 8008f18:	20000420 	.word	0x20000420
 8008f1c:	2000031c 	.word	0x2000031c
 8008f20:	20000318 	.word	0x20000318

08008f24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d109      	bne.n	8008f48 <vTaskPlaceOnEventList+0x24>
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	e7fe      	b.n	8008f46 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <vTaskPlaceOnEventList+0x44>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3318      	adds	r3, #24
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fe fdf6 	bl	8007b42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f56:	2101      	movs	r1, #1
 8008f58:	6838      	ldr	r0, [r7, #0]
 8008f5a:	f000 fb9d 	bl	8009698 <prvAddCurrentTaskToDelayedList>
}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000318 	.word	0x20000318

08008f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <xTaskRemoveFromEventList+0x2a>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e7fe      	b.n	8008f94 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	3318      	adds	r3, #24
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fe0a 	bl	8007bb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa0:	4b1d      	ldr	r3, [pc, #116]	; (8009018 <xTaskRemoveFromEventList+0xac>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d11c      	bne.n	8008fe2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fe01 	bl	8007bb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	409a      	lsls	r2, r3
 8008fba:	4b18      	ldr	r3, [pc, #96]	; (800901c <xTaskRemoveFromEventList+0xb0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	4a16      	ldr	r2, [pc, #88]	; (800901c <xTaskRemoveFromEventList+0xb0>)
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc8:	4613      	mov	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	4413      	add	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4a13      	ldr	r2, [pc, #76]	; (8009020 <xTaskRemoveFromEventList+0xb4>)
 8008fd2:	441a      	add	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f7fe fd8d 	bl	8007afa <vListInsertEnd>
 8008fe0:	e005      	b.n	8008fee <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3318      	adds	r3, #24
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	480e      	ldr	r0, [pc, #56]	; (8009024 <xTaskRemoveFromEventList+0xb8>)
 8008fea:	f7fe fd86 	bl	8007afa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff2:	4b0d      	ldr	r3, [pc, #52]	; (8009028 <xTaskRemoveFromEventList+0xbc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d905      	bls.n	8009008 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <xTaskRemoveFromEventList+0xc0>)
 8009002:	2201      	movs	r2, #1
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	e001      	b.n	800900c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800900c:	697b      	ldr	r3, [r7, #20]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000440 	.word	0x20000440
 800901c:	20000420 	.word	0x20000420
 8009020:	2000031c 	.word	0x2000031c
 8009024:	200003d8 	.word	0x200003d8
 8009028:	20000318 	.word	0x20000318
 800902c:	2000042c 	.word	0x2000042c

08009030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <vTaskInternalSetTimeOutState+0x24>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <vTaskInternalSetTimeOutState+0x28>)
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	605a      	str	r2, [r3, #4]
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	20000430 	.word	0x20000430
 8009058:	2000041c 	.word	0x2000041c

0800905c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d109      	bne.n	8009080 <xTaskCheckForTimeOut+0x24>
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	e7fe      	b.n	800907e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d109      	bne.n	800909a <xTaskCheckForTimeOut+0x3e>
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	e7fe      	b.n	8009098 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800909a:	f000 fc87 	bl	80099ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800909e:	4b1d      	ldr	r3, [pc, #116]	; (8009114 <xTaskCheckForTimeOut+0xb8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b6:	d102      	bne.n	80090be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61fb      	str	r3, [r7, #28]
 80090bc:	e023      	b.n	8009106 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	4b15      	ldr	r3, [pc, #84]	; (8009118 <xTaskCheckForTimeOut+0xbc>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d007      	beq.n	80090da <xTaskCheckForTimeOut+0x7e>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d302      	bcc.n	80090da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090d4:	2301      	movs	r3, #1
 80090d6:	61fb      	str	r3, [r7, #28]
 80090d8:	e015      	b.n	8009106 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d20b      	bcs.n	80090fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ff9d 	bl	8009030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	61fb      	str	r3, [r7, #28]
 80090fa:	e004      	b.n	8009106 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009102:	2301      	movs	r3, #1
 8009104:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009106:	f000 fc7f 	bl	8009a08 <vPortExitCritical>

	return xReturn;
 800910a:	69fb      	ldr	r3, [r7, #28]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3720      	adds	r7, #32
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	2000041c 	.word	0x2000041c
 8009118:	20000430 	.word	0x20000430

0800911c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800911c:	b480      	push	{r7}
 800911e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009120:	4b03      	ldr	r3, [pc, #12]	; (8009130 <vTaskMissedYield+0x14>)
 8009122:	2201      	movs	r2, #1
 8009124:	601a      	str	r2, [r3, #0]
}
 8009126:	bf00      	nop
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	2000042c 	.word	0x2000042c

08009134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800913c:	f000 f852 	bl	80091e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <prvIdleTask+0x28>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d9f9      	bls.n	800913c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <prvIdleTask+0x2c>)
 800914a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009158:	e7f0      	b.n	800913c <prvIdleTask+0x8>
 800915a:	bf00      	nop
 800915c:	2000031c 	.word	0x2000031c
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	e00c      	b.n	800918a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4a12      	ldr	r2, [pc, #72]	; (80091c4 <prvInitialiseTaskLists+0x60>)
 800917c:	4413      	add	r3, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fc8e 	bl	8007aa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3301      	adds	r3, #1
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b06      	cmp	r3, #6
 800918e:	d9ef      	bls.n	8009170 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009190:	480d      	ldr	r0, [pc, #52]	; (80091c8 <prvInitialiseTaskLists+0x64>)
 8009192:	f7fe fc85 	bl	8007aa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009196:	480d      	ldr	r0, [pc, #52]	; (80091cc <prvInitialiseTaskLists+0x68>)
 8009198:	f7fe fc82 	bl	8007aa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800919c:	480c      	ldr	r0, [pc, #48]	; (80091d0 <prvInitialiseTaskLists+0x6c>)
 800919e:	f7fe fc7f 	bl	8007aa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091a2:	480c      	ldr	r0, [pc, #48]	; (80091d4 <prvInitialiseTaskLists+0x70>)
 80091a4:	f7fe fc7c 	bl	8007aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091a8:	480b      	ldr	r0, [pc, #44]	; (80091d8 <prvInitialiseTaskLists+0x74>)
 80091aa:	f7fe fc79 	bl	8007aa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091ae:	4b0b      	ldr	r3, [pc, #44]	; (80091dc <prvInitialiseTaskLists+0x78>)
 80091b0:	4a05      	ldr	r2, [pc, #20]	; (80091c8 <prvInitialiseTaskLists+0x64>)
 80091b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091b4:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <prvInitialiseTaskLists+0x7c>)
 80091b6:	4a05      	ldr	r2, [pc, #20]	; (80091cc <prvInitialiseTaskLists+0x68>)
 80091b8:	601a      	str	r2, [r3, #0]
}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	2000031c 	.word	0x2000031c
 80091c8:	200003a8 	.word	0x200003a8
 80091cc:	200003bc 	.word	0x200003bc
 80091d0:	200003d8 	.word	0x200003d8
 80091d4:	200003ec 	.word	0x200003ec
 80091d8:	20000404 	.word	0x20000404
 80091dc:	200003d0 	.word	0x200003d0
 80091e0:	200003d4 	.word	0x200003d4

080091e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091ea:	e019      	b.n	8009220 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091ec:	f000 fbde 	bl	80099ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80091f0:	4b0f      	ldr	r3, [pc, #60]	; (8009230 <prvCheckTasksWaitingTermination+0x4c>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3304      	adds	r3, #4
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe fcd9 	bl	8007bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <prvCheckTasksWaitingTermination+0x50>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	3b01      	subs	r3, #1
 8009208:	4a0a      	ldr	r2, [pc, #40]	; (8009234 <prvCheckTasksWaitingTermination+0x50>)
 800920a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <prvCheckTasksWaitingTermination+0x54>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3b01      	subs	r3, #1
 8009212:	4a09      	ldr	r2, [pc, #36]	; (8009238 <prvCheckTasksWaitingTermination+0x54>)
 8009214:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009216:	f000 fbf7 	bl	8009a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f80e 	bl	800923c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <prvCheckTasksWaitingTermination+0x54>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e1      	bne.n	80091ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	200003ec 	.word	0x200003ec
 8009234:	20000418 	.word	0x20000418
 8009238:	20000400 	.word	0x20000400

0800923c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800924a:	2b00      	cmp	r3, #0
 800924c:	d108      	bne.n	8009260 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fd86 	bl	8009d64 <vPortFree>
				vPortFree( pxTCB );
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fd83 	bl	8009d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800925e:	e017      	b.n	8009290 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009266:	2b01      	cmp	r3, #1
 8009268:	d103      	bne.n	8009272 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fd7a 	bl	8009d64 <vPortFree>
	}
 8009270:	e00e      	b.n	8009290 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009278:	2b02      	cmp	r3, #2
 800927a:	d009      	beq.n	8009290 <prvDeleteTCB+0x54>
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	e7fe      	b.n	800928e <prvDeleteTCB+0x52>
	}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800929e:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <prvResetNextTaskUnblockTime+0x44>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <prvResetNextTaskUnblockTime+0x14>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <prvResetNextTaskUnblockTime+0x16>
 80092ac:	2300      	movs	r3, #0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092b2:	4b0b      	ldr	r3, [pc, #44]	; (80092e0 <prvResetNextTaskUnblockTime+0x48>)
 80092b4:	f04f 32ff 	mov.w	r2, #4294967295
 80092b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092ba:	e008      	b.n	80092ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80092bc:	4b07      	ldr	r3, [pc, #28]	; (80092dc <prvResetNextTaskUnblockTime+0x44>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	4a05      	ldr	r2, [pc, #20]	; (80092e0 <prvResetNextTaskUnblockTime+0x48>)
 80092cc:	6013      	str	r3, [r2, #0]
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	200003d0 	.word	0x200003d0
 80092e0:	20000438 	.word	0x20000438

080092e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092ea:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <xTaskGetSchedulerState+0x34>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d102      	bne.n	80092f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092f2:	2301      	movs	r3, #1
 80092f4:	607b      	str	r3, [r7, #4]
 80092f6:	e008      	b.n	800930a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092f8:	4b08      	ldr	r3, [pc, #32]	; (800931c <xTaskGetSchedulerState+0x38>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d102      	bne.n	8009306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009300:	2302      	movs	r3, #2
 8009302:	607b      	str	r3, [r7, #4]
 8009304:	e001      	b.n	800930a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009306:	2300      	movs	r3, #0
 8009308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800930a:	687b      	ldr	r3, [r7, #4]
	}
 800930c:	4618      	mov	r0, r3
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	20000424 	.word	0x20000424
 800931c:	20000440 	.word	0x20000440

08009320 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d06e      	beq.n	8009414 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933a:	4b39      	ldr	r3, [pc, #228]	; (8009420 <xTaskPriorityInherit+0x100>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	429a      	cmp	r2, r3
 8009342:	d25e      	bcs.n	8009402 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	db06      	blt.n	800935a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800934c:	4b34      	ldr	r3, [pc, #208]	; (8009420 <xTaskPriorityInherit+0x100>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	f1c3 0207 	rsb	r2, r3, #7
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	6959      	ldr	r1, [r3, #20]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009362:	4613      	mov	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4a2e      	ldr	r2, [pc, #184]	; (8009424 <xTaskPriorityInherit+0x104>)
 800936c:	4413      	add	r3, r2
 800936e:	4299      	cmp	r1, r3
 8009370:	d101      	bne.n	8009376 <xTaskPriorityInherit+0x56>
 8009372:	2301      	movs	r3, #1
 8009374:	e000      	b.n	8009378 <xTaskPriorityInherit+0x58>
 8009376:	2300      	movs	r3, #0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d03a      	beq.n	80093f2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	3304      	adds	r3, #4
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fc17 	bl	8007bb4 <uxListRemove>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d115      	bne.n	80093b8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	4924      	ldr	r1, [pc, #144]	; (8009424 <xTaskPriorityInherit+0x104>)
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <xTaskPriorityInherit+0x98>
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	2201      	movs	r2, #1
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	43da      	mvns	r2, r3
 80093ae:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <xTaskPriorityInherit+0x108>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4013      	ands	r3, r2
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <xTaskPriorityInherit+0x108>)
 80093b6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093b8:	4b19      	ldr	r3, [pc, #100]	; (8009420 <xTaskPriorityInherit+0x100>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	2201      	movs	r2, #1
 80093c8:	409a      	lsls	r2, r3
 80093ca:	4b17      	ldr	r3, [pc, #92]	; (8009428 <xTaskPriorityInherit+0x108>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	4a15      	ldr	r2, [pc, #84]	; (8009428 <xTaskPriorityInherit+0x108>)
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4a10      	ldr	r2, [pc, #64]	; (8009424 <xTaskPriorityInherit+0x104>)
 80093e2:	441a      	add	r2, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f7fe fb85 	bl	8007afa <vListInsertEnd>
 80093f0:	e004      	b.n	80093fc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093f2:	4b0b      	ldr	r3, [pc, #44]	; (8009420 <xTaskPriorityInherit+0x100>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e008      	b.n	8009414 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009406:	4b06      	ldr	r3, [pc, #24]	; (8009420 <xTaskPriorityInherit+0x100>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	429a      	cmp	r2, r3
 800940e:	d201      	bcs.n	8009414 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009410:	2301      	movs	r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009414:	68fb      	ldr	r3, [r7, #12]
	}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20000318 	.word	0x20000318
 8009424:	2000031c 	.word	0x2000031c
 8009428:	20000420 	.word	0x20000420

0800942c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d06c      	beq.n	800951c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009442:	4b39      	ldr	r3, [pc, #228]	; (8009528 <xTaskPriorityDisinherit+0xfc>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	429a      	cmp	r2, r3
 800944a:	d009      	beq.n	8009460 <xTaskPriorityDisinherit+0x34>
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	e7fe      	b.n	800945e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009464:	2b00      	cmp	r3, #0
 8009466:	d109      	bne.n	800947c <xTaskPriorityDisinherit+0x50>
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	60bb      	str	r3, [r7, #8]
 800947a:	e7fe      	b.n	800947a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009480:	1e5a      	subs	r2, r3, #1
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800948e:	429a      	cmp	r2, r3
 8009490:	d044      	beq.n	800951c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009496:	2b00      	cmp	r3, #0
 8009498:	d140      	bne.n	800951c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	3304      	adds	r3, #4
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe fb88 	bl	8007bb4 <uxListRemove>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d115      	bne.n	80094d6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ae:	491f      	ldr	r1, [pc, #124]	; (800952c <xTaskPriorityDisinherit+0x100>)
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	440b      	add	r3, r1
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10a      	bne.n	80094d6 <xTaskPriorityDisinherit+0xaa>
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	2201      	movs	r2, #1
 80094c6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ca:	43da      	mvns	r2, r3
 80094cc:	4b18      	ldr	r3, [pc, #96]	; (8009530 <xTaskPriorityDisinherit+0x104>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4013      	ands	r3, r2
 80094d2:	4a17      	ldr	r2, [pc, #92]	; (8009530 <xTaskPriorityDisinherit+0x104>)
 80094d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e2:	f1c3 0207 	rsb	r2, r3, #7
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	2201      	movs	r2, #1
 80094f0:	409a      	lsls	r2, r3
 80094f2:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <xTaskPriorityDisinherit+0x104>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	4a0d      	ldr	r2, [pc, #52]	; (8009530 <xTaskPriorityDisinherit+0x104>)
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4613      	mov	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4a08      	ldr	r2, [pc, #32]	; (800952c <xTaskPriorityDisinherit+0x100>)
 800950a:	441a      	add	r2, r3
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	3304      	adds	r3, #4
 8009510:	4619      	mov	r1, r3
 8009512:	4610      	mov	r0, r2
 8009514:	f7fe faf1 	bl	8007afa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009518:	2301      	movs	r3, #1
 800951a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800951c:	697b      	ldr	r3, [r7, #20]
	}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20000318 	.word	0x20000318
 800952c:	2000031c 	.word	0x2000031c
 8009530:	20000420 	.word	0x20000420

08009534 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009542:	2301      	movs	r3, #1
 8009544:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 8086 	beq.w	800965a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009552:	2b00      	cmp	r3, #0
 8009554:	d109      	bne.n	800956a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	e7fe      	b.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d902      	bls.n	800957a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	61fb      	str	r3, [r7, #28]
 8009578:	e002      	b.n	8009580 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800957e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	429a      	cmp	r2, r3
 8009588:	d067      	beq.n	800965a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	429a      	cmp	r2, r3
 8009592:	d162      	bne.n	800965a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009594:	4b33      	ldr	r3, [pc, #204]	; (8009664 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	429a      	cmp	r2, r3
 800959c:	d109      	bne.n	80095b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	60bb      	str	r3, [r7, #8]
 80095b0:	e7fe      	b.n	80095b0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	db04      	blt.n	80095d0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	f1c3 0207 	rsb	r2, r3, #7
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	6959      	ldr	r1, [r3, #20]
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	4a22      	ldr	r2, [pc, #136]	; (8009668 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80095e0:	4413      	add	r3, r2
 80095e2:	4299      	cmp	r1, r3
 80095e4:	d101      	bne.n	80095ea <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e000      	b.n	80095ec <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80095ea:	2300      	movs	r3, #0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d034      	beq.n	800965a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fadd 	bl	8007bb4 <uxListRemove>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d115      	bne.n	800962c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009604:	4918      	ldr	r1, [pc, #96]	; (8009668 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	440b      	add	r3, r1
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	2201      	movs	r2, #1
 800961c:	fa02 f303 	lsl.w	r3, r2, r3
 8009620:	43da      	mvns	r2, r3
 8009622:	4b12      	ldr	r3, [pc, #72]	; (800966c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4013      	ands	r3, r2
 8009628:	4a10      	ldr	r2, [pc, #64]	; (800966c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800962a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	2201      	movs	r2, #1
 8009632:	409a      	lsls	r2, r3
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4313      	orrs	r3, r2
 800963a:	4a0c      	ldr	r2, [pc, #48]	; (800966c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4a07      	ldr	r2, [pc, #28]	; (8009668 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800964c:	441a      	add	r2, r3
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7fe fa50 	bl	8007afa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800965a:	bf00      	nop
 800965c:	3720      	adds	r7, #32
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000318 	.word	0x20000318
 8009668:	2000031c 	.word	0x2000031c
 800966c:	20000420 	.word	0x20000420

08009670 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009674:	4b07      	ldr	r3, [pc, #28]	; (8009694 <pvTaskIncrementMutexHeldCount+0x24>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800967c:	4b05      	ldr	r3, [pc, #20]	; (8009694 <pvTaskIncrementMutexHeldCount+0x24>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009682:	3201      	adds	r2, #1
 8009684:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009686:	4b03      	ldr	r3, [pc, #12]	; (8009694 <pvTaskIncrementMutexHeldCount+0x24>)
 8009688:	681b      	ldr	r3, [r3, #0]
	}
 800968a:	4618      	mov	r0, r3
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	20000318 	.word	0x20000318

08009698 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096a2:	4b29      	ldr	r3, [pc, #164]	; (8009748 <prvAddCurrentTaskToDelayedList+0xb0>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096a8:	4b28      	ldr	r3, [pc, #160]	; (800974c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fa80 	bl	8007bb4 <uxListRemove>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10b      	bne.n	80096d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80096ba:	4b24      	ldr	r3, [pc, #144]	; (800974c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	2201      	movs	r2, #1
 80096c2:	fa02 f303 	lsl.w	r3, r2, r3
 80096c6:	43da      	mvns	r2, r3
 80096c8:	4b21      	ldr	r3, [pc, #132]	; (8009750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4013      	ands	r3, r2
 80096ce:	4a20      	ldr	r2, [pc, #128]	; (8009750 <prvAddCurrentTaskToDelayedList+0xb8>)
 80096d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d10a      	bne.n	80096f0 <prvAddCurrentTaskToDelayedList+0x58>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d007      	beq.n	80096f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096e0:	4b1a      	ldr	r3, [pc, #104]	; (800974c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	481a      	ldr	r0, [pc, #104]	; (8009754 <prvAddCurrentTaskToDelayedList+0xbc>)
 80096ea:	f7fe fa06 	bl	8007afa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096ee:	e026      	b.n	800973e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4413      	add	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	429a      	cmp	r2, r3
 8009706:	d209      	bcs.n	800971c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009708:	4b13      	ldr	r3, [pc, #76]	; (8009758 <prvAddCurrentTaskToDelayedList+0xc0>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	4b0f      	ldr	r3, [pc, #60]	; (800974c <prvAddCurrentTaskToDelayedList+0xb4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3304      	adds	r3, #4
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f7fe fa14 	bl	8007b42 <vListInsert>
}
 800971a:	e010      	b.n	800973e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800971c:	4b0f      	ldr	r3, [pc, #60]	; (800975c <prvAddCurrentTaskToDelayedList+0xc4>)
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	4b0a      	ldr	r3, [pc, #40]	; (800974c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3304      	adds	r3, #4
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f7fe fa0a 	bl	8007b42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800972e:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	429a      	cmp	r2, r3
 8009736:	d202      	bcs.n	800973e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009738:	4a09      	ldr	r2, [pc, #36]	; (8009760 <prvAddCurrentTaskToDelayedList+0xc8>)
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	6013      	str	r3, [r2, #0]
}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	2000041c 	.word	0x2000041c
 800974c:	20000318 	.word	0x20000318
 8009750:	20000420 	.word	0x20000420
 8009754:	20000404 	.word	0x20000404
 8009758:	200003d4 	.word	0x200003d4
 800975c:	200003d0 	.word	0x200003d0
 8009760:	20000438 	.word	0x20000438

08009764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3b04      	subs	r3, #4
 8009774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800977c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3b04      	subs	r3, #4
 8009782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f023 0201 	bic.w	r2, r3, #1
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3b04      	subs	r3, #4
 8009792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009794:	4a0c      	ldr	r2, [pc, #48]	; (80097c8 <pxPortInitialiseStack+0x64>)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3b14      	subs	r3, #20
 800979e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f06f 0202 	mvn.w	r2, #2
 80097b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3b20      	subs	r3, #32
 80097b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097ba:	68fb      	ldr	r3, [r7, #12]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	080097cd 	.word	0x080097cd

080097cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097d6:	4b11      	ldr	r3, [pc, #68]	; (800981c <prvTaskExitError+0x50>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d009      	beq.n	80097f4 <prvTaskExitError+0x28>
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	e7fe      	b.n	80097f2 <prvTaskExitError+0x26>
 80097f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009806:	bf00      	nop
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0fc      	beq.n	8009808 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	2000000c 	.word	0x2000000c

08009820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009820:	4b07      	ldr	r3, [pc, #28]	; (8009840 <pxCurrentTCBConst2>)
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	6808      	ldr	r0, [r1, #0]
 8009826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982a:	f380 8809 	msr	PSP, r0
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f04f 0000 	mov.w	r0, #0
 8009836:	f380 8811 	msr	BASEPRI, r0
 800983a:	4770      	bx	lr
 800983c:	f3af 8000 	nop.w

08009840 <pxCurrentTCBConst2>:
 8009840:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009844:	bf00      	nop
 8009846:	bf00      	nop

08009848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009848:	4808      	ldr	r0, [pc, #32]	; (800986c <prvPortStartFirstTask+0x24>)
 800984a:	6800      	ldr	r0, [r0, #0]
 800984c:	6800      	ldr	r0, [r0, #0]
 800984e:	f380 8808 	msr	MSP, r0
 8009852:	f04f 0000 	mov.w	r0, #0
 8009856:	f380 8814 	msr	CONTROL, r0
 800985a:	b662      	cpsie	i
 800985c:	b661      	cpsie	f
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	df00      	svc	0
 8009868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800986a:	bf00      	nop
 800986c:	e000ed08 	.word	0xe000ed08

08009870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009876:	4b44      	ldr	r3, [pc, #272]	; (8009988 <xPortStartScheduler+0x118>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a44      	ldr	r2, [pc, #272]	; (800998c <xPortStartScheduler+0x11c>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d109      	bne.n	8009894 <xPortStartScheduler+0x24>
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	613b      	str	r3, [r7, #16]
 8009892:	e7fe      	b.n	8009892 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009894:	4b3c      	ldr	r3, [pc, #240]	; (8009988 <xPortStartScheduler+0x118>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a3d      	ldr	r2, [pc, #244]	; (8009990 <xPortStartScheduler+0x120>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d109      	bne.n	80098b2 <xPortStartScheduler+0x42>
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	e7fe      	b.n	80098b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098b2:	4b38      	ldr	r3, [pc, #224]	; (8009994 <xPortStartScheduler+0x124>)
 80098b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	22ff      	movs	r2, #255	; 0xff
 80098c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	4b30      	ldr	r3, [pc, #192]	; (8009998 <xPortStartScheduler+0x128>)
 80098d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098da:	4b30      	ldr	r3, [pc, #192]	; (800999c <xPortStartScheduler+0x12c>)
 80098dc:	2207      	movs	r2, #7
 80098de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098e0:	e009      	b.n	80098f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80098e2:	4b2e      	ldr	r3, [pc, #184]	; (800999c <xPortStartScheduler+0x12c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3b01      	subs	r3, #1
 80098e8:	4a2c      	ldr	r2, [pc, #176]	; (800999c <xPortStartScheduler+0x12c>)
 80098ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098ec:	78fb      	ldrb	r3, [r7, #3]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fe:	2b80      	cmp	r3, #128	; 0x80
 8009900:	d0ef      	beq.n	80098e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009902:	4b26      	ldr	r3, [pc, #152]	; (800999c <xPortStartScheduler+0x12c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f1c3 0307 	rsb	r3, r3, #7
 800990a:	2b04      	cmp	r3, #4
 800990c:	d009      	beq.n	8009922 <xPortStartScheduler+0xb2>
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	60bb      	str	r3, [r7, #8]
 8009920:	e7fe      	b.n	8009920 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009922:	4b1e      	ldr	r3, [pc, #120]	; (800999c <xPortStartScheduler+0x12c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	021b      	lsls	r3, r3, #8
 8009928:	4a1c      	ldr	r2, [pc, #112]	; (800999c <xPortStartScheduler+0x12c>)
 800992a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800992c:	4b1b      	ldr	r3, [pc, #108]	; (800999c <xPortStartScheduler+0x12c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009934:	4a19      	ldr	r2, [pc, #100]	; (800999c <xPortStartScheduler+0x12c>)
 8009936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009940:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <xPortStartScheduler+0x130>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a16      	ldr	r2, [pc, #88]	; (80099a0 <xPortStartScheduler+0x130>)
 8009946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800994a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800994c:	4b14      	ldr	r3, [pc, #80]	; (80099a0 <xPortStartScheduler+0x130>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a13      	ldr	r2, [pc, #76]	; (80099a0 <xPortStartScheduler+0x130>)
 8009952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009958:	f000 f8d6 	bl	8009b08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800995c:	4b11      	ldr	r3, [pc, #68]	; (80099a4 <xPortStartScheduler+0x134>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009962:	f000 f8f5 	bl	8009b50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009966:	4b10      	ldr	r3, [pc, #64]	; (80099a8 <xPortStartScheduler+0x138>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a0f      	ldr	r2, [pc, #60]	; (80099a8 <xPortStartScheduler+0x138>)
 800996c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009970:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009972:	f7ff ff69 	bl	8009848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009976:	f7ff fa7b 	bl	8008e70 <vTaskSwitchContext>
	prvTaskExitError();
 800997a:	f7ff ff27 	bl	80097cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	e000ed00 	.word	0xe000ed00
 800998c:	410fc271 	.word	0x410fc271
 8009990:	410fc270 	.word	0x410fc270
 8009994:	e000e400 	.word	0xe000e400
 8009998:	20000444 	.word	0x20000444
 800999c:	20000448 	.word	0x20000448
 80099a0:	e000ed20 	.word	0xe000ed20
 80099a4:	2000000c 	.word	0x2000000c
 80099a8:	e000ef34 	.word	0xe000ef34

080099ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099c4:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <vPortEnterCritical+0x54>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	4a0d      	ldr	r2, [pc, #52]	; (8009a00 <vPortEnterCritical+0x54>)
 80099cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099ce:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <vPortEnterCritical+0x54>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d10e      	bne.n	80099f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099d6:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <vPortEnterCritical+0x58>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d009      	beq.n	80099f4 <vPortEnterCritical+0x48>
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	603b      	str	r3, [r7, #0]
 80099f2:	e7fe      	b.n	80099f2 <vPortEnterCritical+0x46>
	}
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	2000000c 	.word	0x2000000c
 8009a04:	e000ed04 	.word	0xe000ed04

08009a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a0e:	4b11      	ldr	r3, [pc, #68]	; (8009a54 <vPortExitCritical+0x4c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d109      	bne.n	8009a2a <vPortExitCritical+0x22>
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	607b      	str	r3, [r7, #4]
 8009a28:	e7fe      	b.n	8009a28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009a2a:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <vPortExitCritical+0x4c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	4a08      	ldr	r2, [pc, #32]	; (8009a54 <vPortExitCritical+0x4c>)
 8009a32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a34:	4b07      	ldr	r3, [pc, #28]	; (8009a54 <vPortExitCritical+0x4c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <vPortExitCritical+0x3e>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	2000000c 	.word	0x2000000c
	...

08009a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a60:	f3ef 8009 	mrs	r0, PSP
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <pxCurrentTCBConst>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	f01e 0f10 	tst.w	lr, #16
 8009a70:	bf08      	it	eq
 8009a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	6010      	str	r0, [r2, #0]
 8009a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a84:	f380 8811 	msr	BASEPRI, r0
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f7ff f9ee 	bl	8008e70 <vTaskSwitchContext>
 8009a94:	f04f 0000 	mov.w	r0, #0
 8009a98:	f380 8811 	msr	BASEPRI, r0
 8009a9c:	bc09      	pop	{r0, r3}
 8009a9e:	6819      	ldr	r1, [r3, #0]
 8009aa0:	6808      	ldr	r0, [r1, #0]
 8009aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa6:	f01e 0f10 	tst.w	lr, #16
 8009aaa:	bf08      	it	eq
 8009aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ab0:	f380 8809 	msr	PSP, r0
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	f3af 8000 	nop.w

08009ac0 <pxCurrentTCBConst>:
 8009ac0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop

08009ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ae0:	f7ff f90a 	bl	8008cf8 <xTaskIncrementTick>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aea:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <SysTick_Handler+0x3c>)
 8009aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	2300      	movs	r3, #0
 8009af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <vPortSetupTimerInterrupt+0x34>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <vPortSetupTimerInterrupt+0x38>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <vPortSetupTimerInterrupt+0x3c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a0a      	ldr	r2, [pc, #40]	; (8009b48 <vPortSetupTimerInterrupt+0x40>)
 8009b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b22:	099b      	lsrs	r3, r3, #6
 8009b24:	4a09      	ldr	r2, [pc, #36]	; (8009b4c <vPortSetupTimerInterrupt+0x44>)
 8009b26:	3b01      	subs	r3, #1
 8009b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b2a:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <vPortSetupTimerInterrupt+0x34>)
 8009b2c:	2207      	movs	r2, #7
 8009b2e:	601a      	str	r2, [r3, #0]
}
 8009b30:	bf00      	nop
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	e000e010 	.word	0xe000e010
 8009b40:	e000e018 	.word	0xe000e018
 8009b44:	20000000 	.word	0x20000000
 8009b48:	10624dd3 	.word	0x10624dd3
 8009b4c:	e000e014 	.word	0xe000e014

08009b50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b60 <vPortEnableVFP+0x10>
 8009b54:	6801      	ldr	r1, [r0, #0]
 8009b56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b5a:	6001      	str	r1, [r0, #0]
 8009b5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b5e:	bf00      	nop
 8009b60:	e000ed88 	.word	0xe000ed88

08009b64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b6a:	f3ef 8305 	mrs	r3, IPSR
 8009b6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2b0f      	cmp	r3, #15
 8009b74:	d913      	bls.n	8009b9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b76:	4a16      	ldr	r2, [pc, #88]	; (8009bd0 <vPortValidateInterruptPriority+0x6c>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b80:	4b14      	ldr	r3, [pc, #80]	; (8009bd4 <vPortValidateInterruptPriority+0x70>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	7afa      	ldrb	r2, [r7, #11]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d209      	bcs.n	8009b9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	607b      	str	r3, [r7, #4]
 8009b9c:	e7fe      	b.n	8009b9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b9e:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <vPortValidateInterruptPriority+0x74>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <vPortValidateInterruptPriority+0x78>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d909      	bls.n	8009bc2 <vPortValidateInterruptPriority+0x5e>
 8009bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	e7fe      	b.n	8009bc0 <vPortValidateInterruptPriority+0x5c>
	}
 8009bc2:	bf00      	nop
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	e000e3f0 	.word	0xe000e3f0
 8009bd4:	20000444 	.word	0x20000444
 8009bd8:	e000ed0c 	.word	0xe000ed0c
 8009bdc:	20000448 	.word	0x20000448

08009be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bec:	f7fe ffda 	bl	8008ba4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bf0:	4b57      	ldr	r3, [pc, #348]	; (8009d50 <pvPortMalloc+0x170>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bf8:	f000 f90c 	bl	8009e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bfc:	4b55      	ldr	r3, [pc, #340]	; (8009d54 <pvPortMalloc+0x174>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4013      	ands	r3, r2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 808c 	bne.w	8009d22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01c      	beq.n	8009c4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009c10:	2208      	movs	r2, #8
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4413      	add	r3, r2
 8009c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f003 0307 	and.w	r3, r3, #7
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d013      	beq.n	8009c4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f023 0307 	bic.w	r3, r3, #7
 8009c28:	3308      	adds	r3, #8
 8009c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d009      	beq.n	8009c4a <pvPortMalloc+0x6a>
 8009c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	e7fe      	b.n	8009c48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d068      	beq.n	8009d22 <pvPortMalloc+0x142>
 8009c50:	4b41      	ldr	r3, [pc, #260]	; (8009d58 <pvPortMalloc+0x178>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d863      	bhi.n	8009d22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c5a:	4b40      	ldr	r3, [pc, #256]	; (8009d5c <pvPortMalloc+0x17c>)
 8009c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c5e:	4b3f      	ldr	r3, [pc, #252]	; (8009d5c <pvPortMalloc+0x17c>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c64:	e004      	b.n	8009c70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d903      	bls.n	8009c82 <pvPortMalloc+0xa2>
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1f1      	bne.n	8009c66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c82:	4b33      	ldr	r3, [pc, #204]	; (8009d50 <pvPortMalloc+0x170>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d04a      	beq.n	8009d22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2208      	movs	r2, #8
 8009c92:	4413      	add	r3, r2
 8009c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	1ad2      	subs	r2, r2, r3
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d91e      	bls.n	8009cec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	f003 0307 	and.w	r3, r3, #7
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d009      	beq.n	8009cd4 <pvPortMalloc+0xf4>
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	613b      	str	r3, [r7, #16]
 8009cd2:	e7fe      	b.n	8009cd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	1ad2      	subs	r2, r2, r3
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ce6:	69b8      	ldr	r0, [r7, #24]
 8009ce8:	f000 f8f6 	bl	8009ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cec:	4b1a      	ldr	r3, [pc, #104]	; (8009d58 <pvPortMalloc+0x178>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	4a18      	ldr	r2, [pc, #96]	; (8009d58 <pvPortMalloc+0x178>)
 8009cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cfa:	4b17      	ldr	r3, [pc, #92]	; (8009d58 <pvPortMalloc+0x178>)
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4b18      	ldr	r3, [pc, #96]	; (8009d60 <pvPortMalloc+0x180>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d203      	bcs.n	8009d0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d06:	4b14      	ldr	r3, [pc, #80]	; (8009d58 <pvPortMalloc+0x178>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a15      	ldr	r2, [pc, #84]	; (8009d60 <pvPortMalloc+0x180>)
 8009d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	685a      	ldr	r2, [r3, #4]
 8009d12:	4b10      	ldr	r3, [pc, #64]	; (8009d54 <pvPortMalloc+0x174>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	431a      	orrs	r2, r3
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d22:	f7fe ff4d 	bl	8008bc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d009      	beq.n	8009d44 <pvPortMalloc+0x164>
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	e7fe      	b.n	8009d42 <pvPortMalloc+0x162>
	return pvReturn;
 8009d44:	69fb      	ldr	r3, [r7, #28]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3728      	adds	r7, #40	; 0x28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20001bc4 	.word	0x20001bc4
 8009d54:	20001bd0 	.word	0x20001bd0
 8009d58:	20001bc8 	.word	0x20001bc8
 8009d5c:	20001bbc 	.word	0x20001bbc
 8009d60:	20001bcc 	.word	0x20001bcc

08009d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d046      	beq.n	8009e04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d76:	2308      	movs	r3, #8
 8009d78:	425b      	negs	r3, r3
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	4413      	add	r3, r2
 8009d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	4b20      	ldr	r3, [pc, #128]	; (8009e0c <vPortFree+0xa8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d109      	bne.n	8009da6 <vPortFree+0x42>
 8009d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e7fe      	b.n	8009da4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d009      	beq.n	8009dc2 <vPortFree+0x5e>
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60bb      	str	r3, [r7, #8]
 8009dc0:	e7fe      	b.n	8009dc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	685a      	ldr	r2, [r3, #4]
 8009dc6:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <vPortFree+0xa8>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4013      	ands	r3, r2
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d019      	beq.n	8009e04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d115      	bne.n	8009e04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	4b0b      	ldr	r3, [pc, #44]	; (8009e0c <vPortFree+0xa8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	43db      	mvns	r3, r3
 8009de2:	401a      	ands	r2, r3
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009de8:	f7fe fedc 	bl	8008ba4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	685a      	ldr	r2, [r3, #4]
 8009df0:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <vPortFree+0xac>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4413      	add	r3, r2
 8009df6:	4a06      	ldr	r2, [pc, #24]	; (8009e10 <vPortFree+0xac>)
 8009df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dfa:	6938      	ldr	r0, [r7, #16]
 8009dfc:	f000 f86c 	bl	8009ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e00:	f7fe fede 	bl	8008bc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e04:	bf00      	nop
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	20001bd0 	.word	0x20001bd0
 8009e10:	20001bc8 	.word	0x20001bc8

08009e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e1a:	f241 7370 	movw	r3, #6000	; 0x1770
 8009e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e20:	4b27      	ldr	r3, [pc, #156]	; (8009ec0 <prvHeapInit+0xac>)
 8009e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f003 0307 	and.w	r3, r3, #7
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00c      	beq.n	8009e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3307      	adds	r3, #7
 8009e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 0307 	bic.w	r3, r3, #7
 8009e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	4a1f      	ldr	r2, [pc, #124]	; (8009ec0 <prvHeapInit+0xac>)
 8009e44:	4413      	add	r3, r2
 8009e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e4c:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <prvHeapInit+0xb0>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e52:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <prvHeapInit+0xb0>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e60:	2208      	movs	r2, #8
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	1a9b      	subs	r3, r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0307 	bic.w	r3, r3, #7
 8009e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4a15      	ldr	r2, [pc, #84]	; (8009ec8 <prvHeapInit+0xb4>)
 8009e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e76:	4b14      	ldr	r3, [pc, #80]	; (8009ec8 <prvHeapInit+0xb4>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e7e:	4b12      	ldr	r3, [pc, #72]	; (8009ec8 <prvHeapInit+0xb4>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2200      	movs	r2, #0
 8009e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	1ad2      	subs	r2, r2, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e94:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <prvHeapInit+0xb4>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	4a0a      	ldr	r2, [pc, #40]	; (8009ecc <prvHeapInit+0xb8>)
 8009ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	4a09      	ldr	r2, [pc, #36]	; (8009ed0 <prvHeapInit+0xbc>)
 8009eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009eac:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <prvHeapInit+0xc0>)
 8009eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009eb2:	601a      	str	r2, [r3, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	2000044c 	.word	0x2000044c
 8009ec4:	20001bbc 	.word	0x20001bbc
 8009ec8:	20001bc4 	.word	0x20001bc4
 8009ecc:	20001bcc 	.word	0x20001bcc
 8009ed0:	20001bc8 	.word	0x20001bc8
 8009ed4:	20001bd0 	.word	0x20001bd0

08009ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ee0:	4b28      	ldr	r3, [pc, #160]	; (8009f84 <prvInsertBlockIntoFreeList+0xac>)
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	e002      	b.n	8009eec <prvInsertBlockIntoFreeList+0x14>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d8f7      	bhi.n	8009ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	4413      	add	r3, r2
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d108      	bne.n	8009f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	441a      	add	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	441a      	add	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d118      	bne.n	8009f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <prvInsertBlockIntoFreeList+0xb0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d00d      	beq.n	8009f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	441a      	add	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]
 8009f54:	e008      	b.n	8009f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <prvInsertBlockIntoFreeList+0xb0>)
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	e003      	b.n	8009f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d002      	beq.n	8009f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f76:	bf00      	nop
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	20001bbc 	.word	0x20001bbc
 8009f88:	20001bc4 	.word	0x20001bc4

08009f8c <__errno>:
 8009f8c:	4b01      	ldr	r3, [pc, #4]	; (8009f94 <__errno+0x8>)
 8009f8e:	6818      	ldr	r0, [r3, #0]
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	20000010 	.word	0x20000010

08009f98 <__libc_init_array>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4e0d      	ldr	r6, [pc, #52]	; (8009fd0 <__libc_init_array+0x38>)
 8009f9c:	4c0d      	ldr	r4, [pc, #52]	; (8009fd4 <__libc_init_array+0x3c>)
 8009f9e:	1ba4      	subs	r4, r4, r6
 8009fa0:	10a4      	asrs	r4, r4, #2
 8009fa2:	2500      	movs	r5, #0
 8009fa4:	42a5      	cmp	r5, r4
 8009fa6:	d109      	bne.n	8009fbc <__libc_init_array+0x24>
 8009fa8:	4e0b      	ldr	r6, [pc, #44]	; (8009fd8 <__libc_init_array+0x40>)
 8009faa:	4c0c      	ldr	r4, [pc, #48]	; (8009fdc <__libc_init_array+0x44>)
 8009fac:	f000 fc28 	bl	800a800 <_init>
 8009fb0:	1ba4      	subs	r4, r4, r6
 8009fb2:	10a4      	asrs	r4, r4, #2
 8009fb4:	2500      	movs	r5, #0
 8009fb6:	42a5      	cmp	r5, r4
 8009fb8:	d105      	bne.n	8009fc6 <__libc_init_array+0x2e>
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009fc0:	4798      	blx	r3
 8009fc2:	3501      	adds	r5, #1
 8009fc4:	e7ee      	b.n	8009fa4 <__libc_init_array+0xc>
 8009fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009fca:	4798      	blx	r3
 8009fcc:	3501      	adds	r5, #1
 8009fce:	e7f2      	b.n	8009fb6 <__libc_init_array+0x1e>
 8009fd0:	0800aa24 	.word	0x0800aa24
 8009fd4:	0800aa24 	.word	0x0800aa24
 8009fd8:	0800aa24 	.word	0x0800aa24
 8009fdc:	0800aa28 	.word	0x0800aa28

08009fe0 <memcpy>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	1e43      	subs	r3, r0, #1
 8009fe4:	440a      	add	r2, r1
 8009fe6:	4291      	cmp	r1, r2
 8009fe8:	d100      	bne.n	8009fec <memcpy+0xc>
 8009fea:	bd10      	pop	{r4, pc}
 8009fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ff4:	e7f7      	b.n	8009fe6 <memcpy+0x6>

08009ff6 <memset>:
 8009ff6:	4402      	add	r2, r0
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d100      	bne.n	800a000 <memset+0xa>
 8009ffe:	4770      	bx	lr
 800a000:	f803 1b01 	strb.w	r1, [r3], #1
 800a004:	e7f9      	b.n	8009ffa <memset+0x4>
	...

0800a008 <siprintf>:
 800a008:	b40e      	push	{r1, r2, r3}
 800a00a:	b500      	push	{lr}
 800a00c:	b09c      	sub	sp, #112	; 0x70
 800a00e:	ab1d      	add	r3, sp, #116	; 0x74
 800a010:	9002      	str	r0, [sp, #8]
 800a012:	9006      	str	r0, [sp, #24]
 800a014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a018:	4809      	ldr	r0, [pc, #36]	; (800a040 <siprintf+0x38>)
 800a01a:	9107      	str	r1, [sp, #28]
 800a01c:	9104      	str	r1, [sp, #16]
 800a01e:	4909      	ldr	r1, [pc, #36]	; (800a044 <siprintf+0x3c>)
 800a020:	f853 2b04 	ldr.w	r2, [r3], #4
 800a024:	9105      	str	r1, [sp, #20]
 800a026:	6800      	ldr	r0, [r0, #0]
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	a902      	add	r1, sp, #8
 800a02c:	f000 f866 	bl	800a0fc <_svfiprintf_r>
 800a030:	9b02      	ldr	r3, [sp, #8]
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	b01c      	add	sp, #112	; 0x70
 800a038:	f85d eb04 	ldr.w	lr, [sp], #4
 800a03c:	b003      	add	sp, #12
 800a03e:	4770      	bx	lr
 800a040:	20000010 	.word	0x20000010
 800a044:	ffff0208 	.word	0xffff0208

0800a048 <__ssputs_r>:
 800a048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	688e      	ldr	r6, [r1, #8]
 800a04e:	429e      	cmp	r6, r3
 800a050:	4682      	mov	sl, r0
 800a052:	460c      	mov	r4, r1
 800a054:	4690      	mov	r8, r2
 800a056:	4699      	mov	r9, r3
 800a058:	d837      	bhi.n	800a0ca <__ssputs_r+0x82>
 800a05a:	898a      	ldrh	r2, [r1, #12]
 800a05c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a060:	d031      	beq.n	800a0c6 <__ssputs_r+0x7e>
 800a062:	6825      	ldr	r5, [r4, #0]
 800a064:	6909      	ldr	r1, [r1, #16]
 800a066:	1a6f      	subs	r7, r5, r1
 800a068:	6965      	ldr	r5, [r4, #20]
 800a06a:	2302      	movs	r3, #2
 800a06c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a070:	fb95 f5f3 	sdiv	r5, r5, r3
 800a074:	f109 0301 	add.w	r3, r9, #1
 800a078:	443b      	add	r3, r7
 800a07a:	429d      	cmp	r5, r3
 800a07c:	bf38      	it	cc
 800a07e:	461d      	movcc	r5, r3
 800a080:	0553      	lsls	r3, r2, #21
 800a082:	d530      	bpl.n	800a0e6 <__ssputs_r+0x9e>
 800a084:	4629      	mov	r1, r5
 800a086:	f000 fb21 	bl	800a6cc <_malloc_r>
 800a08a:	4606      	mov	r6, r0
 800a08c:	b950      	cbnz	r0, 800a0a4 <__ssputs_r+0x5c>
 800a08e:	230c      	movs	r3, #12
 800a090:	f8ca 3000 	str.w	r3, [sl]
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a09a:	81a3      	strh	r3, [r4, #12]
 800a09c:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a4:	463a      	mov	r2, r7
 800a0a6:	6921      	ldr	r1, [r4, #16]
 800a0a8:	f7ff ff9a 	bl	8009fe0 <memcpy>
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	6126      	str	r6, [r4, #16]
 800a0ba:	6165      	str	r5, [r4, #20]
 800a0bc:	443e      	add	r6, r7
 800a0be:	1bed      	subs	r5, r5, r7
 800a0c0:	6026      	str	r6, [r4, #0]
 800a0c2:	60a5      	str	r5, [r4, #8]
 800a0c4:	464e      	mov	r6, r9
 800a0c6:	454e      	cmp	r6, r9
 800a0c8:	d900      	bls.n	800a0cc <__ssputs_r+0x84>
 800a0ca:	464e      	mov	r6, r9
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	f000 fa93 	bl	800a5fc <memmove>
 800a0d6:	68a3      	ldr	r3, [r4, #8]
 800a0d8:	1b9b      	subs	r3, r3, r6
 800a0da:	60a3      	str	r3, [r4, #8]
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	441e      	add	r6, r3
 800a0e0:	6026      	str	r6, [r4, #0]
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	e7dc      	b.n	800a0a0 <__ssputs_r+0x58>
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	f000 fb4a 	bl	800a780 <_realloc_r>
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d1e2      	bne.n	800a0b8 <__ssputs_r+0x70>
 800a0f2:	6921      	ldr	r1, [r4, #16]
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	f000 fa9b 	bl	800a630 <_free_r>
 800a0fa:	e7c8      	b.n	800a08e <__ssputs_r+0x46>

0800a0fc <_svfiprintf_r>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	461d      	mov	r5, r3
 800a102:	898b      	ldrh	r3, [r1, #12]
 800a104:	061f      	lsls	r7, r3, #24
 800a106:	b09d      	sub	sp, #116	; 0x74
 800a108:	4680      	mov	r8, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	4616      	mov	r6, r2
 800a10e:	d50f      	bpl.n	800a130 <_svfiprintf_r+0x34>
 800a110:	690b      	ldr	r3, [r1, #16]
 800a112:	b96b      	cbnz	r3, 800a130 <_svfiprintf_r+0x34>
 800a114:	2140      	movs	r1, #64	; 0x40
 800a116:	f000 fad9 	bl	800a6cc <_malloc_r>
 800a11a:	6020      	str	r0, [r4, #0]
 800a11c:	6120      	str	r0, [r4, #16]
 800a11e:	b928      	cbnz	r0, 800a12c <_svfiprintf_r+0x30>
 800a120:	230c      	movs	r3, #12
 800a122:	f8c8 3000 	str.w	r3, [r8]
 800a126:	f04f 30ff 	mov.w	r0, #4294967295
 800a12a:	e0c8      	b.n	800a2be <_svfiprintf_r+0x1c2>
 800a12c:	2340      	movs	r3, #64	; 0x40
 800a12e:	6163      	str	r3, [r4, #20]
 800a130:	2300      	movs	r3, #0
 800a132:	9309      	str	r3, [sp, #36]	; 0x24
 800a134:	2320      	movs	r3, #32
 800a136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13a:	2330      	movs	r3, #48	; 0x30
 800a13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a140:	9503      	str	r5, [sp, #12]
 800a142:	f04f 0b01 	mov.w	fp, #1
 800a146:	4637      	mov	r7, r6
 800a148:	463d      	mov	r5, r7
 800a14a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a14e:	b10b      	cbz	r3, 800a154 <_svfiprintf_r+0x58>
 800a150:	2b25      	cmp	r3, #37	; 0x25
 800a152:	d13e      	bne.n	800a1d2 <_svfiprintf_r+0xd6>
 800a154:	ebb7 0a06 	subs.w	sl, r7, r6
 800a158:	d00b      	beq.n	800a172 <_svfiprintf_r+0x76>
 800a15a:	4653      	mov	r3, sl
 800a15c:	4632      	mov	r2, r6
 800a15e:	4621      	mov	r1, r4
 800a160:	4640      	mov	r0, r8
 800a162:	f7ff ff71 	bl	800a048 <__ssputs_r>
 800a166:	3001      	adds	r0, #1
 800a168:	f000 80a4 	beq.w	800a2b4 <_svfiprintf_r+0x1b8>
 800a16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16e:	4453      	add	r3, sl
 800a170:	9309      	str	r3, [sp, #36]	; 0x24
 800a172:	783b      	ldrb	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 809d 	beq.w	800a2b4 <_svfiprintf_r+0x1b8>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f04f 32ff 	mov.w	r2, #4294967295
 800a180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a184:	9304      	str	r3, [sp, #16]
 800a186:	9307      	str	r3, [sp, #28]
 800a188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a18c:	931a      	str	r3, [sp, #104]	; 0x68
 800a18e:	462f      	mov	r7, r5
 800a190:	2205      	movs	r2, #5
 800a192:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a196:	4850      	ldr	r0, [pc, #320]	; (800a2d8 <_svfiprintf_r+0x1dc>)
 800a198:	f7f6 f822 	bl	80001e0 <memchr>
 800a19c:	9b04      	ldr	r3, [sp, #16]
 800a19e:	b9d0      	cbnz	r0, 800a1d6 <_svfiprintf_r+0xda>
 800a1a0:	06d9      	lsls	r1, r3, #27
 800a1a2:	bf44      	itt	mi
 800a1a4:	2220      	movmi	r2, #32
 800a1a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1aa:	071a      	lsls	r2, r3, #28
 800a1ac:	bf44      	itt	mi
 800a1ae:	222b      	movmi	r2, #43	; 0x2b
 800a1b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1b4:	782a      	ldrb	r2, [r5, #0]
 800a1b6:	2a2a      	cmp	r2, #42	; 0x2a
 800a1b8:	d015      	beq.n	800a1e6 <_svfiprintf_r+0xea>
 800a1ba:	9a07      	ldr	r2, [sp, #28]
 800a1bc:	462f      	mov	r7, r5
 800a1be:	2000      	movs	r0, #0
 800a1c0:	250a      	movs	r5, #10
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1c8:	3b30      	subs	r3, #48	; 0x30
 800a1ca:	2b09      	cmp	r3, #9
 800a1cc:	d94d      	bls.n	800a26a <_svfiprintf_r+0x16e>
 800a1ce:	b1b8      	cbz	r0, 800a200 <_svfiprintf_r+0x104>
 800a1d0:	e00f      	b.n	800a1f2 <_svfiprintf_r+0xf6>
 800a1d2:	462f      	mov	r7, r5
 800a1d4:	e7b8      	b.n	800a148 <_svfiprintf_r+0x4c>
 800a1d6:	4a40      	ldr	r2, [pc, #256]	; (800a2d8 <_svfiprintf_r+0x1dc>)
 800a1d8:	1a80      	subs	r0, r0, r2
 800a1da:	fa0b f000 	lsl.w	r0, fp, r0
 800a1de:	4318      	orrs	r0, r3
 800a1e0:	9004      	str	r0, [sp, #16]
 800a1e2:	463d      	mov	r5, r7
 800a1e4:	e7d3      	b.n	800a18e <_svfiprintf_r+0x92>
 800a1e6:	9a03      	ldr	r2, [sp, #12]
 800a1e8:	1d11      	adds	r1, r2, #4
 800a1ea:	6812      	ldr	r2, [r2, #0]
 800a1ec:	9103      	str	r1, [sp, #12]
 800a1ee:	2a00      	cmp	r2, #0
 800a1f0:	db01      	blt.n	800a1f6 <_svfiprintf_r+0xfa>
 800a1f2:	9207      	str	r2, [sp, #28]
 800a1f4:	e004      	b.n	800a200 <_svfiprintf_r+0x104>
 800a1f6:	4252      	negs	r2, r2
 800a1f8:	f043 0302 	orr.w	r3, r3, #2
 800a1fc:	9207      	str	r2, [sp, #28]
 800a1fe:	9304      	str	r3, [sp, #16]
 800a200:	783b      	ldrb	r3, [r7, #0]
 800a202:	2b2e      	cmp	r3, #46	; 0x2e
 800a204:	d10c      	bne.n	800a220 <_svfiprintf_r+0x124>
 800a206:	787b      	ldrb	r3, [r7, #1]
 800a208:	2b2a      	cmp	r3, #42	; 0x2a
 800a20a:	d133      	bne.n	800a274 <_svfiprintf_r+0x178>
 800a20c:	9b03      	ldr	r3, [sp, #12]
 800a20e:	1d1a      	adds	r2, r3, #4
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	9203      	str	r2, [sp, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	bfb8      	it	lt
 800a218:	f04f 33ff 	movlt.w	r3, #4294967295
 800a21c:	3702      	adds	r7, #2
 800a21e:	9305      	str	r3, [sp, #20]
 800a220:	4d2e      	ldr	r5, [pc, #184]	; (800a2dc <_svfiprintf_r+0x1e0>)
 800a222:	7839      	ldrb	r1, [r7, #0]
 800a224:	2203      	movs	r2, #3
 800a226:	4628      	mov	r0, r5
 800a228:	f7f5 ffda 	bl	80001e0 <memchr>
 800a22c:	b138      	cbz	r0, 800a23e <_svfiprintf_r+0x142>
 800a22e:	2340      	movs	r3, #64	; 0x40
 800a230:	1b40      	subs	r0, r0, r5
 800a232:	fa03 f000 	lsl.w	r0, r3, r0
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	4303      	orrs	r3, r0
 800a23a:	3701      	adds	r7, #1
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	7839      	ldrb	r1, [r7, #0]
 800a240:	4827      	ldr	r0, [pc, #156]	; (800a2e0 <_svfiprintf_r+0x1e4>)
 800a242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a246:	2206      	movs	r2, #6
 800a248:	1c7e      	adds	r6, r7, #1
 800a24a:	f7f5 ffc9 	bl	80001e0 <memchr>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d038      	beq.n	800a2c4 <_svfiprintf_r+0x1c8>
 800a252:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <_svfiprintf_r+0x1e8>)
 800a254:	bb13      	cbnz	r3, 800a29c <_svfiprintf_r+0x1a0>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	3307      	adds	r3, #7
 800a25a:	f023 0307 	bic.w	r3, r3, #7
 800a25e:	3308      	adds	r3, #8
 800a260:	9303      	str	r3, [sp, #12]
 800a262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a264:	444b      	add	r3, r9
 800a266:	9309      	str	r3, [sp, #36]	; 0x24
 800a268:	e76d      	b.n	800a146 <_svfiprintf_r+0x4a>
 800a26a:	fb05 3202 	mla	r2, r5, r2, r3
 800a26e:	2001      	movs	r0, #1
 800a270:	460f      	mov	r7, r1
 800a272:	e7a6      	b.n	800a1c2 <_svfiprintf_r+0xc6>
 800a274:	2300      	movs	r3, #0
 800a276:	3701      	adds	r7, #1
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	4619      	mov	r1, r3
 800a27c:	250a      	movs	r5, #10
 800a27e:	4638      	mov	r0, r7
 800a280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a284:	3a30      	subs	r2, #48	; 0x30
 800a286:	2a09      	cmp	r2, #9
 800a288:	d903      	bls.n	800a292 <_svfiprintf_r+0x196>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0c8      	beq.n	800a220 <_svfiprintf_r+0x124>
 800a28e:	9105      	str	r1, [sp, #20]
 800a290:	e7c6      	b.n	800a220 <_svfiprintf_r+0x124>
 800a292:	fb05 2101 	mla	r1, r5, r1, r2
 800a296:	2301      	movs	r3, #1
 800a298:	4607      	mov	r7, r0
 800a29a:	e7f0      	b.n	800a27e <_svfiprintf_r+0x182>
 800a29c:	ab03      	add	r3, sp, #12
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	4b11      	ldr	r3, [pc, #68]	; (800a2e8 <_svfiprintf_r+0x1ec>)
 800a2a4:	a904      	add	r1, sp, #16
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	f3af 8000 	nop.w
 800a2ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2b0:	4681      	mov	r9, r0
 800a2b2:	d1d6      	bne.n	800a262 <_svfiprintf_r+0x166>
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	065b      	lsls	r3, r3, #25
 800a2b8:	f53f af35 	bmi.w	800a126 <_svfiprintf_r+0x2a>
 800a2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2be:	b01d      	add	sp, #116	; 0x74
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	ab03      	add	r3, sp, #12
 800a2c6:	9300      	str	r3, [sp, #0]
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <_svfiprintf_r+0x1ec>)
 800a2cc:	a904      	add	r1, sp, #16
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	f000 f882 	bl	800a3d8 <_printf_i>
 800a2d4:	e7ea      	b.n	800a2ac <_svfiprintf_r+0x1b0>
 800a2d6:	bf00      	nop
 800a2d8:	0800a9e8 	.word	0x0800a9e8
 800a2dc:	0800a9ee 	.word	0x0800a9ee
 800a2e0:	0800a9f2 	.word	0x0800a9f2
 800a2e4:	00000000 	.word	0x00000000
 800a2e8:	0800a049 	.word	0x0800a049

0800a2ec <_printf_common>:
 800a2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f0:	4691      	mov	r9, r2
 800a2f2:	461f      	mov	r7, r3
 800a2f4:	688a      	ldr	r2, [r1, #8]
 800a2f6:	690b      	ldr	r3, [r1, #16]
 800a2f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	bfb8      	it	lt
 800a300:	4613      	movlt	r3, r2
 800a302:	f8c9 3000 	str.w	r3, [r9]
 800a306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a30a:	4606      	mov	r6, r0
 800a30c:	460c      	mov	r4, r1
 800a30e:	b112      	cbz	r2, 800a316 <_printf_common+0x2a>
 800a310:	3301      	adds	r3, #1
 800a312:	f8c9 3000 	str.w	r3, [r9]
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	0699      	lsls	r1, r3, #26
 800a31a:	bf42      	ittt	mi
 800a31c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a320:	3302      	addmi	r3, #2
 800a322:	f8c9 3000 	strmi.w	r3, [r9]
 800a326:	6825      	ldr	r5, [r4, #0]
 800a328:	f015 0506 	ands.w	r5, r5, #6
 800a32c:	d107      	bne.n	800a33e <_printf_common+0x52>
 800a32e:	f104 0a19 	add.w	sl, r4, #25
 800a332:	68e3      	ldr	r3, [r4, #12]
 800a334:	f8d9 2000 	ldr.w	r2, [r9]
 800a338:	1a9b      	subs	r3, r3, r2
 800a33a:	42ab      	cmp	r3, r5
 800a33c:	dc28      	bgt.n	800a390 <_printf_common+0xa4>
 800a33e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a342:	6822      	ldr	r2, [r4, #0]
 800a344:	3300      	adds	r3, #0
 800a346:	bf18      	it	ne
 800a348:	2301      	movne	r3, #1
 800a34a:	0692      	lsls	r2, r2, #26
 800a34c:	d42d      	bmi.n	800a3aa <_printf_common+0xbe>
 800a34e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a352:	4639      	mov	r1, r7
 800a354:	4630      	mov	r0, r6
 800a356:	47c0      	blx	r8
 800a358:	3001      	adds	r0, #1
 800a35a:	d020      	beq.n	800a39e <_printf_common+0xb2>
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	68e5      	ldr	r5, [r4, #12]
 800a360:	f8d9 2000 	ldr.w	r2, [r9]
 800a364:	f003 0306 	and.w	r3, r3, #6
 800a368:	2b04      	cmp	r3, #4
 800a36a:	bf08      	it	eq
 800a36c:	1aad      	subeq	r5, r5, r2
 800a36e:	68a3      	ldr	r3, [r4, #8]
 800a370:	6922      	ldr	r2, [r4, #16]
 800a372:	bf0c      	ite	eq
 800a374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a378:	2500      	movne	r5, #0
 800a37a:	4293      	cmp	r3, r2
 800a37c:	bfc4      	itt	gt
 800a37e:	1a9b      	subgt	r3, r3, r2
 800a380:	18ed      	addgt	r5, r5, r3
 800a382:	f04f 0900 	mov.w	r9, #0
 800a386:	341a      	adds	r4, #26
 800a388:	454d      	cmp	r5, r9
 800a38a:	d11a      	bne.n	800a3c2 <_printf_common+0xd6>
 800a38c:	2000      	movs	r0, #0
 800a38e:	e008      	b.n	800a3a2 <_printf_common+0xb6>
 800a390:	2301      	movs	r3, #1
 800a392:	4652      	mov	r2, sl
 800a394:	4639      	mov	r1, r7
 800a396:	4630      	mov	r0, r6
 800a398:	47c0      	blx	r8
 800a39a:	3001      	adds	r0, #1
 800a39c:	d103      	bne.n	800a3a6 <_printf_common+0xba>
 800a39e:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a6:	3501      	adds	r5, #1
 800a3a8:	e7c3      	b.n	800a332 <_printf_common+0x46>
 800a3aa:	18e1      	adds	r1, r4, r3
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	2030      	movs	r0, #48	; 0x30
 800a3b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3b4:	4422      	add	r2, r4
 800a3b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3be:	3302      	adds	r3, #2
 800a3c0:	e7c5      	b.n	800a34e <_printf_common+0x62>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	47c0      	blx	r8
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	d0e6      	beq.n	800a39e <_printf_common+0xb2>
 800a3d0:	f109 0901 	add.w	r9, r9, #1
 800a3d4:	e7d8      	b.n	800a388 <_printf_common+0x9c>
	...

0800a3d8 <_printf_i>:
 800a3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	7e09      	ldrb	r1, [r1, #24]
 800a3e4:	b085      	sub	sp, #20
 800a3e6:	296e      	cmp	r1, #110	; 0x6e
 800a3e8:	4617      	mov	r7, r2
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	4698      	mov	r8, r3
 800a3ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f0:	f000 80b3 	beq.w	800a55a <_printf_i+0x182>
 800a3f4:	d822      	bhi.n	800a43c <_printf_i+0x64>
 800a3f6:	2963      	cmp	r1, #99	; 0x63
 800a3f8:	d036      	beq.n	800a468 <_printf_i+0x90>
 800a3fa:	d80a      	bhi.n	800a412 <_printf_i+0x3a>
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	f000 80b9 	beq.w	800a574 <_printf_i+0x19c>
 800a402:	2958      	cmp	r1, #88	; 0x58
 800a404:	f000 8083 	beq.w	800a50e <_printf_i+0x136>
 800a408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a40c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a410:	e032      	b.n	800a478 <_printf_i+0xa0>
 800a412:	2964      	cmp	r1, #100	; 0x64
 800a414:	d001      	beq.n	800a41a <_printf_i+0x42>
 800a416:	2969      	cmp	r1, #105	; 0x69
 800a418:	d1f6      	bne.n	800a408 <_printf_i+0x30>
 800a41a:	6820      	ldr	r0, [r4, #0]
 800a41c:	6813      	ldr	r3, [r2, #0]
 800a41e:	0605      	lsls	r5, r0, #24
 800a420:	f103 0104 	add.w	r1, r3, #4
 800a424:	d52a      	bpl.n	800a47c <_printf_i+0xa4>
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6011      	str	r1, [r2, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	da03      	bge.n	800a436 <_printf_i+0x5e>
 800a42e:	222d      	movs	r2, #45	; 0x2d
 800a430:	425b      	negs	r3, r3
 800a432:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a436:	486f      	ldr	r0, [pc, #444]	; (800a5f4 <_printf_i+0x21c>)
 800a438:	220a      	movs	r2, #10
 800a43a:	e039      	b.n	800a4b0 <_printf_i+0xd8>
 800a43c:	2973      	cmp	r1, #115	; 0x73
 800a43e:	f000 809d 	beq.w	800a57c <_printf_i+0x1a4>
 800a442:	d808      	bhi.n	800a456 <_printf_i+0x7e>
 800a444:	296f      	cmp	r1, #111	; 0x6f
 800a446:	d020      	beq.n	800a48a <_printf_i+0xb2>
 800a448:	2970      	cmp	r1, #112	; 0x70
 800a44a:	d1dd      	bne.n	800a408 <_printf_i+0x30>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	f043 0320 	orr.w	r3, r3, #32
 800a452:	6023      	str	r3, [r4, #0]
 800a454:	e003      	b.n	800a45e <_printf_i+0x86>
 800a456:	2975      	cmp	r1, #117	; 0x75
 800a458:	d017      	beq.n	800a48a <_printf_i+0xb2>
 800a45a:	2978      	cmp	r1, #120	; 0x78
 800a45c:	d1d4      	bne.n	800a408 <_printf_i+0x30>
 800a45e:	2378      	movs	r3, #120	; 0x78
 800a460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a464:	4864      	ldr	r0, [pc, #400]	; (800a5f8 <_printf_i+0x220>)
 800a466:	e055      	b.n	800a514 <_printf_i+0x13c>
 800a468:	6813      	ldr	r3, [r2, #0]
 800a46a:	1d19      	adds	r1, r3, #4
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6011      	str	r1, [r2, #0]
 800a470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a478:	2301      	movs	r3, #1
 800a47a:	e08c      	b.n	800a596 <_printf_i+0x1be>
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6011      	str	r1, [r2, #0]
 800a480:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a484:	bf18      	it	ne
 800a486:	b21b      	sxthne	r3, r3
 800a488:	e7cf      	b.n	800a42a <_printf_i+0x52>
 800a48a:	6813      	ldr	r3, [r2, #0]
 800a48c:	6825      	ldr	r5, [r4, #0]
 800a48e:	1d18      	adds	r0, r3, #4
 800a490:	6010      	str	r0, [r2, #0]
 800a492:	0628      	lsls	r0, r5, #24
 800a494:	d501      	bpl.n	800a49a <_printf_i+0xc2>
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	e002      	b.n	800a4a0 <_printf_i+0xc8>
 800a49a:	0668      	lsls	r0, r5, #25
 800a49c:	d5fb      	bpl.n	800a496 <_printf_i+0xbe>
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	4854      	ldr	r0, [pc, #336]	; (800a5f4 <_printf_i+0x21c>)
 800a4a2:	296f      	cmp	r1, #111	; 0x6f
 800a4a4:	bf14      	ite	ne
 800a4a6:	220a      	movne	r2, #10
 800a4a8:	2208      	moveq	r2, #8
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4b0:	6865      	ldr	r5, [r4, #4]
 800a4b2:	60a5      	str	r5, [r4, #8]
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	f2c0 8095 	blt.w	800a5e4 <_printf_i+0x20c>
 800a4ba:	6821      	ldr	r1, [r4, #0]
 800a4bc:	f021 0104 	bic.w	r1, r1, #4
 800a4c0:	6021      	str	r1, [r4, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d13d      	bne.n	800a542 <_printf_i+0x16a>
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	f040 808e 	bne.w	800a5e8 <_printf_i+0x210>
 800a4cc:	4665      	mov	r5, ip
 800a4ce:	2a08      	cmp	r2, #8
 800a4d0:	d10b      	bne.n	800a4ea <_printf_i+0x112>
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	07db      	lsls	r3, r3, #31
 800a4d6:	d508      	bpl.n	800a4ea <_printf_i+0x112>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	6862      	ldr	r2, [r4, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	bfde      	ittt	le
 800a4e0:	2330      	movle	r3, #48	; 0x30
 800a4e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4ea:	ebac 0305 	sub.w	r3, ip, r5
 800a4ee:	6123      	str	r3, [r4, #16]
 800a4f0:	f8cd 8000 	str.w	r8, [sp]
 800a4f4:	463b      	mov	r3, r7
 800a4f6:	aa03      	add	r2, sp, #12
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7ff fef6 	bl	800a2ec <_printf_common>
 800a500:	3001      	adds	r0, #1
 800a502:	d14d      	bne.n	800a5a0 <_printf_i+0x1c8>
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	b005      	add	sp, #20
 800a50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50e:	4839      	ldr	r0, [pc, #228]	; (800a5f4 <_printf_i+0x21c>)
 800a510:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a514:	6813      	ldr	r3, [r2, #0]
 800a516:	6821      	ldr	r1, [r4, #0]
 800a518:	1d1d      	adds	r5, r3, #4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6015      	str	r5, [r2, #0]
 800a51e:	060a      	lsls	r2, r1, #24
 800a520:	d50b      	bpl.n	800a53a <_printf_i+0x162>
 800a522:	07ca      	lsls	r2, r1, #31
 800a524:	bf44      	itt	mi
 800a526:	f041 0120 	orrmi.w	r1, r1, #32
 800a52a:	6021      	strmi	r1, [r4, #0]
 800a52c:	b91b      	cbnz	r3, 800a536 <_printf_i+0x15e>
 800a52e:	6822      	ldr	r2, [r4, #0]
 800a530:	f022 0220 	bic.w	r2, r2, #32
 800a534:	6022      	str	r2, [r4, #0]
 800a536:	2210      	movs	r2, #16
 800a538:	e7b7      	b.n	800a4aa <_printf_i+0xd2>
 800a53a:	064d      	lsls	r5, r1, #25
 800a53c:	bf48      	it	mi
 800a53e:	b29b      	uxthmi	r3, r3
 800a540:	e7ef      	b.n	800a522 <_printf_i+0x14a>
 800a542:	4665      	mov	r5, ip
 800a544:	fbb3 f1f2 	udiv	r1, r3, r2
 800a548:	fb02 3311 	mls	r3, r2, r1, r3
 800a54c:	5cc3      	ldrb	r3, [r0, r3]
 800a54e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a552:	460b      	mov	r3, r1
 800a554:	2900      	cmp	r1, #0
 800a556:	d1f5      	bne.n	800a544 <_printf_i+0x16c>
 800a558:	e7b9      	b.n	800a4ce <_printf_i+0xf6>
 800a55a:	6813      	ldr	r3, [r2, #0]
 800a55c:	6825      	ldr	r5, [r4, #0]
 800a55e:	6961      	ldr	r1, [r4, #20]
 800a560:	1d18      	adds	r0, r3, #4
 800a562:	6010      	str	r0, [r2, #0]
 800a564:	0628      	lsls	r0, r5, #24
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	d501      	bpl.n	800a56e <_printf_i+0x196>
 800a56a:	6019      	str	r1, [r3, #0]
 800a56c:	e002      	b.n	800a574 <_printf_i+0x19c>
 800a56e:	066a      	lsls	r2, r5, #25
 800a570:	d5fb      	bpl.n	800a56a <_printf_i+0x192>
 800a572:	8019      	strh	r1, [r3, #0]
 800a574:	2300      	movs	r3, #0
 800a576:	6123      	str	r3, [r4, #16]
 800a578:	4665      	mov	r5, ip
 800a57a:	e7b9      	b.n	800a4f0 <_printf_i+0x118>
 800a57c:	6813      	ldr	r3, [r2, #0]
 800a57e:	1d19      	adds	r1, r3, #4
 800a580:	6011      	str	r1, [r2, #0]
 800a582:	681d      	ldr	r5, [r3, #0]
 800a584:	6862      	ldr	r2, [r4, #4]
 800a586:	2100      	movs	r1, #0
 800a588:	4628      	mov	r0, r5
 800a58a:	f7f5 fe29 	bl	80001e0 <memchr>
 800a58e:	b108      	cbz	r0, 800a594 <_printf_i+0x1bc>
 800a590:	1b40      	subs	r0, r0, r5
 800a592:	6060      	str	r0, [r4, #4]
 800a594:	6863      	ldr	r3, [r4, #4]
 800a596:	6123      	str	r3, [r4, #16]
 800a598:	2300      	movs	r3, #0
 800a59a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a59e:	e7a7      	b.n	800a4f0 <_printf_i+0x118>
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	462a      	mov	r2, r5
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	47c0      	blx	r8
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	d0aa      	beq.n	800a504 <_printf_i+0x12c>
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	079b      	lsls	r3, r3, #30
 800a5b2:	d413      	bmi.n	800a5dc <_printf_i+0x204>
 800a5b4:	68e0      	ldr	r0, [r4, #12]
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	4298      	cmp	r0, r3
 800a5ba:	bfb8      	it	lt
 800a5bc:	4618      	movlt	r0, r3
 800a5be:	e7a3      	b.n	800a508 <_printf_i+0x130>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	464a      	mov	r2, r9
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	47c0      	blx	r8
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d09a      	beq.n	800a504 <_printf_i+0x12c>
 800a5ce:	3501      	adds	r5, #1
 800a5d0:	68e3      	ldr	r3, [r4, #12]
 800a5d2:	9a03      	ldr	r2, [sp, #12]
 800a5d4:	1a9b      	subs	r3, r3, r2
 800a5d6:	42ab      	cmp	r3, r5
 800a5d8:	dcf2      	bgt.n	800a5c0 <_printf_i+0x1e8>
 800a5da:	e7eb      	b.n	800a5b4 <_printf_i+0x1dc>
 800a5dc:	2500      	movs	r5, #0
 800a5de:	f104 0919 	add.w	r9, r4, #25
 800a5e2:	e7f5      	b.n	800a5d0 <_printf_i+0x1f8>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1ac      	bne.n	800a542 <_printf_i+0x16a>
 800a5e8:	7803      	ldrb	r3, [r0, #0]
 800a5ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5f2:	e76c      	b.n	800a4ce <_printf_i+0xf6>
 800a5f4:	0800a9f9 	.word	0x0800a9f9
 800a5f8:	0800aa0a 	.word	0x0800aa0a

0800a5fc <memmove>:
 800a5fc:	4288      	cmp	r0, r1
 800a5fe:	b510      	push	{r4, lr}
 800a600:	eb01 0302 	add.w	r3, r1, r2
 800a604:	d807      	bhi.n	800a616 <memmove+0x1a>
 800a606:	1e42      	subs	r2, r0, #1
 800a608:	4299      	cmp	r1, r3
 800a60a:	d00a      	beq.n	800a622 <memmove+0x26>
 800a60c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a610:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a614:	e7f8      	b.n	800a608 <memmove+0xc>
 800a616:	4283      	cmp	r3, r0
 800a618:	d9f5      	bls.n	800a606 <memmove+0xa>
 800a61a:	1881      	adds	r1, r0, r2
 800a61c:	1ad2      	subs	r2, r2, r3
 800a61e:	42d3      	cmn	r3, r2
 800a620:	d100      	bne.n	800a624 <memmove+0x28>
 800a622:	bd10      	pop	{r4, pc}
 800a624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a628:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a62c:	e7f7      	b.n	800a61e <memmove+0x22>
	...

0800a630 <_free_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4605      	mov	r5, r0
 800a634:	2900      	cmp	r1, #0
 800a636:	d045      	beq.n	800a6c4 <_free_r+0x94>
 800a638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63c:	1f0c      	subs	r4, r1, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfb8      	it	lt
 800a642:	18e4      	addlt	r4, r4, r3
 800a644:	f000 f8d2 	bl	800a7ec <__malloc_lock>
 800a648:	4a1f      	ldr	r2, [pc, #124]	; (800a6c8 <_free_r+0x98>)
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	4610      	mov	r0, r2
 800a64e:	b933      	cbnz	r3, 800a65e <_free_r+0x2e>
 800a650:	6063      	str	r3, [r4, #4]
 800a652:	6014      	str	r4, [r2, #0]
 800a654:	4628      	mov	r0, r5
 800a656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a65a:	f000 b8c8 	b.w	800a7ee <__malloc_unlock>
 800a65e:	42a3      	cmp	r3, r4
 800a660:	d90c      	bls.n	800a67c <_free_r+0x4c>
 800a662:	6821      	ldr	r1, [r4, #0]
 800a664:	1862      	adds	r2, r4, r1
 800a666:	4293      	cmp	r3, r2
 800a668:	bf04      	itt	eq
 800a66a:	681a      	ldreq	r2, [r3, #0]
 800a66c:	685b      	ldreq	r3, [r3, #4]
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	bf04      	itt	eq
 800a672:	1852      	addeq	r2, r2, r1
 800a674:	6022      	streq	r2, [r4, #0]
 800a676:	6004      	str	r4, [r0, #0]
 800a678:	e7ec      	b.n	800a654 <_free_r+0x24>
 800a67a:	4613      	mov	r3, r2
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	b10a      	cbz	r2, 800a684 <_free_r+0x54>
 800a680:	42a2      	cmp	r2, r4
 800a682:	d9fa      	bls.n	800a67a <_free_r+0x4a>
 800a684:	6819      	ldr	r1, [r3, #0]
 800a686:	1858      	adds	r0, r3, r1
 800a688:	42a0      	cmp	r0, r4
 800a68a:	d10b      	bne.n	800a6a4 <_free_r+0x74>
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	4401      	add	r1, r0
 800a690:	1858      	adds	r0, r3, r1
 800a692:	4282      	cmp	r2, r0
 800a694:	6019      	str	r1, [r3, #0]
 800a696:	d1dd      	bne.n	800a654 <_free_r+0x24>
 800a698:	6810      	ldr	r0, [r2, #0]
 800a69a:	6852      	ldr	r2, [r2, #4]
 800a69c:	605a      	str	r2, [r3, #4]
 800a69e:	4401      	add	r1, r0
 800a6a0:	6019      	str	r1, [r3, #0]
 800a6a2:	e7d7      	b.n	800a654 <_free_r+0x24>
 800a6a4:	d902      	bls.n	800a6ac <_free_r+0x7c>
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	e7d3      	b.n	800a654 <_free_r+0x24>
 800a6ac:	6820      	ldr	r0, [r4, #0]
 800a6ae:	1821      	adds	r1, r4, r0
 800a6b0:	428a      	cmp	r2, r1
 800a6b2:	bf04      	itt	eq
 800a6b4:	6811      	ldreq	r1, [r2, #0]
 800a6b6:	6852      	ldreq	r2, [r2, #4]
 800a6b8:	6062      	str	r2, [r4, #4]
 800a6ba:	bf04      	itt	eq
 800a6bc:	1809      	addeq	r1, r1, r0
 800a6be:	6021      	streq	r1, [r4, #0]
 800a6c0:	605c      	str	r4, [r3, #4]
 800a6c2:	e7c7      	b.n	800a654 <_free_r+0x24>
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20001bd4 	.word	0x20001bd4

0800a6cc <_malloc_r>:
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	1ccd      	adds	r5, r1, #3
 800a6d0:	f025 0503 	bic.w	r5, r5, #3
 800a6d4:	3508      	adds	r5, #8
 800a6d6:	2d0c      	cmp	r5, #12
 800a6d8:	bf38      	it	cc
 800a6da:	250c      	movcc	r5, #12
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	4606      	mov	r6, r0
 800a6e0:	db01      	blt.n	800a6e6 <_malloc_r+0x1a>
 800a6e2:	42a9      	cmp	r1, r5
 800a6e4:	d903      	bls.n	800a6ee <_malloc_r+0x22>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	6033      	str	r3, [r6, #0]
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	bd70      	pop	{r4, r5, r6, pc}
 800a6ee:	f000 f87d 	bl	800a7ec <__malloc_lock>
 800a6f2:	4a21      	ldr	r2, [pc, #132]	; (800a778 <_malloc_r+0xac>)
 800a6f4:	6814      	ldr	r4, [r2, #0]
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	b991      	cbnz	r1, 800a720 <_malloc_r+0x54>
 800a6fa:	4c20      	ldr	r4, [pc, #128]	; (800a77c <_malloc_r+0xb0>)
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	b91b      	cbnz	r3, 800a708 <_malloc_r+0x3c>
 800a700:	4630      	mov	r0, r6
 800a702:	f000 f863 	bl	800a7cc <_sbrk_r>
 800a706:	6020      	str	r0, [r4, #0]
 800a708:	4629      	mov	r1, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 f85e 	bl	800a7cc <_sbrk_r>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d124      	bne.n	800a75e <_malloc_r+0x92>
 800a714:	230c      	movs	r3, #12
 800a716:	6033      	str	r3, [r6, #0]
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 f868 	bl	800a7ee <__malloc_unlock>
 800a71e:	e7e4      	b.n	800a6ea <_malloc_r+0x1e>
 800a720:	680b      	ldr	r3, [r1, #0]
 800a722:	1b5b      	subs	r3, r3, r5
 800a724:	d418      	bmi.n	800a758 <_malloc_r+0x8c>
 800a726:	2b0b      	cmp	r3, #11
 800a728:	d90f      	bls.n	800a74a <_malloc_r+0x7e>
 800a72a:	600b      	str	r3, [r1, #0]
 800a72c:	50cd      	str	r5, [r1, r3]
 800a72e:	18cc      	adds	r4, r1, r3
 800a730:	4630      	mov	r0, r6
 800a732:	f000 f85c 	bl	800a7ee <__malloc_unlock>
 800a736:	f104 000b 	add.w	r0, r4, #11
 800a73a:	1d23      	adds	r3, r4, #4
 800a73c:	f020 0007 	bic.w	r0, r0, #7
 800a740:	1ac3      	subs	r3, r0, r3
 800a742:	d0d3      	beq.n	800a6ec <_malloc_r+0x20>
 800a744:	425a      	negs	r2, r3
 800a746:	50e2      	str	r2, [r4, r3]
 800a748:	e7d0      	b.n	800a6ec <_malloc_r+0x20>
 800a74a:	428c      	cmp	r4, r1
 800a74c:	684b      	ldr	r3, [r1, #4]
 800a74e:	bf16      	itet	ne
 800a750:	6063      	strne	r3, [r4, #4]
 800a752:	6013      	streq	r3, [r2, #0]
 800a754:	460c      	movne	r4, r1
 800a756:	e7eb      	b.n	800a730 <_malloc_r+0x64>
 800a758:	460c      	mov	r4, r1
 800a75a:	6849      	ldr	r1, [r1, #4]
 800a75c:	e7cc      	b.n	800a6f8 <_malloc_r+0x2c>
 800a75e:	1cc4      	adds	r4, r0, #3
 800a760:	f024 0403 	bic.w	r4, r4, #3
 800a764:	42a0      	cmp	r0, r4
 800a766:	d005      	beq.n	800a774 <_malloc_r+0xa8>
 800a768:	1a21      	subs	r1, r4, r0
 800a76a:	4630      	mov	r0, r6
 800a76c:	f000 f82e 	bl	800a7cc <_sbrk_r>
 800a770:	3001      	adds	r0, #1
 800a772:	d0cf      	beq.n	800a714 <_malloc_r+0x48>
 800a774:	6025      	str	r5, [r4, #0]
 800a776:	e7db      	b.n	800a730 <_malloc_r+0x64>
 800a778:	20001bd4 	.word	0x20001bd4
 800a77c:	20001bd8 	.word	0x20001bd8

0800a780 <_realloc_r>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	4607      	mov	r7, r0
 800a784:	4614      	mov	r4, r2
 800a786:	460e      	mov	r6, r1
 800a788:	b921      	cbnz	r1, 800a794 <_realloc_r+0x14>
 800a78a:	4611      	mov	r1, r2
 800a78c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a790:	f7ff bf9c 	b.w	800a6cc <_malloc_r>
 800a794:	b922      	cbnz	r2, 800a7a0 <_realloc_r+0x20>
 800a796:	f7ff ff4b 	bl	800a630 <_free_r>
 800a79a:	4625      	mov	r5, r4
 800a79c:	4628      	mov	r0, r5
 800a79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a0:	f000 f826 	bl	800a7f0 <_malloc_usable_size_r>
 800a7a4:	42a0      	cmp	r0, r4
 800a7a6:	d20f      	bcs.n	800a7c8 <_realloc_r+0x48>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	f7ff ff8e 	bl	800a6cc <_malloc_r>
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0f2      	beq.n	800a79c <_realloc_r+0x1c>
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	f7ff fc11 	bl	8009fe0 <memcpy>
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7ff ff35 	bl	800a630 <_free_r>
 800a7c6:	e7e9      	b.n	800a79c <_realloc_r+0x1c>
 800a7c8:	4635      	mov	r5, r6
 800a7ca:	e7e7      	b.n	800a79c <_realloc_r+0x1c>

0800a7cc <_sbrk_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4c06      	ldr	r4, [pc, #24]	; (800a7e8 <_sbrk_r+0x1c>)
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	4608      	mov	r0, r1
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	f7f7 fc40 	bl	800205c <_sbrk>
 800a7dc:	1c43      	adds	r3, r0, #1
 800a7de:	d102      	bne.n	800a7e6 <_sbrk_r+0x1a>
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	b103      	cbz	r3, 800a7e6 <_sbrk_r+0x1a>
 800a7e4:	602b      	str	r3, [r5, #0]
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	2000239c 	.word	0x2000239c

0800a7ec <__malloc_lock>:
 800a7ec:	4770      	bx	lr

0800a7ee <__malloc_unlock>:
 800a7ee:	4770      	bx	lr

0800a7f0 <_malloc_usable_size_r>:
 800a7f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f4:	1f18      	subs	r0, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bfbc      	itt	lt
 800a7fa:	580b      	ldrlt	r3, [r1, r0]
 800a7fc:	18c0      	addlt	r0, r0, r3
 800a7fe:	4770      	bx	lr

0800a800 <_init>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr

0800a80c <_fini>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr
